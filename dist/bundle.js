(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){
(function (process,global){
/*!
 * Vue.js v2.5.13
 * (c) 2014-2017 Evan You
 * Released under the MIT License.
 */
'use strict';

/*  */

var emptyObject = Object.freeze({});

// these helpers produces better vm code in JS engines due to their
// explicitness and function inlining
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value e.g. [object Object]
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : typeof val === 'object'
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert a input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if a attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether the object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind, faster than native
 */
function bind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }
  // record original fn length
  boundFn._length = fn.length;
  return boundFn
}

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/**
 * Return same value
 */
var identity = function (_) { return _; };

/**
 * Generate a static keys string from compiler modules.
 */


/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured'
];

/*  */

var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: process.env.NODE_ENV !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: process.env.NODE_ENV !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = /[^\w.$]/;
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */


// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = (function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

if (process.env.NODE_ENV !== 'production') {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>'
    }
    var options = typeof vm === 'function' && vm.cid != null
      ? vm.options
      : vm._isVue
        ? vm.$options || vm.constructor.options
        : vm || {};
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */


var uid$1 = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid$1++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// the current target watcher being evaluated.
// this is globally unique because there could be only one
// watcher being evaluated at any time.
Dep.target = null;
var targetStack = [];

function pushTarget (_target) {
  if (Dep.target) { targetStack.push(Dep.target); }
  Dep.target = _target;
}

function popTarget () {
  Dep.target = targetStack.pop();
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode, deep) {
  var componentOptions = vnode.componentOptions;
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    vnode.children,
    vnode.text,
    vnode.elm,
    vnode.context,
    componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.isCloned = true;
  if (deep) {
    if (vnode.children) {
      cloned.children = cloneVNodes(vnode.children, true);
    }
    if (componentOptions && componentOptions.children) {
      componentOptions.children = cloneVNodes(componentOptions.children, true);
    }
  }
  return cloned
}

function cloneVNodes (vnodes, deep) {
  var len = vnodes.length;
  var res = new Array(len);
  for (var i = 0; i < len; i++) {
    res[i] = cloneVNode(vnodes[i], deep);
  }
  return res
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);[
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
].forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * By default, when a reactive property is set, the new value is
 * also converted to become reactive. However when passing down props,
 * we don't want to force conversion because the value may be a nested value
 * under a frozen data structure. Converting it would defeat the optimization.
 */
var observerState = {
  shouldConvert: true
};

/**
 * Observer class that are attached to each observed
 * object. Once attached, the observer converts target
 * object's property keys into getter/setters that
 * collect dependencies and dispatches updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    var augment = hasProto
      ? protoAugment
      : copyAugment;
    augment(value, arrayMethods, arrayKeys);
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through each property and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive(obj, keys[i], obj[keys[i]]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment an target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src, keys) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment an target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    observerState.shouldConvert &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (process.env.NODE_ENV !== 'production' && customSetter) {
        customSetter();
      }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    process.env.NODE_ENV !== 'production' && warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    process.env.NODE_ENV !== 'production' && warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
if (process.env.NODE_ENV !== 'production') {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;
  var keys = Object.keys(from);
  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      process.env.NODE_ENV !== 'production' && warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  return childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    process.env.NODE_ENV !== 'production' && assertObjectType(key, childVal, vm);
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  if (process.env.NODE_ENV !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && process.env.NODE_ENV !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!/^[a-zA-Z][\w-]*$/.test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'can only contain alphanumeric characters and the hyphen, ' +
      'and must start with a letter.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else if (process.env.NODE_ENV !== 'production') {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else if (process.env.NODE_ENV !== 'production') {
    warn(
      "Invalid value for option \"props\": expected an Array or an Object, " +
      "but got " + (toRawType(props)) + ".",
      vm
    );
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else if (process.env.NODE_ENV !== 'production') {
    warn(
      "Invalid value for option \"inject\": expected an Array or an Object, " +
      "but got " + (toRawType(inject)) + ".",
      vm
    );
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def = dirs[key];
      if (typeof def === 'function') {
        dirs[key] = { bind: def, update: def };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  if (process.env.NODE_ENV !== 'production') {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);
  var extendsFrom = child.extends;
  if (extendsFrom) {
    parent = mergeOptions(parent, extendsFrom, vm);
  }
  if (child.mixins) {
    for (var i = 0, l = child.mixins.length; i < l; i++) {
      parent = mergeOptions(parent, child.mixins[i], vm);
    }
  }
  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */

function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // handle boolean props
  if (isType(Boolean, prop.type)) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {
      value = true;
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldConvert = observerState.shouldConvert;
    observerState.shouldConvert = true;
    observe(value);
    observerState.shouldConvert = prevShouldConvert;
  }
  if (
    process.env.NODE_ENV !== 'production' &&
    // skip validation for weex recycle-list child component props
    !(false && isObject(value) && ('@binding' in value))
  ) {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (process.env.NODE_ENV !== 'production' && isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }
  if (!valid) {
    warn(
      "Invalid prop: type check failed for prop \"" + name + "\"." +
      " Expected " + (expectedTypes.map(capitalize).join(', ')) +
      ", got " + (toRawType(value)) + ".",
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isType (type, fn) {
  if (!Array.isArray(fn)) {
    return getType(fn) === getType(type)
  }
  for (var i = 0, len = fn.length; i < len; i++) {
    if (getType(fn[i]) === getType(type)) {
      return true
    }
  }
  /* istanbul ignore next */
  return false
}

/*  */

function handleError (err, vm, info) {
  if (vm) {
    var cur = vm;
    while ((cur = cur.$parent)) {
      var hooks = cur.$options.errorCaptured;
      if (hooks) {
        for (var i = 0; i < hooks.length; i++) {
          try {
            var capture = hooks[i].call(cur, err, vm, info) === false;
            if (capture) { return }
          } catch (e) {
            globalHandleError(e, cur, 'errorCaptured hook');
          }
        }
      }
    }
  }
  globalHandleError(err, vm, info);
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      logError(e, null, 'config.errorHandler');
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  if (process.env.NODE_ENV !== 'production') {
    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */
/* globals MessageChannel */

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using both micro and macro tasks.
// In < 2.4 we used micro tasks everywhere, but there are some scenarios where
// micro tasks have too high a priority and fires in between supposedly
// sequential events (e.g. #4521, #6690) or even between bubbling of the same
// event (#6566). However, using macro tasks everywhere also has subtle problems
// when state is changed right before repaint (e.g. #6813, out-in transitions).
// Here we use micro task by default, but expose a way to force macro task when
// needed (e.g. in event handlers attached by v-on).
var microTimerFunc;
var macroTimerFunc;
var useMacroTask = false;

// Determine (macro) Task defer implementation.
// Technically setImmediate should be the ideal choice, but it's only available
// in IE. The only polyfill that consistently queues the callback after all DOM
// events triggered in the same loop is by using MessageChannel.
/* istanbul ignore if */
if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  macroTimerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else if (typeof MessageChannel !== 'undefined' && (
  isNative(MessageChannel) ||
  // PhantomJS
  MessageChannel.toString() === '[object MessageChannelConstructor]'
)) {
  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = flushCallbacks;
  macroTimerFunc = function () {
    port.postMessage(1);
  };
} else {
  /* istanbul ignore next */
  macroTimerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

// Determine MicroTask defer implementation.
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  microTimerFunc = function () {
    p.then(flushCallbacks);
    // in problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
} else {
  // fallback to macro
  microTimerFunc = macroTimerFunc;
}

/**
 * Wrap a function so that if any code inside triggers state change,
 * the changes are queued using a Task instead of a MicroTask.
 */
function withMacroTask (fn) {
  return fn._withTask || (fn._withTask = function () {
    useMacroTask = true;
    var res = fn.apply(null, arguments);
    useMacroTask = false;
    return res
  })
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    if (useMacroTask) {
      macroTimerFunc();
    } else {
      microTimerFunc();
    }
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

if (process.env.NODE_ENV !== 'production') {
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' &&
    Proxy.toString().match(/native code/);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
      if (!has && !isAllowed) {
        warnNonPresent(target, key);
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        warnNonPresent(target, key);
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val)) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

var mark;
var measure;

if (process.env.NODE_ENV !== 'production') {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      perf.clearMeasures(name);
    };
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        cloned[i].apply(null, arguments$1);
      }
    } else {
      // return handler return value for single handlers
      return fns.apply(null, arguments)
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  vm
) {
  var name, def, cur, old, event;
  for (name in on) {
    def = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    /* istanbul ignore if */
    if (isUndef(cur)) {
      process.env.NODE_ENV !== 'production' && warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur);
      }
      add(event.name, cur, event.once, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (process.env.NODE_ENV !== 'production') {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor,
  context
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (isDef(factory.contexts)) {
    // already pending
    factory.contexts.push(context);
  } else {
    var contexts = factory.contexts = [context];
    var sync = true;

    var forceRender = function () {
      for (var i = 0, l = contexts.length; i < l; i++) {
        contexts[i].$forceUpdate();
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender();
      }
    });

    var reject = once(function (reason) {
      process.env.NODE_ENV !== 'production' && warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender();
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (typeof res.then === 'function') {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isDef(res.component) && typeof res.component.then === 'function') {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            setTimeout(function () {
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender();
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          setTimeout(function () {
            if (isUndef(factory.resolved)) {
              reject(
                process.env.NODE_ENV !== 'production'
                  ? ("timeout (" + (res.timeout) + "ms)")
                  : null
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn, once) {
  if (once) {
    target.$once(event, fn);
  } else {
    target.$on(event, fn);
  }
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var this$1 = this;

    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var this$1 = this;

    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$off(event[i], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    if (fn) {
      // specific handler
      var cb;
      var i$1 = cbs.length;
      while (i$1--) {
        cb = cbs[i$1];
        if (cb === fn || cb.fn === fn) {
          cbs.splice(i$1, 1);
          break
        }
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    if (process.env.NODE_ENV !== 'production') {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      for (var i = 0, l = cbs.length; i < l; i++) {
        try {
          cbs[i].apply(vm, args);
        } catch (e) {
          handleError(e, vm, ("event handler for \"" + event + "\""));
        }
      }
    }
    return vm
  };
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  var slots = {};
  if (!children) {
    return slots
  }
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

function resolveScopedSlots (
  fns, // see flow/vnode
  res
) {
  res = res || {};
  for (var i = 0; i < fns.length; i++) {
    if (Array.isArray(fns[i])) {
      resolveScopedSlots(fns[i], res);
    } else {
      res[fns[i].key] = fns[i].fn;
    }
  }
  return res
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    if (vm._isMounted) {
      callHook(vm, 'beforeUpdate');
    }
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var prevActiveInstance = activeInstance;
    activeInstance = vm;
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(
        vm.$el, vnode, hydrating, false /* removeOnly */,
        vm.$options._parentElm,
        vm.$options._refElm
      );
      // no need for the ref nodes after initial patch
      // this prevents keeping a detached DOM tree in memory (#5851)
      vm.$options._parentElm = vm.$options._refElm = null;
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    activeInstance = prevActiveInstance;
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    if (process.env.NODE_ENV !== 'production') {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure(("vue " + name + " render"), startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure(("vue " + name + " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  if (process.env.NODE_ENV !== 'production') {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren
  var hasChildren = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    parentVnode.data.scopedSlots || // has new scoped slots
    vm.$scopedSlots !== emptyObject // has old scoped slots
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = (parentVnode.data && parentVnode.data.attrs) || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    observerState.shouldConvert = false;
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      props[key] = validateProp(key, vm.$options.props, propsData, vm);
    }
    observerState.shouldConvert = true;
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  if (listeners) {
    var oldListeners = vm.$options._parentListeners;
    vm.$options._parentListeners = listeners;
    updateComponentListeners(vm, listeners, oldListeners);
  }
  // resolve slots + force update if has children
  if (hasChildren) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (process.env.NODE_ENV !== 'production') {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  var handlers = vm.$options[hook];
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      try {
        handlers[i].call(vm);
      } catch (e) {
        handleError(e, vm, (hook + " hook"));
      }
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
}

/*  */


var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (process.env.NODE_ENV !== 'production') {
    circular = {};
  }
  waiting = flushing = false;
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (process.env.NODE_ENV !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */

var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = process.env.NODE_ENV !== 'production'
    ? expOrFn.toString()
    : '';
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = function () {};
      process.env.NODE_ENV !== 'production' && warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
    var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    var dep = this$1.deps[i];
    if (!this$1.newDepIds.has(dep.id)) {
      dep.removeSub(this$1);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
    var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    this$1.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
    var this$1 = this;

  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this$1.deps[i].removeSub(this$1);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  observerState.shouldConvert = isRoot;
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive(props, key, value, function () {
        if (vm.$parent && !isUpdatingChildComponent) {
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    } else {
      defineReactive(props, key, value);
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  observerState.shouldConvert = true;
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
    process.env.NODE_ENV !== 'production' && warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    if (process.env.NODE_ENV !== 'production') {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
      process.env.NODE_ENV !== 'production' && warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (process.env.NODE_ENV !== 'production' && getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (process.env.NODE_ENV !== 'production') {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : userDef;
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : userDef.get
      : noop;
    sharedPropertyDefinition.set = userDef.set
      ? userDef.set
      : noop;
  }
  if (process.env.NODE_ENV !== 'production' &&
      sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    if (process.env.NODE_ENV !== 'production') {
      if (methods[key] == null) {
        warn(
          "Method \"" + key + "\" has an undefined value in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  keyOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(keyOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  if (process.env.NODE_ENV !== 'production') {
    dataDef.set = function (newData) {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      cb.call(vm, watcher.value);
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    observerState.shouldConvert = false;
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        defineReactive(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      } else {
        defineReactive(vm, key, result[key]);
      }
    });
    observerState.shouldConvert = true;
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject).filter(function (key) {
        /* istanbul ignore next */
        return Object.getOwnPropertyDescriptor(inject, key).enumerable
      })
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && provideKey in source._provided) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else if (process.env.NODE_ENV !== 'production') {
          warn(("Injection \"" + key + "\" not found"), vm);
        }
      }
    }
    return result
  }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    keys = Object.keys(val);
    ret = new Array(keys.length);
    for (i = 0, l = keys.length; i < l; i++) {
      key = keys[i];
      ret[i] = render(val[key], key, i);
    }
  }
  if (isDef(ret)) {
    (ret)._isVList = true;
  }
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      if (process.env.NODE_ENV !== 'production' && !isObject(bindObject)) {
        warn(
          'slot v-bind without argument expects an Object',
          this
        );
      }
      props = extend(extend({}, bindObject), props);
    }
    nodes = scopedSlotFn(props) || fallback;
  } else {
    var slotNodes = this.$slots[name];
    // warn duplicate slot usage
    if (slotNodes) {
      if (process.env.NODE_ENV !== 'production' && slotNodes._rendered) {
        warn(
          "Duplicate presence of slot \"" + name + "\" found in the same render tree " +
          "- this will likely cause render errors.",
          this
        );
      }
      slotNodes._rendered = true;
    }
    nodes = slotNodes || fallback;
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInAlias,
  eventKeyName
) {
  var keyCodes = config.keyCodes[key] || builtInAlias;
  if (keyCodes) {
    if (Array.isArray(keyCodes)) {
      return keyCodes.indexOf(eventKeyCode) === -1
    } else {
      return keyCodes !== eventKeyCode
    }
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
      process.env.NODE_ENV !== 'production' && warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        if (!(key in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree by doing a shallow clone.
  if (tree && !isInFor) {
    return Array.isArray(tree)
      ? cloneVNodes(tree)
      : cloneVNode(tree)
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      process.env.NODE_ENV !== 'production' && warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var options = Ctor.options;
  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () { return resolveSlots(children, parent); };

  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm = Object.create(parent);
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = data.scopedSlots || emptyObject;
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    vnode.fnContext = contextVm;
    vnode.fnOptions = options;
    if (data.slot) {
      (vnode.data || (vnode.data = {})).slot = data.slot;
    }
  }

  return vnode
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */




// Register the component hook to weex native render engine.
// The hook will be triggered by native, not javascript.


// Updates the state of the component to weex native render engine.

/*  */

// https://github.com/Hanks10100/weex-native-directive/tree/master/component

// listening on native callback

/*  */

/*  */

// hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (
    vnode,
    hydrating,
    parentElm,
    refElm
  ) {
    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance,
        parentElm,
        refElm
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    } else if (vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    if (process.env.NODE_ENV !== 'production') {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // merge component management hooks onto the placeholder node
  mergeHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  // Weex specific: invoke recycle-list optimized @render function for
  // extracting cell-slot template.
  // https://github.com/Hanks10100/weex-native-directive/tree/master/component
  /* istanbul ignore if */
  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent, // activeInstance in lifecycle state
  parentElm,
  refElm
) {
  var options = {
    _isComponent: true,
    parent: parent,
    _parentVnode: vnode,
    _parentElm: parentElm || null,
    _refElm: refElm || null
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function mergeHooks (data) {
  if (!data.hook) {
    data.hook = {};
  }
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var fromParent = data.hook[key];
    var ours = componentVNodeHooks[key];
    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;
  }
}

function mergeHook$1 (one, two) {
  return function (a, b, c, d) {
    one(a, b, c, d);
    two(a, b, c, d);
  }
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  if (isDef(on[event])) {
    on[event] = [data.model.callback].concat(on[event]);
  } else {
    on[event] = data.model.callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
    process.env.NODE_ENV !== 'production' && warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (process.env.NODE_ENV !== 'production' &&
    isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      );
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (isDef(vnode)) {
    if (ns) { applyNS(vnode, ns); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force))) {
        applyNS(child, ns, force);
      }
    }
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  if (process.env.NODE_ENV !== 'production') {
    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {
    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);
  }
}

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (vm._isMounted) {
      // if the parent didn't update, the slot nodes will be the ones from
      // last render. They need to be cloned to ensure "freshness" for this render.
      for (var key in vm.$slots) {
        var slot = vm.$slots[key];
        // _rendered is a flag added by renderSlot, but may not be present
        // if the slot is passed from manually written render functions
        if (slot._rendered || (slot[0] && slot[0].elm)) {
          vm.$slots[key] = cloneVNodes(slot, true /* deep */);
        }
      }
    }

    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        if (vm.$options.renderError) {
          try {
            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
          } catch (e) {
            handleError(e, vm, "renderError");
            vnode = vm._vnode;
          }
        } else {
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

var uid = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
      startTag = "vue-perf-start:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      initProxy(vm);
    } else {
      vm._renderProxy = vm;
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(("vue " + (vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  opts._parentElm = options._parentElm;
  opts._refElm = options._refElm;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var extended = Ctor.extendOptions;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = dedupe(latest[key], extended[key], sealed[key]);
    }
  }
  return modified
}

function dedupe (latest, extended, sealed) {
  // compare latest and sealed to ensure lifecycle hooks won't be duplicated
  // between merges
  if (Array.isArray(latest)) {
    var res = [];
    sealed = Array.isArray(sealed) ? sealed : [sealed];
    extended = Array.isArray(extended) ? extended : [extended];
    for (var i = 0; i < latest.length; i++) {
      // push original options and not sealed options to exclude duplicated options
      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
        res.push(latest[i]);
      }
    }
    return res
  } else {
    return latest
  }
}

function Vue$3 (options) {
  if (process.env.NODE_ENV !== 'production' &&
    !(this instanceof Vue$3)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue$3);
stateMixin(Vue$3);
eventsMixin(Vue$3);
lifecycleMixin(Vue$3);
renderMixin(Vue$3);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (process.env.NODE_ENV !== 'production' && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (process.env.NODE_ENV !== 'production' && type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */

function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    var this$1 = this;

    for (var key in this$1.cache) {
      pruneCacheEntry(this$1.cache, key, this$1.keys);
    }
  },

  watch: {
    include: function include (val) {
      pruneCache(this, function (name) { return matches(val, name); });
    },
    exclude: function exclude (val) {
      pruneCache(this, function (name) { return !matches(val, name); });
    }
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  if (process.env.NODE_ENV !== 'production') {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue$3);

Object.defineProperty(Vue$3.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue$3.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

Vue$3.version = '2.5.13';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,translate,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);



var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      process.env.NODE_ENV !== 'production' && warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setAttribute (node, key, val) {
  node.setAttribute(key, val);
}


var nodeOps = Object.freeze({
	createElement: createElement$1,
	createElementNS: createElementNS,
	createTextNode: createTextNode,
	createComment: createComment,
	insertBefore: insertBefore,
	removeChild: removeChild,
	appendChild: appendChild,
	parentNode: parentNode,
	nextSibling: nextSibling,
	tagName: tagName,
	setTextContent: setTextContent,
	setAttribute: setAttribute
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!key) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        a.asyncFactory === b.asyncFactory &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove () {
      if (--remove.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove.listeners = listeners;
    return remove
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1 (vnode, inVPre) {
    return (
      !inVPre &&
      !vnode.ns &&
      !(
        config.ignoredElements.length &&
        config.ignoredElements.some(function (ignore) {
          return isRegExp(ignore)
            ? ignore.test(vnode.tag)
            : ignore === vnode.tag
        })
      ) &&
      config.isUnknownElement(vnode.tag)
    )
  }

  var creatingElmInVPre = 0;
  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {
    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      if (process.env.NODE_ENV !== 'production') {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn(
            'Unknown custom element: <' + tag + '> - did you ' +
            'register the component correctly? For recursive components, ' +
            'make sure to provide the "name" option.',
            vnode.context
          );
        }
      }
      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (process.env.NODE_ENV !== 'production' && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */, parentElm, refElm);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (ref$$1.parentNode === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (process.env.NODE_ENV !== 'production') {
        checkDuplicateKeys(children);
      }
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setAttribute(vnode.elm, i, '');
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setAttribute(vnode.elm, i, '');
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      i !== vnode.fnContext &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setAttribute(vnode.elm, i, '');
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    if (process.env.NODE_ENV !== 'production') {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys (children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(
            ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
            vnode.context
          );
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {
    if (oldVnode === vnode) {
      return
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || (data && data.pre);
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true
    }
    // assert node match
    if (process.env.NODE_ENV !== 'production') {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false
      }
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (process.env.NODE_ENV !== 'production' &&
                typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (process.env.NODE_ENV !== 'production' &&
                typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || (
        !isUnknownElement$$1(vnode, inVPre) &&
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue, parentElm, refElm);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else if (process.env.NODE_ENV !== 'production') {
              warn(
                'The client-side rendered virtual DOM tree is not matching ' +
                'server-rendered content. This is likely caused by incorrect ' +
                'HTML markup, for example nesting block-level elements inside ' +
                '<p>, or missing <tbody>. Bailing hydration and performing ' +
                'full client-side render.'
              );
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm$1 = nodeOps.parentNode(oldElm);

        // create new node
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm$1,
          nodeOps.nextSibling(oldElm)
        );

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm$1)) {
          removeVnodes(parentElm$1, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value) {
  if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // #7138: IE10 & 11 fires input event when setting placeholder on
      // <textarea>... block the first input event and remove the blocker
      // immediately.
      /* istanbul ignore if */
      if (
        isIE && !isIE9 &&
        el.tagName === 'TEXTAREA' &&
        key === 'placeholder' && !el.__ieph
      ) {
        var blocker = function (e) {
          e.stopImmediatePropagation();
          el.removeEventListener('input', blocker);
        };
        el.addEventListener('input', blocker);
        // $flow-disable-line
        el.__ieph = true; /* IE placeholder patched */
      }
      el.setAttribute(key, value);
    }
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

/*  */









// add a raw attr (use this in preTransforms)








// note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.

/*  */

/**
 * Cross-platform code generation for component v-model
 */


/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */

/*  */

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler (handler, event, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler () {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  }
}

function add$1 (
  event,
  handler,
  once$$1,
  capture,
  passive
) {
  handler = withMacroTask(handler);
  if (once$$1) { handler = createOnceHandler(handler, event, capture); }
  target$1.addEventListener(
    event,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  event,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(
    event,
    handler._withTask || handler,
    capture
  );
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (isUndef(props[key])) {
      elm[key] = '';
    }
  }
  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else {
      elm[key] = cur;
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (elm, checkVal) {
  return (!elm.composing && (
    elm.tagName === 'OPTION' ||
    isNotInFocusAndDirty(elm, checkVal) ||
    isDirtyWithModifiers(elm, checkVal)
  ))
}

function isNotInFocusAndDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isDirtyWithModifiers (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.lazy) {
      // inputs with lazy should only be updated when not in focus
      return false
    }
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal)
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim()
    }
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (
        childNode && childNode.data &&
        (styleData = normalizeStyleData(childNode.data))
      ) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(name, val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def) {
  if (!def) {
    return
  }
  /* istanbul ignore else */
  if (typeof def === 'object') {
    var res = {};
    if (def.css !== false) {
      extend(res, autoCssTransition(def.name || 'v'));
    }
    extend(res, def);
    return res
  } else if (typeof def === 'string') {
    return autoCssTransition(def)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser
  ? window.requestAnimationFrame
    ? window.requestAnimationFrame.bind(window)
    : setTimeout
  : /* istanbul ignore next */ function (fn) { return fn(); };

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = styles[animationProp + 'Delay'].split(', ');
  var animationDurations = styles[animationProp + 'Duration'].split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

function toMs (s) {
  return Number(s.slice(0, -1)) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    transitionNode = transitionNode.parent;
    context = transitionNode.context;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      addTransitionClass(el, toClass);
      removeTransitionClass(el, startClass);
      if (!cb.cancelled && !userWantsControl) {
        if (isValidDuration(explicitEnterDuration)) {
          setTimeout(cb, explicitEnterDuration);
        } else {
          whenTransitionEnds(el, type, cb);
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        addTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled && !userWantsControl) {
          if (isValidDuration(explicitLeaveDuration)) {
            setTimeout(cb, explicitLeaveDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted (el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        if (!isAndroid) {
          el.addEventListener('compositionstart', onCompositionStart);
          el.addEventListener('compositionend', onCompositionEnd);
        }
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    process.env.NODE_ENV !== 'production' && warn(
      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
      vm
    );
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (value === oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: directive,
  show: show
};

/*  */

// Provides transition support for a single element/component.
// supports transition mode (out-in / in-out)

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if (process.env.NODE_ENV !== 'production' && children.length > 1) {
      warn(
        '<transition> can only be used on a single element. Use ' +
        '<transition-group> for lists.',
        this.$parent
      );
    }

    var mode = this.mode;

    // warn invalid mode
    if (process.env.NODE_ENV !== 'production' &&
      mode && mode !== 'in-out' && mode !== 'out-in'
    ) {
      warn(
        'invalid <transition> mode: ' + mode,
        this.$parent
      );
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild) &&
      // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

// Provides transition support for list items.
// supports move transitions using the FLIP technique.

// Because the vdom's children update algorithm is "unstable" - i.e.
// it doesn't guarantee the relative positioning of removed elements,
// we force transition-group to update its children into two passes:
// in the first pass, we remove all nodes that need to be removed,
// triggering their leaving transition; in the second pass, we insert/move
// into the final desired state. This way in the second pass removed
// nodes will remain where they should be.

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else if (process.env.NODE_ENV !== 'production') {
          var opts = c.componentOptions;
          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
          warn(("<transition-group> children must be keyed: <" + name + ">"));
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  beforeUpdate: function beforeUpdate () {
    // force removing pass
    this.__patch__(
      this._vnode,
      this.kept,
      false, // hydrating
      true // removeOnly (!important avoids unnecessary moves)
    );
    this._vnode = this.kept;
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue$3.config.mustUseProp = mustUseProp;
Vue$3.config.isReservedTag = isReservedTag;
Vue$3.config.isReservedAttr = isReservedAttr;
Vue$3.config.getTagNamespace = getTagNamespace;
Vue$3.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue$3.options.directives, platformDirectives);
extend(Vue$3.options.components, platformComponents);

// install platform patch function
Vue$3.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue$3.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
Vue$3.nextTick(function () {
  if (config.devtools) {
    if (devtools) {
      devtools.emit('init', Vue$3);
    } else if (process.env.NODE_ENV !== 'production' && isChrome) {
      console[console.info ? 'info' : 'log'](
        'Download the Vue Devtools extension for a better development experience:\n' +
        'https://github.com/vuejs/vue-devtools'
      );
    }
  }
  if (process.env.NODE_ENV !== 'production' &&
    config.productionTip !== false &&
    inBrowser && typeof console !== 'undefined'
  ) {
    console[console.info ? 'info' : 'log'](
      "You are running Vue in development mode.\n" +
      "Make sure to turn on production mode when deploying for production.\n" +
      "See more tips at https://vuejs.org/guide/deployment.html"
    );
  }
}, 0);

/*  */

module.exports = Vue$3;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":1}],3:[function(require,module,exports){
var inserted = exports.cache = {}

function noop () {}

exports.insert = function (css) {
  if (inserted[css]) return noop
  inserted[css] = true

  var elem = document.createElement('style')
  elem.setAttribute('type', 'text/css')

  if ('textContent' in elem) {
    elem.textContent = css
  } else {
    elem.styleSheet.cssText = css
  }

  document.getElementsByTagName('head')[0].appendChild(elem)
  return function () {
    document.getElementsByTagName('head')[0].removeChild(elem)
    inserted[css] = false
  }
}

},{}],4:[function(require,module,exports){
var Vue // late bind
var version
var map = (window.__VUE_HOT_MAP__ = Object.create(null))
var installed = false
var isBrowserify = false
var initHookName = 'beforeCreate'

exports.install = function (vue, browserify) {
  if (installed) { return }
  installed = true

  Vue = vue.__esModule ? vue.default : vue
  version = Vue.version.split('.').map(Number)
  isBrowserify = browserify

  // compat with < 2.0.0-alpha.7
  if (Vue.config._lifecycleHooks.indexOf('init') > -1) {
    initHookName = 'init'
  }

  exports.compatible = version[0] >= 2
  if (!exports.compatible) {
    console.warn(
      '[HMR] You are using a version of vue-hot-reload-api that is ' +
        'only compatible with Vue.js core ^2.0.0.'
    )
    return
  }
}

/**
 * Create a record for a hot module, which keeps track of its constructor
 * and instances
 *
 * @param {String} id
 * @param {Object} options
 */

exports.createRecord = function (id, options) {
  var Ctor = null
  if (typeof options === 'function') {
    Ctor = options
    options = Ctor.options
  }
  makeOptionsHot(id, options)
  map[id] = {
    Ctor: Ctor,
    options: options,
    instances: []
  }
}

/**
 * Make a Component options object hot.
 *
 * @param {String} id
 * @param {Object} options
 */

function makeOptionsHot(id, options) {
  if (options.functional) {
    var render = options.render
    options.render = function (h, ctx) {
      var instances = map[id].instances
      if (ctx && instances.indexOf(ctx.parent) < 0) {
        instances.push(ctx.parent)
      }
      return render(h, ctx)
    }
  } else {
    injectHook(options, initHookName, function() {
      var record = map[id]
      if (!record.Ctor) {
        record.Ctor = this.constructor
      }
      record.instances.push(this)
    })
    injectHook(options, 'beforeDestroy', function() {
      var instances = map[id].instances
      instances.splice(instances.indexOf(this), 1)
    })
  }
}

/**
 * Inject a hook to a hot reloadable component so that
 * we can keep track of it.
 *
 * @param {Object} options
 * @param {String} name
 * @param {Function} hook
 */

function injectHook(options, name, hook) {
  var existing = options[name]
  options[name] = existing
    ? Array.isArray(existing) ? existing.concat(hook) : [existing, hook]
    : [hook]
}

function tryWrap(fn) {
  return function (id, arg) {
    try {
      fn(id, arg)
    } catch (e) {
      console.error(e)
      console.warn(
        'Something went wrong during Vue component hot-reload. Full reload required.'
      )
    }
  }
}

function updateOptions (oldOptions, newOptions) {
  for (var key in oldOptions) {
    if (!(key in newOptions)) {
      delete oldOptions[key]
    }
  }
  for (var key$1 in newOptions) {
    oldOptions[key$1] = newOptions[key$1]
  }
}

exports.rerender = tryWrap(function (id, options) {
  var record = map[id]
  if (!options) {
    record.instances.slice().forEach(function (instance) {
      instance.$forceUpdate()
    })
    return
  }
  if (typeof options === 'function') {
    options = options.options
  }
  if (record.Ctor) {
    record.Ctor.options.render = options.render
    record.Ctor.options.staticRenderFns = options.staticRenderFns
    record.instances.slice().forEach(function (instance) {
      instance.$options.render = options.render
      instance.$options.staticRenderFns = options.staticRenderFns
      // reset static trees
      // pre 2.5, all static trees are cahced together on the instance
      if (instance._staticTrees) {
        instance._staticTrees = []
      }
      // 2.5.0
      if (Array.isArray(record.Ctor.options.cached)) {
        record.Ctor.options.cached = []
      }
      // 2.5.3
      if (Array.isArray(instance.$options.cached)) {
        instance.$options.cached = []
      }
      // post 2.5.4: v-once trees are cached on instance._staticTrees.
      // Pure static trees are cached on the staticRenderFns array
      // (both already reset above)
      instance.$forceUpdate()
    })
  } else {
    // functional or no instance created yet
    record.options.render = options.render
    record.options.staticRenderFns = options.staticRenderFns

    // handle functional component re-render
    if (record.options.functional) {
      // rerender with full options
      if (Object.keys(options).length > 2) {
        updateOptions(record.options, options)
      } else {
        // template-only rerender.
        // need to inject the style injection code for CSS modules
        // to work properly.
        var injectStyles = record.options._injectStyles
        if (injectStyles) {
          var render = options.render
          record.options.render = function (h, ctx) {
            injectStyles.call(ctx)
            return render(h, ctx)
          }
        }
      }
      record.options._Ctor = null
      // 2.5.3
      if (Array.isArray(record.options.cached)) {
        record.options.cached = []
      }
      record.instances.slice().forEach(function (instance) {
        instance.$forceUpdate()
      })
    }
  }
})

exports.reload = tryWrap(function (id, options) {
  var record = map[id]
  if (options) {
    if (typeof options === 'function') {
      options = options.options
    }
    makeOptionsHot(id, options)
    if (record.Ctor) {
      if (version[1] < 2) {
        // preserve pre 2.2 behavior for global mixin handling
        record.Ctor.extendOptions = options
      }
      var newCtor = record.Ctor.super.extend(options)
      record.Ctor.options = newCtor.options
      record.Ctor.cid = newCtor.cid
      record.Ctor.prototype = newCtor.prototype
      if (newCtor.release) {
        // temporary global mixin strategy used in < 2.0.0-alpha.6
        newCtor.release()
      }
    } else {
      updateOptions(record.options, options)
    }
  }
  record.instances.slice().forEach(function (instance) {
    if (instance.$vnode && instance.$vnode.context) {
      instance.$vnode.context.$forceUpdate()
    } else {
      console.warn(
        'Root or manually mounted instance modified. Full reload required.'
      )
    }
  })
})

},{}],5:[function(require,module,exports){
'use strict';

var _mApplication = require('../vue/m-application.vue');

var _mApplication2 = _interopRequireDefault(_mApplication);

var _lang = require('./lang');

var _lang2 = _interopRequireDefault(_lang);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Vue.config.devtools = true;

var lang = new _lang2.default();

window.document.title = lang.translate('title');

Vue.directive('lang', {
    inserted: function inserted(el, binding) {
        el.innerHTML = lang.translate(binding.value);
    }
});
Vue.directive('lang-children', {
    inserted: function inserted(el, binding) {
        el.children[0].innerHTML = lang.translate(binding.value);
    }
});

new Vue({
    el: '#app',
    components: { mApplication: _mApplication2.default },
    data: function data() {
        return {
            current: 'home'
        };
    }
});

},{"../vue/m-application.vue":7,"./lang":6}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Lang = function () {
    function Lang() {
        _classCallCheck(this, Lang);

        this.detected = (navigator.language || navigator.userLanguage).split('-')[0];
        this.current = '';
        this.dictionary = Lang.load(this.current || this.detected);
    }

    _createClass(Lang, [{
        key: 'translate',
        value: function translate(key) {
            return _.get(this.dictionary, key, '#fix this#');
        }
    }], [{
        key: 'load',
        value: function load(lang, stop) {
            var dictionary = null;
            $.ajax({
                url: '/lang/' + lang + '.json',
                dataType: 'json',
                async: false,
                success: function success(data) {
                    dictionary = data;
                },
                error: function error() {}
            });
            return dictionary == null && !stop ? Lang.load('en') : dictionary;
        }
    }]);

    return Lang;
}();

exports.default = Lang;

},{}],7:[function(require,module,exports){
"use strict";

;(function () {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _mNavigation = require("./m-navigation.vue");

  var _mNavigation2 = _interopRequireDefault(_mNavigation);

  var _mContent = require("./m-content.vue");

  var _mContent2 = _interopRequireDefault(_mContent);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  exports.default = {
    props: ['current'],
    components: {
      MContent: _mContent2.default,
      MNavigation: _mNavigation2.default
    },
    name: "m-application"
  };
})();
if (module.exports.__esModule) module.exports = module.exports.default;
var __vue__options__ = typeof module.exports === "function" ? module.exports.options : module.exports;
if (__vue__options__.functional) {
  console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.");
}
__vue__options__.render = function render() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "content" }, [_c('m-navigation', { attrs: { "current": _vm.current } }), _vm._v(" "), _c('m-content')], 1);
};
__vue__options__.staticRenderFns = [];
__vue__options__._scopeId = "data-v-08d0a326";
if (module.hot) {
  (function () {
    var hotAPI = require("vueify/node_modules/vue-hot-reload-api");
    hotAPI.install(require("vue"), true);
    if (!hotAPI.compatible) return;
    module.hot.accept();
    if (!module.hot.data) {
      hotAPI.createRecord("data-v-08d0a326", __vue__options__);
    } else {
      hotAPI.rerender("data-v-08d0a326", __vue__options__);
    }
  })();
}

},{"./m-content.vue":8,"./m-navigation.vue":9,"vue":2,"vueify/node_modules/vue-hot-reload-api":4}],8:[function(require,module,exports){
"use strict";

var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("/* line 33, stdin */\nsection[data-v-57b32b96] {\n  min-height: 100vh; }\n  /* line 35, stdin */\n  section#home[data-v-57b32b96] {\n    background-image: url(\"/images/s1.png\"); }\n  /* line 38, stdin */\n  section#logo2[data-v-57b32b96] {\n    background-image: url(\"/images/s2.png\"); }\n  /* line 41, stdin */\n  section#logo3[data-v-57b32b96] {\n    background-image: url(\"/images/s3.png\"); }");(function () {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _mSectionHome = require("./m-section-home.vue");

  var _mSectionHome2 = _interopRequireDefault(_mSectionHome);

  var _mSectionAbout = require("./m-section-about.vue");

  var _mSectionAbout2 = _interopRequireDefault(_mSectionAbout);

  var _mSectionContact = require("./m-section-contact.vue");

  var _mSectionContact2 = _interopRequireDefault(_mSectionContact);

  var _mSectionEducation = require("./m-section-education.vue");

  var _mSectionEducation2 = _interopRequireDefault(_mSectionEducation);

  var _mSectionExperience = require("./m-section-experience.vue");

  var _mSectionExperience2 = _interopRequireDefault(_mSectionExperience);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  exports.default = {
    components: {
      MSectionExperience: _mSectionExperience2.default,
      MSectionEducation: _mSectionEducation2.default,
      MSectionContact: _mSectionContact2.default,
      MSectionAbout: _mSectionAbout2.default,
      MSectionHome: _mSectionHome2.default
    },
    name: "m-content"
  };
})();
if (module.exports.__esModule) module.exports = module.exports.default;
var __vue__options__ = typeof module.exports === "function" ? module.exports.options : module.exports;
if (__vue__options__.functional) {
  console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.");
}
__vue__options__.render = function render() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "sections" }, [_c('m-section-home'), _vm._v(" "), _c('m-section-about'), _vm._v(" "), _c('m-section-experience'), _vm._v(" "), _c('section', { attrs: { "id": "logo2" } }), _vm._v(" "), _c('m-section-education'), _vm._v(" "), _c('m-section-contact'), _vm._v(" "), _c('section', { attrs: { "id": "logo3" } })], 1);
};
__vue__options__.staticRenderFns = [];
__vue__options__._scopeId = "data-v-57b32b96";
if (module.hot) {
  (function () {
    var hotAPI = require("vueify/node_modules/vue-hot-reload-api");
    hotAPI.install(require("vue"), true);
    if (!hotAPI.compatible) return;
    module.hot.accept();
    module.hot.dispose(__vueify_style_dispose__);
    if (!module.hot.data) {
      hotAPI.createRecord("data-v-57b32b96", __vue__options__);
    } else {
      hotAPI.rerender("data-v-57b32b96", __vue__options__);
    }
  })();
}

},{"./m-section-about.vue":10,"./m-section-contact.vue":11,"./m-section-education.vue":12,"./m-section-experience.vue":13,"./m-section-home.vue":14,"vue":2,"vueify/lib/insert-css":3,"vueify/node_modules/vue-hot-reload-api":4}],9:[function(require,module,exports){
"use strict";

var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("/* line 28, stdin */\nbody[data-v-7bdde0f2] {\n  padding-top: 0;\n  padding-left: 20rem; }\n\n/* line 34, stdin */\n.nav-item.active[data-v-7bdde0f2] {\n  background-color: transparent; }\n  /* line 36, stdin */\n  .nav-item.active .nav-link[data-v-7bdde0f2] {\n    color: #ffffff; }\n\n/* line 41, stdin */\n.nav-item .nav-link[data-v-7bdde0f2] {\n  color: #999999;\n  text-transform: uppercase;\n  font-size: 1.5rem; }");(function () {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: "m-navigation",
    props: ['current']
  };
})();
if (module.exports.__esModule) module.exports = module.exports.default;
var __vue__options__ = typeof module.exports === "function" ? module.exports.options : module.exports;
if (__vue__options__.functional) {
  console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.");
}
__vue__options__.render = function render() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('b-navbar', { directives: [{ name: "b-scrollspy", rawName: "v-b-scrollspy:spy", arg: "spy" }], class: ['left', 'my-nav'], attrs: { "fixed": "top", "toggleable": "md", "type": "dark", "variant": "info" } }, [_c('b-navbar-brand', { staticClass: "mt-lg-5 mr-0", attrs: { "href": "#" } }, [_c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'menu.portfolio', expression: "'menu.portfolio'" }], staticClass: "d-block d-lg-none" })]), _vm._v(" "), _c('b-navbar-toggle', { attrs: { "target": "nav_collapse" } }), _vm._v(" "), _c('b-collapse', { attrs: { "is-nav": "", "id": "nav_collapse" } }, [_c('b-nav', { attrs: { "vertical": true } }, [_c('b-nav-item', { attrs: { "href": "#home" } }, [_c('span', { staticClass: "icon-circle-up" })]), _vm._v(" "), _c('b-nav-item', { directives: [{ name: "lang-children", rawName: "v-lang-children", value: 'menu.about', expression: "'menu.about'" }], attrs: { "href": "#about" } }), _vm._v(" "), _c('b-nav-item', { directives: [{ name: "lang-children", rawName: "v-lang-children", value: 'menu.experience', expression: "'menu.experience'" }], attrs: { "href": "#experience" } }), _vm._v(" "), _c('b-nav-item', { directives: [{ name: "lang-children", rawName: "v-lang-children", value: 'menu.education', expression: "'menu.education'" }], attrs: { "href": "#education" } }), _vm._v(" "), _c('b-nav-item', { directives: [{ name: "lang-children", rawName: "v-lang-children", value: 'menu.contact', expression: "'menu.contact'" }], attrs: { "href": "#contact" } })], 1)], 1)], 1);
};
__vue__options__.staticRenderFns = [];
__vue__options__._scopeId = "data-v-7bdde0f2";
if (module.hot) {
  (function () {
    var hotAPI = require("vueify/node_modules/vue-hot-reload-api");
    hotAPI.install(require("vue"), true);
    if (!hotAPI.compatible) return;
    module.hot.accept();
    module.hot.dispose(__vueify_style_dispose__);
    if (!module.hot.data) {
      hotAPI.createRecord("data-v-7bdde0f2", __vue__options__);
    } else {
      hotAPI.rerender("data-v-7bdde0f2", __vue__options__);
    }
  })();
}

},{"vue":2,"vueify/lib/insert-css":3,"vueify/node_modules/vue-hot-reload-api":4}],10:[function(require,module,exports){
"use strict";

var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("/* line 50, stdin */\n.my-link[data-v-42a2bffc] {\n  color: #ffffff;\n  line-height: 1.37rem;\n  height: 1.37rem;\n  font-size: 1.37rem;\n  text-decoration: none; }\n  /* line 57, stdin */\n  .my-link span[data-v-42a2bffc] {\n    border: 2px solid #ffffff;\n    border-radius: 100%; }\n    /* line 60, stdin */\n    .my-link span[data-v-42a2bffc]:hover {\n      border-color: #999999;\n      color: #999999; }\n  /* line 66, stdin */\n  .my-link[data-v-42a2bffc]:hover {\n    text-decoration: none; }");(function () {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: "m-section-about"
  };
})();
if (module.exports.__esModule) module.exports = module.exports.default;
var __vue__options__ = typeof module.exports === "function" ? module.exports.options : module.exports;
if (__vue__options__.functional) {
  console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.");
}
__vue__options__.render = function render() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('section', { staticClass: "d-flex", attrs: { "id": "about" } }, [_c('div', { staticClass: "my-auto p-5" }, [_c('div', { staticClass: "d-flex flex-column flex-md-row mb-5 justify-content-between" }, [_c('div', { staticClass: "my-info" }, [_c('h1', { staticClass: "my-about-name mb-0" }, [_c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'about.name', expression: "'about.name'" }] }), _vm._v(" "), _c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'about.surname', expression: "'about.surname'" }], staticClass: "--my-color" })]), _vm._v(" "), _c('div', { staticClass: "subheading mb-5 uppercase" }, [_c('a', { directives: [{ name: "lang", rawName: "v-lang", value: 'about.mail', expression: "'about.mail'" }], staticClass: "my-contact", attrs: { "href": "mailto:name@email.com" } }), _vm._v(" "), _c('span', [_vm._v(" · ")]), _vm._v(" "), _c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'about.location', expression: "'about.location'" }] }), _vm._v(" "), _c('span', [_vm._v(" · ")]), _vm._v(" "), _c('a', { staticClass: "my-contact", attrs: { "href": "tel:+38 (099) 147-74-55" } }, [_vm._v("+38 (099) 147-74-55")])])])]), _vm._v(" "), _c('div', { staticClass: "subheading mb-5" }, [_c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'about.information', expression: "'about.information'" }] })]), _vm._v(" "), _c('div', { staticClass: "subheading mb-5" }, [_c('a', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "my-link", attrs: { "href": "https://vk.com/juliana_g", "target": "_blank", "title": "Vkontakte" } }, [_c('span', { staticClass: "icon-vk p-2" })]), _vm._v(" "), _c('a', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "my-link", attrs: { "href": "https://t.me/DreamerEly", "target": "_blank", "title": "Telegram" } }, [_c('span', { staticClass: "icon-telegram p-2" })]), _vm._v(" "), _c('a', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "my-link", attrs: { "href": "viber://chat?number=+380990757619", "target": "_blank", "title": "Viber" } }, [_c('span', { staticClass: "icon-viber p-2" })]), _vm._v(" "), _c('a', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "my-link", attrs: { "href": "skype:g_juliana_?call", "target": "_blank", "title": "Skype" } }, [_c('span', { staticClass: "icon-skype p-2" })]), _vm._v(" "), _c('a', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "my-link", attrs: { "href": "https://www.instagram.com/julianagayun/", "target": "_blank", "title": "Instagram" } }, [_c('span', { staticClass: "icon-instagram p-2" })])])])]);
};
__vue__options__.staticRenderFns = [];
__vue__options__._scopeId = "data-v-42a2bffc";
if (module.hot) {
  (function () {
    var hotAPI = require("vueify/node_modules/vue-hot-reload-api");
    hotAPI.install(require("vue"), true);
    if (!hotAPI.compatible) return;
    module.hot.accept();
    module.hot.dispose(__vueify_style_dispose__);
    if (!module.hot.data) {
      hotAPI.createRecord("data-v-42a2bffc", __vue__options__);
    } else {
      hotAPI.rerender("data-v-42a2bffc", __vue__options__);
    }
  })();
}

},{"vue":2,"vueify/lib/insert-css":3,"vueify/node_modules/vue-hot-reload-api":4}],11:[function(require,module,exports){
"use strict";

;(function () {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: "m-section-contact"
  };
})();
if (module.exports.__esModule) module.exports = module.exports.default;
var __vue__options__ = typeof module.exports === "function" ? module.exports.options : module.exports;
if (__vue__options__.functional) {
  console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.");
}
__vue__options__.render = function render() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('section', { attrs: { "id": "contact" } });
};
__vue__options__.staticRenderFns = [];
__vue__options__._scopeId = "data-v-1ff90856";
if (module.hot) {
  (function () {
    var hotAPI = require("vueify/node_modules/vue-hot-reload-api");
    hotAPI.install(require("vue"), true);
    if (!hotAPI.compatible) return;
    module.hot.accept();
    if (!module.hot.data) {
      hotAPI.createRecord("data-v-1ff90856", __vue__options__);
    } else {
      hotAPI.rerender("data-v-1ff90856", __vue__options__);
    }
  })();
}

},{"vue":2,"vueify/node_modules/vue-hot-reload-api":4}],12:[function(require,module,exports){
"use strict";

;(function () {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: "m-section-education"
  };
})();
if (module.exports.__esModule) module.exports = module.exports.default;
var __vue__options__ = typeof module.exports === "function" ? module.exports.options : module.exports;
if (__vue__options__.functional) {
  console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.");
}
__vue__options__.render = function render() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('section', { attrs: { "id": "education" } });
};
__vue__options__.staticRenderFns = [];
__vue__options__._scopeId = "data-v-6d41e81d";
if (module.hot) {
  (function () {
    var hotAPI = require("vueify/node_modules/vue-hot-reload-api");
    hotAPI.install(require("vue"), true);
    if (!hotAPI.compatible) return;
    module.hot.accept();
    if (!module.hot.data) {
      hotAPI.createRecord("data-v-6d41e81d", __vue__options__);
    } else {
      hotAPI.rerender("data-v-6d41e81d", __vue__options__);
    }
  })();
}

},{"vue":2,"vueify/node_modules/vue-hot-reload-api":4}],13:[function(require,module,exports){
"use strict";

var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("/* line 36, stdin */\n.my-date[data-v-53a2be76] {\n  min-width: 18rem;\n  font-weight: 500;\n  font-size: 1.2rem;\n  font-family: Bebas; }");(function () {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: "m-section-experience"
  };
})();
if (module.exports.__esModule) module.exports = module.exports.default;
var __vue__options__ = typeof module.exports === "function" ? module.exports.options : module.exports;
if (__vue__options__.functional) {
  console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.");
}
__vue__options__.render = function render() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('section', { staticClass: "d-flex mb-5", attrs: { "id": "experience" } }, [_c('div', { staticClass: "my-auto p-5" }, [_c('h2', { directives: [{ name: "lang", rawName: "v-lang", value: 'experience.title', expression: "'experience.title'" }], staticClass: "my-about-name mb-5" }), _vm._v(" "), _c('div', { staticClass: "d-flex flex-column flex-md-row mb-5" }, [_c('div', { staticClass: "resume-content mr-auto" }, [_c('h3', { directives: [{ name: "lang", rawName: "v-lang", value: 'experience.pb.prof', expression: "'experience.pb.prof'" }], staticClass: "mb-0" }), _vm._v(" "), _c('div', { directives: [{ name: "lang", rawName: "v-lang", value: 'experience.pb.name', expression: "'experience.pb.name'" }], staticClass: "subheading mb-3" }), _vm._v(" "), _c('p', { directives: [{ name: "lang", rawName: "v-lang", value: 'experience.pb.text', expression: "'experience.pb.text'" }], staticClass: "subheading" })]), _vm._v(" "), _c('div', { staticClass: "my-date text-md-right" }, [_c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'experience.pb.time', expression: "'experience.pb.time'" }] })])]), _vm._v(" "), _c('div', { staticClass: "d-flex flex-column flex-md-row mb-5" }, [_c('div', { staticClass: "resume-content mr-auto" }, [_c('h3', { directives: [{ name: "lang", rawName: "v-lang", value: 'experience.it20.prof', expression: "'experience.it20.prof'" }], staticClass: "mb-0" }), _vm._v(" "), _c('div', { directives: [{ name: "lang", rawName: "v-lang", value: 'experience.it20.name', expression: "'experience.it20.name'" }], staticClass: "subheading mb-3" }), _vm._v(" "), _c('p', { directives: [{ name: "lang", rawName: "v-lang", value: 'experience.it20.text', expression: "'experience.it20.text'" }], staticClass: "subheading" })]), _vm._v(" "), _c('div', { staticClass: "my-date text-md-right" }, [_c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'experience.it20.time', expression: "'experience.it20.time'" }] })])])])]);
};
__vue__options__.staticRenderFns = [];
__vue__options__._scopeId = "data-v-53a2be76";
if (module.hot) {
  (function () {
    var hotAPI = require("vueify/node_modules/vue-hot-reload-api");
    hotAPI.install(require("vue"), true);
    if (!hotAPI.compatible) return;
    module.hot.accept();
    module.hot.dispose(__vueify_style_dispose__);
    if (!module.hot.data) {
      hotAPI.createRecord("data-v-53a2be76", __vue__options__);
    } else {
      hotAPI.rerender("data-v-53a2be76", __vue__options__);
    }
  })();
}

},{"vue":2,"vueify/lib/insert-css":3,"vueify/node_modules/vue-hot-reload-api":4}],14:[function(require,module,exports){
"use strict";

;(function () {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: "m-section-home"
  };
})();
if (module.exports.__esModule) module.exports = module.exports.default;
var __vue__options__ = typeof module.exports === "function" ? module.exports.options : module.exports;
if (__vue__options__.functional) {
  console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.");
}
__vue__options__.render = function render() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('section', { attrs: { "id": "home" } });
};
__vue__options__.staticRenderFns = [];
__vue__options__._scopeId = "data-v-4fcfc7fa";
if (module.hot) {
  (function () {
    var hotAPI = require("vueify/node_modules/vue-hot-reload-api");
    hotAPI.install(require("vue"), true);
    if (!hotAPI.compatible) return;
    module.hot.accept();
    if (!module.hot.data) {
      hotAPI.createRecord("data-v-4fcfc7fa", __vue__options__);
    } else {
      hotAPI.rerender("data-v-4fcfc7fa", __vue__options__);
    }
  })();
}

},{"vue":2,"vueify/node_modules/vue-hot-reload-api":4}]},{},[5])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5ydW50aW1lLmNvbW1vbi5qcyIsIm5vZGVfbW9kdWxlcy92dWVpZnkvbGliL2luc2VydC1jc3MuanMiLCJub2RlX21vZHVsZXMvdnVlaWZ5L25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qcyIsInNyYy9qcy9hcHAuanMiLCJzcmMvanMvbGFuZy5qcyIsInNyYy92dWUvbS1hcHBsaWNhdGlvbi52dWU/ZWRiMmM3ZTYiLCJzcmMvdnVlL20tY29udGVudC52dWU/MTBiMzg0OGQiLCJzcmMvdnVlL20tbmF2aWdhdGlvbi52dWU/NTcwZjQwNDEiLCJzcmMvdnVlL20tc2VjdGlvbi1hYm91dC52dWU/N2I4ZjhhMjAiLCJzcmMvdnVlL20tc2VjdGlvbi1jb250YWN0LnZ1ZT8xNzJhZjAzMSIsInNyYy92dWUvbS1zZWN0aW9uLWVkdWNhdGlvbi52dWU/MGRkMzA5NzkiLCJzcmMvdnVlL20tc2VjdGlvbi1leHBlcmllbmNlLnZ1ZT80ZTM1ZTk3ZCIsInNyYy92dWUvbS1zZWN0aW9uLWhvbWUudnVlPzgyNWZhMzlhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDeExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDbnZQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDbE9BOzs7O0FBQ0E7Ozs7OztBQUhBLElBQUksTUFBSixDQUFXLFFBQVgsR0FBc0IsSUFBdEI7O0FBS0EsSUFBSSxPQUFPLG9CQUFYOztBQUVBLE9BQU8sUUFBUCxDQUFnQixLQUFoQixHQUF3QixLQUFLLFNBQUwsQ0FBZSxPQUFmLENBQXhCOztBQUVBLElBQUksU0FBSixDQUFjLE1BQWQsRUFBc0I7QUFDbEIsY0FBVSxrQkFBVSxFQUFWLEVBQWMsT0FBZCxFQUF1QjtBQUM3QixXQUFHLFNBQUgsR0FBZSxLQUFLLFNBQUwsQ0FBZSxRQUFRLEtBQXZCLENBQWY7QUFDSDtBQUhpQixDQUF0QjtBQUtBLElBQUksU0FBSixDQUFjLGVBQWQsRUFBK0I7QUFDM0IsY0FBVSxrQkFBVSxFQUFWLEVBQWMsT0FBZCxFQUF1QjtBQUM3QixXQUFHLFFBQUgsQ0FBWSxDQUFaLEVBQWUsU0FBZixHQUEyQixLQUFLLFNBQUwsQ0FBZSxRQUFRLEtBQXZCLENBQTNCO0FBQ0g7QUFIMEIsQ0FBL0I7O0FBTUEsSUFBSSxHQUFKLENBQVE7QUFDSixRQUFJLE1BREE7QUFFSixnQkFBWSxFQUFDLG9DQUFELEVBRlI7QUFHSixRQUhJLGtCQUdHO0FBQ0gsZUFBTztBQUNILHFCQUFTO0FBRE4sU0FBUDtBQUdIO0FBUEcsQ0FBUjs7Ozs7Ozs7Ozs7OztJQ3BCcUIsSTtBQUVqQixvQkFBYztBQUFBOztBQUNWLGFBQUssUUFBTCxHQUFnQixDQUFDLFVBQVUsUUFBVixJQUFzQixVQUFVLFlBQWpDLEVBQStDLEtBQS9DLENBQXFELEdBQXJELEVBQTBELENBQTFELENBQWhCO0FBQ0EsYUFBSyxPQUFMLEdBQWUsRUFBZjtBQUNBLGFBQUssVUFBTCxHQUFrQixLQUFLLElBQUwsQ0FBVSxLQUFLLE9BQUwsSUFBZ0IsS0FBSyxRQUEvQixDQUFsQjtBQUNIOzs7O2tDQUVTLEcsRUFBSztBQUNYLG1CQUFPLEVBQUUsR0FBRixDQUFNLEtBQUssVUFBWCxFQUF1QixHQUF2QixFQUE0QixZQUE1QixDQUFQO0FBQ0g7Ozs2QkFFVyxJLEVBQU0sSSxFQUFNO0FBQ3BCLGdCQUFJLGFBQWEsSUFBakI7QUFDQSxjQUFFLElBQUYsQ0FBTztBQUNILHFCQUFLLFdBQVcsSUFBWCxHQUFrQixPQURwQjtBQUVILDBCQUFVLE1BRlA7QUFHSCx1QkFBTyxLQUhKO0FBSUgseUJBQVMsaUJBQVUsSUFBVixFQUFnQjtBQUNyQixpQ0FBYSxJQUFiO0FBQ0gsaUJBTkU7QUFPSCx1QkFBTyxpQkFBWSxDQUNsQjtBQVJFLGFBQVA7QUFVQSxtQkFBUSxjQUFjLElBQWQsSUFBc0IsQ0FBQyxJQUF4QixHQUFnQyxLQUFLLElBQUwsQ0FBVSxJQUFWLENBQWhDLEdBQWtELFVBQXpEO0FBQ0g7Ozs7OztrQkF6QmdCLEk7Ozs7Ozs7Ozs7OztBQ1FyQjs7OztBQUNBOzs7Ozs7Ozs7WUFJQTs7MkJBRUE7aUNBRkEsQUFJQTtBQUhBO1VBSEE7QUFDQTs7Ozs7OztBQVpBOzs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OEJDYUE7Ozs7K0JBQ0E7Ozs7aUNBQ0E7Ozs7bUNBQ0E7Ozs7b0NBQ0E7Ozs7Ozs7Ozs7K0NBSUE7NkNBQ0E7eUNBQ0E7cUNBQ0E7bUNBSkEsQUFLQTtBQUxBO1VBREEsQUFRQTs7Ozs7Ozs7QUEzQkE7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7VUNxQkE7WUFEQSxBQUVBOzs7Ozs7OztBQXRCQTs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztVQzJDQSxBQUNBOzs7Ozs7OztBQTVDQTs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztVQ0tBO0FBQ0E7Ozs7Ozs7QUFOQTs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1VDS0E7QUFDQTs7Ozs7OztBQU5BOzs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7VUM2QkEsQUFDQTs7Ozs7Ozs7QUE5QkE7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7VUNLQTtBQUNBOzs7Ozs7O0FBTkE7OztBQUFBIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIi8qIVxuICogVnVlLmpzIHYyLjUuMTNcbiAqIChjKSAyMDE0LTIwMTcgRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKiAgKi9cblxudmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8vIHRoZXNlIGhlbHBlcnMgcHJvZHVjZXMgYmV0dGVyIHZtIGNvZGUgaW4gSlMgZW5naW5lcyBkdWUgdG8gdGhlaXJcbi8vIGV4cGxpY2l0bmVzcyBhbmQgZnVuY3Rpb24gaW5saW5pbmdcbmZ1bmN0aW9uIGlzVW5kZWYgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmICh2KSB7XG4gIHJldHVybiB2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc1RydWUgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHRydWVcbn1cblxuZnVuY3Rpb24gaXNGYWxzZSAodikge1xuICByZXR1cm4gdiA9PT0gZmFsc2Vcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmVcbiAqL1xuZnVuY3Rpb24gaXNQcmltaXRpdmUgKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHxcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbidcbiAgKVxufVxuXG4vKipcbiAqIFF1aWNrIG9iamVjdCBjaGVjayAtIHRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gdGVsbFxuICogT2JqZWN0cyBmcm9tIHByaW1pdGl2ZSB2YWx1ZXMgd2hlbiB3ZSBrbm93IHRoZSB2YWx1ZVxuICogaXMgYSBKU09OLWNvbXBsaWFudCB0eXBlLlxuICovXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHJhdyB0eXBlIHN0cmluZyBvZiBhIHZhbHVlIGUuZy4gW29iamVjdCBPYmplY3RdXG4gKi9cbnZhciBfdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiB0b1Jhd1R5cGUgKHZhbHVlKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpXG59XG5cbi8qKlxuICogU3RyaWN0IG9iamVjdCB0eXBlIGNoZWNrLiBPbmx5IHJldHVybnMgdHJ1ZVxuICogZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCAob2JqKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJ1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cCAodikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsIGlzIGEgdmFsaWQgYXJyYXkgaW5kZXguXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRBcnJheUluZGV4ICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KFN0cmluZyh2YWwpKTtcbiAgcmV0dXJuIG4gPj0gMCAmJiBNYXRoLmZsb29yKG4pID09PSBuICYmIGlzRmluaXRlKHZhbClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgdG8gYSBzdHJpbmcgdGhhdCBpcyBhY3R1YWxseSByZW5kZXJlZC5cbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcgKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGxcbiAgICA/ICcnXG4gICAgOiB0eXBlb2YgdmFsID09PSAnb2JqZWN0J1xuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhIGlucHV0IHZhbHVlIHRvIGEgbnVtYmVyIGZvciBwZXJzaXN0ZW5jZS5cbiAqIElmIHRoZSBjb252ZXJzaW9uIGZhaWxzLCByZXR1cm4gb3JpZ2luYWwgc3RyaW5nLlxuICovXG5mdW5jdGlvbiB0b051bWJlciAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuXG59XG5cbi8qKlxuICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XG4gKiBpcyBpbiB0aGF0IG1hcC5cbiAqL1xuZnVuY3Rpb24gbWFrZU1hcCAoXG4gIHN0cixcbiAgZXhwZWN0c0xvd2VyQ2FzZVxuKSB7XG4gIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbGlzdCA9IHN0ci5zcGxpdCgnLCcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBleHBlY3RzTG93ZXJDYXNlXG4gICAgPyBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsLnRvTG93ZXJDYXNlKCldOyB9XG4gICAgOiBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsXTsgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgdGFnIGlzIGEgYnVpbHQtaW4gdGFnLlxuICovXG52YXIgaXNCdWlsdEluVGFnID0gbWFrZU1hcCgnc2xvdCxjb21wb25lbnQnLCB0cnVlKTtcblxuLyoqXG4gKiBDaGVjayBpZiBhIGF0dHJpYnV0ZSBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZS5cbiAqL1xudmFyIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUgPSBtYWtlTWFwKCdrZXkscmVmLHNsb3Qsc2xvdC1zY29wZSxpcycpO1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpdGVtIGZyb20gYW4gYXJyYXlcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgb2JqZWN0IGhhcyB0aGUgcHJvcGVydHkuXG4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBoYXNPd24gKG9iaiwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FjaGVkIChmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gKGZ1bmN0aW9uIGNhY2hlZEZuIChzdHIpIHtcbiAgICB2YXIgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSlcbiAgfSlcbn1cblxuLyoqXG4gKiBDYW1lbGl6ZSBhIGh5cGhlbi1kZWxpbWl0ZWQgc3RyaW5nLlxuICovXG52YXIgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbnZhciBjYW1lbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCBmdW5jdGlvbiAoXywgYykgeyByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnOyB9KVxufSk7XG5cbi8qKlxuICogQ2FwaXRhbGl6ZSBhIHN0cmluZy5cbiAqL1xudmFyIGNhcGl0YWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpXG59KTtcblxuLyoqXG4gKiBIeXBoZW5hdGUgYSBjYW1lbENhc2Ugc3RyaW5nLlxuICovXG52YXIgaHlwaGVuYXRlUkUgPSAvXFxCKFtBLVpdKS9nO1xudmFyIGh5cGhlbmF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKClcbn0pO1xuXG4vKipcbiAqIFNpbXBsZSBiaW5kLCBmYXN0ZXIgdGhhbiBuYXRpdmVcbiAqL1xuZnVuY3Rpb24gYmluZCAoZm4sIGN0eCkge1xuICBmdW5jdGlvbiBib3VuZEZuIChhKSB7XG4gICAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHJldHVybiBsXG4gICAgICA/IGwgPiAxXG4gICAgICAgID8gZm4uYXBwbHkoY3R4LCBhcmd1bWVudHMpXG4gICAgICAgIDogZm4uY2FsbChjdHgsIGEpXG4gICAgICA6IGZuLmNhbGwoY3R4KVxuICB9XG4gIC8vIHJlY29yZCBvcmlnaW5hbCBmbiBsZW5ndGhcbiAgYm91bmRGbi5fbGVuZ3RoID0gZm4ubGVuZ3RoO1xuICByZXR1cm4gYm91bmRGblxufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKVxuICovXG5mdW5jdGlvbiBub29wIChhLCBiLCBjKSB7fVxuXG4vKipcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG4gKi9cbnZhciBubyA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7IHJldHVybiBmYWxzZTsgfTtcblxuLyoqXG4gKiBSZXR1cm4gc2FtZSB2YWx1ZVxuICovXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHN0YXRpYyBrZXlzIHN0cmluZyBmcm9tIGNvbXBpbGVyIG1vZHVsZXMuXG4gKi9cblxuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHtcbiAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBsb29zZUluZGV4T2YgKGFyciwgdmFsKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxvb3NlRXF1YWwoYXJyW2ldLCB2YWwpKSB7IHJldHVybiBpIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuLyoqXG4gKiBFbnN1cmUgYSBmdW5jdGlvbiBpcyBjYWxsZWQgb25seSBvbmNlLlxuICovXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgU1NSX0FUVFIgPSAnZGF0YS1zZXJ2ZXItcmVuZGVyZWQnO1xuXG52YXIgQVNTRVRfVFlQRVMgPSBbXG4gICdjb21wb25lbnQnLFxuICAnZGlyZWN0aXZlJyxcbiAgJ2ZpbHRlcidcbl07XG5cbnZhciBMSUZFQ1lDTEVfSE9PS1MgPSBbXG4gICdiZWZvcmVDcmVhdGUnLFxuICAnY3JlYXRlZCcsXG4gICdiZWZvcmVNb3VudCcsXG4gICdtb3VudGVkJyxcbiAgJ2JlZm9yZVVwZGF0ZScsXG4gICd1cGRhdGVkJyxcbiAgJ2JlZm9yZURlc3Ryb3knLFxuICAnZGVzdHJveWVkJyxcbiAgJ2FjdGl2YXRlZCcsXG4gICdkZWFjdGl2YXRlZCcsXG4gICdlcnJvckNhcHR1cmVkJ1xuXTtcblxuLyogICovXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgKi9cbiAgc2lsZW50OiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICovXG4gIHByb2R1Y3Rpb25UaXA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byByZWNvcmQgcGVyZlxuICAgKi9cbiAgcGVyZm9ybWFuY2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBFcnJvciBoYW5kbGVyIGZvciB3YXRjaGVyIGVycm9yc1xuICAgKi9cbiAgZXJyb3JIYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBXYXJuIGhhbmRsZXIgZm9yIHdhdGNoZXIgd2FybnNcbiAgICovXG4gIHdhcm5IYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBJZ25vcmUgY2VydGFpbiBjdXN0b20gZWxlbWVudHNcbiAgICovXG4gIGlnbm9yZWRFbGVtZW50czogW10sXG5cbiAgLyoqXG4gICAqIEN1c3RvbSB1c2VyIGtleSBhbGlhc2VzIGZvciB2LW9uXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAga2V5Q29kZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHVzZWQgYXMgYSBjb21wb25lbnRcbiAgICogcHJvcC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRBdHRyOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgYW4gdW5rbm93biBlbGVtZW50LlxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBpc1Vua25vd25FbGVtZW50OiBubyxcblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgKi9cbiAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxuICAgKi9cbiAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBtdXN0VXNlUHJvcDogbm8sXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IExJRkVDWUNMRV9IT09LU1xufSk7XG5cbi8qICAqL1xuXG4vKipcbiAqIENoZWNrIGlmIGEgc3RyaW5nIHN0YXJ0cyB3aXRoICQgb3IgX1xuICovXG5mdW5jdGlvbiBpc1Jlc2VydmVkIChzdHIpIHtcbiAgdmFyIGMgPSAoc3RyICsgJycpLmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiBjID09PSAweDI0IHx8IGMgPT09IDB4NUZcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZGVmIChvYmosIGtleSwgdmFsLCBlbnVtZXJhYmxlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIHZhbHVlOiB2YWwsXG4gICAgZW51bWVyYWJsZTogISFlbnVtZXJhYmxlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBQYXJzZSBzaW1wbGUgcGF0aC5cbiAqL1xudmFyIGJhaWxSRSA9IC9bXlxcdy4kXS87XG5mdW5jdGlvbiBwYXJzZVBhdGggKHBhdGgpIHtcbiAgaWYgKGJhaWxSRS50ZXN0KHBhdGgpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLicpO1xuICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghb2JqKSB7IHJldHVybiB9XG4gICAgICBvYmogPSBvYmpbc2VnbWVudHNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gb2JqXG4gIH1cbn1cblxuLyogICovXG5cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xuXG4vLyBGaXJlZm94IGhhcyBhIFwid2F0Y2hcIiBmdW5jdGlvbiBvbiBPYmplY3QucHJvdG90eXBlLi4uXG52YXIgbmF0aXZlV2F0Y2ggPSAoe30pLndhdGNoO1xuXG52YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5pZiAoaW5Ccm93c2VyKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxuLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlcjtcbnZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGRldGVjdCBwcmVzZW5jZSBvZiB2dWUtc2VydmVyLXJlbmRlcmVyIGFuZCBhdm9pZFxuICAgICAgLy8gV2VicGFjayBzaGltbWluZyB0aGUgcHJvY2Vzc1xuICAgICAgX2lzU2VydmVyID0gZ2xvYmFsWydwcm9jZXNzJ10uZW52LlZVRV9FTlYgPT09ICdzZXJ2ZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICBfaXNTZXJ2ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9pc1NlcnZlclxufTtcblxuLy8gZGV0ZWN0IGRldnRvb2xzXG52YXIgZGV2dG9vbHMgPSBpbkJyb3dzZXIgJiYgd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBpc05hdGl2ZSAoQ3Rvcikge1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KEN0b3IudG9TdHJpbmcoKSlcbn1cblxudmFyIGhhc1N5bWJvbCA9XG4gIHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFN5bWJvbCkgJiZcbiAgdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFJlZmxlY3Qub3duS2V5cyk7XG5cbnZhciBfU2V0O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovIC8vICRmbG93LWRpc2FibGUtbGluZVxuaWYgKHR5cGVvZiBTZXQgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFNldCkpIHtcbiAgLy8gdXNlIG5hdGl2ZSBTZXQgd2hlbiBhdmFpbGFibGUuXG4gIF9TZXQgPSBTZXQ7XG59IGVsc2Uge1xuICAvLyBhIG5vbi1zdGFuZGFyZCBTZXQgcG9seWZpbGwgdGhhdCBvbmx5IHdvcmtzIHdpdGggcHJpbWl0aXZlIGtleXMuXG4gIF9TZXQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNldCAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFtrZXldID09PSB0cnVlXG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoa2V5KSB7XG4gICAgICB0aGlzLnNldFtrZXldID0gdHJ1ZTtcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfTtcblxuICAgIHJldHVybiBTZXQ7XG4gIH0oKSk7XG59XG5cbi8qICAqL1xuXG52YXIgd2FybiA9IG5vb3A7XG52YXIgdGlwID0gbm9vcDtcbnZhciBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gKG5vb3ApOyAvLyB3b3JrIGFyb3VuZCBmbG93IGNoZWNrXG52YXIgZm9ybWF0Q29tcG9uZW50TmFtZSA9IChub29wKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xuICB2YXIgY2xhc3NpZnkgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHJcbiAgICAucmVwbGFjZShjbGFzc2lmeVJFLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50b1VwcGVyQ2FzZSgpOyB9KVxuICAgIC5yZXBsYWNlKC9bLV9dL2csICcnKTsgfTtcblxuICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7XG5cbiAgICBpZiAoY29uZmlnLndhcm5IYW5kbGVyKSB7XG4gICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7XG4gICAgfSBlbHNlIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSB3YXJuXTogXCIgKyBtc2cgKyB0cmFjZSkpO1xuICAgIH1cbiAgfTtcblxuICB0aXAgPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltWdWUgdGlwXTogXCIgKyBtc2cgKyAoXG4gICAgICAgIHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJ1xuICAgICAgKSk7XG4gICAgfVxuICB9O1xuXG4gIGZvcm1hdENvbXBvbmVudE5hbWUgPSBmdW5jdGlvbiAodm0sIGluY2x1ZGVGaWxlKSB7XG4gICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgcmV0dXJuICc8Um9vdD4nXG4gICAgfVxuICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHZtID09PSAnZnVuY3Rpb24nICYmIHZtLmNpZCAhPSBudWxsXG4gICAgICA/IHZtLm9wdGlvbnNcbiAgICAgIDogdm0uX2lzVnVlXG4gICAgICAgID8gdm0uJG9wdGlvbnMgfHwgdm0uY29uc3RydWN0b3Iub3B0aW9uc1xuICAgICAgICA6IHZtIHx8IHt9O1xuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlO1xuICAgIGlmICghbmFtZSAmJiBmaWxlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBmaWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLnZ1ZSQvKTtcbiAgICAgIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgKG5hbWUgPyAoXCI8XCIgKyAoY2xhc3NpZnkobmFtZSkpICsgXCI+XCIpIDogXCI8QW5vbnltb3VzPlwiKSArXG4gICAgICAoZmlsZSAmJiBpbmNsdWRlRmlsZSAhPT0gZmFsc2UgPyAoXCIgYXQgXCIgKyBmaWxlKSA6ICcnKVxuICAgIClcbiAgfTtcblxuICB2YXIgcmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgbikge1xuICAgIHZhciByZXMgPSAnJztcbiAgICB3aGlsZSAobikge1xuICAgICAgaWYgKG4gJSAyID09PSAxKSB7IHJlcyArPSBzdHI7IH1cbiAgICAgIGlmIChuID4gMSkgeyBzdHIgKz0gc3RyOyB9XG4gICAgICBuID4+PSAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH07XG5cbiAgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IGZ1bmN0aW9uICh2bSkge1xuICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkge1xuICAgICAgdmFyIHRyZWUgPSBbXTtcbiAgICAgIHZhciBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgbGFzdCA9IHRyZWVbdHJlZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAobGFzdC5jb25zdHJ1Y3RvciA9PT0gdm0uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSsrO1xuICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA+IDApIHtcbiAgICAgICAgICAgIHRyZWVbdHJlZS5sZW5ndGggLSAxXSA9IFtsYXN0LCBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2VdO1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJlZS5wdXNoKHZtKTtcbiAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuICdcXG5cXG5mb3VuZCBpblxcblxcbicgKyB0cmVlXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7IHJldHVybiAoXCJcIiArIChpID09PSAwID8gJy0tLT4gJyA6IHJlcGVhdCgnICcsIDUgKyBpICogMikpICsgKEFycmF5LmlzQXJyYXkodm0pXG4gICAgICAgICAgICA/ICgoZm9ybWF0Q29tcG9uZW50TmFtZSh2bVswXSkpICsgXCIuLi4gKFwiICsgKHZtWzFdKSArIFwiIHJlY3Vyc2l2ZSBjYWxscylcIilcbiAgICAgICAgICAgIDogZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpKTsgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCJcXG5cXG4oZm91bmQgaW4gXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIpXCIpXG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxuXG52YXIgdWlkJDEgPSAwO1xuXG4vKipcbiAqIEEgZGVwIGlzIGFuIG9ic2VydmFibGUgdGhhdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICogZGlyZWN0aXZlcyBzdWJzY3JpYmluZyB0byBpdC5cbiAqL1xudmFyIERlcCA9IGZ1bmN0aW9uIERlcCAoKSB7XG4gIHRoaXMuaWQgPSB1aWQkMSsrO1xuICB0aGlzLnN1YnMgPSBbXTtcbn07XG5cbkRlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24gYWRkU3ViIChzdWIpIHtcbiAgdGhpcy5zdWJzLnB1c2goc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUucmVtb3ZlU3ViID0gZnVuY3Rpb24gcmVtb3ZlU3ViIChzdWIpIHtcbiAgcmVtb3ZlKHRoaXMuc3Vicywgc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgaWYgKERlcC50YXJnZXQpIHtcbiAgICBEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTtcbiAgfVxufTtcblxuRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkgKCkge1xuICAvLyBzdGFiaWxpemUgdGhlIHN1YnNjcmliZXIgbGlzdCBmaXJzdFxuICB2YXIgc3VicyA9IHRoaXMuc3Vicy5zbGljZSgpO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHN1YnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgc3Vic1tpXS51cGRhdGUoKTtcbiAgfVxufTtcblxuLy8gdGhlIGN1cnJlbnQgdGFyZ2V0IHdhdGNoZXIgYmVpbmcgZXZhbHVhdGVkLlxuLy8gdGhpcyBpcyBnbG9iYWxseSB1bmlxdWUgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvbmx5IG9uZVxuLy8gd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQgYXQgYW55IHRpbWUuXG5EZXAudGFyZ2V0ID0gbnVsbDtcbnZhciB0YXJnZXRTdGFjayA9IFtdO1xuXG5mdW5jdGlvbiBwdXNoVGFyZ2V0IChfdGFyZ2V0KSB7XG4gIGlmIChEZXAudGFyZ2V0KSB7IHRhcmdldFN0YWNrLnB1c2goRGVwLnRhcmdldCk7IH1cbiAgRGVwLnRhcmdldCA9IF90YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHBvcFRhcmdldCAoKSB7XG4gIERlcC50YXJnZXQgPSB0YXJnZXRTdGFjay5wb3AoKTtcbn1cblxuLyogICovXG5cbnZhciBWTm9kZSA9IGZ1bmN0aW9uIFZOb2RlIChcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgdGV4dCxcbiAgZWxtLFxuICBjb250ZXh0LFxuICBjb21wb25lbnRPcHRpb25zLFxuICBhc3luY0ZhY3Rvcnlcbikge1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnRleHQgPSB0ZXh0O1xuICB0aGlzLmVsbSA9IGVsbTtcbiAgdGhpcy5ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5mbkNvbnRleHQgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5PcHRpb25zID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuU2NvcGVJZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5rZXkgPSBkYXRhICYmIGRhdGEua2V5O1xuICB0aGlzLmNvbXBvbmVudE9wdGlvbnMgPSBjb21wb25lbnRPcHRpb25zO1xuICB0aGlzLmNvbXBvbmVudEluc3RhbmNlID0gdW5kZWZpbmVkO1xuICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5yYXcgPSBmYWxzZTtcbiAgdGhpcy5pc1N0YXRpYyA9IGZhbHNlO1xuICB0aGlzLmlzUm9vdEluc2VydCA9IHRydWU7XG4gIHRoaXMuaXNDb21tZW50ID0gZmFsc2U7XG4gIHRoaXMuaXNDbG9uZWQgPSBmYWxzZTtcbiAgdGhpcy5pc09uY2UgPSBmYWxzZTtcbiAgdGhpcy5hc3luY0ZhY3RvcnkgPSBhc3luY0ZhY3Rvcnk7XG4gIHRoaXMuYXN5bmNNZXRhID0gdW5kZWZpbmVkO1xuICB0aGlzLmlzQXN5bmNQbGFjZWhvbGRlciA9IGZhbHNlO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgY2hpbGQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLy8gREVQUkVDQVRFRDogYWxpYXMgZm9yIGNvbXBvbmVudEluc3RhbmNlIGZvciBiYWNrd2FyZHMgY29tcGF0LlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnByb3RvdHlwZUFjY2Vzc29ycy5jaGlsZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmNvbXBvbmVudEluc3RhbmNlXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVk5vZGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxudmFyIGNyZWF0ZUVtcHR5Vk5vZGUgPSBmdW5jdGlvbiAodGV4dCkge1xuICBpZiAoIHRleHQgPT09IHZvaWQgMCApIHRleHQgPSAnJztcblxuICB2YXIgbm9kZSA9IG5ldyBWTm9kZSgpO1xuICBub2RlLnRleHQgPSB0ZXh0O1xuICBub2RlLmlzQ29tbWVudCA9IHRydWU7XG4gIHJldHVybiBub2RlXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUgKHZhbCkge1xuICByZXR1cm4gbmV3IFZOb2RlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFN0cmluZyh2YWwpKVxufVxuXG4vLyBvcHRpbWl6ZWQgc2hhbGxvdyBjbG9uZVxuLy8gdXNlZCBmb3Igc3RhdGljIG5vZGVzIGFuZCBzbG90IG5vZGVzIGJlY2F1c2UgdGhleSBtYXkgYmUgcmV1c2VkIGFjcm9zc1xuLy8gbXVsdGlwbGUgcmVuZGVycywgY2xvbmluZyB0aGVtIGF2b2lkcyBlcnJvcnMgd2hlbiBET00gbWFuaXB1bGF0aW9ucyByZWx5XG4vLyBvbiB0aGVpciBlbG0gcmVmZXJlbmNlLlxuZnVuY3Rpb24gY2xvbmVWTm9kZSAodm5vZGUsIGRlZXApIHtcbiAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIHZub2RlLmNoaWxkcmVuLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgY29tcG9uZW50T3B0aW9ucyxcbiAgICB2bm9kZS5hc3luY0ZhY3RvcnlcbiAgKTtcbiAgY2xvbmVkLm5zID0gdm5vZGUubnM7XG4gIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xuICBjbG9uZWQua2V5ID0gdm5vZGUua2V5O1xuICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50O1xuICBjbG9uZWQuZm5Db250ZXh0ID0gdm5vZGUuZm5Db250ZXh0O1xuICBjbG9uZWQuZm5PcHRpb25zID0gdm5vZGUuZm5PcHRpb25zO1xuICBjbG9uZWQuZm5TY29wZUlkID0gdm5vZGUuZm5TY29wZUlkO1xuICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuICBpZiAoZGVlcCkge1xuICAgIGlmICh2bm9kZS5jaGlsZHJlbikge1xuICAgICAgY2xvbmVkLmNoaWxkcmVuID0gY2xvbmVWTm9kZXModm5vZGUuY2hpbGRyZW4sIHRydWUpO1xuICAgIH1cbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucyAmJiBjb21wb25lbnRPcHRpb25zLmNoaWxkcmVuKSB7XG4gICAgICBjb21wb25lbnRPcHRpb25zLmNoaWxkcmVuID0gY2xvbmVWTm9kZXMoY29tcG9uZW50T3B0aW9ucy5jaGlsZHJlbiwgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjbG9uZWRcbn1cblxuZnVuY3Rpb24gY2xvbmVWTm9kZXMgKHZub2RlcywgZGVlcCkge1xuICB2YXIgbGVuID0gdm5vZGVzLmxlbmd0aDtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShsZW4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgcmVzW2ldID0gY2xvbmVWTm9kZSh2bm9kZXNbaV0sIGRlZXApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtbXG4gICdwdXNoJyxcbiAgJ3BvcCcsXG4gICdzaGlmdCcsXG4gICd1bnNoaWZ0JyxcbiAgJ3NwbGljZScsXG4gICdzb3J0JyxcbiAgJ3JldmVyc2UnXG5dLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdO1xuICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IgKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcbiAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgY2FzZSAndW5zaGlmdCc6XG4gICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3NwbGljZSc6XG4gICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKTtcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKGluc2VydGVkKSB7IG9iLm9ic2VydmVBcnJheShpbnNlcnRlZCk7IH1cbiAgICAvLyBub3RpZnkgY2hhbmdlXG4gICAgb2IuZGVwLm5vdGlmeSgpO1xuICAgIHJldHVybiByZXN1bHRcbiAgfSk7XG59KTtcblxuLyogICovXG5cbnZhciBhcnJheUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcnJheU1ldGhvZHMpO1xuXG4vKipcbiAqIEJ5IGRlZmF1bHQsIHdoZW4gYSByZWFjdGl2ZSBwcm9wZXJ0eSBpcyBzZXQsIHRoZSBuZXcgdmFsdWUgaXNcbiAqIGFsc28gY29udmVydGVkIHRvIGJlY29tZSByZWFjdGl2ZS4gSG93ZXZlciB3aGVuIHBhc3NpbmcgZG93biBwcm9wcyxcbiAqIHdlIGRvbid0IHdhbnQgdG8gZm9yY2UgY29udmVyc2lvbiBiZWNhdXNlIHRoZSB2YWx1ZSBtYXkgYmUgYSBuZXN0ZWQgdmFsdWVcbiAqIHVuZGVyIGEgZnJvemVuIGRhdGEgc3RydWN0dXJlLiBDb252ZXJ0aW5nIGl0IHdvdWxkIGRlZmVhdCB0aGUgb3B0aW1pemF0aW9uLlxuICovXG52YXIgb2JzZXJ2ZXJTdGF0ZSA9IHtcbiAgc2hvdWxkQ29udmVydDogdHJ1ZVxufTtcblxuLyoqXG4gKiBPYnNlcnZlciBjbGFzcyB0aGF0IGFyZSBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0YXJnZXRcbiAqIG9iamVjdCdzIHByb3BlcnR5IGtleXMgaW50byBnZXR0ZXIvc2V0dGVycyB0aGF0XG4gKiBjb2xsZWN0IGRlcGVuZGVuY2llcyBhbmQgZGlzcGF0Y2hlcyB1cGRhdGVzLlxuICovXG52YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiBPYnNlcnZlciAodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgdGhpcy52bUNvdW50ID0gMDtcbiAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHZhciBhdWdtZW50ID0gaGFzUHJvdG9cbiAgICAgID8gcHJvdG9BdWdtZW50XG4gICAgICA6IGNvcHlBdWdtZW50O1xuICAgIGF1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcywgYXJyYXlLZXlzKTtcbiAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YWxrKHZhbHVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXYWxrIHRocm91Z2ggZWFjaCBwcm9wZXJ0eSBhbmQgY29udmVydCB0aGVtIGludG9cbiAqIGdldHRlci9zZXR0ZXJzLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlblxuICogdmFsdWUgdHlwZSBpcyBPYmplY3QuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gd2FsayAob2JqKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUob2JqLCBrZXlzW2ldLCBvYmpba2V5c1tpXV0pO1xuICB9XG59O1xuXG4vKipcbiAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5ID0gZnVuY3Rpb24gb2JzZXJ2ZUFycmF5IChpdGVtcykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9ic2VydmUoaXRlbXNbaV0pO1xuICB9XG59O1xuXG4vLyBoZWxwZXJzXG5cbi8qKlxuICogQXVnbWVudCBhbiB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG59XG5cbi8qKlxuICogQXVnbWVudCBhbiB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ICYmXG4gICAgIWlzU2VydmVyUmVuZGVyaW5nKCkgJiZcbiAgICAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgaXNQbGFpbk9iamVjdCh2YWx1ZSkpICYmXG4gICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkgJiZcbiAgICAhdmFsdWUuX2lzVnVlXG4gICkge1xuICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKTtcbiAgfVxuICBpZiAoYXNSb290RGF0YSAmJiBvYikge1xuICAgIG9iLnZtQ291bnQrKztcbiAgfVxuICByZXR1cm4gb2Jcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiBhbiBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlIChcbiAgb2JqLFxuICBrZXksXG4gIHZhbCxcbiAgY3VzdG9tU2V0dGVyLFxuICBzaGFsbG93XG4pIHtcbiAgdmFyIGRlcCA9IG5ldyBEZXAoKTtcblxuICB2YXIgcHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcbiAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnR5LmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGNhdGVyIGZvciBwcmUtZGVmaW5lZCBnZXR0ZXIvc2V0dGVyc1xuICB2YXIgZ2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuZ2V0O1xuICB2YXIgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0O1xuXG4gIHZhciBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZSh2YWwpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlR2V0dGVyICgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICBkZXAuZGVwZW5kKCk7XG4gICAgICAgIGlmIChjaGlsZE9iKSB7XG4gICAgICAgICAgY2hpbGRPYi5kZXAuZGVwZW5kKCk7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBkZXBlbmRBcnJheSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gcmVhY3RpdmVTZXR0ZXIgKG5ld1ZhbCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKG5ld1ZhbCA9PT0gdmFsdWUgfHwgKG5ld1ZhbCAhPT0gbmV3VmFsICYmIHZhbHVlICE9PSB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY3VzdG9tU2V0dGVyKSB7XG4gICAgICAgIGN1c3RvbVNldHRlcigpO1xuICAgICAgfVxuICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICBzZXR0ZXIuY2FsbChvYmosIG5ld1ZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBuZXdWYWw7XG4gICAgICB9XG4gICAgICBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZShuZXdWYWwpO1xuICAgICAgZGVwLm5vdGlmeSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG4gKiB0cmlnZ2VycyBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0XG4gKiBhbHJlYWR5IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWwpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0Lmxlbmd0aCA9IE1hdGgubWF4KHRhcmdldC5sZW5ndGgsIGtleSk7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEsIHZhbCk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmIChrZXkgaW4gdGFyZ2V0ICYmICEoa2V5IGluIE9iamVjdC5wcm90b3R5cGUpKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGFkZGluZyByZWFjdGl2ZSBwcm9wZXJ0aWVzIHRvIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLidcbiAgICApO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoIW9iKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGRlZmluZVJlYWN0aXZlKG9iLnZhbHVlLCBrZXksIHZhbCk7XG4gIG9iLmRlcC5ub3RpZnkoKTtcbiAgcmV0dXJuIHZhbFxufVxuXG4vKipcbiAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIGRlbCAodGFyZ2V0LCBrZXkpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEpO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGRlbGV0aW5nIHByb3BlcnRpZXMgb24gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnLSBqdXN0IHNldCBpdCB0byBudWxsLidcbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICghaGFzT3duKHRhcmdldCwga2V5KSkge1xuICAgIHJldHVyblxuICB9XG4gIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgaWYgKCFvYikge1xuICAgIHJldHVyblxuICB9XG4gIG9iLmRlcC5ub3RpZnkoKTtcbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRlcGVuZGVuY2llcyBvbiBhcnJheSBlbGVtZW50cyB3aGVuIHRoZSBhcnJheSBpcyB0b3VjaGVkLCBzaW5jZVxuICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG4gKi9cbmZ1bmN0aW9uIGRlcGVuZEFycmF5ICh2YWx1ZSkge1xuICBmb3IgKHZhciBlID0gKHZvaWQgMCksIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZSA9IHZhbHVlW2ldO1xuICAgIGUgJiYgZS5fX29iX18gJiYgZS5fX29iX18uZGVwLmRlcGVuZCgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICBkZXBlbmRBcnJheShlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZVxuICogaG93IHRvIG1lcmdlIGEgcGFyZW50IG9wdGlvbiB2YWx1ZSBhbmQgYSBjaGlsZCBvcHRpb25cbiAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICovXG52YXIgc3RyYXRzID0gY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcblxuLyoqXG4gKiBPcHRpb25zIHdpdGggcmVzdHJpY3Rpb25zXG4gKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0cmF0cy5lbCA9IHN0cmF0cy5wcm9wc0RhdGEgPSBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCwgdm0sIGtleSkge1xuICAgIGlmICghdm0pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwib3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBpbnN0YW5jZSBcIiArXG4gICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZClcbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuICBpZiAoIWZyb20pIHsgcmV0dXJuIHRvIH1cbiAgdmFyIGtleSwgdG9WYWwsIGZyb21WYWw7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZnJvbSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgdG9WYWwgPSB0b1trZXldO1xuICAgIGZyb21WYWwgPSBmcm9tW2tleV07XG4gICAgaWYgKCFoYXNPd24odG8sIGtleSkpIHtcbiAgICAgIHNldCh0bywga2V5LCBmcm9tVmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodG9WYWwpICYmIGlzUGxhaW5PYmplY3QoZnJvbVZhbCkpIHtcbiAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIERhdGFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhT3JGbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG4gICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICBpZiAoIXBhcmVudFZhbCkge1xuICAgICAgcmV0dXJuIGNoaWxkVmFsXG4gICAgfVxuICAgIC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCxcbiAgICAvLyB3ZSBuZWVkIHRvIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgICAvLyBtZXJnZWQgcmVzdWx0IG9mIGJvdGggZnVuY3Rpb25zLi4uIG5vIG5lZWQgdG9cbiAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2VcbiAgICAvLyBpdCBoYXMgdG8gYmUgYSBmdW5jdGlvbiB0byBwYXNzIHByZXZpb3VzIG1lcmdlcy5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuICgpIHtcbiAgICAgIHJldHVybiBtZXJnZURhdGEoXG4gICAgICAgIHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodGhpcywgdGhpcykgOiBjaGlsZFZhbCxcbiAgICAgICAgdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogcGFyZW50VmFsXG4gICAgICApXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbiAoKSB7XG4gICAgICAvLyBpbnN0YW5jZSBtZXJnZVxuICAgICAgdmFyIGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IGNoaWxkVmFsO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBwYXJlbnRWYWw7XG4gICAgICBpZiAoaW5zdGFuY2VEYXRhKSB7XG4gICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF0YVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5zdHJhdHMuZGF0YSA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgaWYgKGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnVGhlIFwiZGF0YVwiIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArXG4gICAgICAgICdkZWZpbml0aW9ucy4nLFxuICAgICAgICB2bVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsKVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pXG59O1xuXG4vKipcbiAqIEhvb2tzIGFuZCBwcm9wcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VIb29rIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbFxuKSB7XG4gIHJldHVybiBjaGlsZFZhbFxuICAgID8gcGFyZW50VmFsXG4gICAgICA/IHBhcmVudFZhbC5jb25jYXQoY2hpbGRWYWwpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXG4gICAgICAgID8gY2hpbGRWYWxcbiAgICAgICAgOiBbY2hpbGRWYWxdXG4gICAgOiBwYXJlbnRWYWxcbn1cblxuTElGRUNZQ0xFX0hPT0tTLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgc3RyYXRzW2hvb2tdID0gbWVyZ2VIb29rO1xufSk7XG5cbi8qKlxuICogQXNzZXRzXG4gKlxuICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICogb3B0aW9ucyBhbmQgcGFyZW50IG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQXNzZXRzIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKTtcbiAgaWYgKGNoaWxkVmFsKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgICByZXR1cm4gZXh0ZW5kKHJlcywgY2hpbGRWYWwpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbkFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7XG59KTtcblxuLyoqXG4gKiBXYXRjaGVycy5cbiAqXG4gKiBXYXRjaGVycyBoYXNoZXMgc2hvdWxkIG5vdCBvdmVyd3JpdGUgb25lXG4gKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAqL1xuc3RyYXRzLndhdGNoID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgLy8gd29yayBhcm91bmQgRmlyZWZveCdzIE9iamVjdC5wcm90b3R5cGUud2F0Y2guLi5cbiAgaWYgKHBhcmVudFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgcGFyZW50VmFsID0gdW5kZWZpbmVkOyB9XG4gIGlmIChjaGlsZFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgY2hpbGRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0ge307XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGZvciAodmFyIGtleSQxIGluIGNoaWxkVmFsKSB7XG4gICAgdmFyIHBhcmVudCA9IHJldFtrZXkkMV07XG4gICAgdmFyIGNoaWxkID0gY2hpbGRWYWxba2V5JDFdO1xuICAgIGlmIChwYXJlbnQgJiYgIUFycmF5LmlzQXJyYXkocGFyZW50KSkge1xuICAgICAgcGFyZW50ID0gW3BhcmVudF07XG4gICAgfVxuICAgIHJldFtrZXkkMV0gPSBwYXJlbnRcbiAgICAgID8gcGFyZW50LmNvbmNhdChjaGlsZClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZCkgPyBjaGlsZCA6IFtjaGlsZF07XG4gIH1cbiAgcmV0dXJuIHJldFxufTtcblxuLyoqXG4gKiBPdGhlciBvYmplY3QgaGFzaGVzLlxuICovXG5zdHJhdHMucHJvcHMgPVxuc3RyYXRzLm1ldGhvZHMgPVxuc3RyYXRzLmluamVjdCA9XG5zdHJhdHMuY29tcHV0ZWQgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICBpZiAoY2hpbGRWYWwgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBpZiAoY2hpbGRWYWwpIHsgZXh0ZW5kKHJldCwgY2hpbGRWYWwpOyB9XG4gIHJldHVybiByZXRcbn07XG5zdHJhdHMucHJvdmlkZSA9IG1lcmdlRGF0YU9yRm47XG5cbi8qKlxuICogRGVmYXVsdCBzdHJhdGVneS5cbiAqL1xudmFyIGRlZmF1bHRTdHJhdCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIHJldHVybiBjaGlsZFZhbCA9PT0gdW5kZWZpbmVkXG4gICAgPyBwYXJlbnRWYWxcbiAgICA6IGNoaWxkVmFsXG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGNvbXBvbmVudCBuYW1lc1xuICovXG5mdW5jdGlvbiBjaGVja0NvbXBvbmVudHMgKG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMuY29tcG9uZW50cykge1xuICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ29tcG9uZW50TmFtZSAobmFtZSkge1xuICBpZiAoIS9eW2EtekEtWl1bXFx3LV0qJC8udGVzdChuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBjb21wb25lbnQgbmFtZTogXCInICsgbmFtZSArICdcIi4gQ29tcG9uZW50IG5hbWVzICcgK1xuICAgICAgJ2NhbiBvbmx5IGNvbnRhaW4gYWxwaGFudW1lcmljIGNoYXJhY3RlcnMgYW5kIHRoZSBoeXBoZW4sICcgK1xuICAgICAgJ2FuZCBtdXN0IHN0YXJ0IHdpdGggYSBsZXR0ZXIuJ1xuICAgICk7XG4gIH1cbiAgaWYgKGlzQnVpbHRJblRhZyhuYW1lKSB8fCBjb25maWcuaXNSZXNlcnZlZFRhZyhuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCAnICtcbiAgICAgICdpZDogJyArIG5hbWVcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogRW5zdXJlIGFsbCBwcm9wcyBvcHRpb24gc3ludGF4IGFyZSBub3JtYWxpemVkIGludG8gdGhlXG4gKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyAob3B0aW9ucywgdm0pIHtcbiAgdmFyIHByb3BzID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKCFwcm9wcykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBpLCB2YWwsIG5hbWU7XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFsID0gcHJvcHNbaV07XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbmFtZSA9IGNhbWVsaXplKHZhbCk7XG4gICAgICAgIHJlc1tuYW1lXSA9IHsgdHlwZTogbnVsbCB9O1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oJ3Byb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIHZhbCA9IHByb3BzW2tleV07XG4gICAgICBuYW1lID0gY2FtZWxpemUoa2V5KTtcbiAgICAgIHJlc1tuYW1lXSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IHZhbFxuICAgICAgICA6IHsgdHlwZTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcInByb3BzXFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHByb3BzKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICBvcHRpb25zLnByb3BzID0gcmVzO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhbGwgaW5qZWN0aW9ucyBpbnRvIE9iamVjdC1iYXNlZCBmb3JtYXRcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0IChvcHRpb25zLCB2bSkge1xuICB2YXIgaW5qZWN0ID0gb3B0aW9ucy5pbmplY3Q7XG4gIGlmICghaW5qZWN0KSB7IHJldHVybiB9XG4gIHZhciBub3JtYWxpemVkID0gb3B0aW9ucy5pbmplY3QgPSB7fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5qZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBub3JtYWxpemVkW2luamVjdFtpXV0gPSB7IGZyb206IGluamVjdFtpXSB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5qZWN0KSB7XG4gICAgICB2YXIgdmFsID0gaW5qZWN0W2tleV07XG4gICAgICBub3JtYWxpemVkW2tleV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyBleHRlbmQoeyBmcm9tOiBrZXkgfSwgdmFsKVxuICAgICAgICA6IHsgZnJvbTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcImluamVjdFxcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShpbmplY3QpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTm9ybWFsaXplIHJhdyBmdW5jdGlvbiBkaXJlY3RpdmVzIGludG8gb2JqZWN0IGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyAob3B0aW9ucykge1xuICB2YXIgZGlycyA9IG9wdGlvbnMuZGlyZWN0aXZlcztcbiAgaWYgKGRpcnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGlycykge1xuICAgICAgdmFyIGRlZiA9IGRpcnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGRpcnNba2V5XSA9IHsgYmluZDogZGVmLCB1cGRhdGU6IGRlZiB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRPYmplY3RUeXBlIChuYW1lLCB2YWx1ZSwgdm0pIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiOiBleHBlY3RlZCBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUodmFsdWUpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9wdGlvbiBvYmplY3RzIGludG8gYSBuZXcgb25lLlxuICogQ29yZSB1dGlsaXR5IHVzZWQgaW4gYm90aCBpbnN0YW50aWF0aW9uIGFuZCBpbmhlcml0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VPcHRpb25zIChcbiAgcGFyZW50LFxuICBjaGlsZCxcbiAgdm1cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrQ29tcG9uZW50cyhjaGlsZCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGNoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2hpbGQgPSBjaGlsZC5vcHRpb25zO1xuICB9XG5cbiAgbm9ybWFsaXplUHJvcHMoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplSW5qZWN0KGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZURpcmVjdGl2ZXMoY2hpbGQpO1xuICB2YXIgZXh0ZW5kc0Zyb20gPSBjaGlsZC5leHRlbmRzO1xuICBpZiAoZXh0ZW5kc0Zyb20pIHtcbiAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBleHRlbmRzRnJvbSwgdm0pO1xuICB9XG4gIGlmIChjaGlsZC5taXhpbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLm1peGluc1tpXSwgdm0pO1xuICAgIH1cbiAgfVxuICB2YXIgb3B0aW9ucyA9IHt9O1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBwYXJlbnQpIHtcbiAgICBtZXJnZUZpZWxkKGtleSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gY2hpbGQpIHtcbiAgICBpZiAoIWhhc093bihwYXJlbnQsIGtleSkpIHtcbiAgICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWVyZ2VGaWVsZCAoa2V5KSB7XG4gICAgdmFyIHN0cmF0ID0gc3RyYXRzW2tleV0gfHwgZGVmYXVsdFN0cmF0O1xuICAgIG9wdGlvbnNba2V5XSA9IHN0cmF0KHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSwga2V5KTtcbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG4vKipcbiAqIFJlc29sdmUgYW4gYXNzZXQuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYmVjYXVzZSBjaGlsZCBpbnN0YW5jZXMgbmVlZCBhY2Nlc3NcbiAqIHRvIGFzc2V0cyBkZWZpbmVkIGluIGl0cyBhbmNlc3RvciBjaGFpbi5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0IChcbiAgb3B0aW9ucyxcbiAgdHlwZSxcbiAgaWQsXG4gIHdhcm5NaXNzaW5nXG4pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGFzc2V0cyA9IG9wdGlvbnNbdHlwZV07XG4gIC8vIGNoZWNrIGxvY2FsIHJlZ2lzdHJhdGlvbiB2YXJpYXRpb25zIGZpcnN0XG4gIGlmIChoYXNPd24oYXNzZXRzLCBpZCkpIHsgcmV0dXJuIGFzc2V0c1tpZF0gfVxuICB2YXIgY2FtZWxpemVkSWQgPSBjYW1lbGl6ZShpZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBjYW1lbGl6ZWRJZCkpIHsgcmV0dXJuIGFzc2V0c1tjYW1lbGl6ZWRJZF0gfVxuICB2YXIgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBQYXNjYWxDYXNlSWQpKSB7IHJldHVybiBhc3NldHNbUGFzY2FsQ2FzZUlkXSB9XG4gIC8vIGZhbGxiYWNrIHRvIHByb3RvdHlwZSBjaGFpblxuICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuTWlzc2luZyAmJiAhcmVzKSB7XG4gICAgd2FybihcbiAgICAgICdGYWlsZWQgdG8gcmVzb2x2ZSAnICsgdHlwZS5zbGljZSgwLCAtMSkgKyAnOiAnICsgaWQsXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gIHZhciB2YWx1ZSA9IHByb3BzRGF0YVtrZXldO1xuICAvLyBoYW5kbGUgYm9vbGVhbiBwcm9wc1xuICBpZiAoaXNUeXBlKEJvb2xlYW4sIHByb3AudHlwZSkpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKCFpc1R5cGUoU3RyaW5nLCBwcm9wLnR5cGUpICYmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSkge1xuICAgICAgdmFsdWUgPSB0cnVlO1xuICAgIH1cbiAgfVxuICAvLyBjaGVjayBkZWZhdWx0IHZhbHVlXG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsdWUgPSBnZXRQcm9wRGVmYXVsdFZhbHVlKHZtLCBwcm9wLCBrZXkpO1xuICAgIC8vIHNpbmNlIHRoZSBkZWZhdWx0IHZhbHVlIGlzIGEgZnJlc2ggY29weSxcbiAgICAvLyBtYWtlIHN1cmUgdG8gb2JzZXJ2ZSBpdC5cbiAgICB2YXIgcHJldlNob3VsZENvbnZlcnQgPSBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQ7XG4gICAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gdHJ1ZTtcbiAgICBvYnNlcnZlKHZhbHVlKTtcbiAgICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSBwcmV2U2hvdWxkQ29udmVydDtcbiAgfVxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIC8vIHNraXAgdmFsaWRhdGlvbiBmb3Igd2VleCByZWN5Y2xlLWxpc3QgY2hpbGQgY29tcG9uZW50IHByb3BzXG4gICAgIShmYWxzZSAmJiBpc09iamVjdCh2YWx1ZSkgJiYgKCdAYmluZGluZycgaW4gdmFsdWUpKVxuICApIHtcbiAgICBhc3NlcnRQcm9wKHByb3AsIGtleSwgdmFsdWUsIHZtLCBhYnNlbnQpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUgKHZtLCBwcm9wLCBrZXkpIHtcbiAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICBpZiAoIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHZhciBkZWYgPSBwcm9wLmRlZmF1bHQ7XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tZmFjdG9yeSBkZWZhdWx0cyBmb3IgT2JqZWN0ICYgQXJyYXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNPYmplY3QoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG4gIGlmICghdmFsaWQpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIuXCIgK1xuICAgICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSkgK1xuICAgICAgXCIsIGdvdCBcIiArICh0b1Jhd1R5cGUodmFsdWUpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sKSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICB2YXIgdmFsaWQ7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzVHlwZSAodHlwZSwgZm4pIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGZuKSkge1xuICAgIHJldHVybiBnZXRUeXBlKGZuKSA9PT0gZ2V0VHlwZSh0eXBlKVxuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBmbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChnZXRUeXBlKGZuW2ldKSA9PT0gZ2V0VHlwZSh0eXBlKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBoYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAodm0pIHtcbiAgICB2YXIgY3VyID0gdm07XG4gICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgaWYgKGhvb2tzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGNhcHR1cmUgPSBob29rc1tpXS5jYWxsKGN1ciwgZXJyLCB2bSwgaW5mbykgPT09IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBnbG9iYWxIYW5kbGVFcnJvcihlLCBjdXIsICdlcnJvckNhcHR1cmVkIGhvb2snKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZ2xvYmFsSGFuZGxlRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGdsb2JhbEhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChjb25maWcuZXJyb3JIYW5kbGVyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZXJyLCB2bSwgaW5mbylcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG4vKiBnbG9iYWxzIE1lc3NhZ2VDaGFubmVsICovXG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIGJvdGggbWljcm8gYW5kIG1hY3JvIHRhc2tzLlxuLy8gSW4gPCAyLjQgd2UgdXNlZCBtaWNybyB0YXNrcyBldmVyeXdoZXJlLCBidXQgdGhlcmUgYXJlIHNvbWUgc2NlbmFyaW9zIHdoZXJlXG4vLyBtaWNybyB0YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmVzIGluIGJldHdlZW4gc3VwcG9zZWRseVxuLy8gc2VxdWVudGlhbCBldmVudHMgKGUuZy4gIzQ1MjEsICM2NjkwKSBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWVcbi8vIGV2ZW50ICgjNjU2NikuIEhvd2V2ZXIsIHVzaW5nIG1hY3JvIHRhc2tzIGV2ZXJ5d2hlcmUgYWxzbyBoYXMgc3VidGxlIHByb2JsZW1zXG4vLyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnQgKGUuZy4gIzY4MTMsIG91dC1pbiB0cmFuc2l0aW9ucykuXG4vLyBIZXJlIHdlIHVzZSBtaWNybyB0YXNrIGJ5IGRlZmF1bHQsIGJ1dCBleHBvc2UgYSB3YXkgdG8gZm9yY2UgbWFjcm8gdGFzayB3aGVuXG4vLyBuZWVkZWQgKGUuZy4gaW4gZXZlbnQgaGFuZGxlcnMgYXR0YWNoZWQgYnkgdi1vbikuXG52YXIgbWljcm9UaW1lckZ1bmM7XG52YXIgbWFjcm9UaW1lckZ1bmM7XG52YXIgdXNlTWFjcm9UYXNrID0gZmFsc2U7XG5cbi8vIERldGVybWluZSAobWFjcm8pIFRhc2sgZGVmZXIgaW1wbGVtZW50YXRpb24uXG4vLyBUZWNobmljYWxseSBzZXRJbW1lZGlhdGUgc2hvdWxkIGJlIHRoZSBpZGVhbCBjaG9pY2UsIGJ1dCBpdCdzIG9ubHkgYXZhaWxhYmxlXG4vLyBpbiBJRS4gVGhlIG9ubHkgcG9seWZpbGwgdGhhdCBjb25zaXN0ZW50bHkgcXVldWVzIHRoZSBjYWxsYmFjayBhZnRlciBhbGwgRE9NXG4vLyBldmVudHMgdHJpZ2dlcmVkIGluIHRoZSBzYW1lIGxvb3AgaXMgYnkgdXNpbmcgTWVzc2FnZUNoYW5uZWwuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIG1hY3JvVGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldEltbWVkaWF0ZShmbHVzaENhbGxiYWNrcyk7XG4gIH07XG59IGVsc2UgaWYgKHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCAhPT0gJ3VuZGVmaW5lZCcgJiYgKFxuICBpc05hdGl2ZShNZXNzYWdlQ2hhbm5lbCkgfHxcbiAgLy8gUGhhbnRvbUpTXG4gIE1lc3NhZ2VDaGFubmVsLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE1lc3NhZ2VDaGFubmVsQ29uc3RydWN0b3JdJ1xuKSkge1xuICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICB2YXIgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZmx1c2hDYWxsYmFja3M7XG4gIG1hY3JvVGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHBvcnQucG9zdE1lc3NhZ2UoMSk7XG4gIH07XG59IGVsc2Uge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBtYWNyb1RpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgfTtcbn1cblxuLy8gRGV0ZXJtaW5lIE1pY3JvVGFzayBkZWZlciBpbXBsZW1lbnRhdGlvbi5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0LCAkZmxvdy1kaXNhYmxlLWxpbmUgKi9cbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgbWljcm9UaW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcC50aGVuKGZsdXNoQ2FsbGJhY2tzKTtcbiAgICAvLyBpbiBwcm9ibGVtYXRpYyBVSVdlYlZpZXdzLCBQcm9taXNlLnRoZW4gZG9lc24ndCBjb21wbGV0ZWx5IGJyZWFrLCBidXRcbiAgICAvLyBpdCBjYW4gZ2V0IHN0dWNrIGluIGEgd2VpcmQgc3RhdGUgd2hlcmUgY2FsbGJhY2tzIGFyZSBwdXNoZWQgaW50byB0aGVcbiAgICAvLyBtaWNyb3Rhc2sgcXVldWUgYnV0IHRoZSBxdWV1ZSBpc24ndCBiZWluZyBmbHVzaGVkLCB1bnRpbCB0aGUgYnJvd3NlclxuICAgIC8vIG5lZWRzIHRvIGRvIHNvbWUgb3RoZXIgd29yaywgZS5nLiBoYW5kbGUgYSB0aW1lci4gVGhlcmVmb3JlIHdlIGNhblxuICAgIC8vIFwiZm9yY2VcIiB0aGUgbWljcm90YXNrIHF1ZXVlIHRvIGJlIGZsdXNoZWQgYnkgYWRkaW5nIGFuIGVtcHR5IHRpbWVyLlxuICAgIGlmIChpc0lPUykgeyBzZXRUaW1lb3V0KG5vb3ApOyB9XG4gIH07XG59IGVsc2Uge1xuICAvLyBmYWxsYmFjayB0byBtYWNyb1xuICBtaWNyb1RpbWVyRnVuYyA9IG1hY3JvVGltZXJGdW5jO1xufVxuXG4vKipcbiAqIFdyYXAgYSBmdW5jdGlvbiBzbyB0aGF0IGlmIGFueSBjb2RlIGluc2lkZSB0cmlnZ2VycyBzdGF0ZSBjaGFuZ2UsXG4gKiB0aGUgY2hhbmdlcyBhcmUgcXVldWVkIHVzaW5nIGEgVGFzayBpbnN0ZWFkIG9mIGEgTWljcm9UYXNrLlxuICovXG5mdW5jdGlvbiB3aXRoTWFjcm9UYXNrIChmbikge1xuICByZXR1cm4gZm4uX3dpdGhUYXNrIHx8IChmbi5fd2l0aFRhc2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgdXNlTWFjcm9UYXNrID0gdHJ1ZTtcbiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB1c2VNYWNyb1Rhc2sgPSBmYWxzZTtcbiAgICByZXR1cm4gcmVzXG4gIH0pXG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrIChjYiwgY3R4KSB7XG4gIHZhciBfcmVzb2x2ZTtcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbChjdHgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCBjdHgsICduZXh0VGljaycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX3Jlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlKGN0eCk7XG4gICAgfVxuICB9KTtcbiAgaWYgKCFwZW5kaW5nKSB7XG4gICAgcGVuZGluZyA9IHRydWU7XG4gICAgaWYgKHVzZU1hY3JvVGFzaykge1xuICAgICAgbWFjcm9UaW1lckZ1bmMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWljcm9UaW1lckZ1bmMoKTtcbiAgICB9XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cbnZhciBpbml0UHJveHk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgK1xuICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgJ3JlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyByZWFjdGl2ZSwgJyArXG4gICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgJ2luaXRpYWxpemluZyB0aGUgcHJvcGVydHkuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sI0RlY2xhcmluZy1SZWFjdGl2ZS1Qcm9wZXJ0aWVzLicsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciBoYXNQcm94eSA9XG4gICAgdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIFByb3h5LnRvU3RyaW5nKCkubWF0Y2goL25hdGl2ZSBjb2RlLyk7XG5cbiAgaWYgKGhhc1Byb3h5KSB7XG4gICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCcpO1xuICAgIGNvbmZpZy5rZXlDb2RlcyA9IG5ldyBQcm94eShjb25maWcua2V5Q29kZXMsIHtcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQnVpbHRJbk1vZGlmaWVyKGtleSkpIHtcbiAgICAgICAgICB3YXJuKChcIkF2b2lkIG92ZXJ3cml0aW5nIGJ1aWx0LWluIG1vZGlmaWVyIGluIGNvbmZpZy5rZXlDb2RlczogLlwiICsga2V5KSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaGFzSGFuZGxlciA9IHtcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHZhciBoYXMgPSBrZXkgaW4gdGFyZ2V0O1xuICAgICAgdmFyIGlzQWxsb3dlZCA9IGFsbG93ZWRHbG9iYWxzKGtleSkgfHwga2V5LmNoYXJBdCgwKSA9PT0gJ18nO1xuICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuICAgICAgICB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzIHx8ICFpc0FsbG93ZWRcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldEhhbmRsZXIgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKHRhcmdldCwga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbnZhciBtYXJrO1xudmFyIG1lYXN1cmU7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwZXJmICYmXG4gICAgcGVyZi5tYXJrICYmXG4gICAgcGVyZi5tZWFzdXJlICYmXG4gICAgcGVyZi5jbGVhck1hcmtzICYmXG4gICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICkge1xuICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTtcbiAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKTtcbiAgICB9O1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zKSB7XG4gIGZ1bmN0aW9uIGludm9rZXIgKCkge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmbnMgPSBpbnZva2VyLmZucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZm5zLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjbG9uZWRbaV0uYXBwbHkobnVsbCwgYXJndW1lbnRzJDEpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGZucy5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50Lm9uY2UsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICB9XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIGlmIChjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW5zdXJlQ3RvciAoY29tcCwgYmFzZSkge1xuICBpZiAoXG4gICAgY29tcC5fX2VzTW9kdWxlIHx8XG4gICAgKGhhc1N5bWJvbCAmJiBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKVxuICApIHtcbiAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICB9XG4gIHJldHVybiBpc09iamVjdChjb21wKVxuICAgID8gYmFzZS5leHRlbmQoY29tcClcbiAgICA6IGNvbXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlciAoXG4gIGZhY3RvcnksXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICB2YXIgbm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgbm9kZS5hc3luY0ZhY3RvcnkgPSBmYWN0b3J5O1xuICBub2RlLmFzeW5jTWV0YSA9IHsgZGF0YTogZGF0YSwgY29udGV4dDogY29udGV4dCwgY2hpbGRyZW46IGNoaWxkcmVuLCB0YWc6IHRhZyB9O1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuICBmYWN0b3J5LFxuICBiYXNlQ3RvcixcbiAgY29udGV4dFxuKSB7XG4gIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZXJyb3JDb21wXG4gIH1cblxuICBpZiAoaXNEZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5yZXNvbHZlZFxuICB9XG5cbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmxvYWRpbmcpICYmIGlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LmNvbnRleHRzKSkge1xuICAgIC8vIGFscmVhZHkgcGVuZGluZ1xuICAgIGZhY3RvcnkuY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29udGV4dHMgPSBmYWN0b3J5LmNvbnRleHRzID0gW2NvbnRleHRdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcblxuICAgIHZhciBmb3JjZVJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY29udGV4dHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvbnRleHRzW2ldLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVzb2x2ZSA9IG9uY2UoZnVuY3Rpb24gKHJlcykge1xuICAgICAgLy8gY2FjaGUgcmVzb2x2ZWRcbiAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSBlbnN1cmVDdG9yKHJlcywgYmFzZUN0b3IpO1xuICAgICAgLy8gaW52b2tlIGNhbGxiYWNrcyBvbmx5IGlmIHRoaXMgaXMgbm90IGEgc3luY2hyb25vdXMgcmVzb2x2ZVxuICAgICAgLy8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xuICAgICAgICBmb3JjZVJlbmRlcigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAodHlwZW9mIHJlcy50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vICgpID0+IFByb21pc2VcbiAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKHJlcy5jb21wb25lbnQpICYmIHR5cGVvZiByZXMuY29tcG9uZW50LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVzLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHtcbiAgICAgICAgICBmYWN0b3J5LmVycm9yQ29tcCA9IGVuc3VyZUN0b3IocmVzLmVycm9yLCBiYXNlQ3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7XG4gICAgICAgICAgZmFjdG9yeS5sb2FkaW5nQ29tcCA9IGVuc3VyZUN0b3IocmVzLmxvYWRpbmcsIGJhc2VDdG9yKTtcbiAgICAgICAgICBpZiAocmVzLmRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xuICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgICAgICAgICAgID8gKFwidGltZW91dCAoXCIgKyAocmVzLnRpbWVvdXQpICsgXCJtcylcIilcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICA6IGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNBc3luY1BsYWNlaG9sZGVyIChub2RlKSB7XG4gIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiAoaXNEZWYoYy5jb21wb25lbnRPcHRpb25zKSB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYykpKSB7XG4gICAgICAgIHJldHVybiBjXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50cyAodm0pIHtcbiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG4gIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMpO1xuICB9XG59XG5cbnZhciB0YXJnZXQ7XG5cbmZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuLCBvbmNlKSB7XG4gIGlmIChvbmNlKSB7XG4gICAgdGFyZ2V0LiRvbmNlKGV2ZW50LCBmbik7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgdm0pO1xuICB0YXJnZXQgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGV2ZW50c01peGluIChWdWUpIHtcbiAgdmFyIGhvb2tSRSA9IC9eaG9vazovO1xuICBWdWUucHJvdG90eXBlLiRvbiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB0aGlzJDEuJG9uKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cbiAgICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuICAgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuICAgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGZ1bmN0aW9uIG9uICgpIHtcbiAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKTtcbiAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBvbi5mbiA9IGZuO1xuICAgIHZtLiRvbihldmVudCwgb24pO1xuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9mZiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYWxsXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBhcnJheSBvZiBldmVudHNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRoaXMkMS4kb2ZmKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgaWYgKGZuKSB7XG4gICAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXG4gICAgICB2YXIgY2I7XG4gICAgICB2YXIgaSQxID0gY2JzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpJDEtLSkge1xuICAgICAgICBjYiA9IGNic1tpJDFdO1xuICAgICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICAgIGNicy5zcGxpY2UoaSQxLCAxKTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiB2bS5fZXZlbnRzW2xvd2VyQ2FzZUV2ZW50XSkge1xuICAgICAgICB0aXAoXG4gICAgICAgICAgXCJFdmVudCBcXFwiXCIgKyBsb3dlckNhc2VFdmVudCArIFwiXFxcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiIGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgXCIgK1xuICAgICAgICAgIFwidi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIFwiICtcbiAgICAgICAgICBcIllvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIChoeXBoZW5hdGUoZXZlbnQpKSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICBjYnMgPSBjYnMubGVuZ3RoID4gMSA/IHRvQXJyYXkoY2JzKSA6IGNicztcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2JzW2ldLmFwcGx5KHZtLCBhcmdzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIHZhciBzbG90cyA9IHt9O1xuICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIHNsb3RzXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICB2YXIgZGF0YSA9IGNoaWxkLmRhdGE7XG4gICAgLy8gcmVtb3ZlIHNsb3QgYXR0cmlidXRlIGlmIHRoZSBub2RlIGlzIHJlc29sdmVkIGFzIGEgVnVlIHNsb3Qgbm9kZVxuICAgIGlmIChkYXRhICYmIGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy5zbG90KSB7XG4gICAgICBkZWxldGUgZGF0YS5hdHRycy5zbG90O1xuICAgIH1cbiAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcbiAgICAvLyBzYW1lIGNvbnRleHQuXG4gICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZuQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgIGRhdGEgJiYgZGF0YS5zbG90ICE9IG51bGxcbiAgICApIHtcbiAgICAgIHZhciBuYW1lID0gZGF0YS5zbG90O1xuICAgICAgdmFyIHNsb3QgPSAoc2xvdHNbbmFtZV0gfHwgKHNsb3RzW25hbWVdID0gW10pKTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuIHx8IFtdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIChzbG90cy5kZWZhdWx0IHx8IChzbG90cy5kZWZhdWx0ID0gW10pKS5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXG4gIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gIHJldHVybiAobm9kZS5pc0NvbW1lbnQgJiYgIW5vZGUuYXN5bmNGYWN0b3J5KSB8fCBub2RlLnRleHQgPT09ICcgJ1xufVxuXG5mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gIHJlc1xuKSB7XG4gIHJlcyA9IHJlcyB8fCB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnNbaV0pKSB7XG4gICAgICByZXNvbHZlU2NvcGVkU2xvdHMoZm5zW2ldLCByZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNbZm5zW2ldLmtleV0gPSBmbnNbaV0uZm47XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG52YXIgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGluaXRMaWZlY3ljbGUgKHZtKSB7XG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG5cbiAgLy8gbG9jYXRlIGZpcnN0IG5vbi1hYnN0cmFjdCBwYXJlbnRcbiAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBpZiAocGFyZW50ICYmICFvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgd2hpbGUgKHBhcmVudC4kb3B0aW9ucy5hYnN0cmFjdCAmJiBwYXJlbnQuJHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIHBhcmVudC4kY2hpbGRyZW4ucHVzaCh2bSk7XG4gIH1cblxuICB2bS4kcGFyZW50ID0gcGFyZW50O1xuICB2bS4kcm9vdCA9IHBhcmVudCA/IHBhcmVudC4kcm9vdCA6IHZtO1xuXG4gIHZtLiRjaGlsZHJlbiA9IFtdO1xuICB2bS4kcmVmcyA9IHt9O1xuXG4gIHZtLl93YXRjaGVyID0gbnVsbDtcbiAgdm0uX2luYWN0aXZlID0gbnVsbDtcbiAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gIHZtLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgdm0uX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNNb3VudGVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZVVwZGF0ZScpO1xuICAgIH1cbiAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgdmFyIHByZXZBY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlO1xuICAgIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18oXG4gICAgICAgIHZtLiRlbCwgdm5vZGUsIGh5ZHJhdGluZywgZmFsc2UgLyogcmVtb3ZlT25seSAqLyxcbiAgICAgICAgdm0uJG9wdGlvbnMuX3BhcmVudEVsbSxcbiAgICAgICAgdm0uJG9wdGlvbnMuX3JlZkVsbVxuICAgICAgKTtcbiAgICAgIC8vIG5vIG5lZWQgZm9yIHRoZSByZWYgbm9kZXMgYWZ0ZXIgaW5pdGlhbCBwYXRjaFxuICAgICAgLy8gdGhpcyBwcmV2ZW50cyBrZWVwaW5nIGEgZGV0YWNoZWQgRE9NIHRyZWUgaW4gbWVtb3J5ICgjNTg1MSlcbiAgICAgIHZtLiRvcHRpb25zLl9wYXJlbnRFbG0gPSB2bS4kb3B0aW9ucy5fcmVmRWxtID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIG51bGwsIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG5cbiAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7XG4gICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gIH1cbiAgcmV0dXJuIHZtXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkQ29tcG9uZW50IChcbiAgdm0sXG4gIHByb3BzRGF0YSxcbiAgbGlzdGVuZXJzLFxuICBwYXJlbnRWbm9kZSxcbiAgcmVuZGVyQ2hpbGRyZW5cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW5cbiAgdmFyIGhhc0NoaWxkcmVuID0gISEoXG4gICAgcmVuZGVyQ2hpbGRyZW4gfHwgICAgICAgICAgICAgICAvLyBoYXMgbmV3IHN0YXRpYyBzbG90c1xuICAgIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiB8fCAgLy8gaGFzIG9sZCBzdGF0aWMgc2xvdHNcbiAgICBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzIHx8IC8vIGhhcyBuZXcgc2NvcGVkIHNsb3RzXG4gICAgdm0uJHNjb3BlZFNsb3RzICE9PSBlbXB0eU9iamVjdCAvLyBoYXMgb2xkIHNjb3BlZCBzbG90c1xuICApO1xuXG4gIHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuICB2bS4kdm5vZGUgPSBwYXJlbnRWbm9kZTsgLy8gdXBkYXRlIHZtJ3MgcGxhY2Vob2xkZXIgbm9kZSB3aXRob3V0IHJlLXJlbmRlclxuXG4gIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcbiAgICB2bS5fdm5vZGUucGFyZW50ID0gcGFyZW50Vm5vZGU7XG4gIH1cbiAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG5cbiAgLy8gdXBkYXRlICRhdHRycyBhbmQgJGxpc3RlbmVycyBoYXNoXG4gIC8vIHRoZXNlIGFyZSBhbHNvIHJlYWN0aXZlIHNvIHRoZXkgbWF5IHRyaWdnZXIgY2hpbGQgdXBkYXRlIGlmIHRoZSBjaGlsZFxuICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlclxuICB2bS4kYXR0cnMgPSAocGFyZW50Vm5vZGUuZGF0YSAmJiBwYXJlbnRWbm9kZS5kYXRhLmF0dHJzKSB8fCBlbXB0eU9iamVjdDtcbiAgdm0uJGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcblxuICAvLyB1cGRhdGUgcHJvcHNcbiAgaWYgKHByb3BzRGF0YSAmJiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IGZhbHNlO1xuICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcztcbiAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHZtLiRvcHRpb25zLnByb3BzLCBwcm9wc0RhdGEsIHZtKTtcbiAgICB9XG4gICAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gdHJ1ZTtcbiAgICAvLyBrZWVwIGEgY29weSBvZiByYXcgcHJvcHNEYXRhXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICB9XG5cbiAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gICAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTtcbiAgfVxuICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxuICBpZiAoaGFzQ2hpbGRyZW4pIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIHZhciBoYW5kbGVycyA9IHZtLiRvcHRpb25zW2hvb2tdO1xuICBpZiAoaGFuZGxlcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaGFuZGxlcnNbaV0uY2FsbCh2bSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoaG9vayArIFwiIGhvb2tcIikpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuXG52YXIgTUFYX1VQREFURV9DT1VOVCA9IDEwMDtcblxudmFyIHF1ZXVlID0gW107XG52YXIgYWN0aXZhdGVkQ2hpbGRyZW4gPSBbXTtcbnZhciBoYXMgPSB7fTtcbnZhciBjaXJjdWxhciA9IHt9O1xudmFyIHdhaXRpbmcgPSBmYWxzZTtcbnZhciBmbHVzaGluZyA9IGZhbHNlO1xudmFyIGluZGV4ID0gMDtcblxuLyoqXG4gKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0U2NoZWR1bGVyU3RhdGUgKCkge1xuICBpbmRleCA9IHF1ZXVlLmxlbmd0aCA9IGFjdGl2YXRlZENoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIGhhcyA9IHt9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNpcmN1bGFyID0ge307XG4gIH1cbiAgd2FpdGluZyA9IGZsdXNoaW5nID0gZmFsc2U7XG59XG5cbi8qKlxuICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICBmbHVzaGluZyA9IHRydWU7XG4gIHZhciB3YXRjaGVyLCBpZDtcblxuICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6XG4gIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcbiAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkKVxuICAvLyAyLiBBIGNvbXBvbmVudCdzIHVzZXIgd2F0Y2hlcnMgYXJlIHJ1biBiZWZvcmUgaXRzIHJlbmRlciB3YXRjaGVyIChiZWNhdXNlXG4gIC8vICAgIHVzZXIgd2F0Y2hlcnMgYXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSByZW5kZXIgd2F0Y2hlcilcbiAgLy8gMy4gSWYgYSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB3YXRjaGVyIHJ1bixcbiAgLy8gICAgaXRzIHdhdGNoZXJzIGNhbiBiZSBza2lwcGVkLlxuICBxdWV1ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG5cbiAgLy8gZG8gbm90IGNhY2hlIGxlbmd0aCBiZWNhdXNlIG1vcmUgd2F0Y2hlcnMgbWlnaHQgYmUgcHVzaGVkXG4gIC8vIGFzIHdlIHJ1biBleGlzdGluZyB3YXRjaGVyc1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBxdWV1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICB3YXRjaGVyID0gcXVldWVbaW5kZXhdO1xuICAgIGlkID0gd2F0Y2hlci5pZDtcbiAgICBoYXNbaWRdID0gbnVsbDtcbiAgICB3YXRjaGVyLnJ1bigpO1xuICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBoYXNbaWRdICE9IG51bGwpIHtcbiAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IE1BWF9VUERBVEVfQ09VTlQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICB3YXRjaGVyLnVzZXJcbiAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgICA6IFwiaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLlwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3YXRjaGVyLnZtXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8ga2VlcCBjb3BpZXMgb2YgcG9zdCBxdWV1ZXMgYmVmb3JlIHJlc2V0dGluZyBzdGF0ZVxuICB2YXIgYWN0aXZhdGVkUXVldWUgPSBhY3RpdmF0ZWRDaGlsZHJlbi5zbGljZSgpO1xuICB2YXIgdXBkYXRlZFF1ZXVlID0gcXVldWUuc2xpY2UoKTtcblxuICByZXNldFNjaGVkdWxlclN0YXRlKCk7XG5cbiAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXG4gIGNhbGxBY3RpdmF0ZWRIb29rcyhhY3RpdmF0ZWRRdWV1ZSk7XG4gIGNhbGxVcGRhdGVkSG9va3ModXBkYXRlZFF1ZXVlKTtcblxuICAvLyBkZXZ0b29sIGhvb2tcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIHZhciBpID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIHdhdGNoZXIgPSBxdWV1ZVtpXTtcbiAgICB2YXIgdm0gPSB3YXRjaGVyLnZtO1xuICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBRdWV1ZSBhIGtlcHQtYWxpdmUgY29tcG9uZW50IHRoYXQgd2FzIGFjdGl2YXRlZCBkdXJpbmcgcGF0Y2guXG4gKiBUaGUgcXVldWUgd2lsbCBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIGVudGlyZSB0cmVlIGhhcyBiZWVuIHBhdGNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50ICh2bSkge1xuICAvLyBzZXR0aW5nIF9pbmFjdGl2ZSB0byBmYWxzZSBoZXJlIHNvIHRoYXQgYSByZW5kZXIgZnVuY3Rpb24gY2FuXG4gIC8vIHJlbHkgb24gY2hlY2tpbmcgd2hldGhlciBpdCdzIGluIGFuIGluYWN0aXZlIHRyZWUgKGUuZy4gcm91dGVyLXZpZXcpXG4gIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICBhY3RpdmF0ZWRDaGlsZHJlbi5wdXNoKHZtKTtcbn1cblxuZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzIChxdWV1ZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgcXVldWVbaV0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHF1ZXVlW2ldLCB0cnVlIC8qIHRydWUgKi8pO1xuICB9XG59XG5cbi8qKlxuICogUHVzaCBhIHdhdGNoZXIgaW50byB0aGUgd2F0Y2hlciBxdWV1ZS5cbiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICogcHVzaGVkIHdoZW4gdGhlIHF1ZXVlIGlzIGJlaW5nIGZsdXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xuICBpZiAoaGFzW2lkXSA9PSBudWxsKSB7XG4gICAgaGFzW2lkXSA9IHRydWU7XG4gICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuICAgICAgLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cbiAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpID4gaW5kZXggJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnNwbGljZShpICsgMSwgMCwgd2F0Y2hlcik7XG4gICAgfVxuICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuICAgIGlmICghd2FpdGluZykge1xuICAgICAgd2FpdGluZyA9IHRydWU7XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciB1aWQkMiA9IDA7XG5cbi8qKlxuICogQSB3YXRjaGVyIHBhcnNlcyBhbiBleHByZXNzaW9uLCBjb2xsZWN0cyBkZXBlbmRlbmNpZXMsXG4gKiBhbmQgZmlyZXMgY2FsbGJhY2sgd2hlbiB0aGUgZXhwcmVzc2lvbiB2YWx1ZSBjaGFuZ2VzLlxuICogVGhpcyBpcyB1c2VkIGZvciBib3RoIHRoZSAkd2F0Y2goKSBhcGkgYW5kIGRpcmVjdGl2ZXMuXG4gKi9cbnZhciBXYXRjaGVyID0gZnVuY3Rpb24gV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBjYixcbiAgb3B0aW9ucyxcbiAgaXNSZW5kZXJXYXRjaGVyXG4pIHtcbiAgdGhpcy52bSA9IHZtO1xuICBpZiAoaXNSZW5kZXJXYXRjaGVyKSB7XG4gICAgdm0uX3dhdGNoZXIgPSB0aGlzO1xuICB9XG4gIHZtLl93YXRjaGVycy5wdXNoKHRoaXMpO1xuICAvLyBvcHRpb25zXG4gIGlmIChvcHRpb25zKSB7XG4gICAgdGhpcy5kZWVwID0gISFvcHRpb25zLmRlZXA7XG4gICAgdGhpcy51c2VyID0gISFvcHRpb25zLnVzZXI7XG4gICAgdGhpcy5sYXp5ID0gISFvcHRpb25zLmxhenk7XG4gICAgdGhpcy5zeW5jID0gISFvcHRpb25zLnN5bmM7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5jYiA9IGNiO1xuICB0aGlzLmlkID0gKyt1aWQkMjsgLy8gdWlkIGZvciBiYXRjaGluZ1xuICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gIHRoaXMuZGVwcyA9IFtdO1xuICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMuZXhwcmVzc2lvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICA/IGV4cE9yRm4udG9TdHJpbmcoKVxuICAgIDogJyc7XG4gIC8vIHBhcnNlIGV4cHJlc3Npb24gZm9yIGdldHRlclxuICBpZiAodHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLmdldHRlciA9IGV4cE9yRm47XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBwYXJzZVBhdGgoZXhwT3JGbik7XG4gICAgaWYgKCF0aGlzLmdldHRlcikge1xuICAgICAgdGhpcy5nZXR0ZXIgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgd2F0Y2hpbmcgcGF0aDogXFxcIlwiICsgZXhwT3JGbiArIFwiXFxcIiBcIiArXG4gICAgICAgICdXYXRjaGVyIG9ubHkgYWNjZXB0cyBzaW1wbGUgZG90LWRlbGltaXRlZCBwYXRocy4gJyArXG4gICAgICAgICdGb3IgZnVsbCBjb250cm9sLCB1c2UgYSBmdW5jdGlvbiBpbnN0ZWFkLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuICB0aGlzLnZhbHVlID0gdGhpcy5sYXp5XG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHRoaXMuZ2V0KCk7XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSBnZXR0ZXIsIGFuZCByZS1jb2xsZWN0IGRlcGVuZGVuY2llcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0ICgpIHtcbiAgcHVzaFRhcmdldCh0aGlzKTtcbiAgdmFyIHZhbHVlO1xuICB2YXIgdm0gPSB0aGlzLnZtO1xuICB0cnkge1xuICAgIHZhbHVlID0gdGhpcy5nZXR0ZXIuY2FsbCh2bSwgdm0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIChcImdldHRlciBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgLy8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXG4gICAgLy8gZGVwZW5kZW5jaWVzIGZvciBkZWVwIHdhdGNoaW5nXG4gICAgaWYgKHRoaXMuZGVlcCkge1xuICAgICAgdHJhdmVyc2UodmFsdWUpO1xuICAgIH1cbiAgICBwb3BUYXJnZXQoKTtcbiAgICB0aGlzLmNsZWFudXBEZXBzKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59O1xuXG4vKipcbiAqIEFkZCBhIGRlcGVuZGVuY3kgdG8gdGhpcyBkaXJlY3RpdmUuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmFkZERlcCA9IGZ1bmN0aW9uIGFkZERlcCAoZGVwKSB7XG4gIHZhciBpZCA9IGRlcC5pZDtcbiAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoaWQpKSB7XG4gICAgdGhpcy5uZXdEZXBJZHMuYWRkKGlkKTtcbiAgICB0aGlzLm5ld0RlcHMucHVzaChkZXApO1xuICAgIGlmICghdGhpcy5kZXBJZHMuaGFzKGlkKSkge1xuICAgICAgZGVwLmFkZFN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuY2xlYW51cERlcHMgPSBmdW5jdGlvbiBjbGVhbnVwRGVwcyAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGRlcCA9IHRoaXMkMS5kZXBzW2ldO1xuICAgIGlmICghdGhpcyQxLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkge1xuICAgICAgZGVwLnJlbW92ZVN1Yih0aGlzJDEpO1xuICAgIH1cbiAgfVxuICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gIHRoaXMuZGVwSWRzID0gdGhpcy5uZXdEZXBJZHM7XG4gIHRoaXMubmV3RGVwSWRzID0gdG1wO1xuICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICB0bXAgPSB0aGlzLmRlcHM7XG4gIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwcztcbiAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICB0aGlzLm5ld0RlcHMubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlciBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodGhpcy5sYXp5KSB7XG4gICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgdGhpcy5ydW4oKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmIChcbiAgICAgIHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XG4gICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbiAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgIC8vIGhhdmUgbXV0YXRlZC5cbiAgICAgIGlzT2JqZWN0KHZhbHVlKSB8fFxuICAgICAgdGhpcy5kZWVwXG4gICAgKSB7XG4gICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdGhpcy52bSwgKFwiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdGhpcyQxLmRlcHNbaV0uZGVwZW5kKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gdGVhcmRvd24gKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzJDEuZGVwc1tpXS5yZW1vdmVTdWIodGhpcyQxKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBub29wLFxuICBzZXQ6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHByb3h5ICh0YXJnZXQsIHNvdXJjZUtleSwga2V5KSB7XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7XG4gICAgcmV0dXJuIHRoaXNbc291cmNlS2V5XVtrZXldXG4gIH07XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7XG4gICAgdGhpc1tzb3VyY2VLZXldW2tleV0gPSB2YWw7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICB2bS5fd2F0Y2hlcnMgPSBbXTtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucztcbiAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICBpZiAob3B0cy5tZXRob2RzKSB7IGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOyB9XG4gIGlmIChvcHRzLmRhdGEpIHtcbiAgICBpbml0RGF0YSh2bSk7XG4gIH0gZWxzZSB7XG4gICAgb2JzZXJ2ZSh2bS5fZGF0YSA9IHt9LCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xuICB9XG4gIGlmIChvcHRzLmNvbXB1dGVkKSB7IGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7IH1cbiAgaWYgKG9wdHMud2F0Y2ggJiYgb3B0cy53YXRjaCAhPT0gbmF0aXZlV2F0Y2gpIHtcbiAgICBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzT3B0aW9ucykge1xuICB2YXIgcHJvcHNEYXRhID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bS5fcHJvcHMgPSB7fTtcbiAgLy8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXlcbiAgLy8gaW5zdGVhZCBvZiBkeW5hbWljIG9iamVjdCBrZXkgZW51bWVyYXRpb24uXG4gIHZhciBrZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzID0gW107XG4gIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG4gIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IGlzUm9vdDtcbiAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB2YXIgdmFsdWUgPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wc09wdGlvbnMsIHByb3BzRGF0YSwgdm0pO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICBpZiAoaXNSZXNlcnZlZEF0dHJpYnV0ZShoeXBoZW5hdGVkS2V5KSB8fFxuICAgICAgICAgIGNvbmZpZy5pc1Jlc2VydmVkQXR0cihoeXBoZW5hdGVkS2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIlxcXCJcIiArIGh5cGhlbmF0ZWRLZXkgKyBcIlxcXCIgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUgYW5kIGNhbm5vdCBiZSB1c2VkIGFzIGNvbXBvbmVudCBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZGVmaW5lUmVhY3RpdmUocHJvcHMsIGtleSwgdmFsdWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHZtLiRwYXJlbnQgJiYgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGEgcHJvcCBkaXJlY3RseSBzaW5jZSB0aGUgdmFsdWUgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwYXJlbnQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiSW5zdGVhZCwgdXNlIGEgZGF0YSBvciBjb21wdXRlZCBwcm9wZXJ0eSBiYXNlZCBvbiB0aGUgcHJvcCdzIFwiICtcbiAgICAgICAgICAgIFwidmFsdWUuIFByb3AgYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWZpbmVSZWFjdGl2ZShwcm9wcywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIC8vIHN0YXRpYyBwcm9wcyBhcmUgYWxyZWFkeSBwcm94aWVkIG9uIHRoZSBjb21wb25lbnQncyBwcm90b3R5cGVcbiAgICAvLyBkdXJpbmcgVnVlLmV4dGVuZCgpLiBXZSBvbmx5IG5lZWQgdG8gcHJveHkgcHJvcHMgZGVmaW5lZCBhdFxuICAgIC8vIGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBwcm94eSh2bSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzT3B0aW9ucykgbG9vcCgga2V5ICk7XG4gIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcXG4nICtcbiAgICAgICdodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9jb21wb25lbnRzLmh0bWwjZGF0YS1NdXN0LUJlLWEtRnVuY3Rpb24nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIlRoZSBkYXRhIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlY2xhcmVkIGFzIGEgcHJvcC4gXCIgK1xuICAgICAgICBcIlVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICBwcm94eSh2bSwgXCJfZGF0YVwiLCBrZXkpO1xuICAgIH1cbiAgfVxuICAvLyBvYnNlcnZlIGRhdGFcbiAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhIChkYXRhLCB2bSkge1xuICB0cnkge1xuICAgIHJldHVybiBkYXRhLmNhbGwodm0sIHZtKVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwiZGF0YSgpXCIpO1xuICAgIHJldHVybiB7fVxuICB9XG59XG5cbnZhciBjb21wdXRlZFdhdGNoZXJPcHRpb25zID0geyBsYXp5OiB0cnVlIH07XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCAodm0sIGNvbXB1dGVkKSB7XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICB2YXIgd2F0Y2hlcnMgPSB2bS5fY29tcHV0ZWRXYXRjaGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGp1c3QgZ2V0dGVycyBkdXJpbmcgU1NSXG4gIHZhciBpc1NTUiA9IGlzU2VydmVyUmVuZGVyaW5nKCk7XG5cbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgdmFyIHVzZXJEZWYgPSBjb21wdXRlZFtrZXldO1xuICAgIHZhciBnZXR0ZXIgPSB0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJyA/IHVzZXJEZWYgOiB1c2VyRGVmLmdldDtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBnZXR0ZXIgPT0gbnVsbCkge1xuICAgICAgd2FybihcbiAgICAgICAgKFwiR2V0dGVyIGlzIG1pc3NpbmcgZm9yIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIi5cIiksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghaXNTU1IpIHtcbiAgICAgIC8vIGNyZWF0ZSBpbnRlcm5hbCB3YXRjaGVyIGZvciB0aGUgY29tcHV0ZWQgcHJvcGVydHkuXG4gICAgICB3YXRjaGVyc1trZXldID0gbmV3IFdhdGNoZXIoXG4gICAgICAgIHZtLFxuICAgICAgICBnZXR0ZXIgfHwgbm9vcCxcbiAgICAgICAgbm9vcCxcbiAgICAgICAgY29tcHV0ZWRXYXRjaGVyT3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBjb21wb25lbnQtZGVmaW5lZCBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBhbHJlYWR5IGRlZmluZWQgb24gdGhlXG4gICAgLy8gY29tcG9uZW50IHByb3RvdHlwZS4gV2Ugb25seSBuZWVkIHRvIGRlZmluZSBjb21wdXRlZCBwcm9wZXJ0aWVzIGRlZmluZWRcbiAgICAvLyBhdCBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgZGVmaW5lQ29tcHV0ZWQodm0sIGtleSwgdXNlckRlZik7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoa2V5IGluIHZtLiRkYXRhKSB7XG4gICAgICAgIHdhcm4oKFwiVGhlIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlZmluZWQgaW4gZGF0YS5cIiksIHZtKTtcbiAgICAgIH0gZWxzZSBpZiAodm0uJG9wdGlvbnMucHJvcHMgJiYga2V5IGluIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgICAgIHdhcm4oKFwiVGhlIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlZmluZWQgYXMgYSBwcm9wLlwiKSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZpbmVDb21wdXRlZCAoXG4gIHRhcmdldCxcbiAga2V5LFxuICB1c2VyRGVmXG4pIHtcbiAgdmFyIHNob3VsZENhY2hlID0gIWlzU2VydmVyUmVuZGVyaW5nKCk7XG4gIGlmICh0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBzaG91bGRDYWNoZVxuICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICA6IHVzZXJEZWY7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IG5vb3A7XG4gIH0gZWxzZSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHVzZXJEZWYuZ2V0XG4gICAgICA/IHNob3VsZENhY2hlICYmIHVzZXJEZWYuY2FjaGUgIT09IGZhbHNlXG4gICAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgICA6IHVzZXJEZWYuZ2V0XG4gICAgICA6IG5vb3A7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IHVzZXJEZWYuc2V0XG4gICAgICA/IHVzZXJEZWYuc2V0XG4gICAgICA6IG5vb3A7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPT09IG5vb3ApIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgKFwiQ29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBhc3NpZ25lZCB0byBidXQgaXQgaGFzIG5vIHNldHRlci5cIiksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXB1dGVkR2V0dGVyIChrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICB2YXIgd2F0Y2hlciA9IHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnMgJiYgdGhpcy5fY29tcHV0ZWRXYXRjaGVyc1trZXldO1xuICAgIGlmICh3YXRjaGVyKSB7XG4gICAgICBpZiAod2F0Y2hlci5kaXJ0eSkge1xuICAgICAgICB3YXRjaGVyLmV2YWx1YXRlKCk7XG4gICAgICB9XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICB3YXRjaGVyLmRlcGVuZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdhdGNoZXIudmFsdWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdE1ldGhvZHMgKHZtLCBtZXRob2RzKSB7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAobWV0aG9kc1trZXldID09IG51bGwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFuIHVuZGVmaW5lZCB2YWx1ZSBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoKGtleSBpbiB2bSkgJiYgaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIGFuIGV4aXN0aW5nIFZ1ZSBpbnN0YW5jZSBtZXRob2QuIFwiICtcbiAgICAgICAgICBcIkF2b2lkIGRlZmluaW5nIGNvbXBvbmVudCBtZXRob2RzIHRoYXQgc3RhcnQgd2l0aCBfIG9yICQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdm1ba2V5XSA9IG1ldGhvZHNba2V5XSA9PSBudWxsID8gbm9vcCA6IGJpbmQobWV0aG9kc1trZXldLCB2bSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFdhdGNoICh2bSwgd2F0Y2gpIHtcbiAgZm9yICh2YXIga2V5IGluIHdhdGNoKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB3YXRjaFtrZXldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAoXG4gIHZtLFxuICBrZXlPckZuLFxuICBoYW5kbGVyLFxuICBvcHRpb25zXG4pIHtcbiAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHtcbiAgICBvcHRpb25zID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gaGFuZGxlci5oYW5kbGVyO1xuICB9XG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHtcbiAgICBoYW5kbGVyID0gdm1baGFuZGxlcl07XG4gIH1cbiAgcmV0dXJuIHZtLiR3YXRjaChrZXlPckZuLCBoYW5kbGVyLCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0XG4gIC8vIHdoZW4gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBzbyB3ZSBoYXZlIHRvIHByb2NlZHVyYWxseSBidWlsZCB1cFxuICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gIHZhciBkYXRhRGVmID0ge307XG4gIGRhdGFEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGF0YSB9O1xuICB2YXIgcHJvcHNEZWYgPSB7fTtcbiAgcHJvcHNEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJvcHMgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uIChuZXdEYXRhKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgcmVwbGFjaW5nIGluc3RhbmNlIHJvb3QgJGRhdGEuICcgK1xuICAgICAgICAnVXNlIG5lc3RlZCBkYXRhIHByb3BlcnRpZXMgaW5zdGVhZC4nLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gICAgcHJvcHNEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcIiRwcm9wcyBpcyByZWFkb25seS5cIiwgdGhpcyk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRkYXRhJywgZGF0YURlZik7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHByb3BzJywgcHJvcHNEZWYpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHNldCA9IHNldDtcbiAgVnVlLnByb3RvdHlwZS4kZGVsZXRlID0gZGVsO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHdhdGNoID0gZnVuY3Rpb24gKFxuICAgIGV4cE9yRm4sXG4gICAgY2IsXG4gICAgb3B0aW9uc1xuICApIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChpc1BsYWluT2JqZWN0KGNiKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKVxuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnVzZXIgPSB0cnVlO1xuICAgIHZhciB3YXRjaGVyID0gbmV3IFdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5pbW1lZGlhdGUpIHtcbiAgICAgIGNiLmNhbGwodm0sIHdhdGNoZXIudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gdW53YXRjaEZuICgpIHtcbiAgICAgIHdhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UHJvdmlkZSAodm0pIHtcbiAgdmFyIHByb3ZpZGUgPSB2bS4kb3B0aW9ucy5wcm92aWRlO1xuICBpZiAocHJvdmlkZSkge1xuICAgIHZtLl9wcm92aWRlZCA9IHR5cGVvZiBwcm92aWRlID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHByb3ZpZGUuY2FsbCh2bSlcbiAgICAgIDogcHJvdmlkZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0SW5qZWN0aW9ucyAodm0pIHtcbiAgdmFyIHJlc3VsdCA9IHJlc29sdmVJbmplY3Qodm0uJG9wdGlvbnMuaW5qZWN0LCB2bSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSBmYWxzZTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUodm0sIGtleSwgcmVzdWx0W2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUluamVjdCAoaW5qZWN0LCB2bSkge1xuICBpZiAoaW5qZWN0KSB7XG4gICAgLy8gaW5qZWN0IGlzIDphbnkgYmVjYXVzZSBmbG93IGlzIG5vdCBzbWFydCBlbm91Z2ggdG8gZmlndXJlIG91dCBjYWNoZWRcbiAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgICAgPyBSZWZsZWN0Lm93bktleXMoaW5qZWN0KS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihpbmplY3QsIGtleSkuZW51bWVyYWJsZVxuICAgICAgfSlcbiAgICAgIDogT2JqZWN0LmtleXMoaW5qZWN0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICB2YXIgcHJvdmlkZUtleSA9IGluamVjdFtrZXldLmZyb207XG4gICAgICB2YXIgc291cmNlID0gdm07XG4gICAgICB3aGlsZSAoc291cmNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UuX3Byb3ZpZGVkICYmIHByb3ZpZGVLZXkgaW4gc291cmNlLl9wcm92aWRlZCkge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gc291cmNlLl9wcm92aWRlZFtwcm92aWRlS2V5XTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZSA9IHNvdXJjZS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiBpbmplY3Rba2V5XSkge1xuICAgICAgICAgIHZhciBwcm92aWRlRGVmYXVsdCA9IGluamVjdFtrZXldLmRlZmF1bHQ7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB0eXBlb2YgcHJvdmlkZURlZmF1bHQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gcHJvdmlkZURlZmF1bHQuY2FsbCh2bSlcbiAgICAgICAgICAgIDogcHJvdmlkZURlZmF1bHQ7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oKFwiSW5qZWN0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBub3QgZm91bmRcIiksIHZtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyB2LWZvciBsaXN0cy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTGlzdCAoXG4gIHZhbCxcbiAgcmVuZGVyXG4pIHtcbiAgdmFyIHJldCwgaSwgbCwga2V5cywga2V5O1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpIHx8IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbC5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGwgPSB2YWwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIodmFsW2ldLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdmFsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcihpICsgMSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICByZXQgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxba2V5XSwga2V5LCBpKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzRGVmKHJldCkpIHtcbiAgICAocmV0KS5faXNWTGlzdCA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2ssXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICB2YXIgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHsgLy8gc2NvcGVkIHNsb3RcbiAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNPYmplY3QoYmluZE9iamVjdCkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnc2xvdCB2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCcsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgIH1cbiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2s7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsb3ROb2RlcyA9IHRoaXMuJHNsb3RzW25hbWVdO1xuICAgIC8vIHdhcm4gZHVwbGljYXRlIHNsb3QgdXNhZ2VcbiAgICBpZiAoc2xvdE5vZGVzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzbG90Tm9kZXMuX3JlbmRlcmVkKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJEdXBsaWNhdGUgcHJlc2VuY2Ugb2Ygc2xvdCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGZvdW5kIGluIHRoZSBzYW1lIHJlbmRlciB0cmVlIFwiICtcbiAgICAgICAgICBcIi0gdGhpcyB3aWxsIGxpa2VseSBjYXVzZSByZW5kZXIgZXJyb3JzLlwiLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHNsb3ROb2Rlcy5fcmVuZGVyZWQgPSB0cnVlO1xuICAgIH1cbiAgICBub2RlcyA9IHNsb3ROb2RlcyB8fCBmYWxsYmFjaztcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIGNoZWNraW5nIGtleUNvZGVzIGZyb20gY29uZmlnLlxuICogZXhwb3NlZCBhcyBWdWUucHJvdG90eXBlLl9rXG4gKiBwYXNzaW5nIGluIGV2ZW50S2V5TmFtZSBhcyBsYXN0IGFyZ3VtZW50IHNlcGFyYXRlbHkgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAqL1xuZnVuY3Rpb24gY2hlY2tLZXlDb2RlcyAoXG4gIGV2ZW50S2V5Q29kZSxcbiAga2V5LFxuICBidWlsdEluQWxpYXMsXG4gIGV2ZW50S2V5TmFtZVxuKSB7XG4gIHZhciBrZXlDb2RlcyA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5BbGlhcztcbiAgaWYgKGtleUNvZGVzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5Q29kZXMpKSB7XG4gICAgICByZXR1cm4ga2V5Q29kZXMuaW5kZXhPZihldmVudEtleUNvZGUpID09PSAtMVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ga2V5Q29kZXMgIT09IGV2ZW50S2V5Q29kZVxuICAgIH1cbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGJpbmRPYmplY3RQcm9wcyAoXG4gIGRhdGEsXG4gIHRhZyxcbiAgdmFsdWUsXG4gIGFzUHJvcCxcbiAgaXNTeW5jXG4pIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIGhhc2g7XG4gICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ID09PSAnY2xhc3MnIHx8XG4gICAgICAgICAga2V5ID09PSAnc3R5bGUnIHx8XG4gICAgICAgICAgaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpXG4gICAgICAgICkge1xuICAgICAgICAgIGhhc2ggPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnR5cGU7XG4gICAgICAgICAgaGFzaCA9IGFzUHJvcCB8fCBjb25maWcubXVzdFVzZVByb3AodGFnLCB0eXBlLCBrZXkpXG4gICAgICAgICAgICA/IGRhdGEuZG9tUHJvcHMgfHwgKGRhdGEuZG9tUHJvcHMgPSB7fSlcbiAgICAgICAgICAgIDogZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShrZXkgaW4gaGFzaCkpIHtcbiAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuXG4gICAgICAgICAgaWYgKGlzU3luYykge1xuICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgICAgICAgICAgIG9uWyhcInVwZGF0ZTpcIiArIGtleSldID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgbG9vcCgga2V5ICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgc3RhdGljIHRyZWVzLlxuICovXG5mdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICBpbmRleCxcbiAgaXNJbkZvclxuKSB7XG4gIHZhciBjYWNoZWQgPSB0aGlzLl9zdGF0aWNUcmVlcyB8fCAodGhpcy5fc3RhdGljVHJlZXMgPSBbXSk7XG4gIHZhciB0cmVlID0gY2FjaGVkW2luZGV4XTtcbiAgLy8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsXG4gIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlIGJ5IGRvaW5nIGEgc2hhbGxvdyBjbG9uZS5cbiAgaWYgKHRyZWUgJiYgIWlzSW5Gb3IpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0cmVlKVxuICAgICAgPyBjbG9uZVZOb2Rlcyh0cmVlKVxuICAgICAgOiBjbG9uZVZOb2RlKHRyZWUpXG4gIH1cbiAgLy8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuICB0cmVlID0gY2FjaGVkW2luZGV4XSA9IHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKFxuICAgIHRoaXMuX3JlbmRlclByb3h5LFxuICAgIG51bGwsXG4gICAgdGhpcyAvLyBmb3IgcmVuZGVyIGZucyBnZW5lcmF0ZWQgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IHRlbXBsYXRlc1xuICApO1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fc3RhdGljX19cIiArIGluZGV4KSwgZmFsc2UpO1xuICByZXR1cm4gdHJlZVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciB2LW9uY2UuXG4gKiBFZmZlY3RpdmVseSBpdCBtZWFucyBtYXJraW5nIHRoZSBub2RlIGFzIHN0YXRpYyB3aXRoIGEgdW5pcXVlIGtleS5cbiAqL1xuZnVuY3Rpb24gbWFya09uY2UgKFxuICB0cmVlLFxuICBpbmRleCxcbiAga2V5XG4pIHtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX29uY2VfX1wiICsgaW5kZXggKyAoa2V5ID8gKFwiX1wiICsga2V5KSA6IFwiXCIpKSwgdHJ1ZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMgKFxuICB0cmVlLFxuICBrZXksXG4gIGlzT25jZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHRyZWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWFya1N0YXRpY05vZGUodHJlZVtpXSwgKGtleSArIFwiX1wiICsgaSksIGlzT25jZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1hcmtTdGF0aWNOb2RlKHRyZWUsIGtleSwgaXNPbmNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHtcbiAgbm9kZS5pc1N0YXRpYyA9IHRydWU7XG4gIG5vZGUua2V5ID0ga2V5O1xuICBub2RlLmlzT25jZSA9IGlzT25jZTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmRPYmplY3RMaXN0ZW5lcnMgKGRhdGEsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3Ytb24gd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvbiA9IGRhdGEub24gPSBkYXRhLm9uID8gZXh0ZW5kKHt9LCBkYXRhLm9uKSA6IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIHZhciBleGlzdGluZyA9IG9uW2tleV07XG4gICAgICAgIHZhciBvdXJzID0gdmFsdWVba2V5XTtcbiAgICAgICAgb25ba2V5XSA9IGV4aXN0aW5nID8gW10uY29uY2F0KGV4aXN0aW5nLCBvdXJzKSA6IG91cnM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbnN0YWxsUmVuZGVySGVscGVycyAodGFyZ2V0KSB7XG4gIHRhcmdldC5fbyA9IG1hcmtPbmNlO1xuICB0YXJnZXQuX24gPSB0b051bWJlcjtcbiAgdGFyZ2V0Ll9zID0gdG9TdHJpbmc7XG4gIHRhcmdldC5fbCA9IHJlbmRlckxpc3Q7XG4gIHRhcmdldC5fdCA9IHJlbmRlclNsb3Q7XG4gIHRhcmdldC5fcSA9IGxvb3NlRXF1YWw7XG4gIHRhcmdldC5faSA9IGxvb3NlSW5kZXhPZjtcbiAgdGFyZ2V0Ll9tID0gcmVuZGVyU3RhdGljO1xuICB0YXJnZXQuX2YgPSByZXNvbHZlRmlsdGVyO1xuICB0YXJnZXQuX2sgPSBjaGVja0tleUNvZGVzO1xuICB0YXJnZXQuX2IgPSBiaW5kT2JqZWN0UHJvcHM7XG4gIHRhcmdldC5fdiA9IGNyZWF0ZVRleHRWTm9kZTtcbiAgdGFyZ2V0Ll9lID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgdGFyZ2V0Ll91ID0gcmVzb2x2ZVNjb3BlZFNsb3RzO1xuICB0YXJnZXQuX2cgPSBiaW5kT2JqZWN0TGlzdGVuZXJzO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgKFxuICBkYXRhLFxuICBwcm9wcyxcbiAgY2hpbGRyZW4sXG4gIHBhcmVudCxcbiAgQ3RvclxuKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMubGlzdGVuZXJzID0gZGF0YS5vbiB8fCBlbXB0eU9iamVjdDtcbiAgdGhpcy5pbmplY3Rpb25zID0gcmVzb2x2ZUluamVjdChvcHRpb25zLmluamVjdCwgcGFyZW50KTtcbiAgdGhpcy5zbG90cyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmVTbG90cyhjaGlsZHJlbiwgcGFyZW50KTsgfTtcblxuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgdmFyIGNvbnRleHRWbSA9IE9iamVjdC5jcmVhdGUocGFyZW50KTtcbiAgdmFyIGlzQ29tcGlsZWQgPSBpc1RydWUob3B0aW9ucy5fY29tcGlsZWQpO1xuICB2YXIgbmVlZE5vcm1hbGl6YXRpb24gPSAhaXNDb21waWxlZDtcblxuICAvLyBzdXBwb3J0IGZvciBjb21waWxlZCBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChpc0NvbXBpbGVkKSB7XG4gICAgLy8gZXhwb3NpbmcgJG9wdGlvbnMgZm9yIHJlbmRlclN0YXRpYygpXG4gICAgdGhpcy4kb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gcHJlLXJlc29sdmUgc2xvdHMgZm9yIHJlbmRlclNsb3QoKVxuICAgIHRoaXMuJHNsb3RzID0gdGhpcy5zbG90cygpO1xuICAgIHRoaXMuJHNjb3BlZFNsb3RzID0gZGF0YS5zY29wZWRTbG90cyB8fCBlbXB0eU9iamVjdDtcbiAgfVxuXG4gIGlmIChvcHRpb25zLl9zY29wZUlkKSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pO1xuICAgICAgaWYgKHZub2RlKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHZub2RlLmZuQ29udGV4dCA9IGNvbnRleHRWbTtcbiAgICB2bm9kZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICAgIGlmIChkYXRhLnNsb3QpIHtcbiAgICAgICh2bm9kZS5kYXRhIHx8ICh2bm9kZS5kYXRhID0ge30pKS5zbG90ID0gZGF0YS5zbG90O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzICh0bywgZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgIHRvW2NhbWVsaXplKGtleSldID0gZnJvbVtrZXldO1xuICB9XG59XG5cbi8qICAqL1xuXG5cblxuXG4vLyBSZWdpc3RlciB0aGUgY29tcG9uZW50IGhvb2sgdG8gd2VleCBuYXRpdmUgcmVuZGVyIGVuZ2luZS5cbi8vIFRoZSBob29rIHdpbGwgYmUgdHJpZ2dlcmVkIGJ5IG5hdGl2ZSwgbm90IGphdmFzY3JpcHQuXG5cblxuLy8gVXBkYXRlcyB0aGUgc3RhdGUgb2YgdGhlIGNvbXBvbmVudCB0byB3ZWV4IG5hdGl2ZSByZW5kZXIgZW5naW5lLlxuXG4vKiAgKi9cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL0hhbmtzMTAxMDAvd2VleC1uYXRpdmUtZGlyZWN0aXZlL3RyZWUvbWFzdGVyL2NvbXBvbmVudFxuXG4vLyBsaXN0ZW5pbmcgb24gbmF0aXZlIGNhbGxiYWNrXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLy8gaG9va3MgdG8gYmUgaW52b2tlZCBvbiBjb21wb25lbnQgVk5vZGVzIGR1cmluZyBwYXRjaFxudmFyIGNvbXBvbmVudFZOb2RlSG9va3MgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKFxuICAgIHZub2RlLFxuICAgIGh5ZHJhdGluZyxcbiAgICBwYXJlbnRFbG0sXG4gICAgcmVmRWxtXG4gICkge1xuICAgIGlmICghdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgfHwgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkKSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICAgIHZub2RlLFxuICAgICAgICBhY3RpdmVJbnN0YW5jZSxcbiAgICAgICAgcGFyZW50RWxtLFxuICAgICAgICByZWZFbG1cbiAgICAgICk7XG4gICAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpO1xuICAgIH0gZWxzZSBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIC8vIGtlcHQtYWxpdmUgY29tcG9uZW50cywgdHJlYXQgYXMgYSBwYXRjaFxuICAgICAgdmFyIG1vdW50ZWROb2RlID0gdm5vZGU7IC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICAgIGNvbXBvbmVudFZOb2RlSG9va3MucHJlcGF0Y2gobW91bnRlZE5vZGUsIG1vdW50ZWROb2RlKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJlcGF0Y2g6IGZ1bmN0aW9uIHByZXBhdGNoIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB1cGRhdGVDaGlsZENvbXBvbmVudChcbiAgICAgIGNoaWxkLFxuICAgICAgb3B0aW9ucy5wcm9wc0RhdGEsIC8vIHVwZGF0ZWQgcHJvcHNcbiAgICAgIG9wdGlvbnMubGlzdGVuZXJzLCAvLyB1cGRhdGVkIGxpc3RlbmVyc1xuICAgICAgdm5vZGUsIC8vIG5ldyBwYXJlbnQgdm5vZGVcbiAgICAgIG9wdGlvbnMuY2hpbGRyZW4gLy8gbmV3IGNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydCAodm5vZGUpIHtcbiAgICB2YXIgY29udGV4dCA9IHZub2RlLmNvbnRleHQ7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkKSB7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgLy8gdnVlLXJvdXRlciMxMjEyXG4gICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcbiAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4gICAgICAgIC8vIG9uIGluY29ycmVjdCBjaGlsZHJlbi4gSW5zdGVhZCB3ZSBwdXNoIHRoZW0gaW50byBhIHF1ZXVlIHdoaWNoIHdpbGxcbiAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxuICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuICBDdG9yLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgaWYgKGlzVW5kZWYoQ3RvcikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiYXNlQ3RvciA9IGNvbnRleHQuJG9wdGlvbnMuX2Jhc2U7XG5cbiAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yXG4gIGlmIChpc09iamVjdChDdG9yKSkge1xuICAgIEN0b3IgPSBiYXNlQ3Rvci5leHRlbmQoQ3Rvcik7XG4gIH1cblxuICAvLyBpZiBhdCB0aGlzIHN0YWdlIGl0J3Mgbm90IGEgY29uc3RydWN0b3Igb3IgYW4gYXN5bmMgY29tcG9uZW50IGZhY3RvcnksXG4gIC8vIHJlamVjdC5cbiAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGFzeW5jIGNvbXBvbmVudFxuICB2YXIgYXN5bmNGYWN0b3J5O1xuICBpZiAoaXNVbmRlZihDdG9yLmNpZCkpIHtcbiAgICBhc3luY0ZhY3RvcnkgPSBDdG9yO1xuICAgIEN0b3IgPSByZXNvbHZlQXN5bmNDb21wb25lbnQoYXN5bmNGYWN0b3J5LCBiYXNlQ3RvciwgY29udGV4dCk7XG4gICAgaWYgKEN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgbm9kZSBmb3IgYXN5bmMgY29tcG9uZW50LCB3aGljaCBpcyByZW5kZXJlZFxuICAgICAgLy8gYXMgYSBjb21tZW50IG5vZGUgYnV0IHByZXNlcnZlcyBhbGwgdGhlIHJhdyBpbmZvcm1hdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICAvLyB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIGZvciBhc3luYyBzZXJ2ZXItcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24uXG4gICAgICByZXR1cm4gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihcbiAgICAgICAgYXN5bmNGYWN0b3J5LFxuICAgICAgICBkYXRhLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgdGFnXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuICAvLyBjb21wb25lbnQgY29uc3RydWN0b3IgY3JlYXRpb25cbiAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKTtcblxuICAvLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgZGF0YSBpbnRvIHByb3BzICYgZXZlbnRzXG4gIGlmIChpc0RlZihkYXRhLm1vZGVsKSkge1xuICAgIHRyYW5zZm9ybU1vZGVsKEN0b3Iub3B0aW9ucywgZGF0YSk7XG4gIH1cblxuICAvLyBleHRyYWN0IHByb3BzXG4gIHZhciBwcm9wc0RhdGEgPSBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHRhZyk7XG5cbiAgLy8gZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuZnVuY3Rpb25hbCkpIHtcbiAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudChDdG9yLCBwcm9wc0RhdGEsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKVxuICB9XG5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMsIHNpbmNlIHRoZXNlIG5lZWRzIHRvIGJlIHRyZWF0ZWQgYXNcbiAgLy8gY2hpbGQgY29tcG9uZW50IGxpc3RlbmVycyBpbnN0ZWFkIG9mIERPTSBsaXN0ZW5lcnNcbiAgdmFyIGxpc3RlbmVycyA9IGRhdGEub247XG4gIC8vIHJlcGxhY2Ugd2l0aCBsaXN0ZW5lcnMgd2l0aCAubmF0aXZlIG1vZGlmaWVyXG4gIC8vIHNvIGl0IGdldHMgcHJvY2Vzc2VkIGR1cmluZyBwYXJlbnQgY29tcG9uZW50IHBhdGNoLlxuICBkYXRhLm9uID0gZGF0YS5uYXRpdmVPbjtcblxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5hYnN0cmFjdCkpIHtcbiAgICAvLyBhYnN0cmFjdCBjb21wb25lbnRzIGRvIG5vdCBrZWVwIGFueXRoaW5nXG4gICAgLy8gb3RoZXIgdGhhbiBwcm9wcyAmIGxpc3RlbmVycyAmIHNsb3RcblxuICAgIC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICB2YXIgc2xvdCA9IGRhdGEuc2xvdDtcbiAgICBkYXRhID0ge307XG4gICAgaWYgKHNsb3QpIHtcbiAgICAgIGRhdGEuc2xvdCA9IHNsb3Q7XG4gICAgfVxuICB9XG5cbiAgLy8gbWVyZ2UgY29tcG9uZW50IG1hbmFnZW1lbnQgaG9va3Mgb250byB0aGUgcGxhY2Vob2xkZXIgbm9kZVxuICBtZXJnZUhvb2tzKGRhdGEpO1xuXG4gIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIHZub2RlXG4gIHZhciBuYW1lID0gQ3Rvci5vcHRpb25zLm5hbWUgfHwgdGFnO1xuICB2YXIgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgKFwidnVlLWNvbXBvbmVudC1cIiArIChDdG9yLmNpZCkgKyAobmFtZSA/IChcIi1cIiArIG5hbWUpIDogJycpKSxcbiAgICBkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0LFxuICAgIHsgQ3RvcjogQ3RvciwgcHJvcHNEYXRhOiBwcm9wc0RhdGEsIGxpc3RlbmVyczogbGlzdGVuZXJzLCB0YWc6IHRhZywgY2hpbGRyZW46IGNoaWxkcmVuIH0sXG4gICAgYXN5bmNGYWN0b3J5XG4gICk7XG5cbiAgLy8gV2VleCBzcGVjaWZpYzogaW52b2tlIHJlY3ljbGUtbGlzdCBvcHRpbWl6ZWQgQHJlbmRlciBmdW5jdGlvbiBmb3JcbiAgLy8gZXh0cmFjdGluZyBjZWxsLXNsb3QgdGVtcGxhdGUuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9IYW5rczEwMTAwL3dlZXgtbmF0aXZlLWRpcmVjdGl2ZS90cmVlL21hc3Rlci9jb21wb25lbnRcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQsIC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuICBwYXJlbnRFbG0sXG4gIHJlZkVsbVxuKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIF9wYXJlbnRFbG06IHBhcmVudEVsbSB8fCBudWxsLFxuICAgIF9yZWZFbG06IHJlZkVsbSB8fCBudWxsXG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBtZXJnZUhvb2tzIChkYXRhKSB7XG4gIGlmICghZGF0YS5ob29rKSB7XG4gICAgZGF0YS5ob29rID0ge307XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rc1RvTWVyZ2UubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gaG9va3NUb01lcmdlW2ldO1xuICAgIHZhciBmcm9tUGFyZW50ID0gZGF0YS5ob29rW2tleV07XG4gICAgdmFyIG91cnMgPSBjb21wb25lbnRWTm9kZUhvb2tzW2tleV07XG4gICAgZGF0YS5ob29rW2tleV0gPSBmcm9tUGFyZW50ID8gbWVyZ2VIb29rJDEob3VycywgZnJvbVBhcmVudCkgOiBvdXJzO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlSG9vayQxIChvbmUsIHR3bykge1xuICByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICBvbmUoYSwgYiwgYywgZCk7XG4gICAgdHdvKGEsIGIsIGMsIGQpO1xuICB9XG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCc7KGRhdGEucHJvcHMgfHwgKGRhdGEucHJvcHMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgaWYgKGlzRGVmKG9uW2V2ZW50XSkpIHtcbiAgICBvbltldmVudF0gPSBbZGF0YS5tb2RlbC5jYWxsYmFja10uY29uY2F0KG9uW2V2ZW50XSk7XG4gIH0gZWxzZSB7XG4gICAgb25bZXZlbnRdID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIFNJTVBMRV9OT1JNQUxJWkUgPSAxO1xudmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyO1xuXG4vLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuLy8gd2l0aG91dCBnZXR0aW5nIHllbGxlZCBhdCBieSBmbG93XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGUsXG4gIGFsd2F5c05vcm1hbGl6ZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBjaGlsZHJlbjtcbiAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoaXNUcnVlKGFsd2F5c05vcm1hbGl6ZSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IEFMV0FZU19OT1JNQUxJWkU7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlXG4pIHtcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKChkYXRhKS5fX29iX18pKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIlxcblwiICtcbiAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIG9iamVjdCBzeW50YXggaW4gdi1iaW5kXG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkge1xuICAgIHRhZyA9IGRhdGEuaXM7XG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEua2V5KSAmJiAhaXNQcmltaXRpdmUoZGF0YS5rZXkpXG4gICkge1xuICAgIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCB1c2luZyBub24tcHJpbWl0aXZlIHZhbHVlIGFzIGtleSwgJyArXG4gICAgICAgICd1c2Ugc3RyaW5nL251bWJlciB2YWx1ZSBpbnN0ZWFkLicsXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmXG4gICAgdHlwZW9mIGNoaWxkcmVuWzBdID09PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIGRhdGEuc2NvcGVkU2xvdHMgPSB7IGRlZmF1bHQ6IGNoaWxkcmVuWzBdIH07XG4gICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgfVxuICBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IEFMV0FZU19OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IG5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfSBlbHNlIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gU0lNUExFX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9XG4gIHZhciB2bm9kZSwgbnM7XG4gIGlmICh0eXBlb2YgdGFnID09PSAnc3RyaW5nJykge1xuICAgIHZhciBDdG9yO1xuICAgIG5zID0gKGNvbnRleHQuJHZub2RlICYmIGNvbnRleHQuJHZub2RlLm5zKSB8fCBjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7XG4gICAgaWYgKGNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUpKSB7XG4gICAgaWYgKG5zKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKGlzVW5kZWYoY2hpbGQubnMpIHx8IGlzVHJ1ZShmb3JjZSkpKSB7XG4gICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zLCBmb3JjZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cbiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGF0dHJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5lUmVhY3RpdmUodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVyc1xuICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgdmFyIF9wYXJlbnRWbm9kZSA9IHJlZi5fcGFyZW50Vm5vZGU7XG5cbiAgICBpZiAodm0uX2lzTW91bnRlZCkge1xuICAgICAgLy8gaWYgdGhlIHBhcmVudCBkaWRuJ3QgdXBkYXRlLCB0aGUgc2xvdCBub2RlcyB3aWxsIGJlIHRoZSBvbmVzIGZyb21cbiAgICAgIC8vIGxhc3QgcmVuZGVyLiBUaGV5IG5lZWQgdG8gYmUgY2xvbmVkIHRvIGVuc3VyZSBcImZyZXNobmVzc1wiIGZvciB0aGlzIHJlbmRlci5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2bS4kc2xvdHMpIHtcbiAgICAgICAgdmFyIHNsb3QgPSB2bS4kc2xvdHNba2V5XTtcbiAgICAgICAgLy8gX3JlbmRlcmVkIGlzIGEgZmxhZyBhZGRlZCBieSByZW5kZXJTbG90LCBidXQgbWF5IG5vdCBiZSBwcmVzZW50XG4gICAgICAgIC8vIGlmIHRoZSBzbG90IGlzIHBhc3NlZCBmcm9tIG1hbnVhbGx5IHdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9uc1xuICAgICAgICBpZiAoc2xvdC5fcmVuZGVyZWQgfHwgKHNsb3RbMF0gJiYgc2xvdFswXS5lbG0pKSB7XG4gICAgICAgICAgdm0uJHNsb3RzW2tleV0gPSBjbG9uZVZOb2RlcyhzbG90LCB0cnVlIC8qIGRlZXAgKi8pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdm0uJHNjb3BlZFNsb3RzID0gKF9wYXJlbnRWbm9kZSAmJiBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cykgfHwgZW1wdHlPYmplY3Q7XG5cbiAgICAvLyBzZXQgcGFyZW50IHZub2RlLiB0aGlzIGFsbG93cyByZW5kZXIgZnVuY3Rpb25zIHRvIGhhdmUgYWNjZXNzXG4gICAgLy8gdG8gdGhlIGRhdGEgb24gdGhlIHBsYWNlaG9sZGVyIG5vZGUuXG4gICAgdm0uJHZub2RlID0gX3BhcmVudFZub2RlO1xuICAgIC8vIHJlbmRlciBzZWxmXG4gICAgdmFyIHZub2RlO1xuICAgIHRyeSB7XG4gICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlclwiKTtcbiAgICAgIC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LFxuICAgICAgLy8gb3IgcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAodm0uJG9wdGlvbnMucmVuZGVyRXJyb3IpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdm5vZGUgPSB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQsIGUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlckVycm9yXCIpO1xuICAgICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gcmV0dXJuIGVtcHR5IHZub2RlIGluIGNhc2UgdGhlIHJlbmRlciBmdW5jdGlvbiBlcnJvcmVkIG91dFxuICAgIGlmICghKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdNdWx0aXBsZSByb290IG5vZGVzIHJldHVybmVkIGZyb20gcmVuZGVyIGZ1bmN0aW9uLiBSZW5kZXIgZnVuY3Rpb24gJyArXG4gICAgICAgICAgJ3Nob3VsZCByZXR1cm4gYSBzaW5nbGUgcm9vdCBub2RlLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICAgIH1cbiAgICAvLyBzZXQgcGFyZW50XG4gICAgdm5vZGUucGFyZW50ID0gX3BhcmVudFZub2RlO1xuICAgIHJldHVybiB2bm9kZVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYSB1aWRcbiAgICB2bS5fdWlkID0gdWlkKys7XG5cbiAgICB2YXIgc3RhcnRUYWcsIGVuZFRhZztcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgKHZtLl91aWQpO1xuICAgICAgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZFxuICAgIHZtLl9pc1Z1ZSA9IHRydWU7XG4gICAgLy8gbWVyZ2Ugb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7XG4gICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvblxuICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG4gICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksXG4gICAgICAgIG9wdGlvbnMgfHwge30sXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpbml0UHJveHkodm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gICAgLy8gZXhwb3NlIHJlYWwgc2VsZlxuICAgIHZtLl9zZWxmID0gdm07XG4gICAgaW5pdExpZmVjeWNsZSh2bSk7XG4gICAgaW5pdEV2ZW50cyh2bSk7XG4gICAgaW5pdFJlbmRlcih2bSk7XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVDcmVhdGUnKTtcbiAgICBpbml0SW5qZWN0aW9ucyh2bSk7IC8vIHJlc29sdmUgaW5qZWN0aW9ucyBiZWZvcmUgZGF0YS9wcm9wc1xuICAgIGluaXRTdGF0ZSh2bSk7XG4gICAgaW5pdFByb3ZpZGUodm0pOyAvLyByZXNvbHZlIHByb3ZpZGUgYWZ0ZXIgZGF0YS9wcm9wc1xuICAgIGNhbGxIb29rKHZtLCAnY3JlYXRlZCcpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHZtLl9uYW1lID0gZm9ybWF0Q29tcG9uZW50TmFtZSh2bSwgZmFsc2UpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyAodm0uX25hbWUpICsgXCIgaW5pdFwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgfVxuXG4gICAgaWYgKHZtLiRvcHRpb25zLmVsKSB7XG4gICAgICB2bS4kbW91bnQodm0uJG9wdGlvbnMuZWwpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdEludGVybmFsQ29tcG9uZW50ICh2bSwgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zID0gT2JqZWN0LmNyZWF0ZSh2bS5jb25zdHJ1Y3Rvci5vcHRpb25zKTtcbiAgLy8gZG9pbmcgdGhpcyBiZWNhdXNlIGl0J3MgZmFzdGVyIHRoYW4gZHluYW1pYyBlbnVtZXJhdGlvbi5cbiAgdmFyIHBhcmVudFZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gIG9wdHMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIG9wdHMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIG9wdHMuX3BhcmVudEVsbSA9IG9wdGlvbnMuX3BhcmVudEVsbTtcbiAgb3B0cy5fcmVmRWxtID0gb3B0aW9ucy5fcmVmRWxtO1xuXG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIGV4dGVuZGVkID0gQ3Rvci5leHRlbmRPcHRpb25zO1xuICB2YXIgc2VhbGVkID0gQ3Rvci5zZWFsZWRPcHRpb25zO1xuICBmb3IgKHZhciBrZXkgaW4gbGF0ZXN0KSB7XG4gICAgaWYgKGxhdGVzdFtrZXldICE9PSBzZWFsZWRba2V5XSkge1xuICAgICAgaWYgKCFtb2RpZmllZCkgeyBtb2RpZmllZCA9IHt9OyB9XG4gICAgICBtb2RpZmllZFtrZXldID0gZGVkdXBlKGxhdGVzdFtrZXldLCBleHRlbmRlZFtrZXldLCBzZWFsZWRba2V5XSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2RpZmllZFxufVxuXG5mdW5jdGlvbiBkZWR1cGUgKGxhdGVzdCwgZXh0ZW5kZWQsIHNlYWxlZCkge1xuICAvLyBjb21wYXJlIGxhdGVzdCBhbmQgc2VhbGVkIHRvIGVuc3VyZSBsaWZlY3ljbGUgaG9va3Mgd29uJ3QgYmUgZHVwbGljYXRlZFxuICAvLyBiZXR3ZWVuIG1lcmdlc1xuICBpZiAoQXJyYXkuaXNBcnJheShsYXRlc3QpKSB7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHNlYWxlZCA9IEFycmF5LmlzQXJyYXkoc2VhbGVkKSA/IHNlYWxlZCA6IFtzZWFsZWRdO1xuICAgIGV4dGVuZGVkID0gQXJyYXkuaXNBcnJheShleHRlbmRlZCkgPyBleHRlbmRlZCA6IFtleHRlbmRlZF07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXRlc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIHB1c2ggb3JpZ2luYWwgb3B0aW9ucyBhbmQgbm90IHNlYWxlZCBvcHRpb25zIHRvIGV4Y2x1ZGUgZHVwbGljYXRlZCBvcHRpb25zXG4gICAgICBpZiAoZXh0ZW5kZWQuaW5kZXhPZihsYXRlc3RbaV0pID49IDAgfHwgc2VhbGVkLmluZGV4T2YobGF0ZXN0W2ldKSA8IDApIHtcbiAgICAgICAgcmVzLnB1c2gobGF0ZXN0W2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsYXRlc3RcbiAgfVxufVxuXG5mdW5jdGlvbiBWdWUkMyAob3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICEodGhpcyBpbnN0YW5jZW9mIFZ1ZSQzKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSQzKTtcbnN0YXRlTWl4aW4oVnVlJDMpO1xuZXZlbnRzTWl4aW4oVnVlJDMpO1xubGlmZWN5Y2xlTWl4aW4oVnVlJDMpO1xucmVuZGVyTWl4aW4oVnVlJDMpO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFVzZSAoVnVlKSB7XG4gIFZ1ZS51c2UgPSBmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgdmFyIGluc3RhbGxlZFBsdWdpbnMgPSAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyB8fCAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyA9IFtdKSk7XG4gICAgaWYgKGluc3RhbGxlZFBsdWdpbnMuaW5kZXhPZihwbHVnaW4pID4gLTEpIHtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLy8gYWRkaXRpb25hbCBwYXJhbWV0ZXJzXG4gICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgYXJncy51bnNoaWZ0KHRoaXMpO1xuICAgIGlmICh0eXBlb2YgcGx1Z2luLmluc3RhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5pbnN0YWxsLmFwcGx5KHBsdWdpbiwgYXJncyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGx1Z2luID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICAgIGluc3RhbGxlZFBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0TWl4aW4kMSAoVnVlKSB7XG4gIFZ1ZS5taXhpbiA9IGZ1bmN0aW9uIChtaXhpbikge1xuICAgIHRoaXMub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMsIG1peGluKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV4dGVuZCAoVnVlKSB7XG4gIC8qKlxuICAgKiBFYWNoIGluc3RhbmNlIGNvbnN0cnVjdG9yLCBpbmNsdWRpbmcgVnVlLCBoYXMgYSB1bmlxdWVcbiAgICogY2lkLiBUaGlzIGVuYWJsZXMgdXMgdG8gY3JlYXRlIHdyYXBwZWQgXCJjaGlsZFxuICAgKiBjb25zdHJ1Y3RvcnNcIiBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZSBhbmQgY2FjaGUgdGhlbS5cbiAgICovXG4gIFZ1ZS5jaWQgPSAwO1xuICB2YXIgY2lkID0gMTtcblxuICAvKipcbiAgICogQ2xhc3MgaW5oZXJpdGFuY2VcbiAgICovXG4gIFZ1ZS5leHRlbmQgPSBmdW5jdGlvbiAoZXh0ZW5kT3B0aW9ucykge1xuICAgIGV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zIHx8IHt9O1xuICAgIHZhciBTdXBlciA9IHRoaXM7XG4gICAgdmFyIFN1cGVySWQgPSBTdXBlci5jaWQ7XG4gICAgdmFyIGNhY2hlZEN0b3JzID0gZXh0ZW5kT3B0aW9ucy5fQ3RvciB8fCAoZXh0ZW5kT3B0aW9ucy5fQ3RvciA9IHt9KTtcbiAgICBpZiAoY2FjaGVkQ3RvcnNbU3VwZXJJZF0pIHtcbiAgICAgIHJldHVybiBjYWNoZWRDdG9yc1tTdXBlcklkXVxuICAgIH1cblxuICAgIHZhciBuYW1lID0gZXh0ZW5kT3B0aW9ucy5uYW1lIHx8IFN1cGVyLm9wdGlvbnMubmFtZTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lKSB7XG4gICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIFN1YiA9IGZ1bmN0aW9uIFZ1ZUNvbXBvbmVudCAob3B0aW9ucykge1xuICAgICAgdGhpcy5faW5pdChvcHRpb25zKTtcbiAgICB9O1xuICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICBTdWIuY2lkID0gY2lkKys7XG4gICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICBTdXBlci5vcHRpb25zLFxuICAgICAgZXh0ZW5kT3B0aW9uc1xuICAgICk7XG4gICAgU3ViWydzdXBlciddID0gU3VwZXI7XG5cbiAgICAvLyBGb3IgcHJvcHMgYW5kIGNvbXB1dGVkIHByb3BlcnRpZXMsIHdlIGRlZmluZSB0aGUgcHJveHkgZ2V0dGVycyBvblxuICAgIC8vIHRoZSBWdWUgaW5zdGFuY2VzIGF0IGV4dGVuc2lvbiB0aW1lLCBvbiB0aGUgZXh0ZW5kZWQgcHJvdG90eXBlLiBUaGlzXG4gICAgLy8gYXZvaWRzIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBjYWxscyBmb3IgZWFjaCBpbnN0YW5jZSBjcmVhdGVkLlxuICAgIGlmIChTdWIub3B0aW9ucy5wcm9wcykge1xuICAgICAgaW5pdFByb3BzJDEoU3ViKTtcbiAgICB9XG4gICAgaWYgKFN1Yi5vcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgICBpbml0Q29tcHV0ZWQkMShTdWIpO1xuICAgIH1cblxuICAgIC8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG4gICAgU3ViLm1peGluID0gU3VwZXIubWl4aW47XG4gICAgU3ViLnVzZSA9IFN1cGVyLnVzZTtcblxuICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcbiAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXG4gICAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgfSk7XG4gICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgIGlmIChuYW1lKSB7XG4gICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgIH1cblxuICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHN1cGVyIG9wdGlvbnMgYXQgZXh0ZW5zaW9uIHRpbWUuXG4gICAgLy8gbGF0ZXIgYXQgaW5zdGFudGlhdGlvbiB3ZSBjYW4gY2hlY2sgaWYgU3VwZXIncyBvcHRpb25zIGhhdmVcbiAgICAvLyBiZWVuIHVwZGF0ZWQuXG4gICAgU3ViLnN1cGVyT3B0aW9ucyA9IFN1cGVyLm9wdGlvbnM7XG4gICAgU3ViLmV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zO1xuICAgIFN1Yi5zZWFsZWRPcHRpb25zID0gZXh0ZW5kKHt9LCBTdWIub3B0aW9ucyk7XG5cbiAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xuICAgIHJldHVybiBTdWJcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzJDEgKENvbXApIHtcbiAgdmFyIHByb3BzID0gQ29tcC5vcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBwcm94eShDb21wLnByb3RvdHlwZSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQkMSAoQ29tcCkge1xuICB2YXIgY29tcHV0ZWQgPSBDb21wLm9wdGlvbnMuY29tcHV0ZWQ7XG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIGRlZmluZUNvbXB1dGVkKENvbXAucHJvdG90eXBlLCBrZXksIGNvbXB1dGVkW2tleV0pO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0QXNzZXRSZWdpc3RlcnMgKFZ1ZSkge1xuICAvKipcbiAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzLlxuICAgKi9cbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZVt0eXBlXSA9IGZ1bmN0aW9uIChcbiAgICAgIGlkLFxuICAgICAgZGVmaW5pdGlvblxuICAgICkge1xuICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZSA9PT0gJ2NvbXBvbmVudCcpIHtcbiAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoaWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBpc1BsYWluT2JqZWN0KGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbi5uYW1lID0gZGVmaW5pdGlvbi5uYW1lIHx8IGlkO1xuICAgICAgICAgIGRlZmluaXRpb24gPSB0aGlzLm9wdGlvbnMuX2Jhc2UuZXh0ZW5kKGRlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnZGlyZWN0aXZlJyAmJiB0eXBlb2YgZGVmaW5pdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGRlZmluaXRpb24gPSB7IGJpbmQ6IGRlZmluaXRpb24sIHVwZGF0ZTogZGVmaW5pdGlvbiB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF0gPSBkZWZpbml0aW9uO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblxuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIGZvciAodmFyIGtleSBpbiB0aGlzJDEuY2FjaGUpIHtcbiAgICAgIHBydW5lQ2FjaGVFbnRyeSh0aGlzJDEuY2FjaGUsIGtleSwgdGhpcyQxLmtleXMpO1xuICAgIH1cbiAgfSxcblxuICB3YXRjaDoge1xuICAgIGluY2x1ZGU6IGZ1bmN0aW9uIGluY2x1ZGUgKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9LFxuICAgIGV4Y2x1ZGU6IGZ1bmN0aW9uIGV4Y2x1ZGUgKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyICgpIHtcbiAgICB2YXIgc2xvdCA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgdmFyIHZub2RlID0gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChzbG90KTtcbiAgICB2YXIgY29tcG9uZW50T3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgaWYgKGNvbXBvbmVudE9wdGlvbnMpIHtcbiAgICAgIC8vIGNoZWNrIHBhdHRlcm5cbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnRPcHRpb25zKTtcbiAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgdmFyIGluY2x1ZGUgPSByZWYuaW5jbHVkZTtcbiAgICAgIHZhciBleGNsdWRlID0gcmVmLmV4Y2x1ZGU7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vdCBpbmNsdWRlZFxuICAgICAgICAoaW5jbHVkZSAmJiAoIW5hbWUgfHwgIW1hdGNoZXMoaW5jbHVkZSwgbmFtZSkpKSB8fFxuICAgICAgICAvLyBleGNsdWRlZFxuICAgICAgICAoZXhjbHVkZSAmJiBuYW1lICYmIG1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHZub2RlXG4gICAgICB9XG5cbiAgICAgIHZhciByZWYkMSA9IHRoaXM7XG4gICAgICB2YXIgY2FjaGUgPSByZWYkMS5jYWNoZTtcbiAgICAgIHZhciBrZXlzID0gcmVmJDEua2V5cztcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbFxuICAgICAgICAvLyBzYW1lIGNvbnN0cnVjdG9yIG1heSBnZXQgcmVnaXN0ZXJlZCBhcyBkaWZmZXJlbnQgbG9jYWwgY29tcG9uZW50c1xuICAgICAgICAvLyBzbyBjaWQgYWxvbmUgaXMgbm90IGVub3VnaCAoIzMyNjkpXG4gICAgICAgID8gY29tcG9uZW50T3B0aW9ucy5DdG9yLmNpZCArIChjb21wb25lbnRPcHRpb25zLnRhZyA/IChcIjo6XCIgKyAoY29tcG9uZW50T3B0aW9ucy50YWcpKSA6ICcnKVxuICAgICAgICA6IHZub2RlLmtleTtcbiAgICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY2FjaGVba2V5XS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgICAgLy8gbWFrZSBjdXJyZW50IGtleSBmcmVzaGVzdFxuICAgICAgICByZW1vdmUoa2V5cywga2V5KTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWNoZVtrZXldID0gdm5vZGU7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICAvLyBwcnVuZSBvbGRlc3QgZW50cnlcbiAgICAgICAgaWYgKHRoaXMubWF4ICYmIGtleXMubGVuZ3RoID4gcGFyc2VJbnQodGhpcy5tYXgpKSB7XG4gICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXlzWzBdLCBrZXlzLCB0aGlzLl92bm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmUgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGUgfHwgKHNsb3QgJiYgc2xvdFswXSlcbiAgfVxufTtcblxudmFyIGJ1aWx0SW5Db21wb25lbnRzID0ge1xuICBLZWVwQWxpdmU6IEtlZXBBbGl2ZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRHbG9iYWxBUEkgKFZ1ZSkge1xuICAvLyBjb25maWdcbiAgdmFyIGNvbmZpZ0RlZiA9IHt9O1xuICBjb25maWdEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uZmlnOyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbmZpZ0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnRG8gbm90IHJlcGxhY2UgdGhlIFZ1ZS5jb25maWcgb2JqZWN0LCBzZXQgaW5kaXZpZHVhbCBmaWVsZHMgaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ2NvbmZpZycsIGNvbmZpZ0RlZik7XG5cbiAgLy8gZXhwb3NlZCB1dGlsIG1ldGhvZHMuXG4gIC8vIE5PVEU6IHRoZXNlIGFyZSBub3QgY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJIC0gYXZvaWQgcmVseWluZyBvblxuICAvLyB0aGVtIHVubGVzcyB5b3UgYXJlIGF3YXJlIG9mIHRoZSByaXNrLlxuICBWdWUudXRpbCA9IHtcbiAgICB3YXJuOiB3YXJuLFxuICAgIGV4dGVuZDogZXh0ZW5kLFxuICAgIG1lcmdlT3B0aW9uczogbWVyZ2VPcHRpb25zLFxuICAgIGRlZmluZVJlYWN0aXZlOiBkZWZpbmVSZWFjdGl2ZVxuICB9O1xuXG4gIFZ1ZS5zZXQgPSBzZXQ7XG4gIFZ1ZS5kZWxldGUgPSBkZWw7XG4gIFZ1ZS5uZXh0VGljayA9IG5leHRUaWNrO1xuXG4gIFZ1ZS5vcHRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZS5vcHRpb25zW3R5cGUgKyAncyddID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfSk7XG5cbiAgLy8gdGhpcyBpcyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBcImJhc2VcIiBjb25zdHJ1Y3RvciB0byBleHRlbmQgYWxsIHBsYWluLW9iamVjdFxuICAvLyBjb21wb25lbnRzIHdpdGggaW4gV2VleCdzIG11bHRpLWluc3RhbmNlIHNjZW5hcmlvcy5cbiAgVnVlLm9wdGlvbnMuX2Jhc2UgPSBWdWU7XG5cbiAgZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIGJ1aWx0SW5Db21wb25lbnRzKTtcblxuICBpbml0VXNlKFZ1ZSk7XG4gIGluaXRNaXhpbiQxKFZ1ZSk7XG4gIGluaXRFeHRlbmQoVnVlKTtcbiAgaW5pdEFzc2V0UmVnaXN0ZXJzKFZ1ZSk7XG59XG5cbmluaXRHbG9iYWxBUEkoVnVlJDMpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlJDMucHJvdG90eXBlLCAnJGlzU2VydmVyJywge1xuICBnZXQ6IGlzU2VydmVyUmVuZGVyaW5nXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSQzLnByb3RvdHlwZSwgJyRzc3JDb250ZXh0Jywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gdGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dFxuICB9XG59KTtcblxuVnVlJDMudmVyc2lvbiA9ICcyLjUuMTMnO1xuXG4vKiAgKi9cblxuLy8gdGhlc2UgYXJlIHJlc2VydmVkIGZvciB3ZWIgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSBjb21waWxlZCBhd2F5XG4vLyBkdXJpbmcgdGVtcGxhdGUgY29tcGlsYXRpb25cbnZhciBpc1Jlc2VydmVkQXR0ciA9IG1ha2VNYXAoJ3N0eWxlLGNsYXNzJyk7XG5cbi8vIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgdXNpbmcgcHJvcHMgZm9yIGJpbmRpbmdcbnZhciBhY2NlcHRWYWx1ZSA9IG1ha2VNYXAoJ2lucHV0LHRleHRhcmVhLG9wdGlvbixzZWxlY3QscHJvZ3Jlc3MnKTtcbnZhciBtdXN0VXNlUHJvcCA9IGZ1bmN0aW9uICh0YWcsIHR5cGUsIGF0dHIpIHtcbiAgcmV0dXJuIChcbiAgICAoYXR0ciA9PT0gJ3ZhbHVlJyAmJiBhY2NlcHRWYWx1ZSh0YWcpKSAmJiB0eXBlICE9PSAnYnV0dG9uJyB8fFxuICAgIChhdHRyID09PSAnc2VsZWN0ZWQnICYmIHRhZyA9PT0gJ29wdGlvbicpIHx8XG4gICAgKGF0dHIgPT09ICdjaGVja2VkJyAmJiB0YWcgPT09ICdpbnB1dCcpIHx8XG4gICAgKGF0dHIgPT09ICdtdXRlZCcgJiYgdGFnID09PSAndmlkZW8nKVxuICApXG59O1xuXG52YXIgaXNFbnVtZXJhdGVkQXR0ciA9IG1ha2VNYXAoJ2NvbnRlbnRlZGl0YWJsZSxkcmFnZ2FibGUsc3BlbGxjaGVjaycpO1xuXG52YXIgaXNCb29sZWFuQXR0ciA9IG1ha2VNYXAoXG4gICdhbGxvd2Z1bGxzY3JlZW4sYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNoZWNrZWQsY29tcGFjdCxjb250cm9scyxkZWNsYXJlLCcgK1xuICAnZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLCcgK1xuICAnZW5hYmxlZCxmb3Jtbm92YWxpZGF0ZSxoaWRkZW4saW5kZXRlcm1pbmF0ZSxpbmVydCxpc21hcCxpdGVtc2NvcGUsbG9vcCxtdWx0aXBsZSwnICtcbiAgJ211dGVkLG5vaHJlZixub3Jlc2l6ZSxub3NoYWRlLG5vdmFsaWRhdGUsbm93cmFwLG9wZW4scGF1c2VvbmV4aXQscmVhZG9ubHksJyArXG4gICdyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLCcgK1xuICAndHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZSdcbik7XG5cbnZhciB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuXG52YXIgaXNYbGluayA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBuYW1lLmNoYXJBdCg1KSA9PT0gJzonICYmIG5hbWUuc2xpY2UoMCwgNSkgPT09ICd4bGluaydcbn07XG5cbnZhciBnZXRYbGlua1Byb3AgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gaXNYbGluayhuYW1lKSA/IG5hbWUuc2xpY2UoNiwgbmFtZS5sZW5ndGgpIDogJydcbn07XG5cbnZhciBpc0ZhbHN5QXR0clZhbHVlID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGwgfHwgdmFsID09PSBmYWxzZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGdlbkNsYXNzRm9yVm5vZGUgKHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICB3aGlsZSAoaXNEZWYoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGlzRGVmKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShkYXRhLCBwYXJlbnROb2RlLmRhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyQ2xhc3MoZGF0YS5zdGF0aWNDbGFzcywgZGF0YS5jbGFzcylcbn1cblxuZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGF0aWNDbGFzczogY29uY2F0KGNoaWxkLnN0YXRpY0NsYXNzLCBwYXJlbnQuc3RhdGljQ2xhc3MpLFxuICAgIGNsYXNzOiBpc0RlZihjaGlsZC5jbGFzcylcbiAgICAgID8gW2NoaWxkLmNsYXNzLCBwYXJlbnQuY2xhc3NdXG4gICAgICA6IHBhcmVudC5jbGFzc1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNsYXNzIChcbiAgc3RhdGljQ2xhc3MsXG4gIGR5bmFtaWNDbGFzc1xuKSB7XG4gIGlmIChpc0RlZihzdGF0aWNDbGFzcykgfHwgaXNEZWYoZHluYW1pY0NsYXNzKSkge1xuICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIGNvbmNhdCAoYSwgYikge1xuICByZXR1cm4gYSA/IGIgPyAoYSArICcgJyArIGIpIDogYSA6IChiIHx8ICcnKVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeUFycmF5KHZhbHVlKVxuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5T2JqZWN0KHZhbHVlKVxuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUFycmF5ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBzdHJpbmdpZmllZDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoaXNEZWYoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpICYmIHN0cmluZ2lmaWVkICE9PSAnJykge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0gc3RyaW5naWZpZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5T2JqZWN0ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVtrZXldKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBuYW1lc3BhY2VNYXAgPSB7XG4gIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgbWF0aDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnXG59O1xuXG52YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcbiAgJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLCcgK1xuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcgK1xuICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArXG4gICdhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnksJyArXG4gICdzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnICtcbiAgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgK1xuICAnY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsJyArXG4gICdidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcgK1xuICAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSwnICtcbiAgJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnXG4pO1xuXG4vLyB0aGlzIG1hcCBpcyBpbnRlbnRpb25hbGx5IHNlbGVjdGl2ZSwgb25seSBjb3ZlcmluZyBTVkcgZWxlbWVudHMgdGhhdCBtYXlcbi8vIGNvbnRhaW4gY2hpbGQgZWxlbWVudHMuXG52YXIgaXNTVkcgPSBtYWtlTWFwKFxuICAnc3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLCcgK1xuICAnZm9yZWlnbk9iamVjdCxnLGdseXBoLGltYWdlLGxpbmUsbWFya2VyLG1hc2ssbWlzc2luZy1nbHlwaCxwYXRoLHBhdHRlcm4sJyArXG4gICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JyxcbiAgdHJ1ZVxuKTtcblxuXG5cbnZhciBpc1Jlc2VydmVkVGFnID0gZnVuY3Rpb24gKHRhZykge1xuICByZXR1cm4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkcodGFnKVxufTtcblxuZnVuY3Rpb24gZ2V0VGFnTmFtZXNwYWNlICh0YWcpIHtcbiAgaWYgKGlzU1ZHKHRhZykpIHtcbiAgICByZXR1cm4gJ3N2ZydcbiAgfVxuICAvLyBiYXNpYyBzdXBwb3J0IGZvciBNYXRoTUxcbiAgLy8gbm90ZSBpdCBkb2Vzbid0IHN1cHBvcnQgb3RoZXIgTWF0aE1MIGVsZW1lbnRzIGJlaW5nIGNvbXBvbmVudCByb290c1xuICBpZiAodGFnID09PSAnbWF0aCcpIHtcbiAgICByZXR1cm4gJ21hdGgnXG4gIH1cbn1cblxudmFyIHVua25vd25FbGVtZW50Q2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCAodGFnKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWluQnJvd3Nlcikge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgaWYgKGlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHRhZyA9IHRhZy50b0xvd2VyQ2FzZSgpO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHVua25vd25FbGVtZW50Q2FjaGVbdGFnXVxuICB9XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgaWYgKHRhZy5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI4MjEwMzY0LzEwNzAyNDRcbiAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IChcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTFVua25vd25FbGVtZW50IHx8XG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxFbGVtZW50XG4gICAgKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IC9IVE1MVW5rbm93bkVsZW1lbnQvLnRlc3QoZWwudG9TdHJpbmcoKSkpXG4gIH1cbn1cblxudmFyIGlzVGV4dElucHV0VHlwZSA9IG1ha2VNYXAoJ3RleHQsbnVtYmVyLHBhc3N3b3JkLHNlYXJjaCxlbWFpbCx0ZWwsdXJsJyk7XG5cbi8qICAqL1xuXG4vKipcbiAqIFF1ZXJ5IGFuIGVsZW1lbnQgc2VsZWN0b3IgaWYgaXQncyBub3QgYW4gZWxlbWVudCBhbHJlYWR5LlxuICovXG5mdW5jdGlvbiBxdWVyeSAoZWwpIHtcbiAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgc2VsZWN0ZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICBpZiAoIXNlbGVjdGVkKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdDYW5ub3QgZmluZCBlbGVtZW50OiAnICsgZWxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGVkXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVsXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQkMSAodGFnTmFtZSwgdm5vZGUpIHtcbiAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gIGlmICh0YWdOYW1lICE9PSAnc2VsZWN0Jykge1xuICAgIHJldHVybiBlbG1cbiAgfVxuICAvLyBmYWxzZSBvciBudWxsIHdpbGwgcmVtb3ZlIHRoZSBhdHRyaWJ1dGUgYnV0IHVuZGVmaW5lZCB3aWxsIG5vdFxuICBpZiAodm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLmF0dHJzICYmIHZub2RlLmRhdGEuYXR0cnMubXVsdGlwbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XG4gIH1cbiAgcmV0dXJuIGVsbVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMgKG5hbWVzcGFjZSwgdGFnTmFtZSkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZU1hcFtuYW1lc3BhY2VdLCB0YWdOYW1lKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dClcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudCAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0ZXh0KVxufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUgKHBhcmVudE5vZGUsIG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnROb2RlIChub2RlKSB7XG4gIHJldHVybiBub2RlLnBhcmVudE5vZGVcbn1cblxuZnVuY3Rpb24gbmV4dFNpYmxpbmcgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmdcbn1cblxuZnVuY3Rpb24gdGFnTmFtZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS50YWdOYW1lXG59XG5cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50IChub2RlLCB0ZXh0KSB7XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufVxuXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGUgKG5vZGUsIGtleSwgdmFsKSB7XG4gIG5vZGUuc2V0QXR0cmlidXRlKGtleSwgdmFsKTtcbn1cblxuXG52YXIgbm9kZU9wcyA9IE9iamVjdC5mcmVlemUoe1xuXHRjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50JDEsXG5cdGNyZWF0ZUVsZW1lbnROUzogY3JlYXRlRWxlbWVudE5TLFxuXHRjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsXG5cdGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG5cdGluc2VydEJlZm9yZTogaW5zZXJ0QmVmb3JlLFxuXHRyZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQsXG5cdGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZCxcblx0cGFyZW50Tm9kZTogcGFyZW50Tm9kZSxcblx0bmV4dFNpYmxpbmc6IG5leHRTaWJsaW5nLFxuXHR0YWdOYW1lOiB0YWdOYW1lLFxuXHRzZXRUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG5cdHNldEF0dHJpYnV0ZTogc2V0QXR0cmlidXRlXG59KTtcblxuLyogICovXG5cbnZhciByZWYgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlIChfLCB2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGlmIChvbGRWbm9kZS5kYXRhLnJlZiAhPT0gdm5vZGUuZGF0YS5yZWYpIHtcbiAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTtcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUsIHRydWUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiByZWdpc3RlclJlZiAodm5vZGUsIGlzUmVtb3ZhbCkge1xuICB2YXIga2V5ID0gdm5vZGUuZGF0YS5yZWY7XG4gIGlmICgha2V5KSB7IHJldHVybiB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcbiAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgaWYgKGlzUmVtb3ZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWZzW2tleV0gPSByZWY7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICpcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3RcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICovXG5cbnZhciBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbnZhciBob29rcyA9IFsnY3JlYXRlJywgJ2FjdGl2YXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveSddO1xuXG5mdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgcmV0dXJuIChcbiAgICBhLmtleSA9PT0gYi5rZXkgJiYgKFxuICAgICAgKFxuICAgICAgICBhLnRhZyA9PT0gYi50YWcgJiZcbiAgICAgICAgYS5pc0NvbW1lbnQgPT09IGIuaXNDb21tZW50ICYmXG4gICAgICAgIGlzRGVmKGEuZGF0YSkgPT09IGlzRGVmKGIuZGF0YSkgJiZcbiAgICAgICAgc2FtZUlucHV0VHlwZShhLCBiKVxuICAgICAgKSB8fCAoXG4gICAgICAgIGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiZcbiAgICAgICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmVcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG4gIGZ1bmN0aW9uIGNyZWF0ZUVsbSAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0sIG5lc3RlZCkge1xuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zXG4gICAgICAgID8gbm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsIHRhZylcbiAgICAgICAgOiBub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLCB2bm9kZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAge1xuICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICBjcmVhdGluZ0VsbUluVlByZS0tO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNUcnVlKHZub2RlLmlzQ29tbWVudCkpIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlQ29tbWVudCh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZSh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGkgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgdmFyIGlzUmVhY3RpdmF0ZWQgPSBpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaS5rZWVwQWxpdmU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGkuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHtcbiAgICAgICAgaSh2bm9kZSwgZmFsc2UgLyogaHlkcmF0aW5nICovLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgICB9XG4gICAgICAvLyBhZnRlciBjYWxsaW5nIHRoZSBpbml0IGhvb2ssIGlmIHRoZSB2bm9kZSBpcyBhIGNoaWxkIGNvbXBvbmVudFxuICAgICAgLy8gaXQgc2hvdWxkJ3ZlIGNyZWF0ZWQgYSBjaGlsZCBpbnN0YW5jZSBhbmQgbW91bnRlZCBpdC4gdGhlIGNoaWxkXG4gICAgICAvLyBjb21wb25lbnQgYWxzbyBoYXMgc2V0IHRoZSBwbGFjZWhvbGRlciB2bm9kZSdzIGVsbS5cbiAgICAgIC8vIGluIHRoYXQgY2FzZSB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGVsZW1lbnQgYW5kIGJlIGRvbmUuXG4gICAgICBpZiAoaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSkge1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cbiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaTtcbiAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4gICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG4gICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbiAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZiQkMSkge1xuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBpZiAoaXNEZWYocmVmJCQxKSkge1xuICAgICAgICBpZiAocmVmJCQxLnBhcmVudE5vZGUgPT09IHBhcmVudCkge1xuICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYkJDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAodm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUodm5vZGUudGV4dCkpIHtcbiAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQodm5vZGUuZWxtLCBub2RlT3BzLmNyZWF0ZVRleHROb2RlKFN0cmluZyh2bm9kZS50ZXh0KSkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUGF0Y2hhYmxlICh2bm9kZSkge1xuICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgdm5vZGUgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgfVxuICAgIHJldHVybiBpc0RlZih2bm9kZS50YWcpXG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VDcmVhdGVIb29rcyAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBpID0gdm5vZGUuZGF0YS5ob29rOyAvLyBSZXVzZSB2YXJpYWJsZVxuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgaWYgKGlzRGVmKGkuY3JlYXRlKSkgeyBpLmNyZWF0ZShlbXB0eU5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkuaW5zZXJ0KSkgeyBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICAvLyBzZXQgc2NvcGUgaWQgYXR0cmlidXRlIGZvciBzY29wZWQgQ1NTLlxuICAvLyB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgc3BlY2lhbCBjYXNlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZFxuICAvLyBvZiBnb2luZyB0aHJvdWdoIHRoZSBub3JtYWwgYXR0cmlidXRlIHBhdGNoaW5nIHByb2Nlc3MuXG4gIGZ1bmN0aW9uIHNldFNjb3BlICh2bm9kZSkge1xuICAgIHZhciBpO1xuICAgIGlmIChpc0RlZihpID0gdm5vZGUuZm5TY29wZUlkKSkge1xuICAgICAgbm9kZU9wcy5zZXRBdHRyaWJ1dGUodm5vZGUuZWxtLCBpLCAnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlO1xuICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgIGlmIChpc0RlZihpID0gYW5jZXN0b3IuY29udGV4dCkgJiYgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpKSB7XG4gICAgICAgICAgbm9kZU9wcy5zZXRBdHRyaWJ1dGUodm5vZGUuZWxtLCBpLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGZvciBzbG90IGNvbnRlbnQgdGhleSBzaG91bGQgYWxzbyBnZXQgdGhlIHNjb3BlSWQgZnJvbSB0aGUgaG9zdCBpbnN0YW5jZS5cbiAgICBpZiAoaXNEZWYoaSA9IGFjdGl2ZUluc3RhbmNlKSAmJlxuICAgICAgaSAhPT0gdm5vZGUuY29udGV4dCAmJlxuICAgICAgaSAhPT0gdm5vZGUuZm5Db250ZXh0ICYmXG4gICAgICBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZClcbiAgICApIHtcbiAgICAgIG5vZGVPcHMuc2V0QXR0cmlidXRlKHZub2RlLmVsbSwgaSwgJycpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFZub2RlcyAocGFyZW50RWxtLCByZWZFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgY3JlYXRlRWxtKHZub2Rlc1tzdGFydElkeF0sIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZURlc3Ryb3lIb29rICh2bm9kZSkge1xuICAgIHZhciBpLCBqO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5kZXN0cm95KSkgeyBpKHZub2RlKTsgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7IGNicy5kZXN0cm95W2ldKHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNoaWxkcmVuKSkge1xuICAgICAgZm9yIChqID0gMDsgaiA8IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGludm9rZURlc3Ryb3lIb29rKHZub2RlLmNoaWxkcmVuW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVWbm9kZXMgKHBhcmVudEVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGNoKTtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgIHJlbW92ZU5vZGUoY2guZWxtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgIGlmIChpc0RlZihybSkgfHwgaXNEZWYodm5vZGUuZGF0YSkpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgIGlmIChpc0RlZihybSkpIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG4gICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXG4gICAgICAgIHJtID0gY3JlYXRlUm1DYih2bm9kZS5lbG0sIGxpc3RlbmVycyk7XG4gICAgICB9XG4gICAgICAvLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7XG4gICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soaSwgcm0pO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2JzLnJlbW92ZVtpXSh2bm9kZSwgcm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnJlbW92ZSkpIHtcbiAgICAgICAgaSh2bm9kZSwgcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm0oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuIChwYXJlbnRFbG0sIG9sZENoLCBuZXdDaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7XG4gICAgdmFyIG9sZFN0YXJ0SWR4ID0gMDtcbiAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuICAgIHZhciBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgIHZhciBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICB2YXIgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgdmFyIG9sZEtleVRvSWR4LCBpZHhJbk9sZCwgdm5vZGVUb01vdmUsIHJlZkVsbTtcblxuICAgIC8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxuICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9uc1xuICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKG5ld0NoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCByaWdodFxuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRW5kVm5vZGUuZWxtKSk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgbGVmdFxuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkRW5kVm5vZGUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNVbmRlZihvbGRLZXlUb0lkeCkpIHsgb2xkS2V5VG9JZHggPSBjcmVhdGVLZXlUb09sZElkeChvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7IH1cbiAgICAgICAgaWR4SW5PbGQgPSBpc0RlZihuZXdTdGFydFZub2RlLmtleSlcbiAgICAgICAgICA/IG9sZEtleVRvSWR4W25ld1N0YXJ0Vm5vZGUua2V5XVxuICAgICAgICAgIDogZmluZElkeEluT2xkKG5ld1N0YXJ0Vm5vZGUsIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICAgICAgaWYgKGlzVW5kZWYoaWR4SW5PbGQpKSB7IC8vIE5ldyBlbGVtZW50XG4gICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm5vZGVUb01vdmUgPSBvbGRDaFtpZHhJbk9sZF07XG4gICAgICAgICAgaWYgKHNhbWVWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGNoVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgdm5vZGVUb01vdmUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNhbWUga2V5IGJ1dCBkaWZmZXJlbnQgZWxlbWVudC4gdHJlYXQgYXMgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgcmVmRWxtLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tEdXBsaWNhdGVLZXlzIChjaGlsZHJlbikge1xuICAgIHZhciBzZWVuS2V5cyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2bm9kZSA9IGNoaWxkcmVuW2ldO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleTtcbiAgICAgIGlmIChpc0RlZihrZXkpKSB7XG4gICAgICAgIGlmIChzZWVuS2V5c1trZXldKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIChcIkR1cGxpY2F0ZSBrZXlzIGRldGVjdGVkOiAnXCIgKyBrZXkgKyBcIicuIFRoaXMgbWF5IGNhdXNlIGFuIHVwZGF0ZSBlcnJvci5cIiksXG4gICAgICAgICAgICB2bm9kZS5jb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWVuS2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmRJZHhJbk9sZCAobm9kZSwgb2xkQ2gsIHN0YXJ0LCBlbmQpIHtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgdmFyIGMgPSBvbGRDaFtpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiBzYW1lVm5vZGUobm9kZSwgYykpIHsgcmV0dXJuIGkgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdGNoVm5vZGUgKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7XG4gICAgaWYgKG9sZFZub2RlID09PSB2bm9kZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGVsbSA9IHZub2RlLmVsbSA9IG9sZFZub2RlLmVsbTtcblxuICAgIGlmIChpc1RydWUob2xkVm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyKSkge1xuICAgICAgaWYgKGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgaHlkcmF0ZShvbGRWbm9kZS5lbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHJldXNlIGVsZW1lbnQgZm9yIHN0YXRpYyB0cmVlcy5cbiAgICAvLyBub3RlIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIC1cbiAgICAvLyBpZiB0aGUgbmV3IG5vZGUgaXMgbm90IGNsb25lZCBpdCBtZWFucyB0aGUgcmVuZGVyIGZ1bmN0aW9ucyBoYXZlIGJlZW5cbiAgICAvLyByZXNldCBieSB0aGUgaG90LXJlbG9hZC1hcGkgYW5kIHdlIG5lZWQgdG8gZG8gYSBwcm9wZXIgcmUtcmVuZGVyLlxuICAgIGlmIChpc1RydWUodm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICBpc1RydWUob2xkVm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICB2bm9kZS5rZXkgPT09IG9sZFZub2RlLmtleSAmJlxuICAgICAgKGlzVHJ1ZSh2bm9kZS5pc0Nsb25lZCkgfHwgaXNUcnVlKHZub2RlLmlzT25jZSkpXG4gICAgKSB7XG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wcmVwYXRjaCkpIHtcbiAgICAgIGkob2xkVm5vZGUsIHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgb2xkQ2ggPSBvbGRWbm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgY2ggPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnVwZGF0ZS5sZW5ndGg7ICsraSkgeyBjYnMudXBkYXRlW2ldKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS51cGRhdGUpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNVbmRlZih2bm9kZS50ZXh0KSkge1xuICAgICAgaWYgKGlzRGVmKG9sZENoKSAmJiBpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKG9sZENoICE9PSBjaCkgeyB1cGRhdGVDaGlsZHJlbihlbG0sIG9sZENoLCBjaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KTsgfVxuICAgICAgfSBlbHNlIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7IG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7IH1cbiAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICByZW1vdmVWbm9kZXMoZWxtLCBvbGRDaCwgMCwgb2xkQ2gubGVuZ3RoIC0gMSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7XG4gICAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbGRWbm9kZS50ZXh0ICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgdm5vZGUudGV4dCk7XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnBvc3RwYXRjaCkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlSW5zZXJ0SG9vayAodm5vZGUsIHF1ZXVlLCBpbml0aWFsKSB7XG4gICAgLy8gZGVsYXkgaW5zZXJ0IGhvb2tzIGZvciBjb21wb25lbnQgcm9vdCBub2RlcywgaW52b2tlIHRoZW0gYWZ0ZXIgdGhlXG4gICAgLy8gZWxlbWVudCBpcyByZWFsbHkgaW5zZXJ0ZWRcbiAgICBpZiAoaXNUcnVlKGluaXRpYWwpICYmIGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgIHZub2RlLnBhcmVudC5kYXRhLnBlbmRpbmdJbnNlcnQgPSBxdWV1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBxdWV1ZVtpXS5kYXRhLmhvb2suaW5zZXJ0KHF1ZXVlW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgaHlkcmF0aW9uQmFpbGVkID0gZmFsc2U7XG4gIC8vIGxpc3Qgb2YgbW9kdWxlcyB0aGF0IGNhbiBza2lwIGNyZWF0ZSBob29rIGR1cmluZyBoeWRyYXRpb24gYmVjYXVzZSB0aGV5XG4gIC8vIGFyZSBhbHJlYWR5IHJlbmRlcmVkIG9uIHRoZSBjbGllbnQgb3IgaGFzIG5vIG5lZWQgZm9yIGluaXRpYWxpemF0aW9uXG4gIC8vIE5vdGU6IHN0eWxlIGlzIGV4Y2x1ZGVkIGJlY2F1c2UgaXQgcmVsaWVzIG9uIGluaXRpYWwgY2xvbmUgZm9yIGZ1dHVyZVxuICAvLyBkZWVwIHVwZGF0ZXMgKCM3MDYzKS5cbiAgdmFyIGlzUmVuZGVyZWRNb2R1bGUgPSBtYWtlTWFwKCdhdHRycyxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXknKTtcblxuICAvLyBOb3RlOiB0aGlzIGlzIGEgYnJvd3Nlci1vbmx5IGZ1bmN0aW9uIHNvIHdlIGNhbiBhc3N1bWUgZWxtcyBhcmUgRE9NIG5vZGVzLlxuICBmdW5jdGlvbiBoeWRyYXRlIChlbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGluVlByZSkge1xuICAgIHZhciBpO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGluVlByZSA9IGluVlByZSB8fCAoZGF0YSAmJiBkYXRhLnByZSk7XG4gICAgdm5vZGUuZWxtID0gZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpICYmIGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeSkpIHtcbiAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICAvLyBhc3NlcnQgbm9kZSBtYXRjaFxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIWFzc2VydE5vZGVNYXRjaChlbG0sIHZub2RlLCBpblZQcmUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkgeyBpKHZub2RlLCB0cnVlIC8qIGh5ZHJhdGluZyAqLyk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIC8vIGNoaWxkIGNvbXBvbmVudC4gaXQgc2hvdWxkIGhhdmUgaHlkcmF0ZWQgaXRzIG93biB0cmVlLlxuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgaWYgKGlzRGVmKGNoaWxkcmVuKSkge1xuICAgICAgICAvLyBlbXB0eSBlbGVtZW50LCBhbGxvdyBjbGllbnQgdG8gcGljayB1cCBhbmQgcG9wdWxhdGUgY2hpbGRyZW5cbiAgICAgICAgaWYgKCFlbG0uaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHYtaHRtbCBhbmQgZG9tUHJvcHM6IGlubmVySFRNTFxuICAgICAgICAgIGlmIChpc0RlZihpID0gZGF0YSkgJiYgaXNEZWYoaSA9IGkuZG9tUHJvcHMpICYmIGlzRGVmKGkgPSBpLmlubmVySFRNTCkpIHtcbiAgICAgICAgICAgIGlmIChpICE9PSBlbG0uaW5uZXJIVE1MKSB7XG4gICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICFoeWRyYXRpb25CYWlsZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3NlcnZlciBpbm5lckhUTUw6ICcsIGkpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignY2xpZW50IGlubmVySFRNTDogJywgZWxtLmlubmVySFRNTCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGl0ZXJhdGUgYW5kIGNvbXBhcmUgY2hpbGRyZW4gbGlzdHNcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbk1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBlbG0uZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgICAgICAgaWYgKCFjaGlsZE5vZGUgfHwgIWh5ZHJhdGUoY2hpbGROb2RlLCBjaGlsZHJlbltpJDFdLCBpbnNlcnRlZFZub2RlUXVldWUsIGluVlByZSkpIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbk1hdGNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiBjaGlsZE5vZGUgaXMgbm90IG51bGwsIGl0IG1lYW5zIHRoZSBhY3R1YWwgY2hpbGROb2RlcyBsaXN0IGlzXG4gICAgICAgICAgICAvLyBsb25nZXIgdGhhbiB0aGUgdmlydHVhbCBjaGlsZHJlbiBsaXN0LlxuICAgICAgICAgICAgaWYgKCFjaGlsZHJlbk1hdGNoIHx8IGNoaWxkTm9kZSkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdNaXNtYXRjaGluZyBjaGlsZE5vZGVzIHZzLiBWTm9kZXM6ICcsIGVsbS5jaGlsZE5vZGVzLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgdmFyIGZ1bGxJbnZva2UgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICBpZiAoIWlzUmVuZGVyZWRNb2R1bGUoa2V5KSkge1xuICAgICAgICAgICAgZnVsbEludm9rZSA9IHRydWU7XG4gICAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZnVsbEludm9rZSAmJiBkYXRhWydjbGFzcyddKSB7XG4gICAgICAgICAgLy8gZW5zdXJlIGNvbGxlY3RpbmcgZGVwcyBmb3IgZGVlcCBjbGFzcyBiaW5kaW5ncyBmb3IgZnV0dXJlIHVwZGF0ZXNcbiAgICAgICAgICB0cmF2ZXJzZShkYXRhWydjbGFzcyddKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWxtLmRhdGEgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIGVsbS5kYXRhID0gdm5vZGUudGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydE5vZGVNYXRjaCAobm9kZSwgdm5vZGUsIGluVlByZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS50YWcpKSB7XG4gICAgICByZXR1cm4gdm5vZGUudGFnLmluZGV4T2YoJ3Z1ZS1jb21wb25lbnQnKSA9PT0gMCB8fCAoXG4gICAgICAgICFpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBpblZQcmUpICYmXG4gICAgICAgIHZub2RlLnRhZy50b0xvd2VyQ2FzZSgpID09PSAobm9kZS50YWdOYW1lICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gKHZub2RlLmlzQ29tbWVudCA/IDggOiAzKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwYXRjaCAob2xkVm5vZGUsIHZub2RlLCBoeWRyYXRpbmcsIHJlbW92ZU9ubHksIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgaWYgKGlzVW5kZWYodm5vZGUpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkVm5vZGUpKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xuXG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUpKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaXNSZWFsRWxlbWVudCA9IGlzRGVmKG9sZFZub2RlLm5vZGVUeXBlKTtcbiAgICAgIGlmICghaXNSZWFsRWxlbWVudCAmJiBzYW1lVm5vZGUob2xkVm5vZGUsIHZub2RlKSkge1xuICAgICAgICAvLyBwYXRjaCBleGlzdGluZyByb290IG5vZGVcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNSZWFsRWxlbWVudCkge1xuICAgICAgICAgIC8vIG1vdW50aW5nIHRvIGEgcmVhbCBlbGVtZW50XG4gICAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBzZXJ2ZXItcmVuZGVyZWQgY29udGVudCBhbmQgaWYgd2UgY2FuIHBlcmZvcm1cbiAgICAgICAgICAvLyBhIHN1Y2Nlc3NmdWwgaHlkcmF0aW9uLlxuICAgICAgICAgIGlmIChvbGRWbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBvbGRWbm9kZS5oYXNBdHRyaWJ1dGUoU1NSX0FUVFIpKSB7XG4gICAgICAgICAgICBvbGRWbm9kZS5yZW1vdmVBdHRyaWJ1dGUoU1NSX0FUVFIpO1xuICAgICAgICAgICAgaHlkcmF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzVHJ1ZShoeWRyYXRpbmcpKSB7XG4gICAgICAgICAgICBpZiAoaHlkcmF0ZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkpIHtcbiAgICAgICAgICAgICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG9sZFZub2RlXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICAnVGhlIGNsaWVudC1zaWRlIHJlbmRlcmVkIHZpcnR1YWwgRE9NIHRyZWUgaXMgbm90IG1hdGNoaW5nICcgK1xuICAgICAgICAgICAgICAgICdzZXJ2ZXItcmVuZGVyZWQgY29udGVudC4gVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGluY29ycmVjdCAnICtcbiAgICAgICAgICAgICAgICAnSFRNTCBtYXJrdXAsIGZvciBleGFtcGxlIG5lc3RpbmcgYmxvY2stbGV2ZWwgZWxlbWVudHMgaW5zaWRlICcgK1xuICAgICAgICAgICAgICAgICc8cD4sIG9yIG1pc3NpbmcgPHRib2R5Pi4gQmFpbGluZyBoeWRyYXRpb24gYW5kIHBlcmZvcm1pbmcgJyArXG4gICAgICAgICAgICAgICAgJ2Z1bGwgY2xpZW50LXNpZGUgcmVuZGVyLidcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZWl0aGVyIG5vdCBzZXJ2ZXItcmVuZGVyZWQsIG9yIGh5ZHJhdGlvbiBmYWlsZWQuXG4gICAgICAgICAgLy8gY3JlYXRlIGFuIGVtcHR5IG5vZGUgYW5kIHJlcGxhY2UgaXRcbiAgICAgICAgICBvbGRWbm9kZSA9IGVtcHR5Tm9kZUF0KG9sZFZub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlcGxhY2luZyBleGlzdGluZyBlbGVtZW50XG4gICAgICAgIHZhciBvbGRFbG0gPSBvbGRWbm9kZS5lbG07XG4gICAgICAgIHZhciBwYXJlbnRFbG0kMSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgbm9kZVxuICAgICAgICBjcmVhdGVFbG0oXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgICAgIC8vIGV4dHJlbWVseSByYXJlIGVkZ2UgY2FzZTogZG8gbm90IGluc2VydCBpZiBvbGQgZWxlbWVudCBpcyBpbiBhXG4gICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG4gICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MClcbiAgICAgICAgICBvbGRFbG0uX2xlYXZlQ2IgPyBudWxsIDogcGFyZW50RWxtJDEsXG4gICAgICAgICAgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbG0pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gdXBkYXRlIHBhcmVudCBwbGFjZWhvbGRlciBub2RlIGVsZW1lbnQsIHJlY3Vyc2l2ZWx5XG4gICAgICAgIGlmIChpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGUucGFyZW50O1xuICAgICAgICAgIHZhciBwYXRjaGFibGUgPSBpc1BhdGNoYWJsZSh2bm9kZSk7XG4gICAgICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIGNicy5kZXN0cm95W2ldKGFuY2VzdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFuY2VzdG9yLmVsbSA9IHZub2RlLmVsbTtcbiAgICAgICAgICAgIGlmIChwYXRjaGFibGUpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICAgICAgICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgYW5jZXN0b3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vICM2NTEzXG4gICAgICAgICAgICAgIC8vIGludm9rZSBpbnNlcnQgaG9va3MgdGhhdCBtYXkgaGF2ZSBiZWVuIG1lcmdlZCBieSBjcmVhdGUgaG9va3MuXG4gICAgICAgICAgICAgIC8vIGUuZy4gZm9yIGRpcmVjdGl2ZXMgdGhhdCB1c2VzIHRoZSBcImluc2VydGVkXCIgaG9vay5cbiAgICAgICAgICAgICAgdmFyIGluc2VydCA9IGFuY2VzdG9yLmRhdGEuaG9vay5pbnNlcnQ7XG4gICAgICAgICAgICAgIGlmIChpbnNlcnQubWVyZ2VkKSB7XG4gICAgICAgICAgICAgICAgLy8gc3RhcnQgYXQgaW5kZXggMSB0byBhdm9pZCByZS1pbnZva2luZyBjb21wb25lbnQgbW91bnRlZCBob29rXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSQyID0gMTsgaSQyIDwgaW5zZXJ0LmZucy5sZW5ndGg7IGkkMisrKSB7XG4gICAgICAgICAgICAgICAgICBpbnNlcnQuZm5zW2kkMl0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlZ2lzdGVyUmVmKGFuY2VzdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRlc3Ryb3kgb2xkIG5vZGVcbiAgICAgICAgaWYgKGlzRGVmKHBhcmVudEVsbSQxKSkge1xuICAgICAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0kMSwgW29sZFZub2RlXSwgMCwgMCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGFnKSkge1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaXNJbml0aWFsUGF0Y2gpO1xuICAgIHJldHVybiB2bm9kZS5lbG1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGRpcmVjdGl2ZXMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgdXBkYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICBkZXN0cm95OiBmdW5jdGlvbiB1bmJpbmREaXJlY3RpdmVzICh2bm9kZSkge1xuICAgIHVwZGF0ZURpcmVjdGl2ZXModm5vZGUsIGVtcHR5Tm9kZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZURpcmVjdGl2ZXMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzIHx8IHZub2RlLmRhdGEuZGlyZWN0aXZlcykge1xuICAgIF91cGRhdGUob2xkVm5vZGUsIHZub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGlzQ3JlYXRlID0gb2xkVm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIGlzRGVzdHJveSA9IHZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBvbGREaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcywgb2xkVm5vZGUuY29udGV4dCk7XG4gIHZhciBuZXdEaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKHZub2RlLmRhdGEuZGlyZWN0aXZlcywgdm5vZGUuY29udGV4dCk7XG5cbiAgdmFyIGRpcnNXaXRoSW5zZXJ0ID0gW107XG4gIHZhciBkaXJzV2l0aFBvc3RwYXRjaCA9IFtdO1xuXG4gIHZhciBrZXksIG9sZERpciwgZGlyO1xuICBmb3IgKGtleSBpbiBuZXdEaXJzKSB7XG4gICAgb2xkRGlyID0gb2xkRGlyc1trZXldO1xuICAgIGRpciA9IG5ld0RpcnNba2V5XTtcbiAgICBpZiAoIW9sZERpcikge1xuICAgICAgLy8gbmV3IGRpcmVjdGl2ZSwgYmluZFxuICAgICAgY2FsbEhvb2skMShkaXIsICdiaW5kJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuaW5zZXJ0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhJbnNlcnQucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBkaXJlY3RpdmUsIHVwZGF0ZVxuICAgICAgZGlyLm9sZFZhbHVlID0gb2xkRGlyLnZhbHVlO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgKFwiZGlyZWN0aXZlIFwiICsgKGRpci5uYW1lKSArIFwiIFwiICsgaG9vayArIFwiIGhvb2tcIikpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIG9wdHMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoaXNEZWYob3B0cykgJiYgb3B0cy5DdG9yLm9wdGlvbnMuaW5oZXJpdEF0dHJzID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuYXR0cnMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5hdHRycykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXIsIG9sZDtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgdmFyIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihhdHRycy5fX29iX18pKSB7XG4gICAgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhdHRycyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgIGN1ciA9IGF0dHJzW2tleV07XG4gICAgb2xkID0gb2xkQXR0cnNba2V5XTtcbiAgICBpZiAob2xkICE9PSBjdXIpIHtcbiAgICAgIHNldEF0dHIoZWxtLCBrZXksIGN1cik7XG4gICAgfVxuICB9XG4gIC8vICM0MzkxOiBpbiBJRTksIHNldHRpbmcgdHlwZSBjYW4gcmVzZXQgdmFsdWUgZm9yIGlucHV0W3R5cGU9cmFkaW9dXG4gIC8vICM2NjY2OiBJRS9FZGdlIGZvcmNlcyBwcm9ncmVzcyB2YWx1ZSBkb3duIHRvIDEgYmVmb3JlIHNldHRpbmcgYSBtYXhcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICgoaXNJRSB8fCBpc0VkZ2UpICYmIGF0dHJzLnZhbHVlICE9PSBvbGRBdHRycy52YWx1ZSkge1xuICAgIHNldEF0dHIoZWxtLCAndmFsdWUnLCBhdHRycy52YWx1ZSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gb2xkQXR0cnMpIHtcbiAgICBpZiAoaXNVbmRlZihhdHRyc1trZXldKSkge1xuICAgICAgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgICAgfSBlbHNlIGlmICghaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0QXR0ciAoZWwsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkge1xuICAgIC8vIHNldCBhdHRyaWJ1dGUgZm9yIGJsYW5rIHZhbHVlXG4gICAgLy8gZS5nLiA8b3B0aW9uIGRpc2FibGVkPlNlbGVjdCBvbmU8L29wdGlvbj5cbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0ZWNobmljYWxseSBhbGxvd2Z1bGxzY3JlZW4gaXMgYSBib29sZWFuIGF0dHJpYnV0ZSBmb3IgPGlmcmFtZT4sXG4gICAgICAvLyBidXQgRmxhc2ggZXhwZWN0cyBhIHZhbHVlIG9mIFwidHJ1ZVwiIHdoZW4gdXNlZCBvbiA8ZW1iZWQ+IHRhZ1xuICAgICAgdmFsdWUgPSBrZXkgPT09ICdhbGxvd2Z1bGxzY3JlZW4nICYmIGVsLnRhZ05hbWUgPT09ICdFTUJFRCdcbiAgICAgICAgPyAndHJ1ZSdcbiAgICAgICAgOiBrZXk7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpIHx8IHZhbHVlID09PSAnZmFsc2UnID8gJ2ZhbHNlJyA6ICd0cnVlJyk7XG4gIH0gZWxzZSBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyAjNzEzODogSUUxMCAmIDExIGZpcmVzIGlucHV0IGV2ZW50IHdoZW4gc2V0dGluZyBwbGFjZWhvbGRlciBvblxuICAgICAgLy8gPHRleHRhcmVhPi4uLiBibG9jayB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYW5kIHJlbW92ZSB0aGUgYmxvY2tlclxuICAgICAgLy8gaW1tZWRpYXRlbHkuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChcbiAgICAgICAgaXNJRSAmJiAhaXNJRTkgJiZcbiAgICAgICAgZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJlxuICAgICAgICBrZXkgPT09ICdwbGFjZWhvbGRlcicgJiYgIWVsLl9faWVwaFxuICAgICAgKSB7XG4gICAgICAgIHZhciBibG9ja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7XG4gICAgICAgIH07XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICBlbC5fX2llcGggPSB0cnVlOyAvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovXG4gICAgICB9XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5cbnZhciBhdHRycyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVBdHRycyxcbiAgdXBkYXRlOiB1cGRhdGVBdHRyc1xufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcbiAgaWYgKFxuICAgIGlzVW5kZWYoZGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICBpc1VuZGVmKGRhdGEuY2xhc3MpICYmIChcbiAgICAgIGlzVW5kZWYob2xkRGF0YSkgfHwgKFxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5jbGFzcylcbiAgICAgIClcbiAgICApXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNscyA9IGdlbkNsYXNzRm9yVm5vZGUodm5vZGUpO1xuXG4gIC8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXNcbiAgdmFyIHRyYW5zaXRpb25DbGFzcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcztcbiAgaWYgKGlzRGVmKHRyYW5zaXRpb25DbGFzcykpIHtcbiAgICBjbHMgPSBjb25jYXQoY2xzLCBzdHJpbmdpZnlDbGFzcyh0cmFuc2l0aW9uQ2xhc3MpKTtcbiAgfVxuXG4gIC8vIHNldCB0aGUgY2xhc3NcbiAgaWYgKGNscyAhPT0gZWwuX3ByZXZDbGFzcykge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbHMpO1xuICAgIGVsLl9wcmV2Q2xhc3MgPSBjbHM7XG4gIH1cbn1cblxudmFyIGtsYXNzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUNsYXNzLFxuICB1cGRhdGU6IHVwZGF0ZUNsYXNzXG59O1xuXG4vKiAgKi9cblxuLyogICovXG5cblxuXG5cblxuXG5cblxuXG4vLyBhZGQgYSByYXcgYXR0ciAodXNlIHRoaXMgaW4gcHJlVHJhbnNmb3JtcylcblxuXG5cblxuXG5cblxuXG4vLyBub3RlOiB0aGlzIG9ubHkgcmVtb3ZlcyB0aGUgYXR0ciBmcm9tIHRoZSBBcnJheSAoYXR0cnNMaXN0KSBzbyB0aGF0IGl0XG4vLyBkb2Vzbid0IGdldCBwcm9jZXNzZWQgYnkgcHJvY2Vzc0F0dHJzLlxuLy8gQnkgZGVmYXVsdCBpdCBkb2VzIE5PVCByZW1vdmUgaXQgZnJvbSB0aGUgbWFwIChhdHRyc01hcCkgYmVjYXVzZSB0aGUgbWFwIGlzXG4vLyBuZWVkZWQgZHVyaW5nIGNvZGVnZW4uXG5cbi8qICAqL1xuXG4vKipcbiAqIENyb3NzLXBsYXRmb3JtIGNvZGUgZ2VuZXJhdGlvbiBmb3IgY29tcG9uZW50IHYtbW9kZWxcbiAqL1xuXG5cbi8qKlxuICogQ3Jvc3MtcGxhdGZvcm0gY29kZWdlbiBoZWxwZXIgZm9yIGdlbmVyYXRpbmcgdi1tb2RlbCB2YWx1ZSBhc3NpZ25tZW50IGNvZGUuXG4gKi9cblxuLyogICovXG5cbi8vIGluIHNvbWUgY2FzZXMsIHRoZSBldmVudCB1c2VkIGhhcyB0byBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWVcbi8vIHNvIHdlIHVzZWQgc29tZSByZXNlcnZlZCB0b2tlbnMgZHVyaW5nIGNvbXBpbGUuXG52YXIgUkFOR0VfVE9LRU4gPSAnX19yJztcbnZhciBDSEVDS0JPWF9SQURJT19UT0tFTiA9ICdfX2MnO1xuXG4vKiAgKi9cblxuLy8gbm9ybWFsaXplIHYtbW9kZWwgZXZlbnQgdG9rZW5zIHRoYXQgY2FuIG9ubHkgYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lLlxuLy8gaXQncyBpbXBvcnRhbnQgdG8gcGxhY2UgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBpbiB0aGUgYXJyYXkgYmVjYXVzZVxuLy8gdGhlIHdob2xlIHBvaW50IGlzIGVuc3VyaW5nIHRoZSB2LW1vZGVsIGNhbGxiYWNrIGdldHMgY2FsbGVkIGJlZm9yZVxuLy8gdXNlci1hdHRhY2hlZCBoYW5kbGVycy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50cyAob24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltSQU5HRV9UT0tFTl0pKSB7XG4gICAgLy8gSUUgaW5wdXRbdHlwZT1yYW5nZV0gb25seSBzdXBwb3J0cyBgY2hhbmdlYCBldmVudFxuICAgIHZhciBldmVudCA9IGlzSUUgPyAnY2hhbmdlJyA6ICdpbnB1dCc7XG4gICAgb25bZXZlbnRdID0gW10uY29uY2F0KG9uW1JBTkdFX1RPS0VOXSwgb25bZXZlbnRdIHx8IFtdKTtcbiAgICBkZWxldGUgb25bUkFOR0VfVE9LRU5dO1xuICB9XG4gIC8vIFRoaXMgd2FzIG9yaWdpbmFsbHkgaW50ZW5kZWQgdG8gZml4ICM0NTIxIGJ1dCBubyBsb25nZXIgbmVjZXNzYXJ5XG4gIC8vIGFmdGVyIDIuNS4gS2VlcGluZyBpdCBmb3IgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGdlbmVyYXRlZCBjb2RlIGZyb20gPCAyLjRcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltDSEVDS0JPWF9SQURJT19UT0tFTl0pKSB7XG4gICAgb24uY2hhbmdlID0gW10uY29uY2F0KG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSwgb24uY2hhbmdlIHx8IFtdKTtcbiAgICBkZWxldGUgb25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dO1xuICB9XG59XG5cbnZhciB0YXJnZXQkMTtcblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIgKGhhbmRsZXIsIGV2ZW50LCBjYXB0dXJlKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0JDE7IC8vIHNhdmUgY3VycmVudCB0YXJnZXQgZWxlbWVudCBpbiBjbG9zdXJlXG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGhhbmRsZXIuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICByZW1vdmUkMihldmVudCwgb25jZUhhbmRsZXIsIGNhcHR1cmUsIF90YXJnZXQpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGQkMSAoXG4gIGV2ZW50LFxuICBoYW5kbGVyLFxuICBvbmNlJCQxLFxuICBjYXB0dXJlLFxuICBwYXNzaXZlXG4pIHtcbiAgaGFuZGxlciA9IHdpdGhNYWNyb1Rhc2soaGFuZGxlcik7XG4gIGlmIChvbmNlJCQxKSB7IGhhbmRsZXIgPSBjcmVhdGVPbmNlSGFuZGxlcihoYW5kbGVyLCBldmVudCwgY2FwdHVyZSk7IH1cbiAgdGFyZ2V0JDEuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBldmVudCxcbiAgICBoYW5kbGVyLFxuICAgIHN1cHBvcnRzUGFzc2l2ZVxuICAgICAgPyB7IGNhcHR1cmU6IGNhcHR1cmUsIHBhc3NpdmU6IHBhc3NpdmUgfVxuICAgICAgOiBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQyIChcbiAgZXZlbnQsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIF90YXJnZXRcbikge1xuICAoX3RhcmdldCB8fCB0YXJnZXQkMSkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICBldmVudCxcbiAgICBoYW5kbGVyLl93aXRoVGFzayB8fCBoYW5kbGVyLFxuICAgIGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRE9NTGlzdGVuZXJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5vbikgJiYgaXNVbmRlZih2bm9kZS5kYXRhLm9uKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvbiA9IHZub2RlLmRhdGEub24gfHwge307XG4gIHZhciBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307XG4gIHRhcmdldCQxID0gdm5vZGUuZWxtO1xuICBub3JtYWxpemVFdmVudHMob24pO1xuICB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQkMSwgcmVtb3ZlJDIsIHZub2RlLmNvbnRleHQpO1xuICB0YXJnZXQkMSA9IHVuZGVmaW5lZDtcbn1cblxudmFyIGV2ZW50cyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmRvbVByb3BzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuZG9tUHJvcHMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkUHJvcHMgPSBvbGRWbm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKHByb3BzLl9fb2JfXykpIHtcbiAgICBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIG9sZFByb3BzKSB7XG4gICAgaWYgKGlzVW5kZWYocHJvcHNba2V5XSkpIHtcbiAgICAgIGVsbVtrZXldID0gJyc7XG4gICAgfVxuICB9XG4gIGZvciAoa2V5IGluIHByb3BzKSB7XG4gICAgY3VyID0gcHJvcHNba2V5XTtcbiAgICAvLyBpZ25vcmUgY2hpbGRyZW4gaWYgdGhlIG5vZGUgaGFzIHRleHRDb250ZW50IG9yIGlubmVySFRNTCxcbiAgICAvLyBhcyB0aGVzZSB3aWxsIHRocm93IGF3YXkgZXhpc3RpbmcgRE9NIG5vZGVzIGFuZCBjYXVzZSByZW1vdmFsIGVycm9yc1xuICAgIC8vIG9uIHN1YnNlcXVlbnQgcGF0Y2hlcyAoIzMzNjApXG4gICAgaWYgKGtleSA9PT0gJ3RleHRDb250ZW50JyB8fCBrZXkgPT09ICdpbm5lckhUTUwnKSB7XG4gICAgICBpZiAodm5vZGUuY2hpbGRyZW4pIHsgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoID0gMDsgfVxuICAgICAgaWYgKGN1ciA9PT0gb2xkUHJvcHNba2V5XSkgeyBjb250aW51ZSB9XG4gICAgICAvLyAjNjYwMSB3b3JrIGFyb3VuZCBDaHJvbWUgdmVyc2lvbiA8PSA1NSBidWcgd2hlcmUgc2luZ2xlIHRleHROb2RlXG4gICAgICAvLyByZXBsYWNlZCBieSBpbm5lckhUTUwvdGV4dENvbnRlbnQgcmV0YWlucyBpdHMgcGFyZW50Tm9kZSBwcm9wZXJ0eVxuICAgICAgaWYgKGVsbS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICd2YWx1ZScpIHtcbiAgICAgIC8vIHN0b3JlIHZhbHVlIGFzIF92YWx1ZSBhcyB3ZWxsIHNpbmNlXG4gICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkXG4gICAgICBlbG0uX3ZhbHVlID0gY3VyO1xuICAgICAgLy8gYXZvaWQgcmVzZXR0aW5nIGN1cnNvciBwb3NpdGlvbiB3aGVuIHZhbHVlIGlzIHRoZSBzYW1lXG4gICAgICB2YXIgc3RyQ3VyID0gaXNVbmRlZihjdXIpID8gJycgOiBTdHJpbmcoY3VyKTtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVWYWx1ZShlbG0sIHN0ckN1cikpIHtcbiAgICAgICAgZWxtLnZhbHVlID0gc3RyQ3VyO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbG1ba2V5XSA9IGN1cjtcbiAgICB9XG4gIH1cbn1cblxuLy8gY2hlY2sgcGxhdGZvcm1zL3dlYi91dGlsL2F0dHJzLmpzIGFjY2VwdFZhbHVlXG5cblxuZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUgKGVsbSwgY2hlY2tWYWwpIHtcbiAgcmV0dXJuICghZWxtLmNvbXBvc2luZyAmJiAoXG4gICAgZWxtLnRhZ05hbWUgPT09ICdPUFRJT04nIHx8XG4gICAgaXNOb3RJbkZvY3VzQW5kRGlydHkoZWxtLCBjaGVja1ZhbCkgfHxcbiAgICBpc0RpcnR5V2l0aE1vZGlmaWVycyhlbG0sIGNoZWNrVmFsKVxuICApKVxufVxuXG5mdW5jdGlvbiBpc05vdEluRm9jdXNBbmREaXJ0eSAoZWxtLCBjaGVja1ZhbCkge1xuICAvLyByZXR1cm4gdHJ1ZSB3aGVuIHRleHRib3ggKC5udW1iZXIgYW5kIC50cmltKSBsb3NlcyBmb2N1cyBhbmQgaXRzIHZhbHVlIGlzXG4gIC8vIG5vdCBlcXVhbCB0byB0aGUgdXBkYXRlZCB2YWx1ZVxuICB2YXIgbm90SW5Gb2N1cyA9IHRydWU7XG4gIC8vICM2MTU3XG4gIC8vIHdvcmsgYXJvdW5kIElFIGJ1ZyB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluIGFuIGlmcmFtZVxuICB0cnkgeyBub3RJbkZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxtOyB9IGNhdGNoIChlKSB7fVxuICByZXR1cm4gbm90SW5Gb2N1cyAmJiBlbG0udmFsdWUgIT09IGNoZWNrVmFsXG59XG5cbmZ1bmN0aW9uIGlzRGlydHlXaXRoTW9kaWZpZXJzIChlbG0sIG5ld1ZhbCkge1xuICB2YXIgdmFsdWUgPSBlbG0udmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSBlbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuICBpZiAoaXNEZWYobW9kaWZpZXJzKSkge1xuICAgIGlmIChtb2RpZmllcnMubGF6eSkge1xuICAgICAgLy8gaW5wdXRzIHdpdGggbGF6eSBzaG91bGQgb25seSBiZSB1cGRhdGVkIHdoZW4gbm90IGluIGZvY3VzXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVycy5udW1iZXIpIHtcbiAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZSkgIT09IHRvTnVtYmVyKG5ld1ZhbClcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVycy50cmltKSB7XG4gICAgICByZXR1cm4gdmFsdWUudHJpbSgpICE9PSBuZXdWYWwudHJpbSgpXG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZSAhPT0gbmV3VmFsXG59XG5cbnZhciBkb21Qcm9wcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01Qcm9wcyxcbiAgdXBkYXRlOiB1cGRhdGVET01Qcm9wc1xufTtcblxuLyogICovXG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlxcKSkvZztcbiAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkge1xuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XG4gIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdFxuICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZVxuICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgIDogc3R5bGVcbn1cblxuLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nIChiaW5kaW5nU3R5bGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICByZXR1cm4gYmluZGluZ1N0eWxlXG59XG5cbi8qKlxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xuICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGUgKHZub2RlLCBjaGVja0NoaWxkKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKFxuICAgICAgICBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEgJiZcbiAgICAgICAgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpXG4gICAgICApIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgY3NzVmFyUkUgPSAvXi0tLztcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xudmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemUobmFtZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgLy8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy5cbiAgICAgIC8vIHtkaXNwbGF5OiBbXCItd2Via2l0LWJveFwiLCBcIi1tcy1mbGV4Ym94XCIsIFwiZmxleFwiXX1cbiAgICAgIC8vIFNldCB0aGVtIG9uZSBieSBvbmUsIGFuZCB0aGUgYnJvd3NlciB3aWxsIG9ubHkgc2V0IHRob3NlIGl0IGNhbiByZWNvZ25pemVcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdmVuZG9yTmFtZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcblxudmFyIGVtcHR5U3R5bGU7XG52YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG4gIGVtcHR5U3R5bGUgPSBlbXB0eVN0eWxlIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICBwcm9wID0gY2FtZWxpemUocHJvcCk7XG4gIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiBlbXB0eVN0eWxlKSkge1xuICAgIHJldHVybiBwcm9wXG4gIH1cbiAgdmFyIGNhcE5hbWUgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuYW1lID0gdmVuZG9yTmFtZXNbaV0gKyBjYXBOYW1lO1xuICAgIGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcbiAgICAgIHJldHVybiBuYW1lXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcblxuICBpZiAoaXNVbmRlZihkYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKGRhdGEuc3R5bGUpICYmXG4gICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3R5bGUpXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGN1ciwgbmFtZTtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkU3RhdGljU3R5bGUgPSBvbGREYXRhLnN0YXRpY1N0eWxlO1xuICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkRGF0YS5ub3JtYWxpemVkU3R5bGUgfHwgb2xkRGF0YS5zdHlsZSB8fCB7fTtcblxuICAvLyBpZiBzdGF0aWMgc3R5bGUgZXhpc3RzLCBzdHlsZWJpbmRpbmcgYWxyZWFkeSBtZXJnZWQgaW50byBpdCB3aGVuIGRvaW5nIG5vcm1hbGl6ZVN0eWxlRGF0YVxuICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKHZub2RlLmRhdGEuc3R5bGUpIHx8IHt9O1xuXG4gIC8vIHN0b3JlIG5vcm1hbGl6ZWQgc3R5bGUgdW5kZXIgYSBkaWZmZXJlbnQga2V5IGZvciBuZXh0IGRpZmZcbiAgLy8gbWFrZSBzdXJlIHRvIGNsb25lIGl0IGlmIGl0J3MgcmVhY3RpdmUsIHNpbmNlIHRoZSB1c2VyIGxpa2VseSB3YW50c1xuICAvLyB0byBtdXRhdGUgaXQuXG4gIHZub2RlLmRhdGEubm9ybWFsaXplZFN0eWxlID0gaXNEZWYoc3R5bGUuX19vYl9fKVxuICAgID8gZXh0ZW5kKHt9LCBzdHlsZSlcbiAgICA6IHN0eWxlO1xuXG4gIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTtcblxuICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICBpZiAoaXNVbmRlZihuZXdTdHlsZVtuYW1lXSkpIHtcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsICcnKTtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG5ld1N0eWxlKSB7XG4gICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG4gICAgaWYgKGN1ciAhPT0gb2xkU3R5bGVbbmFtZV0pIHtcbiAgICAgIC8vIGllOSBzZXR0aW5nIHRvIG51bGwgaGFzIG5vIGVmZmVjdCwgbXVzdCB1c2UgZW1wdHkgc3RyaW5nXG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHN0eWxlID0ge1xuICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG59O1xuXG4vKiAgKi9cblxuLyoqXG4gKiBBZGQgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiBhZGRDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5hZGQoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgaWYgKGN1ci5pbmRleE9mKCcgJyArIGNscyArICcgJykgPCAwKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGN1ciArIGNscykudHJpbSgpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiByZW1vdmVDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gICAgfVxuICAgIGlmICghZWwuY2xhc3NMaXN0Lmxlbmd0aCkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIHZhciB0YXIgPSAnICcgKyBjbHMgKyAnICc7XG4gICAgd2hpbGUgKGN1ci5pbmRleE9mKHRhcikgPj0gMCkge1xuICAgICAgY3VyID0gY3VyLnJlcGxhY2UodGFyLCAnICcpO1xuICAgIH1cbiAgICBjdXIgPSBjdXIudHJpbSgpO1xuICAgIGlmIChjdXIpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvbiAoZGVmKSB7XG4gIGlmICghZGVmKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHR5cGVvZiBkZWYgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGlmIChkZWYuY3NzICE9PSBmYWxzZSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXV0b0Nzc1RyYW5zaXRpb24oZGVmLm5hbWUgfHwgJ3YnKSk7XG4gICAgfVxuICAgIGV4dGVuZChyZXMsIGRlZik7XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWYgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZilcbiAgfVxufVxuXG52YXIgYXV0b0Nzc1RyYW5zaXRpb24gPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnRlckNsYXNzOiAobmFtZSArIFwiLWVudGVyXCIpLFxuICAgIGVudGVyVG9DbGFzczogKG5hbWUgKyBcIi1lbnRlci10b1wiKSxcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKSxcbiAgICBsZWF2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlXCIpLFxuICAgIGxlYXZlVG9DbGFzczogKG5hbWUgKyBcIi1sZWF2ZS10b1wiKSxcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlLWFjdGl2ZVwiKVxuICB9XG59KTtcblxudmFyIGhhc1RyYW5zaXRpb24gPSBpbkJyb3dzZXIgJiYgIWlzSUU5O1xudmFyIFRSQU5TSVRJT04gPSAndHJhbnNpdGlvbic7XG52YXIgQU5JTUFUSU9OID0gJ2FuaW1hdGlvbic7XG5cbi8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmdcbnZhciB0cmFuc2l0aW9uUHJvcCA9ICd0cmFuc2l0aW9uJztcbnZhciB0cmFuc2l0aW9uRW5kRXZlbnQgPSAndHJhbnNpdGlvbmVuZCc7XG52YXIgYW5pbWF0aW9uUHJvcCA9ICdhbmltYXRpb24nO1xudmFyIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ2FuaW1hdGlvbmVuZCc7XG5pZiAoaGFzVHJhbnNpdGlvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHdpbmRvdy5vbnRyYW5zaXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICB0cmFuc2l0aW9uUHJvcCA9ICdXZWJraXRUcmFuc2l0aW9uJztcbiAgICB0cmFuc2l0aW9uRW5kRXZlbnQgPSAnd2Via2l0VHJhbnNpdGlvbkVuZCc7XG4gIH1cbiAgaWYgKHdpbmRvdy5vbmFuaW1hdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgYW5pbWF0aW9uUHJvcCA9ICdXZWJraXRBbmltYXRpb24nO1xuICAgIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdEFuaW1hdGlvbkVuZCc7XG4gIH1cbn1cblxuLy8gYmluZGluZyB0byB3aW5kb3cgaXMgbmVjZXNzYXJ5IHRvIG1ha2UgaG90IHJlbG9hZCB3b3JrIGluIElFIGluIHN0cmljdCBtb2RlXG52YXIgcmFmID0gaW5Ccm93c2VyXG4gID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdylcbiAgICA6IHNldFRpbWVvdXRcbiAgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuKCk7IH07XG5cbmZ1bmN0aW9uIG5leHRGcmFtZSAoZm4pIHtcbiAgcmFmKGZ1bmN0aW9uICgpIHtcbiAgICByYWYoZm4pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIHZhciB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcyB8fCAoZWwuX3RyYW5zaXRpb25DbGFzc2VzID0gW10pO1xuICBpZiAodHJhbnNpdGlvbkNsYXNzZXMuaW5kZXhPZihjbHMpIDwgMCkge1xuICAgIHRyYW5zaXRpb25DbGFzc2VzLnB1c2goY2xzKTtcbiAgICBhZGRDbGFzcyhlbCwgY2xzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgIHJlbW92ZShlbC5fdHJhbnNpdGlvbkNsYXNzZXMsIGNscyk7XG4gIH1cbiAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XG59XG5cbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyAoXG4gIGVsLFxuICBleHBlY3RlZFR5cGUsXG4gIGNiXG4pIHtcbiAgdmFyIHJlZiA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICB2YXIgdGltZW91dCA9IHJlZi50aW1lb3V0O1xuICB2YXIgcHJvcENvdW50ID0gcmVmLnByb3BDb3VudDtcbiAgaWYgKCF0eXBlKSB7IHJldHVybiBjYigpIH1cbiAgdmFyIGV2ZW50ID0gdHlwZSA9PT0gVFJBTlNJVElPTiA/IHRyYW5zaXRpb25FbmRFdmVudCA6IGFuaW1hdGlvbkVuZEV2ZW50O1xuICB2YXIgZW5kZWQgPSAwO1xuICB2YXIgZW5kID0gZnVuY3Rpb24gKCkge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbiAgICBjYigpO1xuICB9O1xuICB2YXIgb25FbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZWwpIHtcbiAgICAgIGlmICgrK2VuZGVkID49IHByb3BDb3VudCkge1xuICAgICAgICBlbmQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbmRlZCA8IHByb3BDb3VudCkge1xuICAgICAgZW5kKCk7XG4gICAgfVxuICB9LCB0aW1lb3V0ICsgMSk7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbn1cblxudmFyIHRyYW5zZm9ybVJFID0gL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLztcblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8gKGVsLCBleHBlY3RlZFR5cGUpIHtcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgdmFyIHRyYW5zaXRpb25EZWxheXMgPSBzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRGVsYXknXS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbnMgPSBzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRHVyYXRpb24nXS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dCh0cmFuc2l0aW9uRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcbiAgdmFyIGFuaW1hdGlvbkRlbGF5cyA9IHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0RlbGF5J10uc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25EdXJhdGlvbnMgPSBzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEdXJhdGlvbiddLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xuXG4gIHZhciB0eXBlO1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHZhciBwcm9wQ291bnQgPSAwO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBUUkFOU0lUSU9OO1xuICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gQU5JTUFUSU9OO1xuICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aW1lb3V0ID0gTWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsIGFuaW1hdGlvblRpbWVvdXQpO1xuICAgIHR5cGUgPSB0aW1lb3V0ID4gMFxuICAgICAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXRcbiAgICAgICAgPyBUUkFOU0lUSU9OXG4gICAgICAgIDogQU5JTUFUSU9OXG4gICAgICA6IG51bGw7XG4gICAgcHJvcENvdW50ID0gdHlwZVxuICAgICAgPyB0eXBlID09PSBUUkFOU0lUSU9OXG4gICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICA6IDA7XG4gIH1cbiAgdmFyIGhhc1RyYW5zZm9ybSA9XG4gICAgdHlwZSA9PT0gVFJBTlNJVElPTiAmJlxuICAgIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdGltZW91dDogdGltZW91dCxcbiAgICBwcm9wQ291bnQ6IHByb3BDb3VudCxcbiAgICBoYXNUcmFuc2Zvcm06IGhhc1RyYW5zZm9ybVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRpbWVvdXQgKGRlbGF5cywgZHVyYXRpb25zKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHdoaWxlIChkZWxheXMubGVuZ3RoIDwgZHVyYXRpb25zLmxlbmd0aCkge1xuICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBkdXJhdGlvbnMubWFwKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgcmV0dXJuIHRvTXMoZCkgKyB0b01zKGRlbGF5c1tpXSlcbiAgfSkpXG59XG5cbmZ1bmN0aW9uIHRvTXMgKHMpIHtcbiAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKSkgKiAxMDAwXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnRlciAodm5vZGUsIHRvZ2dsZURpc3BsYXkpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgbGVhdmUgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICBlbC5fbGVhdmVDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9sZWF2ZUNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGVudGVyQ2xhc3MgPSBkYXRhLmVudGVyQ2xhc3M7XG4gIHZhciBlbnRlclRvQ2xhc3MgPSBkYXRhLmVudGVyVG9DbGFzcztcbiAgdmFyIGVudGVyQWN0aXZlQ2xhc3MgPSBkYXRhLmVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciBhcHBlYXJDbGFzcyA9IGRhdGEuYXBwZWFyQ2xhc3M7XG4gIHZhciBhcHBlYXJUb0NsYXNzID0gZGF0YS5hcHBlYXJUb0NsYXNzO1xuICB2YXIgYXBwZWFyQWN0aXZlQ2xhc3MgPSBkYXRhLmFwcGVhckFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlRW50ZXIgPSBkYXRhLmJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXIgPSBkYXRhLmVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlciA9IGRhdGEuYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkID0gZGF0YS5lbnRlckNhbmNlbGxlZDtcbiAgdmFyIGJlZm9yZUFwcGVhciA9IGRhdGEuYmVmb3JlQXBwZWFyO1xuICB2YXIgYXBwZWFyID0gZGF0YS5hcHBlYXI7XG4gIHZhciBhZnRlckFwcGVhciA9IGRhdGEuYWZ0ZXJBcHBlYXI7XG4gIHZhciBhcHBlYXJDYW5jZWxsZWQgPSBkYXRhLmFwcGVhckNhbmNlbGxlZDtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICAvLyBhY3RpdmVJbnN0YW5jZSB3aWxsIGFsd2F5cyBiZSB0aGUgPHRyYW5zaXRpb24+IGNvbXBvbmVudCBtYW5hZ2luZyB0aGlzXG4gIC8vIHRyYW5zaXRpb24uIE9uZSBlZGdlIGNhc2UgdG8gY2hlY2sgaXMgd2hlbiB0aGUgPHRyYW5zaXRpb24+IGlzIHBsYWNlZFxuICAvLyBhcyB0aGUgcm9vdCBub2RlIG9mIGEgY2hpbGQgY29tcG9uZW50LiBJbiB0aGF0IGNhc2Ugd2UgbmVlZCB0byBjaGVja1xuICAvLyA8dHJhbnNpdGlvbj4ncyBwYXJlbnQgZm9yIGFwcGVhciBjaGVjay5cbiAgdmFyIGNvbnRleHQgPSBhY3RpdmVJbnN0YW5jZTtcbiAgdmFyIHRyYW5zaXRpb25Ob2RlID0gYWN0aXZlSW5zdGFuY2UuJHZub2RlO1xuICB3aGlsZSAodHJhbnNpdGlvbk5vZGUgJiYgdHJhbnNpdGlvbk5vZGUucGFyZW50KSB7XG4gICAgdHJhbnNpdGlvbk5vZGUgPSB0cmFuc2l0aW9uTm9kZS5wYXJlbnQ7XG4gICAgY29udGV4dCA9IHRyYW5zaXRpb25Ob2RlLmNvbnRleHQ7XG4gIH1cblxuICB2YXIgaXNBcHBlYXIgPSAhY29udGV4dC5faXNNb3VudGVkIHx8ICF2bm9kZS5pc1Jvb3RJbnNlcnQ7XG5cbiAgaWYgKGlzQXBwZWFyICYmICFhcHBlYXIgJiYgYXBwZWFyICE9PSAnJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHN0YXJ0Q2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJDbGFzc1xuICAgID8gYXBwZWFyQ2xhc3NcbiAgICA6IGVudGVyQ2xhc3M7XG4gIHZhciBhY3RpdmVDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgPyBhcHBlYXJBY3RpdmVDbGFzc1xuICAgIDogZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIHRvQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJUb0NsYXNzXG4gICAgPyBhcHBlYXJUb0NsYXNzXG4gICAgOiBlbnRlclRvQ2xhc3M7XG5cbiAgdmFyIGJlZm9yZUVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYmVmb3JlQXBwZWFyIHx8IGJlZm9yZUVudGVyKVxuICAgIDogYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKHR5cGVvZiBhcHBlYXIgPT09ICdmdW5jdGlvbicgPyBhcHBlYXIgOiBlbnRlcilcbiAgICA6IGVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFmdGVyQXBwZWFyIHx8IGFmdGVyRW50ZXIpXG4gICAgOiBhZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWRIb29rID0gaXNBcHBlYXJcbiAgICA/IChhcHBlYXJDYW5jZWxsZWQgfHwgZW50ZXJDYW5jZWxsZWQpXG4gICAgOiBlbnRlckNhbmNlbGxlZDtcblxuICB2YXIgZXhwbGljaXRFbnRlckR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmVudGVyXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZXhwbGljaXRFbnRlckR1cmF0aW9uICE9IG51bGwpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbiwgJ2VudGVyJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGVudGVySG9vayk7XG5cbiAgdmFyIGNiID0gZWwuX2VudGVyQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgfVxuICAgICAgZW50ZXJDYW5jZWxsZWRIb29rICYmIGVudGVyQ2FuY2VsbGVkSG9vayhlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyRW50ZXJIb29rICYmIGFmdGVyRW50ZXJIb29rKGVsKTtcbiAgICB9XG4gICAgZWwuX2VudGVyQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgIC8vIHJlbW92ZSBwZW5kaW5nIGxlYXZlIGVsZW1lbnQgb24gZW50ZXIgYnkgaW5qZWN0aW5nIGFuIGluc2VydCBob29rXG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIHZhciBwZW5kaW5nTm9kZSA9IHBhcmVudCAmJiBwYXJlbnQuX3BlbmRpbmcgJiYgcGFyZW50Ll9wZW5kaW5nW3Zub2RlLmtleV07XG4gICAgICBpZiAocGVuZGluZ05vZGUgJiZcbiAgICAgICAgcGVuZGluZ05vZGUudGFnID09PSB2bm9kZS50YWcgJiZcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiXG4gICAgICApIHtcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKCk7XG4gICAgICB9XG4gICAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gICAgfSk7XG4gIH1cblxuICAvLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXG4gIGJlZm9yZUVudGVySG9vayAmJiBiZWZvcmVFbnRlckhvb2soZWwpO1xuICBpZiAoZXhwZWN0c0NTUykge1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgaWYgKCFjYi5jYW5jZWxsZWQgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24pKSB7XG4gICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHZub2RlLmRhdGEuc2hvdykge1xuICAgIHRvZ2dsZURpc3BsYXkgJiYgdG9nZ2xlRGlzcGxheSgpO1xuICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgfVxuXG4gIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgIGNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGVhdmUgKHZub2RlLCBybSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBlbnRlciBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSkge1xuICAgIGVsLl9lbnRlckNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2VudGVyQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gcm0oKVxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBsZWF2ZUNsYXNzID0gZGF0YS5sZWF2ZUNsYXNzO1xuICB2YXIgbGVhdmVUb0NsYXNzID0gZGF0YS5sZWF2ZVRvQ2xhc3M7XG4gIHZhciBsZWF2ZUFjdGl2ZUNsYXNzID0gZGF0YS5sZWF2ZUFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlTGVhdmUgPSBkYXRhLmJlZm9yZUxlYXZlO1xuICB2YXIgbGVhdmUgPSBkYXRhLmxlYXZlO1xuICB2YXIgYWZ0ZXJMZWF2ZSA9IGRhdGEuYWZ0ZXJMZWF2ZTtcbiAgdmFyIGxlYXZlQ2FuY2VsbGVkID0gZGF0YS5sZWF2ZUNhbmNlbGxlZDtcbiAgdmFyIGRlbGF5TGVhdmUgPSBkYXRhLmRlbGF5TGVhdmU7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGxlYXZlKTtcblxuICB2YXIgZXhwbGljaXRMZWF2ZUR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmxlYXZlXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNEZWYoZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uLCAnbGVhdmUnLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgY2IgPSBlbC5fbGVhdmVDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuX3BlbmRpbmcpIHtcbiAgICAgIGVsLnBhcmVudE5vZGUuX3BlbmRpbmdbdm5vZGUua2V5XSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgbGVhdmVDYW5jZWxsZWQgJiYgbGVhdmVDYW5jZWxsZWQoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKGVsKTtcbiAgICB9XG4gICAgZWwuX2xlYXZlQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgIGRlbGF5TGVhdmUocGVyZm9ybUxlYXZlKTtcbiAgfSBlbHNlIHtcbiAgICBwZXJmb3JtTGVhdmUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlcmZvcm1MZWF2ZSAoKSB7XG4gICAgLy8gdGhlIGRlbGF5ZWQgbGVhdmUgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIGNhbmNlbGxlZFxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICAvLyByZWNvcmQgbGVhdmluZyBlbGVtZW50XG4gICAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbiAgICAgIChlbC5wYXJlbnROb2RlLl9wZW5kaW5nIHx8IChlbC5wYXJlbnROb2RlLl9wZW5kaW5nID0ge30pKVsodm5vZGUua2V5KV0gPSB2bm9kZTtcbiAgICB9XG4gICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpO1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgICAgaWYgKCFjYi5jYW5jZWxsZWQgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0TGVhdmVEdXJhdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxlYXZlICYmIGxlYXZlKGVsLCBjYik7XG4gICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBvbmx5IHVzZWQgaW4gZGV2IG1vZGVcbmZ1bmN0aW9uIGNoZWNrRHVyYXRpb24gKHZhbCwgbmFtZSwgdm5vZGUpIHtcbiAgaWYgKHR5cGVvZiB2YWwgIT09ICdudW1iZXInKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIFwiICtcbiAgICAgIFwiZ290IFwiICsgKEpTT04uc3RyaW5naWZ5KHZhbCkpICsgXCIuXCIsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIE5hTiAtIFwiICtcbiAgICAgICd0aGUgZHVyYXRpb24gZXhwcmVzc2lvbiBtaWdodCBiZSBpbmNvcnJlY3QuJyxcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbiAodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHRyYW5zaXRpb24gaG9vaydzIGFyZ3VtZW50IGxlbmd0aC4gVGhlIGhvb2sgbWF5IGJlOlxuICogLSBhIG1lcmdlZCBob29rIChpbnZva2VyKSB3aXRoIHRoZSBvcmlnaW5hbCBpbiAuZm5zXG4gKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aClcbiAqIC0gYSBwbGFpbiBmdW5jdGlvbiAoLmxlbmd0aClcbiAqL1xuZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCAoZm4pIHtcbiAgaWYgKGlzVW5kZWYoZm4pKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdmFyIGludm9rZXJGbnMgPSBmbi5mbnM7XG4gIGlmIChpc0RlZihpbnZva2VyRm5zKSkge1xuICAgIC8vIGludm9rZXJcbiAgICByZXR1cm4gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChcbiAgICAgIEFycmF5LmlzQXJyYXkoaW52b2tlckZucylcbiAgICAgICAgPyBpbnZva2VyRm5zWzBdXG4gICAgICAgIDogaW52b2tlckZuc1xuICAgIClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZuLl9sZW5ndGggfHwgZm4ubGVuZ3RoKSA+IDFcbiAgfVxufVxuXG5mdW5jdGlvbiBfZW50ZXIgKF8sIHZub2RlKSB7XG4gIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICBlbnRlcih2bm9kZSk7XG4gIH1cbn1cblxudmFyIHRyYW5zaXRpb24gPSBpbkJyb3dzZXIgPyB7XG4gIGNyZWF0ZTogX2VudGVyLFxuICBhY3RpdmF0ZTogX2VudGVyLFxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSQkMSAodm5vZGUsIHJtKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgIH1cbiAgfVxufSA6IHt9O1xuXG52YXIgcGxhdGZvcm1Nb2R1bGVzID0gW1xuICBhdHRycyxcbiAga2xhc3MsXG4gIGV2ZW50cyxcbiAgZG9tUHJvcHMsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uXG5dO1xuXG4vKiAgKi9cblxuLy8gdGhlIGRpcmVjdGl2ZSBtb2R1bGUgc2hvdWxkIGJlIGFwcGxpZWQgbGFzdCwgYWZ0ZXIgYWxsXG4vLyBidWlsdC1pbiBtb2R1bGVzIGhhdmUgYmVlbiBhcHBsaWVkLlxudmFyIG1vZHVsZXMgPSBwbGF0Zm9ybU1vZHVsZXMuY29uY2F0KGJhc2VNb2R1bGVzKTtcblxudmFyIHBhdGNoID0gY3JlYXRlUGF0Y2hGdW5jdGlvbih7IG5vZGVPcHM6IG5vZGVPcHMsIG1vZHVsZXM6IG1vZHVsZXMgfSk7XG5cbi8qKlxuICogTm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IGxpa2UgYXR0YWNoaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIEVsZW1lbnRzLlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuaWYgKGlzSUU5KSB7XG4gIC8vIGh0dHA6Ly93d3cubWF0dHM0MTEuY29tL3Bvc3QvaW50ZXJuZXQtZXhwbG9yZXItOS1vbmlucHV0L1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICBpZiAoZWwgJiYgZWwudm1vZGVsKSB7XG4gICAgICB0cmlnZ2VyKGVsLCAnaW5wdXQnKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgZGlyZWN0aXZlID0ge1xuICBpbnNlcnRlZDogZnVuY3Rpb24gaW5zZXJ0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSwgb2xkVm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgLy8gIzY5MDNcbiAgICAgIGlmIChvbGRWbm9kZS5lbG0gJiYgIW9sZFZub2RlLmVsbS5fdk9wdGlvbnMpIHtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGlyZWN0aXZlLmNvbXBvbmVudFVwZGF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICB9XG4gICAgICBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgfSBlbHNlIGlmICh2bm9kZS50YWcgPT09ICd0ZXh0YXJlYScgfHwgaXNUZXh0SW5wdXRUeXBlKGVsLnR5cGUpKSB7XG4gICAgICBlbC5fdk1vZGlmaWVycyA9IGJpbmRpbmcubW9kaWZpZXJzO1xuICAgICAgaWYgKCFiaW5kaW5nLm1vZGlmaWVycy5sYXp5KSB7XG4gICAgICAgIC8vIFNhZmFyaSA8IDEwLjIgJiBVSVdlYlZpZXcgZG9lc24ndCBmaXJlIGNvbXBvc2l0aW9uZW5kIHdoZW5cbiAgICAgICAgLy8gc3dpdGNoaW5nIGZvY3VzIGJlZm9yZSBjb25maXJtaW5nIGNvbXBvc2l0aW9uIGNob2ljZVxuICAgICAgICAvLyB0aGlzIGFsc28gZml4ZXMgdGhlIGlzc3VlIHdoZXJlIHNvbWUgYnJvd3NlcnMgZS5nLiBpT1MgQ2hyb21lXG4gICAgICAgIC8vIGZpcmVzIFwiY2hhbmdlXCIgaW5zdGVhZCBvZiBcImlucHV0XCIgb24gYXV0b2NvbXBsZXRlLlxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgaWYgKCFpc0FuZHJvaWQpIHtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICB9XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoaXNJRTkpIHtcbiAgICAgICAgICBlbC52bW9kZWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudFVwZGF0ZWQ6IGZ1bmN0aW9uIGNvbXBvbmVudFVwZGF0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICAvLyBpbiBjYXNlIHRoZSBvcHRpb25zIHJlbmRlcmVkIGJ5IHYtZm9yIGhhdmUgY2hhbmdlZCxcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgb3V0LW9mLXN5bmMgd2l0aCB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbiAgICAgIC8vIGRldGVjdCBzdWNoIGNhc2VzIGFuZCBmaWx0ZXIgb3V0IHZhbHVlcyB0aGF0IG5vIGxvbmdlciBoYXMgYSBtYXRjaGluZ1xuICAgICAgLy8gb3B0aW9uIGluIHRoZSBET00uXG4gICAgICB2YXIgcHJldk9wdGlvbnMgPSBlbC5fdk9wdGlvbnM7XG4gICAgICB2YXIgY3VyT3B0aW9ucyA9IGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICAgIGlmIChjdXJPcHRpb25zLnNvbWUoZnVuY3Rpb24gKG8sIGkpIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHByZXZPcHRpb25zW2ldKTsgfSkpIHtcbiAgICAgICAgLy8gdHJpZ2dlciBjaGFuZ2UgZXZlbnQgaWZcbiAgICAgICAgLy8gbm8gbWF0Y2hpbmcgb3B0aW9uIGZvdW5kIGZvciBhdCBsZWFzdCBvbmUgdmFsdWVcbiAgICAgICAgdmFyIG5lZWRSZXNldCA9IGVsLm11bHRpcGxlXG4gICAgICAgICAgPyBiaW5kaW5nLnZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGhhc05vTWF0Y2hpbmdPcHRpb24odiwgY3VyT3B0aW9ucyk7IH0pXG4gICAgICAgICAgOiBiaW5kaW5nLnZhbHVlICE9PSBiaW5kaW5nLm9sZFZhbHVlICYmIGhhc05vTWF0Y2hpbmdPcHRpb24oYmluZGluZy52YWx1ZSwgY3VyT3B0aW9ucyk7XG4gICAgICAgIGlmIChuZWVkUmVzZXQpIHtcbiAgICAgICAgICB0cmlnZ2VyKGVsLCAnY2hhbmdlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzSUUgfHwgaXNFZGdlKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gICAgfSwgMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWN0dWFsbHlTZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIHZhciB2YWx1ZSA9IGJpbmRpbmcudmFsdWU7XG4gIHZhciBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7XG4gIGlmIChpc011bHRpcGxlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPVxcXCJcIiArIChiaW5kaW5nLmV4cHJlc3Npb24pICsgXCJcXFwiPiBcIiArXG4gICAgICBcImV4cGVjdHMgYW4gQXJyYXkgdmFsdWUgZm9yIGl0cyBiaW5kaW5nLCBidXQgZ290IFwiICsgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VsZWN0ZWQsIG9wdGlvbjtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XG4gICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgIHNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBnZXRWYWx1ZShvcHRpb24pKSA+IC0xO1xuICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xuICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSkge1xuICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzTXVsdGlwbGUpIHtcbiAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzTm9NYXRjaGluZ09wdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZXZlcnkoZnVuY3Rpb24gKG8pIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHZhbHVlKTsgfSlcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUgKG9wdGlvbikge1xuICByZXR1cm4gJ192YWx1ZScgaW4gb3B0aW9uXG4gICAgPyBvcHRpb24uX3ZhbHVlXG4gICAgOiBvcHRpb24udmFsdWVcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0IChlKSB7XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25FbmQgKGUpIHtcbiAgLy8gcHJldmVudCB0cmlnZ2VyaW5nIGFuIGlucHV0IGV2ZW50IGZvciBubyByZWFzb25cbiAgaWYgKCFlLnRhcmdldC5jb21wb3NpbmcpIHsgcmV0dXJuIH1cbiAgZS50YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XG4gIHRyaWdnZXIoZS50YXJnZXQsICdpbnB1dCcpO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyIChlbCwgdHlwZSkge1xuICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XG4gIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xuICBlbC5kaXNwYXRjaEV2ZW50KGUpO1xufVxuXG4vKiAgKi9cblxuLy8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciBwb3NzaWJsZSB0cmFuc2l0aW9uIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgcm9vdFxuZnVuY3Rpb24gbG9jYXRlTm9kZSAodm5vZGUpIHtcbiAgcmV0dXJuIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmICghdm5vZGUuZGF0YSB8fCAhdm5vZGUuZGF0YS50cmFuc2l0aW9uKVxuICAgID8gbG9jYXRlTm9kZSh2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpXG4gICAgOiB2bm9kZVxufVxuXG52YXIgc2hvdyA9IHtcbiAgYmluZDogZnVuY3Rpb24gYmluZCAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG5cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgdmFyIG9yaWdpbmFsRGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA9XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnJyA6IGVsLnN0eWxlLmRpc3BsYXk7XG4gICAgaWYgKHZhbHVlICYmIHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gb3JpZ2luYWxEaXNwbGF5O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IG9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuICAgIHZhciBvbGRWYWx1ZSA9IHJlZi5vbGRWYWx1ZTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICh2YWx1ZSA9PT0gb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgIGVsLFxuICAgIGJpbmRpbmcsXG4gICAgdm5vZGUsXG4gICAgb2xkVm5vZGUsXG4gICAgaXNEZXN0cm95XG4gICkge1xuICAgIGlmICghaXNEZXN0cm95KSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgIH1cbiAgfVxufTtcblxudmFyIHBsYXRmb3JtRGlyZWN0aXZlcyA9IHtcbiAgbW9kZWw6IGRpcmVjdGl2ZSxcbiAgc2hvdzogc2hvd1xufTtcblxuLyogICovXG5cbi8vIFByb3ZpZGVzIHRyYW5zaXRpb24gc3VwcG9ydCBmb3IgYSBzaW5nbGUgZWxlbWVudC9jb21wb25lbnQuXG4vLyBzdXBwb3J0cyB0cmFuc2l0aW9uIG1vZGUgKG91dC1pbiAvIGluLW91dClcblxudmFyIHRyYW5zaXRpb25Qcm9wcyA9IHtcbiAgbmFtZTogU3RyaW5nLFxuICBhcHBlYXI6IEJvb2xlYW4sXG4gIGNzczogQm9vbGVhbixcbiAgbW9kZTogU3RyaW5nLFxuICB0eXBlOiBTdHJpbmcsXG4gIGVudGVyQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVDbGFzczogU3RyaW5nLFxuICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVUb0NsYXNzOiBTdHJpbmcsXG4gIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJDbGFzczogU3RyaW5nLFxuICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJUb0NsYXNzOiBTdHJpbmcsXG4gIGR1cmF0aW9uOiBbTnVtYmVyLCBTdHJpbmcsIE9iamVjdF1cbn07XG5cbi8vIGluIGNhc2UgdGhlIGNoaWxkIGlzIGFsc28gYW4gYWJzdHJhY3QgY29tcG9uZW50LCBlLmcuIDxrZWVwLWFsaXZlPlxuLy8gd2Ugd2FudCB0byByZWN1cnNpdmVseSByZXRyaWV2ZSB0aGUgcmVhbCBjb21wb25lbnQgdG8gYmUgcmVuZGVyZWRcbmZ1bmN0aW9uIGdldFJlYWxDaGlsZCAodm5vZGUpIHtcbiAgdmFyIGNvbXBPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGNvbXBPcHRpb25zICYmIGNvbXBPcHRpb25zLkN0b3Iub3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHJldHVybiBnZXRSZWFsQ2hpbGQoZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjb21wT3B0aW9ucy5jaGlsZHJlbikpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFRyYW5zaXRpb25EYXRhIChjb21wKSB7XG4gIHZhciBkYXRhID0ge307XG4gIHZhciBvcHRpb25zID0gY29tcC4kb3B0aW9ucztcbiAgLy8gcHJvcHNcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMucHJvcHNEYXRhKSB7XG4gICAgZGF0YVtrZXldID0gY29tcFtrZXldO1xuICB9XG4gIC8vIGV2ZW50cy5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMgYW5kIHBhc3MgdGhlbSBkaXJlY3RseSB0byB0aGUgdHJhbnNpdGlvbiBtZXRob2RzXG4gIHZhciBsaXN0ZW5lcnMgPSBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGZvciAodmFyIGtleSQxIGluIGxpc3RlbmVycykge1xuICAgIGRhdGFbY2FtZWxpemUoa2V5JDEpXSA9IGxpc3RlbmVyc1trZXkkMV07XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gcGxhY2Vob2xkZXIgKGgsIHJhd0NoaWxkKSB7XG4gIGlmICgvXFxkLWtlZXAtYWxpdmUkLy50ZXN0KHJhd0NoaWxkLnRhZykpIHtcbiAgICByZXR1cm4gaCgna2VlcC1hbGl2ZScsIHtcbiAgICAgIHByb3BzOiByYXdDaGlsZC5jb21wb25lbnRPcHRpb25zLnByb3BzRGF0YVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzUGFyZW50VHJhbnNpdGlvbiAodm5vZGUpIHtcbiAgd2hpbGUgKCh2bm9kZSA9IHZub2RlLnBhcmVudCkpIHtcbiAgICBpZiAodm5vZGUuZGF0YS50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1NhbWVDaGlsZCAoY2hpbGQsIG9sZENoaWxkKSB7XG4gIHJldHVybiBvbGRDaGlsZC5rZXkgPT09IGNoaWxkLmtleSAmJiBvbGRDaGlsZC50YWcgPT09IGNoaWxkLnRhZ1xufVxuXG52YXIgVHJhbnNpdGlvbiA9IHtcbiAgbmFtZTogJ3RyYW5zaXRpb24nLFxuICBwcm9wczogdHJhbnNpdGlvblByb3BzLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRhZyB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYyk7IH0pO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgd2FybihcbiAgICAgICAgJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQuIFVzZSAnICtcbiAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBtb2RlID0gdGhpcy5tb2RlO1xuXG4gICAgLy8gd2FybiBpbnZhbGlkIG1vZGVcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgbW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJ1xuICAgICkge1xuICAgICAgd2FybihcbiAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHJhd0NoaWxkID0gY2hpbGRyZW5bMF07XG5cbiAgICAvLyBpZiB0aGlzIGlzIGEgY29tcG9uZW50IHJvb3Qgbm9kZSBhbmQgdGhlIGNvbXBvbmVudCdzXG4gICAgLy8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG4gICAgaWYgKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICAvLyBhcHBseSB0cmFuc2l0aW9uIGRhdGEgdG8gY2hpbGRcbiAgICAvLyB1c2UgZ2V0UmVhbENoaWxkKCkgdG8gaWdub3JlIGFic3RyYWN0IGNvbXBvbmVudHMgZS5nLiBrZWVwLWFsaXZlXG4gICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGVhdmluZykge1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgIH1cblxuICAgIC8vIGVuc3VyZSBhIGtleSB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgdm5vZGUgdHlwZSBhbmQgdG8gdGhpcyB0cmFuc2l0aW9uXG4gICAgLy8gY29tcG9uZW50IGluc3RhbmNlLiBUaGlzIGtleSB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHBlbmRpbmcgbGVhdmluZyBub2Rlc1xuICAgIC8vIGR1cmluZyBlbnRlcmluZy5cbiAgICB2YXIgaWQgPSBcIl9fdHJhbnNpdGlvbi1cIiArICh0aGlzLl91aWQpICsgXCItXCI7XG4gICAgY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGxcbiAgICAgID8gY2hpbGQuaXNDb21tZW50XG4gICAgICAgID8gaWQgKyAnY29tbWVudCdcbiAgICAgICAgOiBpZCArIGNoaWxkLnRhZ1xuICAgICAgOiBpc1ByaW1pdGl2ZShjaGlsZC5rZXkpXG4gICAgICAgID8gKFN0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpID09PSAwID8gY2hpbGQua2V5IDogaWQgKyBjaGlsZC5rZXkpXG4gICAgICAgIDogY2hpbGQua2V5O1xuXG4gICAgdmFyIGRhdGEgPSAoY2hpbGQuZGF0YSB8fCAoY2hpbGQuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcbiAgICB2YXIgb2xkUmF3Q2hpbGQgPSB0aGlzLl92bm9kZTtcbiAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXG4gICAgLy8gbWFyayB2LXNob3dcbiAgICAvLyBzbyB0aGF0IHRoZSB0cmFuc2l0aW9uIG1vZHVsZSBjYW4gaGFuZCBvdmVyIHRoZSBjb250cm9sIHRvIHRoZSBkaXJlY3RpdmVcbiAgICBpZiAoY2hpbGQuZGF0YS5kaXJlY3RpdmVzICYmIGNoaWxkLmRhdGEuZGlyZWN0aXZlcy5zb21lKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWUgPT09ICdzaG93JzsgfSkpIHtcbiAgICAgIGNoaWxkLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgb2xkQ2hpbGQgJiZcbiAgICAgIG9sZENoaWxkLmRhdGEgJiZcbiAgICAgICFpc1NhbWVDaGlsZChjaGlsZCwgb2xkQ2hpbGQpICYmXG4gICAgICAhaXNBc3luY1BsYWNlaG9sZGVyKG9sZENoaWxkKSAmJlxuICAgICAgLy8gIzY2ODcgY29tcG9uZW50IHJvb3QgaXMgYSBjb21tZW50IG5vZGVcbiAgICAgICEob2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UgJiYgb2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlLmlzQ29tbWVudClcbiAgICApIHtcbiAgICAgIC8vIHJlcGxhY2Ugb2xkIGNoaWxkIHRyYW5zaXRpb24gZGF0YSB3aXRoIGZyZXNoIG9uZVxuICAgICAgLy8gaW1wb3J0YW50IGZvciBkeW5hbWljIHRyYW5zaXRpb25zIVxuICAgICAgdmFyIG9sZERhdGEgPSBvbGRDaGlsZC5kYXRhLnRyYW5zaXRpb24gPSBleHRlbmQoe30sIGRhdGEpO1xuICAgICAgLy8gaGFuZGxlIHRyYW5zaXRpb24gbW9kZVxuICAgICAgaWYgKG1vZGUgPT09ICdvdXQtaW4nKSB7XG4gICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xuICAgICAgICB0aGlzLl9sZWF2aW5nID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2FmdGVyTGVhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcyQxLl9sZWF2aW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcyQxLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0Jykge1xuICAgICAgICBpZiAoaXNBc3luY1BsYWNlaG9sZGVyKGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiBvbGRSYXdDaGlsZFxuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxheWVkTGVhdmU7XG4gICAgICAgIHZhciBwZXJmb3JtTGVhdmUgPSBmdW5jdGlvbiAoKSB7IGRlbGF5ZWRMZWF2ZSgpOyB9O1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnYWZ0ZXJFbnRlcicsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdlbnRlckNhbmNlbGxlZCcsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdkZWxheUxlYXZlJywgZnVuY3Rpb24gKGxlYXZlKSB7IGRlbGF5ZWRMZWF2ZSA9IGxlYXZlOyB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmF3Q2hpbGRcbiAgfVxufTtcblxuLyogICovXG5cbi8vIFByb3ZpZGVzIHRyYW5zaXRpb24gc3VwcG9ydCBmb3IgbGlzdCBpdGVtcy5cbi8vIHN1cHBvcnRzIG1vdmUgdHJhbnNpdGlvbnMgdXNpbmcgdGhlIEZMSVAgdGVjaG5pcXVlLlxuXG4vLyBCZWNhdXNlIHRoZSB2ZG9tJ3MgY2hpbGRyZW4gdXBkYXRlIGFsZ29yaXRobSBpcyBcInVuc3RhYmxlXCIgLSBpLmUuXG4vLyBpdCBkb2Vzbid0IGd1YXJhbnRlZSB0aGUgcmVsYXRpdmUgcG9zaXRpb25pbmcgb2YgcmVtb3ZlZCBlbGVtZW50cyxcbi8vIHdlIGZvcmNlIHRyYW5zaXRpb24tZ3JvdXAgdG8gdXBkYXRlIGl0cyBjaGlsZHJlbiBpbnRvIHR3byBwYXNzZXM6XG4vLyBpbiB0aGUgZmlyc3QgcGFzcywgd2UgcmVtb3ZlIGFsbCBub2RlcyB0aGF0IG5lZWQgdG8gYmUgcmVtb3ZlZCxcbi8vIHRyaWdnZXJpbmcgdGhlaXIgbGVhdmluZyB0cmFuc2l0aW9uOyBpbiB0aGUgc2Vjb25kIHBhc3MsIHdlIGluc2VydC9tb3ZlXG4vLyBpbnRvIHRoZSBmaW5hbCBkZXNpcmVkIHN0YXRlLiBUaGlzIHdheSBpbiB0aGUgc2Vjb25kIHBhc3MgcmVtb3ZlZFxuLy8gbm9kZXMgd2lsbCByZW1haW4gd2hlcmUgdGhleSBzaG91bGQgYmUuXG5cbnZhciBwcm9wcyA9IGV4dGVuZCh7XG4gIHRhZzogU3RyaW5nLFxuICBtb3ZlQ2xhc3M6IFN0cmluZ1xufSwgdHJhbnNpdGlvblByb3BzKTtcblxuZGVsZXRlIHByb3BzLm1vZGU7XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSB7XG4gIHByb3BzOiBwcm9wcyxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0YWcgPSB0aGlzLnRhZyB8fCB0aGlzLiR2bm9kZS5kYXRhLnRhZyB8fCAnc3Bhbic7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICB2YXIgcmF3Q2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB2YXIgdHJhbnNpdGlvbkRhdGEgPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldO1xuICAgICAgaWYgKGMudGFnKSB7XG4gICAgICAgIGlmIChjLmtleSAhPSBudWxsICYmIFN0cmluZyhjLmtleSkuaW5kZXhPZignX192bGlzdCcpICE9PSAwKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgICBtYXBbYy5rZXldID0gY1xuICAgICAgICAgIDsoYy5kYXRhIHx8IChjLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgd2FybigoXCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPFwiICsgbmFtZSArIFwiPlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAga2VwdC5wdXNoKGMkMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICBiZWZvcmVVcGRhdGU6IGZ1bmN0aW9uIGJlZm9yZVVwZGF0ZSAoKSB7XG4gICAgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzc1xuICAgIHRoaXMuX19wYXRjaF9fKFxuICAgICAgdGhpcy5fdm5vZGUsXG4gICAgICB0aGlzLmtlcHQsXG4gICAgICBmYWxzZSwgLy8gaHlkcmF0aW5nXG4gICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQgYXZvaWRzIHVubmVjZXNzYXJ5IG1vdmVzKVxuICAgICk7XG4gICAgdGhpcy5fdm5vZGUgPSB0aGlzLmtlcHQ7XG4gIH0sXG5cbiAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCAoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW47XG4gICAgdmFyIG1vdmVDbGFzcyA9IHRoaXMubW92ZUNsYXNzIHx8ICgodGhpcy5uYW1lIHx8ICd2JykgKyAnLW1vdmUnKTtcbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCB8fCAhdGhpcy5oYXNNb3ZlKGNoaWxkcmVuWzBdLmVsbSwgbW92ZUNsYXNzKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzXG4gICAgLy8gaW4gZWFjaCBpdGVyYXRpb24gLSB3aGljaCBoZWxwcyBwcmV2ZW50IGxheW91dCB0aHJhc2hpbmcuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChjYWxsUGVuZGluZ0Nicyk7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChhcHBseVRyYW5zbGF0aW9uKTtcblxuICAgIC8vIGZvcmNlIHJlZmxvdyB0byBwdXQgZXZlcnl0aGluZyBpbiBwb3NpdGlvblxuICAgIC8vIGFzc2lnbiB0byB0aGlzIHRvIGF2b2lkIGJlaW5nIHJlbW92ZWQgaW4gdHJlZS1zaGFraW5nXG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdGhpcy5fcmVmbG93ID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQ7XG5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICBpZiAoYy5kYXRhLm1vdmVkKSB7XG4gICAgICAgIHZhciBlbCA9IGMuZWxtO1xuICAgICAgICB2YXIgcyA9IGVsLnN0eWxlO1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcnO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgZWwuX21vdmVDYiA9IGZ1bmN0aW9uIGNiIChlKSB7XG4gICAgICAgICAgaWYgKCFlIHx8IC90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGNiKTtcbiAgICAgICAgICAgIGVsLl9tb3ZlQ2IgPSBudWxsO1xuICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGhhc01vdmU6IGZ1bmN0aW9uIGhhc01vdmUgKGVsLCBtb3ZlQ2xhc3MpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCFoYXNUcmFuc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAodGhpcy5faGFzTW92ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzTW92ZVxuICAgICAgfVxuICAgICAgLy8gRGV0ZWN0IHdoZXRoZXIgYW4gZWxlbWVudCB3aXRoIHRoZSBtb3ZlIGNsYXNzIGFwcGxpZWQgaGFzXG4gICAgICAvLyBDU1MgdHJhbnNpdGlvbnMuIFNpbmNlIHRoZSBlbGVtZW50IG1heSBiZSBpbnNpZGUgYW4gZW50ZXJpbmdcbiAgICAgIC8vIHRyYW5zaXRpb24gYXQgdGhpcyB2ZXJ5IG1vbWVudCwgd2UgbWFrZSBhIGNsb25lIG9mIGl0IGFuZCByZW1vdmVcbiAgICAgIC8vIGFsbCBvdGhlciB0cmFuc2l0aW9uIGNsYXNzZXMgYXBwbGllZCB0byBlbnN1cmUgb25seSB0aGUgbW92ZSBjbGFzc1xuICAgICAgLy8gaXMgYXBwbGllZC5cbiAgICAgIHZhciBjbG9uZSA9IGVsLmNsb25lTm9kZSgpO1xuICAgICAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgICAgICBlbC5fdHJhbnNpdGlvbkNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7IHJlbW92ZUNsYXNzKGNsb25lLCBjbHMpOyB9KTtcbiAgICAgIH1cbiAgICAgIGFkZENsYXNzKGNsb25lLCBtb3ZlQ2xhc3MpO1xuICAgICAgY2xvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIHRoaXMuJGVsLmFwcGVuZENoaWxkKGNsb25lKTtcbiAgICAgIHZhciBpbmZvID0gZ2V0VHJhbnNpdGlvbkluZm8oY2xvbmUpO1xuICAgICAgdGhpcy4kZWwucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgcmV0dXJuICh0aGlzLl9oYXNNb3ZlID0gaW5mby5oYXNUcmFuc2Zvcm0pXG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBjYWxsUGVuZGluZ0NicyAoYykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9tb3ZlQ2IpIHtcbiAgICBjLmVsbS5fbW92ZUNiKCk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fZW50ZXJDYikge1xuICAgIGMuZWxtLl9lbnRlckNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24gKGMpIHtcbiAgYy5kYXRhLm5ld1BvcyA9IGMuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuXG5mdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uIChjKSB7XG4gIHZhciBvbGRQb3MgPSBjLmRhdGEucG9zO1xuICB2YXIgbmV3UG9zID0gYy5kYXRhLm5ld1BvcztcbiAgdmFyIGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcbiAgdmFyIGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XG4gIGlmIChkeCB8fCBkeSkge1xuICAgIGMuZGF0YS5tb3ZlZCA9IHRydWU7XG4gICAgdmFyIHMgPSBjLmVsbS5zdHlsZTtcbiAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyBkeCArIFwicHgsXCIgKyBkeSArIFwicHgpXCI7XG4gICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xuICB9XG59XG5cbnZhciBwbGF0Zm9ybUNvbXBvbmVudHMgPSB7XG4gIFRyYW5zaXRpb246IFRyYW5zaXRpb24sXG4gIFRyYW5zaXRpb25Hcm91cDogVHJhbnNpdGlvbkdyb3VwXG59O1xuXG4vKiAgKi9cblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBzcGVjaWZpYyB1dGlsc1xuVnVlJDMuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5WdWUkMy5jb25maWcuaXNSZXNlcnZlZFRhZyA9IGlzUmVzZXJ2ZWRUYWc7XG5WdWUkMy5jb25maWcuaXNSZXNlcnZlZEF0dHIgPSBpc1Jlc2VydmVkQXR0cjtcblZ1ZSQzLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2UgPSBnZXRUYWdOYW1lc3BhY2U7XG5WdWUkMy5jb25maWcuaXNVbmtub3duRWxlbWVudCA9IGlzVW5rbm93bkVsZW1lbnQ7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcnVudGltZSBkaXJlY3RpdmVzICYgY29tcG9uZW50c1xuZXh0ZW5kKFZ1ZSQzLm9wdGlvbnMuZGlyZWN0aXZlcywgcGxhdGZvcm1EaXJlY3RpdmVzKTtcbmV4dGVuZChWdWUkMy5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblZ1ZSQzLnByb3RvdHlwZS5fX3BhdGNoX18gPSBpbkJyb3dzZXIgPyBwYXRjaCA6IG5vb3A7XG5cbi8vIHB1YmxpYyBtb3VudCBtZXRob2RcblZ1ZSQzLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbiAoXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICBlbCA9IGVsICYmIGluQnJvd3NlciA/IHF1ZXJ5KGVsKSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIG1vdW50Q29tcG9uZW50KHRoaXMsIGVsLCBoeWRyYXRpbmcpXG59O1xuXG4vLyBkZXZ0b29scyBnbG9iYWwgaG9va1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblZ1ZSQzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgaWYgKGNvbmZpZy5kZXZ0b29scykge1xuICAgIGlmIChkZXZ0b29scykge1xuICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSQzKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNDaHJvbWUpIHtcbiAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICAnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJyArXG4gICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLWRldnRvb2xzJ1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBjb25maWcucHJvZHVjdGlvblRpcCAhPT0gZmFsc2UgJiZcbiAgICBpbkJyb3dzZXIgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnXG4gICkge1xuICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgXCJZb3UgYXJlIHJ1bm5pbmcgVnVlIGluIGRldmVsb3BtZW50IG1vZGUuXFxuXCIgK1xuICAgICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgICAgXCJTZWUgbW9yZSB0aXBzIGF0IGh0dHBzOi8vdnVlanMub3JnL2d1aWRlL2RlcGxveW1lbnQuaHRtbFwiXG4gICAgKTtcbiAgfVxufSwgMCk7XG5cbi8qICAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZ1ZSQzO1xuIiwidmFyIGluc2VydGVkID0gZXhwb3J0cy5jYWNoZSA9IHt9XG5cbmZ1bmN0aW9uIG5vb3AgKCkge31cblxuZXhwb3J0cy5pbnNlcnQgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIGlmIChpbnNlcnRlZFtjc3NdKSByZXR1cm4gbm9vcFxuICBpbnNlcnRlZFtjc3NdID0gdHJ1ZVxuXG4gIHZhciBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKVxuICBlbGVtLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2NzcycpXG5cbiAgaWYgKCd0ZXh0Q29udGVudCcgaW4gZWxlbSkge1xuICAgIGVsZW0udGV4dENvbnRlbnQgPSBjc3NcbiAgfSBlbHNlIHtcbiAgICBlbGVtLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzc1xuICB9XG5cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChlbGVtKVxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0ucmVtb3ZlQ2hpbGQoZWxlbSlcbiAgICBpbnNlcnRlZFtjc3NdID0gZmFsc2VcbiAgfVxufVxuIiwidmFyIFZ1ZSAvLyBsYXRlIGJpbmRcbnZhciB2ZXJzaW9uXG52YXIgbWFwID0gKHdpbmRvdy5fX1ZVRV9IT1RfTUFQX18gPSBPYmplY3QuY3JlYXRlKG51bGwpKVxudmFyIGluc3RhbGxlZCA9IGZhbHNlXG52YXIgaXNCcm93c2VyaWZ5ID0gZmFsc2VcbnZhciBpbml0SG9va05hbWUgPSAnYmVmb3JlQ3JlYXRlJ1xuXG5leHBvcnRzLmluc3RhbGwgPSBmdW5jdGlvbiAodnVlLCBicm93c2VyaWZ5KSB7XG4gIGlmIChpbnN0YWxsZWQpIHsgcmV0dXJuIH1cbiAgaW5zdGFsbGVkID0gdHJ1ZVxuXG4gIFZ1ZSA9IHZ1ZS5fX2VzTW9kdWxlID8gdnVlLmRlZmF1bHQgOiB2dWVcbiAgdmVyc2lvbiA9IFZ1ZS52ZXJzaW9uLnNwbGl0KCcuJykubWFwKE51bWJlcilcbiAgaXNCcm93c2VyaWZ5ID0gYnJvd3NlcmlmeVxuXG4gIC8vIGNvbXBhdCB3aXRoIDwgMi4wLjAtYWxwaGEuN1xuICBpZiAoVnVlLmNvbmZpZy5fbGlmZWN5Y2xlSG9va3MuaW5kZXhPZignaW5pdCcpID4gLTEpIHtcbiAgICBpbml0SG9va05hbWUgPSAnaW5pdCdcbiAgfVxuXG4gIGV4cG9ydHMuY29tcGF0aWJsZSA9IHZlcnNpb25bMF0gPj0gMlxuICBpZiAoIWV4cG9ydHMuY29tcGF0aWJsZSkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdbSE1SXSBZb3UgYXJlIHVzaW5nIGEgdmVyc2lvbiBvZiB2dWUtaG90LXJlbG9hZC1hcGkgdGhhdCBpcyAnICtcbiAgICAgICAgJ29ubHkgY29tcGF0aWJsZSB3aXRoIFZ1ZS5qcyBjb3JlIF4yLjAuMC4nXG4gICAgKVxuICAgIHJldHVyblxuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcmVjb3JkIGZvciBhIGhvdCBtb2R1bGUsIHdoaWNoIGtlZXBzIHRyYWNrIG9mIGl0cyBjb25zdHJ1Y3RvclxuICogYW5kIGluc3RhbmNlc1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuXG5leHBvcnRzLmNyZWF0ZVJlY29yZCA9IGZ1bmN0aW9uIChpZCwgb3B0aW9ucykge1xuICB2YXIgQ3RvciA9IG51bGxcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgQ3RvciA9IG9wdGlvbnNcbiAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zXG4gIH1cbiAgbWFrZU9wdGlvbnNIb3QoaWQsIG9wdGlvbnMpXG4gIG1hcFtpZF0gPSB7XG4gICAgQ3RvcjogQ3RvcixcbiAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgIGluc3RhbmNlczogW11cbiAgfVxufVxuXG4vKipcbiAqIE1ha2UgYSBDb21wb25lbnQgb3B0aW9ucyBvYmplY3QgaG90LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuXG5mdW5jdGlvbiBtYWtlT3B0aW9uc0hvdChpZCwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgdmFyIHJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiAoaCwgY3R4KSB7XG4gICAgICB2YXIgaW5zdGFuY2VzID0gbWFwW2lkXS5pbnN0YW5jZXNcbiAgICAgIGlmIChjdHggJiYgaW5zdGFuY2VzLmluZGV4T2YoY3R4LnBhcmVudCkgPCAwKSB7XG4gICAgICAgIGluc3RhbmNlcy5wdXNoKGN0eC5wYXJlbnQpXG4gICAgICB9XG4gICAgICByZXR1cm4gcmVuZGVyKGgsIGN0eClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaW5qZWN0SG9vayhvcHRpb25zLCBpbml0SG9va05hbWUsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlY29yZCA9IG1hcFtpZF1cbiAgICAgIGlmICghcmVjb3JkLkN0b3IpIHtcbiAgICAgICAgcmVjb3JkLkN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yXG4gICAgICB9XG4gICAgICByZWNvcmQuaW5zdGFuY2VzLnB1c2godGhpcylcbiAgICB9KVxuICAgIGluamVjdEhvb2sob3B0aW9ucywgJ2JlZm9yZURlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpbnN0YW5jZXMgPSBtYXBbaWRdLmluc3RhbmNlc1xuICAgICAgaW5zdGFuY2VzLnNwbGljZShpbnN0YW5jZXMuaW5kZXhPZih0aGlzKSwgMSlcbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogSW5qZWN0IGEgaG9vayB0byBhIGhvdCByZWxvYWRhYmxlIGNvbXBvbmVudCBzbyB0aGF0XG4gKiB3ZSBjYW4ga2VlcCB0cmFjayBvZiBpdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhvb2tcbiAqL1xuXG5mdW5jdGlvbiBpbmplY3RIb29rKG9wdGlvbnMsIG5hbWUsIGhvb2spIHtcbiAgdmFyIGV4aXN0aW5nID0gb3B0aW9uc1tuYW1lXVxuICBvcHRpb25zW25hbWVdID0gZXhpc3RpbmdcbiAgICA/IEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpID8gZXhpc3RpbmcuY29uY2F0KGhvb2spIDogW2V4aXN0aW5nLCBob29rXVxuICAgIDogW2hvb2tdXG59XG5cbmZ1bmN0aW9uIHRyeVdyYXAoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpZCwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKGlkLCBhcmcpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIFZ1ZSBjb21wb25lbnQgaG90LXJlbG9hZC4gRnVsbCByZWxvYWQgcmVxdWlyZWQuJ1xuICAgICAgKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVPcHRpb25zIChvbGRPcHRpb25zLCBuZXdPcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBvbGRPcHRpb25zKSB7XG4gICAgaWYgKCEoa2V5IGluIG5ld09wdGlvbnMpKSB7XG4gICAgICBkZWxldGUgb2xkT3B0aW9uc1trZXldXG4gICAgfVxuICB9XG4gIGZvciAodmFyIGtleSQxIGluIG5ld09wdGlvbnMpIHtcbiAgICBvbGRPcHRpb25zW2tleSQxXSA9IG5ld09wdGlvbnNba2V5JDFdXG4gIH1cbn1cblxuZXhwb3J0cy5yZXJlbmRlciA9IHRyeVdyYXAoZnVuY3Rpb24gKGlkLCBvcHRpb25zKSB7XG4gIHZhciByZWNvcmQgPSBtYXBbaWRdXG4gIGlmICghb3B0aW9ucykge1xuICAgIHJlY29yZC5pbnN0YW5jZXMuc2xpY2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgaW5zdGFuY2UuJGZvcmNlVXBkYXRlKClcbiAgICB9KVxuICAgIHJldHVyblxuICB9XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zLm9wdGlvbnNcbiAgfVxuICBpZiAocmVjb3JkLkN0b3IpIHtcbiAgICByZWNvcmQuQ3Rvci5vcHRpb25zLnJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgcmVjb3JkLkN0b3Iub3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZuc1xuICAgIHJlY29yZC5pbnN0YW5jZXMuc2xpY2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgaW5zdGFuY2UuJG9wdGlvbnMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICAgIGluc3RhbmNlLiRvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zXG4gICAgICAvLyByZXNldCBzdGF0aWMgdHJlZXNcbiAgICAgIC8vIHByZSAyLjUsIGFsbCBzdGF0aWMgdHJlZXMgYXJlIGNhaGNlZCB0b2dldGhlciBvbiB0aGUgaW5zdGFuY2VcbiAgICAgIGlmIChpbnN0YW5jZS5fc3RhdGljVHJlZXMpIHtcbiAgICAgICAgaW5zdGFuY2UuX3N0YXRpY1RyZWVzID0gW11cbiAgICAgIH1cbiAgICAgIC8vIDIuNS4wXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWNvcmQuQ3Rvci5vcHRpb25zLmNhY2hlZCkpIHtcbiAgICAgICAgcmVjb3JkLkN0b3Iub3B0aW9ucy5jYWNoZWQgPSBbXVxuICAgICAgfVxuICAgICAgLy8gMi41LjNcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGluc3RhbmNlLiRvcHRpb25zLmNhY2hlZCkpIHtcbiAgICAgICAgaW5zdGFuY2UuJG9wdGlvbnMuY2FjaGVkID0gW11cbiAgICAgIH1cbiAgICAgIC8vIHBvc3QgMi41LjQ6IHYtb25jZSB0cmVlcyBhcmUgY2FjaGVkIG9uIGluc3RhbmNlLl9zdGF0aWNUcmVlcy5cbiAgICAgIC8vIFB1cmUgc3RhdGljIHRyZWVzIGFyZSBjYWNoZWQgb24gdGhlIHN0YXRpY1JlbmRlckZucyBhcnJheVxuICAgICAgLy8gKGJvdGggYWxyZWFkeSByZXNldCBhYm92ZSlcbiAgICAgIGluc3RhbmNlLiRmb3JjZVVwZGF0ZSgpXG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICAvLyBmdW5jdGlvbmFsIG9yIG5vIGluc3RhbmNlIGNyZWF0ZWQgeWV0XG4gICAgcmVjb3JkLm9wdGlvbnMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICByZWNvcmQub3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZuc1xuXG4gICAgLy8gaGFuZGxlIGZ1bmN0aW9uYWwgY29tcG9uZW50IHJlLXJlbmRlclxuICAgIGlmIChyZWNvcmQub3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyByZXJlbmRlciB3aXRoIGZ1bGwgb3B0aW9uc1xuICAgICAgaWYgKE9iamVjdC5rZXlzKG9wdGlvbnMpLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgdXBkYXRlT3B0aW9ucyhyZWNvcmQub3B0aW9ucywgb3B0aW9ucylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHRlbXBsYXRlLW9ubHkgcmVyZW5kZXIuXG4gICAgICAgIC8vIG5lZWQgdG8gaW5qZWN0IHRoZSBzdHlsZSBpbmplY3Rpb24gY29kZSBmb3IgQ1NTIG1vZHVsZXNcbiAgICAgICAgLy8gdG8gd29yayBwcm9wZXJseS5cbiAgICAgICAgdmFyIGluamVjdFN0eWxlcyA9IHJlY29yZC5vcHRpb25zLl9pbmplY3RTdHlsZXNcbiAgICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICAgIHZhciByZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgICAgIHJlY29yZC5vcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIChoLCBjdHgpIHtcbiAgICAgICAgICAgIGluamVjdFN0eWxlcy5jYWxsKGN0eClcbiAgICAgICAgICAgIHJldHVybiByZW5kZXIoaCwgY3R4KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVjb3JkLm9wdGlvbnMuX0N0b3IgPSBudWxsXG4gICAgICAvLyAyLjUuM1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVjb3JkLm9wdGlvbnMuY2FjaGVkKSkge1xuICAgICAgICByZWNvcmQub3B0aW9ucy5jYWNoZWQgPSBbXVxuICAgICAgfVxuICAgICAgcmVjb3JkLmluc3RhbmNlcy5zbGljZSgpLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIGluc3RhbmNlLiRmb3JjZVVwZGF0ZSgpXG4gICAgICB9KVxuICAgIH1cbiAgfVxufSlcblxuZXhwb3J0cy5yZWxvYWQgPSB0cnlXcmFwKGZ1bmN0aW9uIChpZCwgb3B0aW9ucykge1xuICB2YXIgcmVjb3JkID0gbWFwW2lkXVxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMub3B0aW9uc1xuICAgIH1cbiAgICBtYWtlT3B0aW9uc0hvdChpZCwgb3B0aW9ucylcbiAgICBpZiAocmVjb3JkLkN0b3IpIHtcbiAgICAgIGlmICh2ZXJzaW9uWzFdIDwgMikge1xuICAgICAgICAvLyBwcmVzZXJ2ZSBwcmUgMi4yIGJlaGF2aW9yIGZvciBnbG9iYWwgbWl4aW4gaGFuZGxpbmdcbiAgICAgICAgcmVjb3JkLkN0b3IuZXh0ZW5kT3B0aW9ucyA9IG9wdGlvbnNcbiAgICAgIH1cbiAgICAgIHZhciBuZXdDdG9yID0gcmVjb3JkLkN0b3Iuc3VwZXIuZXh0ZW5kKG9wdGlvbnMpXG4gICAgICByZWNvcmQuQ3Rvci5vcHRpb25zID0gbmV3Q3Rvci5vcHRpb25zXG4gICAgICByZWNvcmQuQ3Rvci5jaWQgPSBuZXdDdG9yLmNpZFxuICAgICAgcmVjb3JkLkN0b3IucHJvdG90eXBlID0gbmV3Q3Rvci5wcm90b3R5cGVcbiAgICAgIGlmIChuZXdDdG9yLnJlbGVhc2UpIHtcbiAgICAgICAgLy8gdGVtcG9yYXJ5IGdsb2JhbCBtaXhpbiBzdHJhdGVneSB1c2VkIGluIDwgMi4wLjAtYWxwaGEuNlxuICAgICAgICBuZXdDdG9yLnJlbGVhc2UoKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB1cGRhdGVPcHRpb25zKHJlY29yZC5vcHRpb25zLCBvcHRpb25zKVxuICAgIH1cbiAgfVxuICByZWNvcmQuaW5zdGFuY2VzLnNsaWNlKCkuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBpZiAoaW5zdGFuY2UuJHZub2RlICYmIGluc3RhbmNlLiR2bm9kZS5jb250ZXh0KSB7XG4gICAgICBpbnN0YW5jZS4kdm5vZGUuY29udGV4dC4kZm9yY2VVcGRhdGUoKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdSb290IG9yIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UgbW9kaWZpZWQuIEZ1bGwgcmVsb2FkIHJlcXVpcmVkLidcbiAgICAgIClcbiAgICB9XG4gIH0pXG59KVxuIiwiVnVlLmNvbmZpZy5kZXZ0b29scyA9IHRydWU7XHJcblxyXG5pbXBvcnQgbUFwcGxpY2F0aW9uIGZyb20gJy4uL3Z1ZS9tLWFwcGxpY2F0aW9uLnZ1ZSc7XHJcbmltcG9ydCBMYW5nIGZyb20gJy4vbGFuZyc7XHJcblxyXG5sZXQgbGFuZyA9IG5ldyBMYW5nKCk7XHJcblxyXG53aW5kb3cuZG9jdW1lbnQudGl0bGUgPSBsYW5nLnRyYW5zbGF0ZSgndGl0bGUnKTtcclxuXHJcblZ1ZS5kaXJlY3RpdmUoJ2xhbmcnLCB7XHJcbiAgICBpbnNlcnRlZDogZnVuY3Rpb24gKGVsLCBiaW5kaW5nKSB7XHJcbiAgICAgICAgZWwuaW5uZXJIVE1MID0gbGFuZy50cmFuc2xhdGUoYmluZGluZy52YWx1ZSk7XHJcbiAgICB9XHJcbn0pO1xyXG5WdWUuZGlyZWN0aXZlKCdsYW5nLWNoaWxkcmVuJywge1xyXG4gICAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIChlbCwgYmluZGluZykge1xyXG4gICAgICAgIGVsLmNoaWxkcmVuWzBdLmlubmVySFRNTCA9IGxhbmcudHJhbnNsYXRlKGJpbmRpbmcudmFsdWUpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbm5ldyBWdWUoe1xyXG4gICAgZWw6ICcjYXBwJyxcclxuICAgIGNvbXBvbmVudHM6IHttQXBwbGljYXRpb259LFxyXG4gICAgZGF0YSgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjdXJyZW50OiAnaG9tZSdcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pOyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIExhbmcge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuZGV0ZWN0ZWQgPSAobmF2aWdhdG9yLmxhbmd1YWdlIHx8IG5hdmlnYXRvci51c2VyTGFuZ3VhZ2UpLnNwbGl0KCctJylbMF07XHJcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gJyc7XHJcbiAgICAgICAgdGhpcy5kaWN0aW9uYXJ5ID0gTGFuZy5sb2FkKHRoaXMuY3VycmVudCB8fCB0aGlzLmRldGVjdGVkKTtcclxuICAgIH1cclxuXHJcbiAgICB0cmFuc2xhdGUoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIF8uZ2V0KHRoaXMuZGljdGlvbmFyeSwga2V5LCAnI2ZpeCB0aGlzIycpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBsb2FkKGxhbmcsIHN0b3ApIHtcclxuICAgICAgICBsZXQgZGljdGlvbmFyeSA9IG51bGw7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiAnL2xhbmcvJyArIGxhbmcgKyAnLmpzb24nLFxyXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICBhc3luYzogZmFsc2UsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBkaWN0aW9uYXJ5ID0gZGF0YTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiAoZGljdGlvbmFyeSA9PSBudWxsICYmICFzdG9wKSA/IExhbmcubG9hZCgnZW4nKSA6IGRpY3Rpb25hcnk7XHJcbiAgICB9XHJcbn0iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY29udGVudFwiPlxyXG4gICAgICAgIDxtLW5hdmlnYXRpb24gdi1iaW5kOmN1cnJlbnQ9XCJjdXJyZW50XCI+PC9tLW5hdmlnYXRpb24+XHJcbiAgICAgICAgPG0tY29udGVudD48L20tY29udGVudD5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuICAgIGltcG9ydCBNTmF2aWdhdGlvbiBmcm9tIFwiLi9tLW5hdmlnYXRpb24udnVlXCI7XHJcbiAgICBpbXBvcnQgTUNvbnRlbnQgZnJvbSBcIi4vbS1jb250ZW50LnZ1ZVwiO1xyXG5cclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgICAgICBwcm9wczogWydjdXJyZW50J10sXHJcbiAgICAgICAgY29tcG9uZW50czoge1xyXG4gICAgICAgICAgICBNQ29udGVudCxcclxuICAgICAgICAgICAgTU5hdmlnYXRpb25cclxuICAgICAgICB9LFxyXG4gICAgICAgIG5hbWU6IFwibS1hcHBsaWNhdGlvblwiXHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIHNjb3BlZD5cclxuXHJcbjwvc3R5bGU+IiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cInNlY3Rpb25zXCI+XHJcbiAgICAgICAgPG0tc2VjdGlvbi1ob21lPjwvbS1zZWN0aW9uLWhvbWU+XHJcbiAgICAgICAgPG0tc2VjdGlvbi1hYm91dD48L20tc2VjdGlvbi1hYm91dD5cclxuICAgICAgICA8bS1zZWN0aW9uLWV4cGVyaWVuY2U+PC9tLXNlY3Rpb24tZXhwZXJpZW5jZT5cclxuICAgICAgICA8c2VjdGlvbiBpZD1cImxvZ28yXCI+PC9zZWN0aW9uPlxyXG4gICAgICAgIDxtLXNlY3Rpb24tZWR1Y2F0aW9uPjwvbS1zZWN0aW9uLWVkdWNhdGlvbj5cclxuICAgICAgICA8bS1zZWN0aW9uLWNvbnRhY3Q+PC9tLXNlY3Rpb24tY29udGFjdD5cclxuICAgICAgICA8c2VjdGlvbiBpZD1cImxvZ28zXCI+PC9zZWN0aW9uPlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgaW1wb3J0IE1TZWN0aW9uSG9tZSBmcm9tIFwiLi9tLXNlY3Rpb24taG9tZS52dWVcIjtcclxuICAgIGltcG9ydCBNU2VjdGlvbkFib3V0IGZyb20gXCIuL20tc2VjdGlvbi1hYm91dC52dWVcIjtcclxuICAgIGltcG9ydCBNU2VjdGlvbkNvbnRhY3QgZnJvbSBcIi4vbS1zZWN0aW9uLWNvbnRhY3QudnVlXCI7XHJcbiAgICBpbXBvcnQgTVNlY3Rpb25FZHVjYXRpb24gZnJvbSBcIi4vbS1zZWN0aW9uLWVkdWNhdGlvbi52dWVcIjtcclxuICAgIGltcG9ydCBNU2VjdGlvbkV4cGVyaWVuY2UgZnJvbSBcIi4vbS1zZWN0aW9uLWV4cGVyaWVuY2UudnVlXCI7XHJcblxyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgIGNvbXBvbmVudHM6IHtcclxuICAgICAgICAgICAgTVNlY3Rpb25FeHBlcmllbmNlLFxyXG4gICAgICAgICAgICBNU2VjdGlvbkVkdWNhdGlvbixcclxuICAgICAgICAgICAgTVNlY3Rpb25Db250YWN0LFxyXG4gICAgICAgICAgICBNU2VjdGlvbkFib3V0LFxyXG4gICAgICAgICAgICBNU2VjdGlvbkhvbWVcclxuICAgICAgICB9LFxyXG4gICAgICAgIG5hbWU6IFwibS1jb250ZW50XCJcclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XHJcbiAgICBzZWN0aW9uIHtcclxuICAgICAgICBtaW4taGVpZ2h0OiAxMDB2aDtcclxuICAgICAgICAmI2hvbWUge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvaW1hZ2VzL3MxLnBuZ1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJiNsb2dvMiB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi9pbWFnZXMvczIucG5nXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAmI2xvZ28zIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiL2ltYWdlcy9zMy5wbmdcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG48L3N0eWxlPiIsIjx0ZW1wbGF0ZT5cclxuICAgIDxiLW5hdmJhciBmaXhlZD1cInRvcFwiIHRvZ2dsZWFibGU9XCJtZFwiIHR5cGU9XCJkYXJrXCIgdmFyaWFudD1cImluZm9cIiB2LWItc2Nyb2xsc3B5OnNweVxyXG4gICAgICAgICAgICAgIHYtYmluZDpjbGFzcz1cIlsnbGVmdCcsJ215LW5hdiddXCI+XHJcbiAgICAgICAgPGItbmF2YmFyLWJyYW5kIGhyZWY9XCIjXCIgY2xhc3M9XCJtdC1sZy01IG1yLTBcIj5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJkLWJsb2NrIGQtbGctbm9uZVwiIHYtbGFuZz1cIidtZW51LnBvcnRmb2xpbydcIj48L3NwYW4+XHJcbiAgICAgICAgPC9iLW5hdmJhci1icmFuZD5cclxuICAgICAgICA8Yi1uYXZiYXItdG9nZ2xlIHRhcmdldD1cIm5hdl9jb2xsYXBzZVwiPjwvYi1uYXZiYXItdG9nZ2xlPlxyXG4gICAgICAgIDxiLWNvbGxhcHNlIGlzLW5hdiBpZD1cIm5hdl9jb2xsYXBzZVwiPlxyXG4gICAgICAgICAgICA8Yi1uYXYgdi1iaW5kOnZlcnRpY2FsPVwidHJ1ZVwiPlxyXG4gICAgICAgICAgICAgICAgPGItbmF2LWl0ZW0gaHJlZj1cIiNob21lXCI+PHNwYW4gY2xhc3M9XCJpY29uLWNpcmNsZS11cFwiPjwvc3Bhbj48L2ItbmF2LWl0ZW0+XHJcbiAgICAgICAgICAgICAgICA8Yi1uYXYtaXRlbSBocmVmPVwiI2Fib3V0XCIgdi1sYW5nLWNoaWxkcmVuPVwiJ21lbnUuYWJvdXQnXCI+PC9iLW5hdi1pdGVtPlxyXG4gICAgICAgICAgICAgICAgPGItbmF2LWl0ZW0gaHJlZj1cIiNleHBlcmllbmNlXCIgdi1sYW5nLWNoaWxkcmVuPVwiJ21lbnUuZXhwZXJpZW5jZSdcIj48L2ItbmF2LWl0ZW0+XHJcbiAgICAgICAgICAgICAgICA8Yi1uYXYtaXRlbSBocmVmPVwiI2VkdWNhdGlvblwiIHYtbGFuZy1jaGlsZHJlbj1cIidtZW51LmVkdWNhdGlvbidcIj48L2ItbmF2LWl0ZW0+XHJcbiAgICAgICAgICAgICAgICA8Yi1uYXYtaXRlbSBocmVmPVwiI2NvbnRhY3RcIiB2LWxhbmctY2hpbGRyZW49XCInbWVudS5jb250YWN0J1wiPjwvYi1uYXYtaXRlbT5cclxuICAgICAgICAgICAgPC9iLW5hdj5cclxuICAgICAgICA8L2ItY29sbGFwc2U+XHJcbiAgICA8L2ItbmF2YmFyPlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgICAgICBuYW1lOiBcIm0tbmF2aWdhdGlvblwiLFxyXG4gICAgICAgIHByb3BzOiBbJ2N1cnJlbnQnXVxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cclxuICAgIGJvZHkge1xyXG4gICAgICAgIHBhZGRpbmctdG9wOiAwO1xyXG4gICAgICAgIHBhZGRpbmctbGVmdDogMjByZW07XHJcbiAgICB9XHJcblxyXG4gICAgLm5hdi1pdGVtIHtcclxuICAgICAgICAmLmFjdGl2ZSB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgICAgICAgICAubmF2LWxpbmsge1xyXG4gICAgICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC5uYXYtbGluayB7XHJcbiAgICAgICAgICAgIGNvbG9yOiAjOTk5OTk5O1xyXG4gICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEuNXJlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc3R5bGU+IiwiPHRlbXBsYXRlPlxyXG4gICAgPHNlY3Rpb24gaWQ9XCJhYm91dFwiIGNsYXNzPVwiZC1mbGV4XCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cIm15LWF1dG8gcC01XCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1jb2x1bW4gZmxleC1tZC1yb3cgbWItNSBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlblwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm15LWluZm9cIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3M9XCJteS1hYm91dC1uYW1lIG1iLTBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1sYW5nPVwiJ2Fib3V0Lm5hbWUnXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWxhbmc9XCInYWJvdXQuc3VybmFtZSdcIiBjbGFzcz1cIi0tbXktY29sb3JcIj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9oMT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3ViaGVhZGluZyBtYi01IHVwcGVyY2FzZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm15LWNvbnRhY3RcIiBocmVmPVwibWFpbHRvOm5hbWVAZW1haWwuY29tXCIgdi1sYW5nPVwiJ2Fib3V0Lm1haWwnXCI+PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4gwrcgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWxhbmc9XCInYWJvdXQubG9jYXRpb24nXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4gwrcgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm15LWNvbnRhY3RcIiBocmVmPVwidGVsOiszOCAoMDk5KSAxNDctNzQtNTVcIj4rMzggKDA5OSkgMTQ3LTc0LTU1PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3ViaGVhZGluZyBtYi01XCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiB2LWxhbmc9XCInYWJvdXQuaW5mb3JtYXRpb24nXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdWJoZWFkaW5nIG1iLTVcIj5cclxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL3ZrLmNvbS9qdWxpYW5hX2dcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cIm15LWxpbmtcIiB2LWItdG9vbHRpcC5ob3ZlclxyXG4gICAgICAgICAgICAgICAgICAgdGl0bGU9XCJWa29udGFrdGVcIj48c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImljb24tdmsgcC0yXCI+PC9zcGFuPjwvYT5cclxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL3QubWUvRHJlYW1lckVseVwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibXktbGlua1wiIHYtYi10b29sdGlwLmhvdmVyXHJcbiAgICAgICAgICAgICAgICAgICB0aXRsZT1cIlRlbGVncmFtXCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJpY29uLXRlbGVncmFtIHAtMlwiPjwvc3Bhbj48L2E+XHJcbiAgICAgICAgICAgICAgICA8YSBocmVmPVwidmliZXI6Ly9jaGF0P251bWJlcj0rMzgwOTkwNzU3NjE5XCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJteS1saW5rXCIgdi1iLXRvb2x0aXAuaG92ZXJcclxuICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiVmliZXJcIj48c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImljb24tdmliZXIgcC0yXCI+PC9zcGFuPjwvYT5cclxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJza3lwZTpnX2p1bGlhbmFfP2NhbGxcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cIm15LWxpbmtcIiB2LWItdG9vbHRpcC5ob3ZlciB0aXRsZT1cIlNreXBlXCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJpY29uLXNreXBlIHAtMlwiPjwvc3Bhbj48L2E+XHJcbiAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9qdWxpYW5hZ2F5dW4vXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJteS1saW5rXCIgdi1iLXRvb2x0aXAuaG92ZXJcclxuICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiSW5zdGFncmFtXCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJpY29uLWluc3RhZ3JhbSBwLTJcIj48L3NwYW4+PC9hPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvc2VjdGlvbj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgbmFtZTogXCJtLXNlY3Rpb24tYWJvdXRcIlxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cclxuICAgIC5teS1saW5rIHtcclxuICAgICAgICBjb2xvcjogI2ZmZmZmZjtcclxuICAgICAgICBsaW5lLWhlaWdodDogMS4zN3JlbTs7XHJcbiAgICAgICAgaGVpZ2h0OiAxLjM3cmVtOztcclxuICAgICAgICBmb250LXNpemU6IDEuMzdyZW07XHJcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG5cclxuICAgICAgICBzcGFuIHtcclxuICAgICAgICAgICAgYm9yZGVyOiAycHggc29saWQgI2ZmZmZmZjtcclxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTAwJTtcclxuICAgICAgICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICM5OTk5OTk7XHJcbiAgICAgICAgICAgICAgICBjb2xvcjogIzk5OTk5OTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc3R5bGU+IiwiPHRlbXBsYXRlPlxyXG4gICAgPHNlY3Rpb24gaWQ9XCJjb250YWN0XCI+PC9zZWN0aW9uPlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgICAgICBuYW1lOiBcIm0tc2VjdGlvbi1jb250YWN0XCJcclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgc2NvcGVkPlxyXG5cclxuPC9zdHlsZT4iLCI8dGVtcGxhdGU+XHJcbiAgICA8c2VjdGlvbiBpZD1cImVkdWNhdGlvblwiPjwvc2VjdGlvbj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgbmFtZTogXCJtLXNlY3Rpb24tZWR1Y2F0aW9uXCJcclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgc2NvcGVkPlxyXG5cclxuPC9zdHlsZT4iLCI8dGVtcGxhdGU+XHJcbiAgICA8c2VjdGlvbiBpZD1cImV4cGVyaWVuY2VcIiBjbGFzcz1cImQtZmxleCBtYi01XCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cIm15LWF1dG8gcC01XCI+XHJcbiAgICAgICAgICAgIDxoMiBjbGFzcz1cIm15LWFib3V0LW5hbWUgbWItNVwiIHYtbGFuZz1cIidleHBlcmllbmNlLnRpdGxlJ1wiPjwvaDI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1jb2x1bW4gZmxleC1tZC1yb3cgbWItNVwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJlc3VtZS1jb250ZW50IG1yLWF1dG9cIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XCJtYi0wXCIgdi1sYW5nPVwiJ2V4cGVyaWVuY2UucGIucHJvZidcIj48L2gzPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdWJoZWFkaW5nIG1iLTNcIiB2LWxhbmc9XCInZXhwZXJpZW5jZS5wYi5uYW1lJ1wiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwic3ViaGVhZGluZ1wiIHYtbGFuZz1cIidleHBlcmllbmNlLnBiLnRleHQnXCI+PC9wPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibXktZGF0ZSB0ZXh0LW1kLXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1sYW5nPVwiJ2V4cGVyaWVuY2UucGIudGltZSdcIj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1jb2x1bW4gZmxleC1tZC1yb3cgbWItNVwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJlc3VtZS1jb250ZW50IG1yLWF1dG9cIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XCJtYi0wXCIgdi1sYW5nPVwiJ2V4cGVyaWVuY2UuaXQyMC5wcm9mJ1wiPjwvaDM+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN1YmhlYWRpbmcgbWItM1wiIHYtbGFuZz1cIidleHBlcmllbmNlLml0MjAubmFtZSdcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInN1YmhlYWRpbmdcIiB2LWxhbmc9XCInZXhwZXJpZW5jZS5pdDIwLnRleHQnXCI+PC9wPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibXktZGF0ZSB0ZXh0LW1kLXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1sYW5nPVwiJ2V4cGVyaWVuY2UuaXQyMC50aW1lJ1wiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvc2VjdGlvbj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgbmFtZTogXCJtLXNlY3Rpb24tZXhwZXJpZW5jZVwiXHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxyXG4gICAgLm15LWRhdGUge1xyXG4gICAgICAgIG1pbi13aWR0aDogMThyZW07XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICAgICAgICBmb250LXNpemU6IDEuMnJlbTtcclxuICAgICAgICBmb250LWZhbWlseTogQmViYXM7XHJcbiAgICB9XHJcbjwvc3R5bGU+IiwiPHRlbXBsYXRlPlxyXG4gICAgPHNlY3Rpb24gaWQ9XCJob21lXCI+PC9zZWN0aW9uPlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgICAgICBuYW1lOiBcIm0tc2VjdGlvbi1ob21lXCJcclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XHJcblxyXG48L3N0eWxlPiJdLCJwcmVFeGlzdGluZ0NvbW1lbnQiOiIvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5TFhCaFkyc3ZYM0J5Wld4MVpHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZjSEp2WTJWemN5OWljbTkzYzJWeUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwzWjFaUzlrYVhOMEwzWjFaUzV5ZFc1MGFXMWxMbU52YlcxdmJpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OTJkV1ZwWm5rdmJHbGlMMmx1YzJWeWRDMWpjM011YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12ZG5WbGFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5MmRXVXRhRzkwTFhKbGJHOWhaQzFoY0drdlpHbHpkQzlwYm1SbGVDNXFjeUlzSW5OeVkxeGNhbk5jWEdGd2NDNXFjeUlzSW5OeVkxeGNhbk5jWEd4aGJtY3Vhbk1pTENKemNtTmNYSFoxWlZ4Y2JTMWhjSEJzYVdOaGRHbHZiaTUyZFdVL1pXUmlNbU0zWlRZaUxDSnpjbU5jWEhaMVpWeGNiUzFqYjI1MFpXNTBMbloxWlQ4eE1HSXpPRFE0WkNJc0luTnlZMXhjZG5WbFhGeHRMVzVoZG1sbllYUnBiMjR1ZG5WbFB6VTNNR1kwTURReElpd2ljM0pqWEZ4MmRXVmNYRzB0YzJWamRHbHZiaTFoWW05MWRDNTJkV1UvTjJJNFpqaGhNakFpTENKemNtTmNYSFoxWlZ4Y2JTMXpaV04wYVc5dUxXTnZiblJoWTNRdWRuVmxQekUzTW1GbU1ETXhJaXdpYzNKalhGeDJkV1ZjWEcwdGMyVmpkR2x2YmkxbFpIVmpZWFJwYjI0dWRuVmxQekJrWkRNd09UYzVJaXdpYzNKalhGeDJkV1ZjWEcwdGMyVmpkR2x2YmkxbGVIQmxjbWxsYm1ObExuWjFaVDgwWlRNMVpUazNaQ0lzSW5OeVkxeGNkblZsWEZ4dExYTmxZM1JwYjI0dGFHOXRaUzUyZFdVL09ESTFabUV6T1dFaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVU5CUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdRVU40VEVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1FVTnVkbEJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOMlFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdRVU5zVDBFN096czdRVUZEUVRzN096czdPMEZCU0VFc1NVRkJTU3hOUVVGS0xFTkJRVmNzVVVGQldDeEhRVUZ6UWl4SlFVRjBRanM3UVVGTFFTeEpRVUZKTEU5QlFVOHNiMEpCUVZnN08wRkJSVUVzVDBGQlR5eFJRVUZRTEVOQlFXZENMRXRCUVdoQ0xFZEJRWGRDTEV0QlFVc3NVMEZCVEN4RFFVRmxMRTlCUVdZc1EwRkJlRUk3TzBGQlJVRXNTVUZCU1N4VFFVRktMRU5CUVdNc1RVRkJaQ3hGUVVGelFqdEJRVU5zUWl4alFVRlZMR3RDUVVGVkxFVkJRVllzUlVGQll5eFBRVUZrTEVWQlFYVkNPMEZCUXpkQ0xGZEJRVWNzVTBGQlNDeEhRVUZsTEV0QlFVc3NVMEZCVEN4RFFVRmxMRkZCUVZFc1MwRkJka0lzUTBGQlpqdEJRVU5JTzBGQlNHbENMRU5CUVhSQ08wRkJTMEVzU1VGQlNTeFRRVUZLTEVOQlFXTXNaVUZCWkN4RlFVRXJRanRCUVVNelFpeGpRVUZWTEd0Q1FVRlZMRVZCUVZZc1JVRkJZeXhQUVVGa0xFVkJRWFZDTzBGQlF6ZENMRmRCUVVjc1VVRkJTQ3hEUVVGWkxFTkJRVm9zUlVGQlpTeFRRVUZtTEVkQlFUSkNMRXRCUVVzc1UwRkJUQ3hEUVVGbExGRkJRVkVzUzBGQmRrSXNRMEZCTTBJN1FVRkRTRHRCUVVnd1FpeERRVUV2UWpzN1FVRk5RU3hKUVVGSkxFZEJRVW9zUTBGQlVUdEJRVU5LTEZGQlFVa3NUVUZFUVR0QlFVVktMR2RDUVVGWkxFVkJRVU1zYjBOQlFVUXNSVUZHVWp0QlFVZEtMRkZCU0Vrc2EwSkJSMGM3UVVGRFNDeGxRVUZQTzBGQlEwZ3NjVUpCUVZNN1FVRkVUaXhUUVVGUU8wRkJSMGc3UVVGUVJ5eERRVUZTT3pzN096czdPenM3T3pzN08wbERjRUp4UWl4Sk8wRkJSV3BDTEc5Q1FVRmpPMEZCUVVFN08wRkJRMVlzWVVGQlN5eFJRVUZNTEVkQlFXZENMRU5CUVVNc1ZVRkJWU3hSUVVGV0xFbEJRWE5DTEZWQlFWVXNXVUZCYWtNc1JVRkJLME1zUzBGQkwwTXNRMEZCY1VRc1IwRkJja1FzUlVGQk1FUXNRMEZCTVVRc1EwRkJhRUk3UVVGRFFTeGhRVUZMTEU5QlFVd3NSMEZCWlN4RlFVRm1PMEZCUTBFc1lVRkJTeXhWUVVGTUxFZEJRV3RDTEV0QlFVc3NTVUZCVEN4RFFVRlZMRXRCUVVzc1QwRkJUQ3hKUVVGblFpeExRVUZMTEZGQlFTOUNMRU5CUVd4Q08wRkJRMGc3T3pzN2EwTkJSVk1zUnl4RlFVRkxPMEZCUTFnc2JVSkJRVThzUlVGQlJTeEhRVUZHTEVOQlFVMHNTMEZCU3l4VlFVRllMRVZCUVhWQ0xFZEJRWFpDTEVWQlFUUkNMRmxCUVRWQ0xFTkJRVkE3UVVGRFNEczdPelpDUVVWWExFa3NSVUZCVFN4SkxFVkJRVTA3UVVGRGNFSXNaMEpCUVVrc1lVRkJZU3hKUVVGcVFqdEJRVU5CTEdOQlFVVXNTVUZCUml4RFFVRlBPMEZCUTBnc2NVSkJRVXNzVjBGQlZ5eEpRVUZZTEVkQlFXdENMRTlCUkhCQ08wRkJSVWdzTUVKQlFWVXNUVUZHVUR0QlFVZElMSFZDUVVGUExFdEJTRW83UVVGSlNDeDVRa0ZCVXl4cFFrRkJWU3hKUVVGV0xFVkJRV2RDTzBGQlEzSkNMR2xEUVVGaExFbEJRV0k3UVVGRFNDeHBRa0ZPUlR0QlFVOUlMSFZDUVVGUExHbENRVUZaTEVOQlEyeENPMEZCVWtVc1lVRkJVRHRCUVZWQkxHMUNRVUZSTEdOQlFXTXNTVUZCWkN4SlFVRnpRaXhEUVVGRExFbEJRWGhDTEVkQlFXZERMRXRCUVVzc1NVRkJUQ3hEUVVGVkxFbEJRVllzUTBGQmFFTXNSMEZCYTBRc1ZVRkJla1E3UVVGRFNEczdPenM3TzJ0Q1FYcENaMElzU1RzN096czdPenM3T3pzN08wRkRVWEpDT3pzN08wRkJRMEU3T3pzN096czdPenRaUVVsQk96c3lRa0ZGUVR0cFEwRkdRU3hCUVVsQk8wRkJTRUU3VlVGSVFUdEJRVU5CT3pzN096czdPMEZCV2tFN096dEJRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM0UWtOaFFUczdPenNyUWtGRFFUczdPenRwUTBGRFFUczdPenR0UTBGRFFUczdPenR2UTBGRFFUczdPenM3T3pzN096c3JRMEZKUVRzMlEwRkRRVHQ1UTBGRFFUdHhRMEZEUVR0dFEwRktRU3hCUVV0Qk8wRkJURUU3VlVGRVFTeEJRVkZCT3pzN096czdPenRCUVROQ1FUczdPMEZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0VlEzRkNRVHRaUVVSQkxFRkJSVUU3T3pzN096czdPMEZCZEVKQk96czdRVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzFWRE1rTkJMRUZCUTBFN096czdPenM3TzBGQk5VTkJPenM3UVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08xVkRTMEU3UVVGRFFUczdPenM3T3p0QlFVNUJPenM3UVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1ZVTkxRVHRCUVVOQk96czdPenM3TzBGQlRrRTdPenRCUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0VlF6WkNRU3hCUVVOQk96czdPenM3T3p0QlFUbENRVHM3TzBGQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dFZRMHRCTzBGQlEwRTdPenM3T3pzN1FVRk9RVHM3TzBGQlFVRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWlobWRXNWpkR2x2YmlCbEtIUXNiaXh5S1h0bWRXNWpkR2x2YmlCektHOHNkU2w3YVdZb0lXNWJiMTBwZTJsbUtDRjBXMjlkS1h0MllYSWdZVDEwZVhCbGIyWWdjbVZ4ZFdseVpUMDlYQ0ptZFc1amRHbHZibHdpSmlaeVpYRjFhWEpsTzJsbUtDRjFKaVpoS1hKbGRIVnliaUJoS0c4c0lUQXBPMmxtS0drcGNtVjBkWEp1SUdrb2J5d2hNQ2s3ZG1GeUlHWTlibVYzSUVWeWNtOXlLRndpUTJGdWJtOTBJR1pwYm1RZ2JXOWtkV3hsSUNkY0lpdHZLMXdpSjF3aUtUdDBhSEp2ZHlCbUxtTnZaR1U5WENKTlQwUlZURVZmVGs5VVgwWlBWVTVFWENJc1puMTJZWElnYkQxdVcyOWRQWHRsZUhCdmNuUnpPbnQ5ZlR0MFcyOWRXekJkTG1OaGJHd29iQzVsZUhCdmNuUnpMR1oxYm1OMGFXOXVLR1VwZTNaaGNpQnVQWFJiYjExYk1WMWJaVjA3Y21WMGRYSnVJSE1vYmo5dU9tVXBmU3hzTEd3dVpYaHdiM0owY3l4bExIUXNiaXh5S1gxeVpYUjFjbTRnYmx0dlhTNWxlSEJ2Y25SemZYWmhjaUJwUFhSNWNHVnZaaUJ5WlhGMWFYSmxQVDFjSW1aMWJtTjBhVzl1WENJbUpuSmxjWFZwY21VN1ptOXlLSFpoY2lCdlBUQTdienh5TG14bGJtZDBhRHR2S3lzcGN5aHlXMjlkS1R0eVpYUjFjbTRnYzMwcElpd2lMeThnYzJocGJTQm1iM0lnZFhOcGJtY2djSEp2WTJWemN5QnBiaUJpY205M2MyVnlYRzUyWVhJZ2NISnZZMlZ6Y3lBOUlHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UzMDdYRzVjYmk4dklHTmhZMmhsWkNCbWNtOXRJSGRvWVhSbGRtVnlJR2RzYjJKaGJDQnBjeUJ3Y21WelpXNTBJSE52SUhSb1lYUWdkR1Z6ZENCeWRXNXVaWEp6SUhSb1lYUWdjM1IxWWlCcGRGeHVMeThnWkc5dUozUWdZbkpsWVdzZ2RHaHBibWR6TGlBZ1FuVjBJSGRsSUc1bFpXUWdkRzhnZDNKaGNDQnBkQ0JwYmlCaElIUnllU0JqWVhSamFDQnBiaUJqWVhObElHbDBJR2x6WEc0dkx5QjNjbUZ3Y0dWa0lHbHVJSE4wY21samRDQnRiMlJsSUdOdlpHVWdkMmhwWTJnZ1pHOWxjMjRuZENCa1pXWnBibVVnWVc1NUlHZHNiMkpoYkhNdUlDQkpkQ2R6SUdsdWMybGtaU0JoWEc0dkx5Qm1kVzVqZEdsdmJpQmlaV05oZFhObElIUnllUzlqWVhSamFHVnpJR1JsYjNCMGFXMXBlbVVnYVc0Z1kyVnlkR0ZwYmlCbGJtZHBibVZ6TGx4dVhHNTJZWElnWTJGamFHVmtVMlYwVkdsdFpXOTFkRHRjYm5aaGNpQmpZV05vWldSRGJHVmhjbFJwYldWdmRYUTdYRzVjYm1aMWJtTjBhVzl1SUdSbFptRjFiSFJUWlhSVWFXMXZkWFFvS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2R6WlhSVWFXMWxiM1YwSUdoaGN5QnViM1FnWW1WbGJpQmtaV1pwYm1Wa0p5azdYRzU5WEc1bWRXNWpkR2x2YmlCa1pXWmhkV3gwUTJ4bFlYSlVhVzFsYjNWMElDZ3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oyTnNaV0Z5VkdsdFpXOTFkQ0JvWVhNZ2JtOTBJR0psWlc0Z1pHVm1hVzVsWkNjcE8xeHVmVnh1S0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhObGRGUnBiV1Z2ZFhRZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oWTJobFpGTmxkRlJwYldWdmRYUWdQU0J6WlhSVWFXMWxiM1YwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDQTlJR1JsWm1GMWJIUlRaWFJVYVcxdmRYUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUdOaFkyaGxaRk5sZEZScGJXVnZkWFFnUFNCa1pXWmhkV3gwVTJWMFZHbHRiM1YwTzF4dUlDQWdJSDFjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHTnNaV0Z5VkdsdFpXOTFkQ0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMElEMGdZMnhsWVhKVWFXMWxiM1YwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBJRDBnWkdWbVlYVnNkRU5zWldGeVZHbHRaVzkxZER0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDQWdZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBJRDBnWkdWbVlYVnNkRU5zWldGeVZHbHRaVzkxZER0Y2JpQWdJQ0I5WEc1OUlDZ3BLVnh1Wm5WdVkzUnBiMjRnY25WdVZHbHRaVzkxZENobWRXNHBJSHRjYmlBZ0lDQnBaaUFvWTJGamFHVmtVMlYwVkdsdFpXOTFkQ0E5UFQwZ2MyVjBWR2x0Wlc5MWRDa2dlMXh1SUNBZ0lDQWdJQ0F2TDI1dmNtMWhiQ0JsYm5acGNtOXRaVzUwY3lCcGJpQnpZVzVsSUhOcGRIVmhkR2x2Ym5OY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhObGRGUnBiV1Z2ZFhRb1puVnVMQ0F3S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnYVdZZ2MyVjBWR2x0Wlc5MWRDQjNZWE51SjNRZ1lYWmhhV3hoWW14bElHSjFkQ0IzWVhNZ2JHRjBkR1Z5SUdSbFptbHVaV1JjYmlBZ0lDQnBaaUFvS0dOaFkyaGxaRk5sZEZScGJXVnZkWFFnUFQwOUlHUmxabUYxYkhSVFpYUlVhVzF2ZFhRZ2ZId2dJV05oWTJobFpGTmxkRlJwYldWdmRYUXBJQ1ltSUhObGRGUnBiV1Z2ZFhRcElIdGNiaUFnSUNBZ0lDQWdZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDQTlJSE5sZEZScGJXVnZkWFE3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ6WlhSVWFXMWxiM1YwS0daMWJpd2dNQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUM4dklIZG9aVzRnZDJobGJpQnpiMjFsWW05a2VTQm9ZWE1nYzJOeVpYZGxaQ0IzYVhSb0lITmxkRlJwYldWdmRYUWdZblYwSUc1dklFa3VSUzRnYldGa1pHNWxjM05jYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR05oWTJobFpGTmxkRlJwYldWdmRYUW9ablZ1TENBd0tUdGNiaUFnSUNCOUlHTmhkR05vS0dVcGUxeHVJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVjJobGJpQjNaU0JoY21VZ2FXNGdTUzVGTGlCaWRYUWdkR2hsSUhOamNtbHdkQ0JvWVhNZ1ltVmxiaUJsZG1Gc1pXUWdjMjhnU1M1RkxpQmtiMlZ6YmlkMElIUnlkWE4wSUhSb1pTQm5iRzlpWVd3Z2IySnFaV04wSUhkb1pXNGdZMkZzYkdWa0lHNXZjbTFoYkd4NVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDNWpZV3hzS0c1MWJHd3NJR1oxYml3Z01DazdYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ6WVcxbElHRnpJR0ZpYjNabElHSjFkQ0IzYUdWdUlHbDBKM01nWVNCMlpYSnphVzl1SUc5bUlFa3VSUzRnZEdoaGRDQnRkWE4wSUdoaGRtVWdkR2hsSUdkc2IySmhiQ0J2WW1wbFkzUWdabTl5SUNkMGFHbHpKeXdnYUc5d1puVnNiSGtnYjNWeUlHTnZiblJsZUhRZ1kyOXljbVZqZENCdmRHaGxjbmRwYzJVZ2FYUWdkMmxzYkNCMGFISnZkeUJoSUdkc2IySmhiQ0JsY25KdmNseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05oWTJobFpGTmxkRlJwYldWdmRYUXVZMkZzYkNoMGFHbHpMQ0JtZFc0c0lEQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc1Y2JuMWNibVoxYm1OMGFXOXVJSEoxYmtOc1pXRnlWR2x0Wlc5MWRDaHRZWEpyWlhJcElIdGNiaUFnSUNCcFppQW9ZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBJRDA5UFNCamJHVmhjbFJwYldWdmRYUXBJSHRjYmlBZ0lDQWdJQ0FnTHk5dWIzSnRZV3dnWlc1MmFYSnZiV1Z1ZEhNZ2FXNGdjMkZ1WlNCemFYUjFZWFJwYjI1elhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCamJHVmhjbFJwYldWdmRYUW9iV0Z5YTJWeUtUdGNiaUFnSUNCOVhHNGdJQ0FnTHk4Z2FXWWdZMnhsWVhKVWFXMWxiM1YwSUhkaGMyNG5kQ0JoZG1GcGJHRmliR1VnWW5WMElIZGhjeUJzWVhSMFpYSWdaR1ZtYVc1bFpGeHVJQ0FnSUdsbUlDZ29ZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBJRDA5UFNCa1pXWmhkV3gwUTJ4bFlYSlVhVzFsYjNWMElIeDhJQ0ZqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFFwSUNZbUlHTnNaV0Z5VkdsdFpXOTFkQ2tnZTF4dUlDQWdJQ0FnSUNCallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRZ1BTQmpiR1ZoY2xScGJXVnZkWFE3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqYkdWaGNsUnBiV1Z2ZFhRb2JXRnlhMlZ5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0x5OGdkMmhsYmlCM2FHVnVJSE52YldWaWIyUjVJR2hoY3lCelkzSmxkMlZrSUhkcGRHZ2djMlYwVkdsdFpXOTFkQ0JpZFhRZ2JtOGdTUzVGTGlCdFlXUmtibVZ6YzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwS0cxaGNtdGxjaWs3WEc0Z0lDQWdmU0JqWVhSamFDQW9aU2w3WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlhhR1Z1SUhkbElHRnlaU0JwYmlCSkxrVXVJR0oxZENCMGFHVWdjMk55YVhCMElHaGhjeUJpWldWdUlHVjJZV3hsWkNCemJ5QkpMa1V1SUdSdlpYTnVKM1FnSUhSeWRYTjBJSFJvWlNCbmJHOWlZV3dnYjJKcVpXTjBJSGRvWlc0Z1kyRnNiR1ZrSUc1dmNtMWhiR3g1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMExtTmhiR3dvYm5Wc2JDd2diV0Z5YTJWeUtUdGNiaUFnSUNBZ0lDQWdmU0JqWVhSamFDQW9aU2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ6WVcxbElHRnpJR0ZpYjNabElHSjFkQ0IzYUdWdUlHbDBKM01nWVNCMlpYSnphVzl1SUc5bUlFa3VSUzRnZEdoaGRDQnRkWE4wSUdoaGRtVWdkR2hsSUdkc2IySmhiQ0J2WW1wbFkzUWdabTl5SUNkMGFHbHpKeXdnYUc5d1puVnNiSGtnYjNWeUlHTnZiblJsZUhRZ1kyOXljbVZqZENCdmRHaGxjbmRwYzJVZ2FYUWdkMmxzYkNCMGFISnZkeUJoSUdkc2IySmhiQ0JsY25KdmNpNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGTnZiV1VnZG1WeWMybHZibk1nYjJZZ1NTNUZMaUJvWVhabElHUnBabVpsY21WdWRDQnlkV3hsY3lCbWIzSWdZMnhsWVhKVWFXMWxiM1YwSUhaeklITmxkRlJwYldWdmRYUmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFF1WTJGc2JDaDBhR2x6TENCdFlYSnJaWElwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNWNibHh1ZlZ4dWRtRnlJSEYxWlhWbElEMGdXMTA3WEc1MllYSWdaSEpoYVc1cGJtY2dQU0JtWVd4elpUdGNiblpoY2lCamRYSnlaVzUwVVhWbGRXVTdYRzUyWVhJZ2NYVmxkV1ZKYm1SbGVDQTlJQzB4TzF4dVhHNW1kVzVqZEdsdmJpQmpiR1ZoYmxWd1RtVjRkRlJwWTJzb0tTQjdYRzRnSUNBZ2FXWWdLQ0ZrY21GcGJtbHVaeUI4ZkNBaFkzVnljbVZ1ZEZGMVpYVmxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzRnSUNBZ1pISmhhVzVwYm1jZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0JwWmlBb1kzVnljbVZ1ZEZGMVpYVmxMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0J4ZFdWMVpTQTlJR04xY25KbGJuUlJkV1YxWlM1amIyNWpZWFFvY1hWbGRXVXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIRjFaWFZsU1c1a1pYZ2dQU0F0TVR0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hGMVpYVmxMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0JrY21GcGJsRjFaWFZsS0NrN1hHNGdJQ0FnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJrY21GcGJsRjFaWFZsS0NrZ2UxeHVJQ0FnSUdsbUlDaGtjbUZwYm1sdVp5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQjBhVzFsYjNWMElEMGdjblZ1VkdsdFpXOTFkQ2hqYkdWaGJsVndUbVY0ZEZScFkyc3BPMXh1SUNBZ0lHUnlZV2x1YVc1bklEMGdkSEoxWlR0Y2JseHVJQ0FnSUhaaGNpQnNaVzRnUFNCeGRXVjFaUzVzWlc1bmRHZzdYRzRnSUNBZ2QyaHBiR1VvYkdWdUtTQjdYRzRnSUNBZ0lDQWdJR04xY25KbGJuUlJkV1YxWlNBOUlIRjFaWFZsTzF4dUlDQWdJQ0FnSUNCeGRXVjFaU0E5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQjNhR2xzWlNBb0t5dHhkV1YxWlVsdVpHVjRJRHdnYkdWdUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZM1Z5Y21WdWRGRjFaWFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEZGMVpYVmxXM0YxWlhWbFNXNWtaWGhkTG5KMWJpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEYxWlhWbFNXNWtaWGdnUFNBdE1UdGNiaUFnSUNBZ0lDQWdiR1Z1SUQwZ2NYVmxkV1V1YkdWdVozUm9PMXh1SUNBZ0lIMWNiaUFnSUNCamRYSnlaVzUwVVhWbGRXVWdQU0J1ZFd4c08xeHVJQ0FnSUdSeVlXbHVhVzVuSUQwZ1ptRnNjMlU3WEc0Z0lDQWdjblZ1UTJ4bFlYSlVhVzFsYjNWMEtIUnBiV1Z2ZFhRcE8xeHVmVnh1WEc1d2NtOWpaWE56TG01bGVIUlVhV05ySUQwZ1puVnVZM1JwYjI0Z0tHWjFiaWtnZTF4dUlDQWdJSFpoY2lCaGNtZHpJRDBnYm1WM0lFRnljbUY1S0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnTFNBeEtUdGNiaUFnSUNCcFppQW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStJREVwSUh0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREU3SUdrZ1BDQmhjbWQxYldWdWRITXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0Z5WjNOYmFTQXRJREZkSUQwZ1lYSm5kVzFsYm5SelcybGRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lIRjFaWFZsTG5CMWMyZ29ibVYzSUVsMFpXMG9ablZ1TENCaGNtZHpLU2s3WEc0Z0lDQWdhV1lnS0hGMVpYVmxMbXhsYm1kMGFDQTlQVDBnTVNBbUppQWhaSEpoYVc1cGJtY3BJSHRjYmlBZ0lDQWdJQ0FnY25WdVZHbHRaVzkxZENoa2NtRnBibEYxWlhWbEtUdGNiaUFnSUNCOVhHNTlPMXh1WEc0dkx5QjJPQ0JzYVd0bGN5QndjbVZrYVdOMGFXSnNaU0J2WW1wbFkzUnpYRzVtZFc1amRHbHZiaUJKZEdWdEtHWjFiaXdnWVhKeVlYa3BJSHRjYmlBZ0lDQjBhR2x6TG1aMWJpQTlJR1oxYmp0Y2JpQWdJQ0IwYUdsekxtRnljbUY1SUQwZ1lYSnlZWGs3WEc1OVhHNUpkR1Z0TG5CeWIzUnZkSGx3WlM1eWRXNGdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnZEdocGN5NW1kVzR1WVhCd2JIa29iblZzYkN3Z2RHaHBjeTVoY25KaGVTazdYRzU5TzF4dWNISnZZMlZ6Y3k1MGFYUnNaU0E5SUNkaWNtOTNjMlZ5Snp0Y2JuQnliMk5sYzNNdVluSnZkM05sY2lBOUlIUnlkV1U3WEc1d2NtOWpaWE56TG1WdWRpQTlJSHQ5TzF4dWNISnZZMlZ6Y3k1aGNtZDJJRDBnVzEwN1hHNXdjbTlqWlhOekxuWmxjbk5wYjI0Z1BTQW5KenNnTHk4Z1pXMXdkSGtnYzNSeWFXNW5JSFJ2SUdGMmIybGtJSEpsWjJWNGNDQnBjM04xWlhOY2JuQnliMk5sYzNNdWRtVnljMmx2Ym5NZ1BTQjdmVHRjYmx4dVpuVnVZM1JwYjI0Z2JtOXZjQ2dwSUh0OVhHNWNibkJ5YjJObGMzTXViMjRnUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTVoWkdSTWFYTjBaVzVsY2lBOUlHNXZiM0E3WEc1d2NtOWpaWE56TG05dVkyVWdQU0J1YjI5d08xeHVjSEp2WTJWemN5NXZabVlnUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTV5WlcxdmRtVk1hWE4wWlc1bGNpQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxuSmxiVzkyWlVGc2JFeHBjM1JsYm1WeWN5QTlJRzV2YjNBN1hHNXdjbTlqWlhOekxtVnRhWFFnUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTV3Y21Wd1pXNWtUR2x6ZEdWdVpYSWdQU0J1YjI5d08xeHVjSEp2WTJWemN5NXdjbVZ3Wlc1a1QyNWpaVXhwYzNSbGJtVnlJRDBnYm05dmNEdGNibHh1Y0hKdlkyVnpjeTVzYVhOMFpXNWxjbk1nUFNCbWRXNWpkR2x2YmlBb2JtRnRaU2tnZXlCeVpYUjFjbTRnVzEwZ2ZWeHVYRzV3Y205alpYTnpMbUpwYm1ScGJtY2dQU0JtZFc1amRHbHZiaUFvYm1GdFpTa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmNISnZZMlZ6Y3k1aWFXNWthVzVuSUdseklHNXZkQ0J6ZFhCd2IzSjBaV1FuS1R0Y2JuMDdYRzVjYm5CeWIyTmxjM011WTNka0lEMGdablZ1WTNScGIyNGdLQ2tnZXlCeVpYUjFjbTRnSnk4bklIMDdYRzV3Y205alpYTnpMbU5vWkdseUlEMGdablZ1WTNScGIyNGdLR1JwY2lrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduY0hKdlkyVnpjeTVqYUdScGNpQnBjeUJ1YjNRZ2MzVndjRzl5ZEdWa0p5azdYRzU5TzF4dWNISnZZMlZ6Y3k1MWJXRnpheUE5SUdaMWJtTjBhVzl1S0NrZ2V5QnlaWFIxY200Z01Ec2dmVHRjYmlJc0lpOHFJVnh1SUNvZ1ZuVmxMbXB6SUhZeUxqVXVNVE5jYmlBcUlDaGpLU0F5TURFMExUSXdNVGNnUlhaaGJpQlpiM1ZjYmlBcUlGSmxiR1ZoYzJWa0lIVnVaR1Z5SUhSb1pTQk5TVlFnVEdsalpXNXpaUzVjYmlBcUwxeHVKM1Z6WlNCemRISnBZM1FuTzF4dVhHNHZLaUFnS2k5Y2JseHVkbUZ5SUdWdGNIUjVUMkpxWldOMElEMGdUMkpxWldOMExtWnlaV1Y2WlNoN2ZTazdYRzVjYmk4dklIUm9aWE5sSUdobGJIQmxjbk1nY0hKdlpIVmpaWE1nWW1WMGRHVnlJSFp0SUdOdlpHVWdhVzRnU2xNZ1pXNW5hVzVsY3lCa2RXVWdkRzhnZEdobGFYSmNiaTh2SUdWNGNHeHBZMmwwYm1WemN5QmhibVFnWm5WdVkzUnBiMjRnYVc1c2FXNXBibWRjYm1aMWJtTjBhVzl1SUdselZXNWtaV1lnS0hZcElIdGNiaUFnY21WMGRYSnVJSFlnUFQwOUlIVnVaR1ZtYVc1bFpDQjhmQ0IySUQwOVBTQnVkV3hzWEc1OVhHNWNibVoxYm1OMGFXOXVJR2x6UkdWbUlDaDJLU0I3WEc0Z0lISmxkSFZ5YmlCMklDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2RpQWhQVDBnYm5Wc2JGeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGMxUnlkV1VnS0hZcElIdGNiaUFnY21WMGRYSnVJSFlnUFQwOUlIUnlkV1ZjYm4xY2JseHVablZ1WTNScGIyNGdhWE5HWVd4elpTQW9kaWtnZTF4dUlDQnlaWFIxY200Z2RpQTlQVDBnWm1Gc2MyVmNibjFjYmx4dUx5b3FYRzRnS2lCRGFHVmpheUJwWmlCMllXeDFaU0JwY3lCd2NtbHRhWFJwZG1WY2JpQXFMMXh1Wm5WdVkzUnBiMjRnYVhOUWNtbHRhWFJwZG1VZ0tIWmhiSFZsS1NCN1hHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmMzUnlhVzVuSnlCOGZGeHVJQ0FnSUhSNWNHVnZaaUIyWVd4MVpTQTlQVDBnSjI1MWJXSmxjaWNnZkh4Y2JpQWdJQ0F2THlBa1pteHZkeTFrYVhOaFlteGxMV3hwYm1WY2JpQWdJQ0IwZVhCbGIyWWdkbUZzZFdVZ1BUMDlJQ2R6ZVcxaWIyd25JSHg4WEc0Z0lDQWdkSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5ZbTl2YkdWaGJpZGNiaUFnS1Z4dWZWeHVYRzR2S2lwY2JpQXFJRkYxYVdOcklHOWlhbVZqZENCamFHVmpheUF0SUhSb2FYTWdhWE1nY0hKcGJXRnlhV3g1SUhWelpXUWdkRzhnZEdWc2JGeHVJQ29nVDJKcVpXTjBjeUJtY205dElIQnlhVzFwZEdsMlpTQjJZV3gxWlhNZ2QyaGxiaUIzWlNCcmJtOTNJSFJvWlNCMllXeDFaVnh1SUNvZ2FYTWdZU0JLVTA5T0xXTnZiWEJzYVdGdWRDQjBlWEJsTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJwYzA5aWFtVmpkQ0FvYjJKcUtTQjdYRzRnSUhKbGRIVnliaUJ2WW1vZ0lUMDlJRzUxYkd3Z0ppWWdkSGx3Wlc5bUlHOWlhaUE5UFQwZ0oyOWlhbVZqZENkY2JuMWNibHh1THlvcVhHNGdLaUJIWlhRZ2RHaGxJSEpoZHlCMGVYQmxJSE4wY21sdVp5QnZaaUJoSUhaaGJIVmxJR1V1Wnk0Z1cyOWlhbVZqZENCUFltcGxZM1JkWEc0Z0tpOWNiblpoY2lCZmRHOVRkSEpwYm1jZ1BTQlBZbXBsWTNRdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bk8xeHVYRzVtZFc1amRHbHZiaUIwYjFKaGQxUjVjR1VnS0haaGJIVmxLU0I3WEc0Z0lISmxkSFZ5YmlCZmRHOVRkSEpwYm1jdVkyRnNiQ2gyWVd4MVpTa3VjMnhwWTJVb09Dd2dMVEVwWEc1OVhHNWNiaThxS2x4dUlDb2dVM1J5YVdOMElHOWlhbVZqZENCMGVYQmxJR05vWldOckxpQlBibXg1SUhKbGRIVnlibk1nZEhKMVpWeHVJQ29nWm05eUlIQnNZV2x1SUVwaGRtRlRZM0pwY0hRZ2IySnFaV04wY3k1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnYVhOUWJHRnBiazlpYW1WamRDQW9iMkpxS1NCN1hHNGdJSEpsZEhWeWJpQmZkRzlUZEhKcGJtY3VZMkZzYkNodlltb3BJRDA5UFNBblcyOWlhbVZqZENCUFltcGxZM1JkSjF4dWZWeHVYRzVtZFc1amRHbHZiaUJwYzFKbFowVjRjQ0FvZGlrZ2UxeHVJQ0J5WlhSMWNtNGdYM1J2VTNSeWFXNW5MbU5oYkd3b2Rpa2dQVDA5SUNkYmIySnFaV04wSUZKbFowVjRjRjBuWEc1OVhHNWNiaThxS2x4dUlDb2dRMmhsWTJzZ2FXWWdkbUZzSUdseklHRWdkbUZzYVdRZ1lYSnlZWGtnYVc1a1pYZ3VYRzRnS2k5Y2JtWjFibU4wYVc5dUlHbHpWbUZzYVdSQmNuSmhlVWx1WkdWNElDaDJZV3dwSUh0Y2JpQWdkbUZ5SUc0Z1BTQndZWEp6WlVac2IyRjBLRk4wY21sdVp5aDJZV3dwS1R0Y2JpQWdjbVYwZFhKdUlHNGdQajBnTUNBbUppQk5ZWFJvTG1ac2IyOXlLRzRwSUQwOVBTQnVJQ1ltSUdselJtbHVhWFJsS0haaGJDbGNibjFjYmx4dUx5b3FYRzRnS2lCRGIyNTJaWEowSUdFZ2RtRnNkV1VnZEc4Z1lTQnpkSEpwYm1jZ2RHaGhkQ0JwY3lCaFkzUjFZV3hzZVNCeVpXNWtaWEpsWkM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnZEc5VGRISnBibWNnS0haaGJDa2dlMXh1SUNCeVpYUjFjbTRnZG1Gc0lEMDlJRzUxYkd4Y2JpQWdJQ0EvSUNjblhHNGdJQ0FnT2lCMGVYQmxiMllnZG1Gc0lEMDlQU0FuYjJKcVpXTjBKMXh1SUNBZ0lDQWdQeUJLVTA5T0xuTjBjbWx1WjJsbWVTaDJZV3dzSUc1MWJHd3NJRElwWEc0Z0lDQWdJQ0E2SUZOMGNtbHVaeWgyWVd3cFhHNTlYRzVjYmk4cUtseHVJQ29nUTI5dWRtVnlkQ0JoSUdsdWNIVjBJSFpoYkhWbElIUnZJR0VnYm5WdFltVnlJR1p2Y2lCd1pYSnphWE4wWlc1alpTNWNiaUFxSUVsbUlIUm9aU0JqYjI1MlpYSnphVzl1SUdaaGFXeHpMQ0J5WlhSMWNtNGdiM0pwWjJsdVlXd2djM1J5YVc1bkxseHVJQ292WEc1bWRXNWpkR2x2YmlCMGIwNTFiV0psY2lBb2RtRnNLU0I3WEc0Z0lIWmhjaUJ1SUQwZ2NHRnljMlZHYkc5aGRDaDJZV3dwTzF4dUlDQnlaWFIxY200Z2FYTk9ZVTRvYmlrZ1B5QjJZV3dnT2lCdVhHNTlYRzVjYmk4cUtseHVJQ29nVFdGclpTQmhJRzFoY0NCaGJtUWdjbVYwZFhKdUlHRWdablZ1WTNScGIyNGdabTl5SUdOb1pXTnJhVzVuSUdsbUlHRWdhMlY1WEc0Z0tpQnBjeUJwYmlCMGFHRjBJRzFoY0M1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnYldGclpVMWhjQ0FvWEc0Z0lITjBjaXhjYmlBZ1pYaHdaV04wYzB4dmQyVnlRMkZ6WlZ4dUtTQjdYRzRnSUhaaGNpQnRZWEFnUFNCUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cE8xeHVJQ0IyWVhJZ2JHbHpkQ0E5SUhOMGNpNXpjR3hwZENnbkxDY3BPMXh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHeHBjM1F1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNCdFlYQmJiR2x6ZEZ0cFhWMGdQU0IwY25WbE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCbGVIQmxZM1J6VEc5M1pYSkRZWE5sWEc0Z0lDQWdQeUJtZFc1amRHbHZiaUFvZG1Gc0tTQjdJSEpsZEhWeWJpQnRZWEJiZG1Gc0xuUnZURzkzWlhKRFlYTmxLQ2xkT3lCOVhHNGdJQ0FnT2lCbWRXNWpkR2x2YmlBb2RtRnNLU0I3SUhKbGRIVnliaUJ0WVhCYmRtRnNYVHNnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRU5vWldOcklHbG1JR0VnZEdGbklHbHpJR0VnWW5WcGJIUXRhVzRnZEdGbkxseHVJQ292WEc1MllYSWdhWE5DZFdsc2RFbHVWR0ZuSUQwZ2JXRnJaVTFoY0NnbmMyeHZkQ3hqYjIxd2IyNWxiblFuTENCMGNuVmxLVHRjYmx4dUx5b3FYRzRnS2lCRGFHVmpheUJwWmlCaElHRjBkSEpwWW5WMFpTQnBjeUJoSUhKbGMyVnlkbVZrSUdGMGRISnBZblYwWlM1Y2JpQXFMMXh1ZG1GeUlHbHpVbVZ6WlhKMlpXUkJkSFJ5YVdKMWRHVWdQU0J0WVd0bFRXRndLQ2RyWlhrc2NtVm1MSE5zYjNRc2MyeHZkQzF6WTI5d1pTeHBjeWNwTzF4dVhHNHZLaXBjYmlBcUlGSmxiVzkyWlNCaGJpQnBkR1Z0SUdaeWIyMGdZVzRnWVhKeVlYbGNiaUFxTDF4dVpuVnVZM1JwYjI0Z2NtVnRiM1psSUNoaGNuSXNJR2wwWlcwcElIdGNiaUFnYVdZZ0tHRnljaTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQjJZWElnYVc1a1pYZ2dQU0JoY25JdWFXNWtaWGhQWmlocGRHVnRLVHRjYmlBZ0lDQnBaaUFvYVc1a1pYZ2dQaUF0TVNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdGeWNpNXpjR3hwWTJVb2FXNWtaWGdzSURFcFhHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EyaGxZMnNnZDJobGRHaGxjaUIwYUdVZ2IySnFaV04wSUdoaGN5QjBhR1VnY0hKdmNHVnlkSGt1WEc0Z0tpOWNiblpoY2lCb1lYTlBkMjVRY205d1pYSjBlU0E5SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIazdYRzVtZFc1amRHbHZiaUJvWVhOUGQyNGdLRzlpYWl3Z2EyVjVLU0I3WEc0Z0lISmxkSFZ5YmlCb1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tHOWlhaXdnYTJWNUtWeHVmVnh1WEc0dktpcGNiaUFxSUVOeVpXRjBaU0JoSUdOaFkyaGxaQ0IyWlhKemFXOXVJRzltSUdFZ2NIVnlaU0JtZFc1amRHbHZiaTVjYmlBcUwxeHVablZ1WTNScGIyNGdZMkZqYUdWa0lDaG1iaWtnZTF4dUlDQjJZWElnWTJGamFHVWdQU0JQWW1wbFkzUXVZM0psWVhSbEtHNTFiR3dwTzF4dUlDQnlaWFIxY200Z0tHWjFibU4wYVc5dUlHTmhZMmhsWkVadUlDaHpkSElwSUh0Y2JpQWdJQ0IyWVhJZ2FHbDBJRDBnWTJGamFHVmJjM1J5WFR0Y2JpQWdJQ0J5WlhSMWNtNGdhR2wwSUh4OElDaGpZV05vWlZ0emRISmRJRDBnWm00b2MzUnlLU2xjYmlBZ2ZTbGNibjFjYmx4dUx5b3FYRzRnS2lCRFlXMWxiR2w2WlNCaElHaDVjR2hsYmkxa1pXeHBiV2wwWldRZ2MzUnlhVzVuTGx4dUlDb3ZYRzUyWVhJZ1kyRnRaV3hwZW1WU1JTQTlJQzh0S0Z4Y2R5a3ZaenRjYm5aaGNpQmpZVzFsYkdsNlpTQTlJR05oWTJobFpDaG1kVzVqZEdsdmJpQW9jM1J5S1NCN1hHNGdJSEpsZEhWeWJpQnpkSEl1Y21Wd2JHRmpaU2hqWVcxbGJHbDZaVkpGTENCbWRXNWpkR2x2YmlBb1h5d2dZeWtnZXlCeVpYUjFjbTRnWXlBL0lHTXVkRzlWY0hCbGNrTmhjMlVvS1NBNklDY25PeUI5S1Z4dWZTazdYRzVjYmk4cUtseHVJQ29nUTJGd2FYUmhiR2w2WlNCaElITjBjbWx1Wnk1Y2JpQXFMMXh1ZG1GeUlHTmhjR2wwWVd4cGVtVWdQU0JqWVdOb1pXUW9ablZ1WTNScGIyNGdLSE4wY2lrZ2UxeHVJQ0J5WlhSMWNtNGdjM1J5TG1Ob1lYSkJkQ2d3S1M1MGIxVndjR1Z5UTJGelpTZ3BJQ3NnYzNSeUxuTnNhV05sS0RFcFhHNTlLVHRjYmx4dUx5b3FYRzRnS2lCSWVYQm9aVzVoZEdVZ1lTQmpZVzFsYkVOaGMyVWdjM1J5YVc1bkxseHVJQ292WEc1MllYSWdhSGx3YUdWdVlYUmxVa1VnUFNBdlhGeENLRnRCTFZwZEtTOW5PMXh1ZG1GeUlHaDVjR2hsYm1GMFpTQTlJR05oWTJobFpDaG1kVzVqZEdsdmJpQW9jM1J5S1NCN1hHNGdJSEpsZEhWeWJpQnpkSEl1Y21Wd2JHRmpaU2hvZVhCb1pXNWhkR1ZTUlN3Z0p5MGtNU2NwTG5SdlRHOTNaWEpEWVhObEtDbGNibjBwTzF4dVhHNHZLaXBjYmlBcUlGTnBiWEJzWlNCaWFXNWtMQ0JtWVhOMFpYSWdkR2hoYmlCdVlYUnBkbVZjYmlBcUwxeHVablZ1WTNScGIyNGdZbWx1WkNBb1ptNHNJR04wZUNrZ2UxeHVJQ0JtZFc1amRHbHZiaUJpYjNWdVpFWnVJQ2hoS1NCN1hHNGdJQ0FnZG1GeUlHd2dQU0JoY21kMWJXVnVkSE11YkdWdVozUm9PMXh1SUNBZ0lISmxkSFZ5YmlCc1hHNGdJQ0FnSUNBL0lHd2dQaUF4WEc0Z0lDQWdJQ0FnSUQ4Z1ptNHVZWEJ3Ykhrb1kzUjRMQ0JoY21kMWJXVnVkSE1wWEc0Z0lDQWdJQ0FnSURvZ1ptNHVZMkZzYkNoamRIZ3NJR0VwWEc0Z0lDQWdJQ0E2SUdadUxtTmhiR3dvWTNSNEtWeHVJQ0I5WEc0Z0lDOHZJSEpsWTI5eVpDQnZjbWxuYVc1aGJDQm1iaUJzWlc1bmRHaGNiaUFnWW05MWJtUkdiaTVmYkdWdVozUm9JRDBnWm00dWJHVnVaM1JvTzF4dUlDQnlaWFIxY200Z1ltOTFibVJHYmx4dWZWeHVYRzR2S2lwY2JpQXFJRU52Ym5abGNuUWdZVzRnUVhKeVlYa3RiR2xyWlNCdlltcGxZM1FnZEc4Z1lTQnlaV0ZzSUVGeWNtRjVMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQjBiMEZ5Y21GNUlDaHNhWE4wTENCemRHRnlkQ2tnZTF4dUlDQnpkR0Z5ZENBOUlITjBZWEowSUh4OElEQTdYRzRnSUhaaGNpQnBJRDBnYkdsemRDNXNaVzVuZEdnZ0xTQnpkR0Z5ZER0Y2JpQWdkbUZ5SUhKbGRDQTlJRzVsZHlCQmNuSmhlU2hwS1R0Y2JpQWdkMmhwYkdVZ0tHa3RMU2tnZTF4dUlDQWdJSEpsZEZ0cFhTQTlJR3hwYzNSYmFTQXJJSE4wWVhKMFhUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVjBYRzU5WEc1Y2JpOHFLbHh1SUNvZ1RXbDRJSEJ5YjNCbGNuUnBaWE1nYVc1MGJ5QjBZWEpuWlhRZ2IySnFaV04wTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJsZUhSbGJtUWdLSFJ2TENCZlpuSnZiU2tnZTF4dUlDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z1gyWnliMjBwSUh0Y2JpQWdJQ0IwYjF0clpYbGRJRDBnWDJaeWIyMWJhMlY1WFR0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnZEc5Y2JuMWNibHh1THlvcVhHNGdLaUJOWlhKblpTQmhiaUJCY25KaGVTQnZaaUJQWW1wbFkzUnpJR2x1ZEc4Z1lTQnphVzVuYkdVZ1QySnFaV04wTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUIwYjA5aWFtVmpkQ0FvWVhKeUtTQjdYRzRnSUhaaGNpQnlaWE1nUFNCN2ZUdGNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCaGNuSXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0JwWmlBb1lYSnlXMmxkS1NCN1hHNGdJQ0FnSUNCbGVIUmxibVFvY21WekxDQmhjbkpiYVYwcE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCeVpYUjFjbTRnY21WelhHNTlYRzVjYmk4cUtseHVJQ29nVUdWeVptOXliU0J1YnlCdmNHVnlZWFJwYjI0dVhHNGdLaUJUZEhWaVltbHVaeUJoY21keklIUnZJRzFoYTJVZ1JteHZkeUJvWVhCd2VTQjNhWFJvYjNWMElHeGxZWFpwYm1jZ2RYTmxiR1Z6Y3lCMGNtRnVjM0JwYkdWa0lHTnZaR1ZjYmlBcUlIZHBkR2dnTGk0dWNtVnpkQ0FvYUhSMGNITTZMeTltYkc5M0xtOXlaeTlpYkc5bkx6SXdNVGN2TURVdk1EY3ZVM1J5YVdOMExVWjFibU4wYVc5dUxVTmhiR3d0UVhKcGRIa3ZLVnh1SUNvdlhHNW1kVzVqZEdsdmJpQnViMjl3SUNoaExDQmlMQ0JqS1NCN2ZWeHVYRzR2S2lwY2JpQXFJRUZzZDJGNWN5QnlaWFIxY200Z1ptRnNjMlV1WEc0Z0tpOWNiblpoY2lCdWJ5QTlJR1oxYm1OMGFXOXVJQ2hoTENCaUxDQmpLU0I3SUhKbGRIVnliaUJtWVd4elpUc2dmVHRjYmx4dUx5b3FYRzRnS2lCU1pYUjFjbTRnYzJGdFpTQjJZV3gxWlZ4dUlDb3ZYRzUyWVhJZ2FXUmxiblJwZEhrZ1BTQm1kVzVqZEdsdmJpQW9YeWtnZXlCeVpYUjFjbTRnWHpzZ2ZUdGNibHh1THlvcVhHNGdLaUJIWlc1bGNtRjBaU0JoSUhOMFlYUnBZeUJyWlhseklITjBjbWx1WnlCbWNtOXRJR052YlhCcGJHVnlJRzF2WkhWc1pYTXVYRzRnS2k5Y2JseHVYRzR2S2lwY2JpQXFJRU5vWldOcklHbG1JSFIzYnlCMllXeDFaWE1nWVhKbElHeHZiM05sYkhrZ1pYRjFZV3dnTFNCMGFHRjBJR2x6TEZ4dUlDb2dhV1lnZEdobGVTQmhjbVVnY0d4aGFXNGdiMkpxWldOMGN5d2daRzhnZEdobGVTQm9ZWFpsSUhSb1pTQnpZVzFsSUhOb1lYQmxQMXh1SUNvdlhHNW1kVzVqZEdsdmJpQnNiMjl6WlVWeGRXRnNJQ2hoTENCaUtTQjdYRzRnSUdsbUlDaGhJRDA5UFNCaUtTQjdJSEpsZEhWeWJpQjBjblZsSUgxY2JpQWdkbUZ5SUdselQySnFaV04wUVNBOUlHbHpUMkpxWldOMEtHRXBPMXh1SUNCMllYSWdhWE5QWW1wbFkzUkNJRDBnYVhOUFltcGxZM1FvWWlrN1hHNGdJR2xtSUNocGMwOWlhbVZqZEVFZ0ppWWdhWE5QWW1wbFkzUkNLU0I3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUhaaGNpQnBjMEZ5Y21GNVFTQTlJRUZ5Y21GNUxtbHpRWEp5WVhrb1lTazdYRzRnSUNBZ0lDQjJZWElnYVhOQmNuSmhlVUlnUFNCQmNuSmhlUzVwYzBGeWNtRjVLR0lwTzF4dUlDQWdJQ0FnYVdZZ0tHbHpRWEp5WVhsQklDWW1JR2x6UVhKeVlYbENLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoTG14bGJtZDBhQ0E5UFQwZ1lpNXNaVzVuZEdnZ0ppWWdZUzVsZG1WeWVTaG1kVzVqZEdsdmJpQW9aU3dnYVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnNiMjl6WlVWeGRXRnNLR1VzSUdKYmFWMHBYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0NGcGMwRnljbUY1UVNBbUppQWhhWE5CY25KaGVVSXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHdGxlWE5CSUQwZ1QySnFaV04wTG10bGVYTW9ZU2s3WEc0Z0lDQWdJQ0FnSUhaaGNpQnJaWGx6UWlBOUlFOWlhbVZqZEM1clpYbHpLR0lwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYTJWNWMwRXViR1Z1WjNSb0lEMDlQU0JyWlhselFpNXNaVzVuZEdnZ0ppWWdhMlY1YzBFdVpYWmxjbmtvWm5WdVkzUnBiMjRnS0d0bGVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJzYjI5elpVVnhkV0ZzS0dGYmEyVjVYU3dnWWx0clpYbGRLVnh1SUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUc1bGVIUWdLaTljYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHNWxlSFFnS2k5Y2JpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpWeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElHbG1JQ2doYVhOUFltcGxZM1JCSUNZbUlDRnBjMDlpYW1WamRFSXBJSHRjYmlBZ0lDQnlaWFIxY200Z1UzUnlhVzVuS0dFcElEMDlQU0JUZEhKcGJtY29ZaWxjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJWY2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnNiMjl6WlVsdVpHVjRUMllnS0dGeWNpd2dkbUZzS1NCN1hHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWVhKeUxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdhV1lnS0d4dmIzTmxSWEYxWVd3b1lYSnlXMmxkTENCMllXd3BLU0I3SUhKbGRIVnliaUJwSUgxY2JpQWdmVnh1SUNCeVpYUjFjbTRnTFRGY2JuMWNibHh1THlvcVhHNGdLaUJGYm5OMWNtVWdZU0JtZFc1amRHbHZiaUJwY3lCallXeHNaV1FnYjI1c2VTQnZibU5sTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJ2Ym1ObElDaG1iaWtnZTF4dUlDQjJZWElnWTJGc2JHVmtJRDBnWm1Gc2MyVTdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnYVdZZ0tDRmpZV3hzWldRcElIdGNiaUFnSUNBZ0lHTmhiR3hsWkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0JtYmk1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzUyWVhJZ1UxTlNYMEZVVkZJZ1BTQW5aR0YwWVMxelpYSjJaWEl0Y21WdVpHVnlaV1FuTzF4dVhHNTJZWElnUVZOVFJWUmZWRmxRUlZNZ1BTQmJYRzRnSUNkamIyMXdiMjVsYm5RbkxGeHVJQ0FuWkdseVpXTjBhWFpsSnl4Y2JpQWdKMlpwYkhSbGNpZGNibDA3WEc1Y2JuWmhjaUJNU1VaRlExbERURVZmU0U5UFMxTWdQU0JiWEc0Z0lDZGlaV1p2Y21WRGNtVmhkR1VuTEZ4dUlDQW5ZM0psWVhSbFpDY3NYRzRnSUNkaVpXWnZjbVZOYjNWdWRDY3NYRzRnSUNkdGIzVnVkR1ZrSnl4Y2JpQWdKMkpsWm05eVpWVndaR0YwWlNjc1hHNGdJQ2QxY0dSaGRHVmtKeXhjYmlBZ0oySmxabTl5WlVSbGMzUnliM2tuTEZ4dUlDQW5aR1Z6ZEhKdmVXVmtKeXhjYmlBZ0oyRmpkR2wyWVhSbFpDY3NYRzRnSUNka1pXRmpkR2wyWVhSbFpDY3NYRzRnSUNkbGNuSnZja05oY0hSMWNtVmtKMXh1WFR0Y2JseHVMeW9nSUNvdlhHNWNiblpoY2lCamIyNW1hV2NnUFNBb2UxeHVJQ0F2S2lwY2JpQWdJQ29nVDNCMGFXOXVJRzFsY21kbElITjBjbUYwWldkcFpYTWdLSFZ6WldRZ2FXNGdZMjl5WlM5MWRHbHNMMjl3ZEdsdmJuTXBYRzRnSUNBcUwxeHVJQ0F2THlBa1pteHZkeTFrYVhOaFlteGxMV3hwYm1WY2JpQWdiM0IwYVc5dVRXVnlaMlZUZEhKaGRHVm5hV1Z6T2lCUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cExGeHVYRzRnSUM4cUtseHVJQ0FnS2lCWGFHVjBhR1Z5SUhSdklITjFjSEJ5WlhOeklIZGhjbTVwYm1kekxseHVJQ0FnS2k5Y2JpQWdjMmxzWlc1ME9pQm1ZV3h6WlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVTJodmR5QndjbTlrZFdOMGFXOXVJRzF2WkdVZ2RHbHdJRzFsYzNOaFoyVWdiMjRnWW05dmREOWNiaUFnSUNvdlhHNGdJSEJ5YjJSMVkzUnBiMjVVYVhBNklIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3NYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGZG9aWFJvWlhJZ2RHOGdaVzVoWW14bElHUmxkblJ2YjJ4elhHNGdJQ0FxTDF4dUlDQmtaWFowYjI5c2N6b2djSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeXhjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWMmhsZEdobGNpQjBieUJ5WldOdmNtUWdjR1Z5Wmx4dUlDQWdLaTljYmlBZ2NHVnlabTl5YldGdVkyVTZJR1poYkhObExGeHVYRzRnSUM4cUtseHVJQ0FnS2lCRmNuSnZjaUJvWVc1a2JHVnlJR1p2Y2lCM1lYUmphR1Z5SUdWeWNtOXljMXh1SUNBZ0tpOWNiaUFnWlhKeWIzSklZVzVrYkdWeU9pQnVkV3hzTEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJYWVhKdUlHaGhibVJzWlhJZ1ptOXlJSGRoZEdOb1pYSWdkMkZ5Ym5OY2JpQWdJQ292WEc0Z0lIZGhjbTVJWVc1a2JHVnlPaUJ1ZFd4c0xGeHVYRzRnSUM4cUtseHVJQ0FnS2lCSloyNXZjbVVnWTJWeWRHRnBiaUJqZFhOMGIyMGdaV3hsYldWdWRITmNiaUFnSUNvdlhHNGdJR2xuYm05eVpXUkZiR1Z0Wlc1MGN6b2dXMTBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRU4xYzNSdmJTQjFjMlZ5SUd0bGVTQmhiR2xoYzJWeklHWnZjaUIyTFc5dVhHNGdJQ0FxTDF4dUlDQXZMeUFrWm14dmR5MWthWE5oWW14bExXeHBibVZjYmlBZ2EyVjVRMjlrWlhNNklFOWlhbVZqZEM1amNtVmhkR1VvYm5Wc2JDa3NYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTm9aV05ySUdsbUlHRWdkR0ZuSUdseklISmxjMlZ5ZG1Wa0lITnZJSFJvWVhRZ2FYUWdZMkZ1Ym05MElHSmxJSEpsWjJsemRHVnlaV1FnWVhNZ1lWeHVJQ0FnS2lCamIyMXdiMjVsYm5RdUlGUm9hWE1nYVhNZ2NHeGhkR1p2Y20wdFpHVndaVzVrWlc1MElHRnVaQ0J0WVhrZ1ltVWdiM1psY25keWFYUjBaVzR1WEc0Z0lDQXFMMXh1SUNCcGMxSmxjMlZ5ZG1Wa1ZHRm5PaUJ1Ynl4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUTJobFkyc2dhV1lnWVc0Z1lYUjBjbWxpZFhSbElHbHpJSEpsYzJWeWRtVmtJSE52SUhSb1lYUWdhWFFnWTJGdWJtOTBJR0psSUhWelpXUWdZWE1nWVNCamIyMXdiMjVsYm5SY2JpQWdJQ29nY0hKdmNDNGdWR2hwY3lCcGN5QndiR0YwWm05eWJTMWtaWEJsYm1SbGJuUWdZVzVrSUcxaGVTQmlaU0J2ZG1WeWQzSnBkSFJsYmk1Y2JpQWdJQ292WEc0Z0lHbHpVbVZ6WlhKMlpXUkJkSFJ5T2lCdWJ5eGNibHh1SUNBdktpcGNiaUFnSUNvZ1EyaGxZMnNnYVdZZ1lTQjBZV2NnYVhNZ1lXNGdkVzVyYm05M2JpQmxiR1Z0Wlc1MExseHVJQ0FnS2lCUWJHRjBabTl5YlMxa1pYQmxibVJsYm5RdVhHNGdJQ0FxTDF4dUlDQnBjMVZ1YTI1dmQyNUZiR1Z0Wlc1ME9pQnVieXhjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSMlYwSUhSb1pTQnVZVzFsYzNCaFkyVWdiMllnWVc0Z1pXeGxiV1Z1ZEZ4dUlDQWdLaTljYmlBZ1oyVjBWR0ZuVG1GdFpYTndZV05sT2lCdWIyOXdMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlFZWEp6WlNCMGFHVWdjbVZoYkNCMFlXY2dibUZ0WlNCbWIzSWdkR2hsSUhOd1pXTnBabWxqSUhCc1lYUm1iM0p0TGx4dUlDQWdLaTljYmlBZ2NHRnljMlZRYkdGMFptOXliVlJoWjA1aGJXVTZJR2xrWlc1MGFYUjVMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRhR1ZqYXlCcFppQmhiaUJoZEhSeWFXSjFkR1VnYlhWemRDQmlaU0JpYjNWdVpDQjFjMmx1WnlCd2NtOXdaWEowZVN3Z1pTNW5MaUIyWVd4MVpWeHVJQ0FnS2lCUWJHRjBabTl5YlMxa1pYQmxibVJsYm5RdVhHNGdJQ0FxTDF4dUlDQnRkWE4wVlhObFVISnZjRG9nYm04c1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVWNGNHOXpaV1FnWm05eUlHeGxaMkZqZVNCeVpXRnpiMjV6WEc0Z0lDQXFMMXh1SUNCZmJHbG1aV041WTJ4bFNHOXZhM002SUV4SlJrVkRXVU5NUlY5SVQwOUxVMXh1ZlNrN1hHNWNiaThxSUNBcUwxeHVYRzR2S2lwY2JpQXFJRU5vWldOcklHbG1JR0VnYzNSeWFXNW5JSE4wWVhKMGN5QjNhWFJvSUNRZ2IzSWdYMXh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMUpsYzJWeWRtVmtJQ2h6ZEhJcElIdGNiaUFnZG1GeUlHTWdQU0FvYzNSeUlDc2dKeWNwTG1Ob1lYSkRiMlJsUVhRb01DazdYRzRnSUhKbGRIVnliaUJqSUQwOVBTQXdlREkwSUh4OElHTWdQVDA5SURCNE5VWmNibjFjYmx4dUx5b3FYRzRnS2lCRVpXWnBibVVnWVNCd2NtOXdaWEowZVM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWkdWbUlDaHZZbW9zSUd0bGVTd2dkbUZzTENCbGJuVnRaWEpoWW14bEtTQjdYRzRnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaHZZbW9zSUd0bGVTd2dlMXh1SUNBZ0lIWmhiSFZsT2lCMllXd3NYRzRnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJU0ZsYm5WdFpYSmhZbXhsTEZ4dUlDQWdJSGR5YVhSaFlteGxPaUIwY25WbExGeHVJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlZ4dUlDQjlLVHRjYm4xY2JseHVMeW9xWEc0Z0tpQlFZWEp6WlNCemFXMXdiR1VnY0dGMGFDNWNiaUFxTDF4dWRtRnlJR0poYVd4U1JTQTlJQzliWGx4Y2R5NGtYUzg3WEc1bWRXNWpkR2x2YmlCd1lYSnpaVkJoZEdnZ0tIQmhkR2dwSUh0Y2JpQWdhV1lnS0dKaGFXeFNSUzUwWlhOMEtIQmhkR2dwS1NCN1hHNGdJQ0FnY21WMGRYSnVYRzRnSUgxY2JpQWdkbUZ5SUhObFoyMWxiblJ6SUQwZ2NHRjBhQzV6Y0d4cGRDZ25MaWNwTzF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z0tHOWlhaWtnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYzJWbmJXVnVkSE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lHbG1JQ2doYjJKcUtTQjdJSEpsZEhWeWJpQjlYRzRnSUNBZ0lDQnZZbW9nUFNCdlltcGJjMlZuYldWdWRITmJhVjFkTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2IySnFYRzRnSUgxY2JuMWNibHh1THlvZ0lDb3ZYRzVjYmx4dUx5OGdZMkZ1SUhkbElIVnpaU0JmWDNCeWIzUnZYMTgvWEc1MllYSWdhR0Z6VUhKdmRHOGdQU0FuWDE5d2NtOTBiMTlmSnlCcGJpQjdmVHRjYmx4dUx5OGdRbkp2ZDNObGNpQmxiblpwY205dWJXVnVkQ0J6Ym1sbVptbHVaMXh1ZG1GeUlHbHVRbkp2ZDNObGNpQTlJSFI1Y0dWdlppQjNhVzVrYjNjZ0lUMDlJQ2QxYm1SbFptbHVaV1FuTzF4dWRtRnlJR2x1VjJWbGVDQTlJSFI1Y0dWdlppQlhXRVZ1ZG1seWIyNXRaVzUwSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlBaElWZFlSVzUyYVhKdmJtMWxiblF1Y0d4aGRHWnZjbTA3WEc1MllYSWdkMlZsZUZCc1lYUm1iM0p0SUQwZ2FXNVhaV1Y0SUNZbUlGZFlSVzUyYVhKdmJtMWxiblF1Y0d4aGRHWnZjbTB1ZEc5TWIzZGxja05oYzJVb0tUdGNiblpoY2lCVlFTQTlJR2x1UW5KdmQzTmxjaUFtSmlCM2FXNWtiM2N1Ym1GMmFXZGhkRzl5TG5WelpYSkJaMlZ1ZEM1MGIweHZkMlZ5UTJGelpTZ3BPMXh1ZG1GeUlHbHpTVVVnUFNCVlFTQW1KaUF2YlhOcFpYeDBjbWxrWlc1MEx5NTBaWE4wS0ZWQktUdGNiblpoY2lCcGMwbEZPU0E5SUZWQklDWW1JRlZCTG1sdVpHVjRUMllvSjIxemFXVWdPUzR3SnlrZ1BpQXdPMXh1ZG1GeUlHbHpSV1JuWlNBOUlGVkJJQ1ltSUZWQkxtbHVaR1Y0VDJZb0oyVmtaMlV2SnlrZ1BpQXdPMXh1ZG1GeUlHbHpRVzVrY205cFpDQTlJQ2hWUVNBbUppQlZRUzVwYm1SbGVFOW1LQ2RoYm1SeWIybGtKeWtnUGlBd0tTQjhmQ0FvZDJWbGVGQnNZWFJtYjNKdElEMDlQU0FuWVc1a2NtOXBaQ2NwTzF4dWRtRnlJR2x6U1U5VElEMGdLRlZCSUNZbUlDOXBjR2h2Ym1WOGFYQmhaSHhwY0c5a2ZHbHZjeTh1ZEdWemRDaFZRU2twSUh4OElDaDNaV1Y0VUd4aGRHWnZjbTBnUFQwOUlDZHBiM01uS1R0Y2JuWmhjaUJwYzBOb2NtOXRaU0E5SUZWQklDWW1JQzlqYUhKdmJXVmNYQzljWEdRckx5NTBaWE4wS0ZWQktTQW1KaUFoYVhORlpHZGxPMXh1WEc0dkx5QkdhWEpsWm05NElHaGhjeUJoSUZ3aWQyRjBZMmhjSWlCbWRXNWpkR2x2YmlCdmJpQlBZbXBsWTNRdWNISnZkRzkwZVhCbExpNHVYRzUyWVhJZ2JtRjBhWFpsVjJGMFkyZ2dQU0FvZTMwcExuZGhkR05vTzF4dVhHNTJZWElnYzNWd2NHOXlkSE5RWVhOemFYWmxJRDBnWm1Gc2MyVTdYRzVwWmlBb2FXNUNjbTkzYzJWeUtTQjdYRzRnSUhSeWVTQjdYRzRnSUNBZ2RtRnlJRzl3ZEhNZ1BTQjdmVHRjYmlBZ0lDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvYjNCMGN5d2dKM0JoYzNOcGRtVW5MQ0FvZTF4dUlDQWdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpQm5aWFFnS0NrZ2UxeHVJQ0FnSUNBZ0lDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdibVY0ZENBcUwxeHVJQ0FnSUNBZ0lDQnpkWEJ3YjNKMGMxQmhjM05wZG1VZ1BTQjBjblZsTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwS1RzZ0x5OGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMlpoWTJWaWIyOXJMMlpzYjNjdmFYTnpkV1Z6THpJNE5WeHVJQ0FnSUhkcGJtUnZkeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2QwWlhOMExYQmhjM05wZG1VbkxDQnVkV3hzTENCdmNIUnpLVHRjYmlBZ2ZTQmpZWFJqYUNBb1pTa2dlMzFjYm4xY2JseHVMeThnZEdocGN5QnVaV1ZrY3lCMGJ5QmlaU0JzWVhwNUxXVjJZV3hsWkNCaVpXTmhkWE5sSUhaMVpTQnRZWGtnWW1VZ2NtVnhkV2x5WldRZ1ltVm1iM0psWEc0dkx5QjJkV1V0YzJWeWRtVnlMWEpsYm1SbGNtVnlJR05oYmlCelpYUWdWbFZGWDBWT1ZseHVkbUZ5SUY5cGMxTmxjblpsY2p0Y2JuWmhjaUJwYzFObGNuWmxjbEpsYm1SbGNtbHVaeUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnYVdZZ0tGOXBjMU5sY25abGNpQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdsbUlDb3ZYRzRnSUNBZ2FXWWdLQ0ZwYmtKeWIzZHpaWElnSmlZZ2RIbHdaVzltSUdkc2IySmhiQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQzh2SUdSbGRHVmpkQ0J3Y21WelpXNWpaU0J2WmlCMmRXVXRjMlZ5ZG1WeUxYSmxibVJsY21WeUlHRnVaQ0JoZG05cFpGeHVJQ0FnSUNBZ0x5OGdWMlZpY0dGamF5QnphR2x0YldsdVp5QjBhR1VnY0hKdlkyVnpjMXh1SUNBZ0lDQWdYMmx6VTJWeWRtVnlJRDBnWjJ4dlltRnNXeWR3Y205alpYTnpKMTB1Wlc1MkxsWlZSVjlGVGxZZ1BUMDlJQ2R6WlhKMlpYSW5PMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCZmFYTlRaWEoyWlhJZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJRjlwYzFObGNuWmxjbHh1ZlR0Y2JseHVMeThnWkdWMFpXTjBJR1JsZG5SdmIyeHpYRzUyWVhJZ1pHVjJkRzl2YkhNZ1BTQnBia0p5YjNkelpYSWdKaVlnZDJsdVpHOTNMbDlmVmxWRlgwUkZWbFJQVDB4VFgwZE1UMEpCVEY5SVQwOUxYMTg3WEc1Y2JpOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnVaWGgwSUNvdlhHNW1kVzVqZEdsdmJpQnBjMDVoZEdsMlpTQW9RM1J2Y2lrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlFTjBiM0lnUFQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnTDI1aGRHbDJaU0JqYjJSbEx5NTBaWE4wS0VOMGIzSXVkRzlUZEhKcGJtY29LU2xjYm4xY2JseHVkbUZ5SUdoaGMxTjViV0p2YkNBOVhHNGdJSFI1Y0dWdlppQlRlVzFpYjJ3Z0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlHbHpUbUYwYVhabEtGTjViV0p2YkNrZ0ppWmNiaUFnZEhsd1pXOW1JRkpsWm14bFkzUWdJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JR2x6VG1GMGFYWmxLRkpsWm14bFkzUXViM2R1UzJWNWN5azdYRzVjYm5aaGNpQmZVMlYwTzF4dUx5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHbG1JQ292SUM4dklDUm1iRzkzTFdScGMyRmliR1V0YkdsdVpWeHVhV1lnS0hSNWNHVnZaaUJUWlhRZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlHbHpUbUYwYVhabEtGTmxkQ2twSUh0Y2JpQWdMeThnZFhObElHNWhkR2wyWlNCVFpYUWdkMmhsYmlCaGRtRnBiR0ZpYkdVdVhHNGdJRjlUWlhRZ1BTQlRaWFE3WEc1OUlHVnNjMlVnZTF4dUlDQXZMeUJoSUc1dmJpMXpkR0Z1WkdGeVpDQlRaWFFnY0c5c2VXWnBiR3dnZEdoaGRDQnZibXg1SUhkdmNtdHpJSGRwZEdnZ2NISnBiV2wwYVhabElHdGxlWE11WEc0Z0lGOVRaWFFnUFNBb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lHWjFibU4wYVc5dUlGTmxkQ0FvS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbk5sZENBOUlFOWlhbVZqZEM1amNtVmhkR1VvYm5Wc2JDazdYRzRnSUNBZ2ZWeHVJQ0FnSUZObGRDNXdjbTkwYjNSNWNHVXVhR0Z6SUQwZ1puVnVZM1JwYjI0Z2FHRnpJQ2hyWlhrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk5sZEZ0clpYbGRJRDA5UFNCMGNuVmxYRzRnSUNBZ2ZUdGNiaUFnSUNCVFpYUXVjSEp2ZEc5MGVYQmxMbUZrWkNBOUlHWjFibU4wYVc5dUlHRmtaQ0FvYTJWNUtTQjdYRzRnSUNBZ0lDQjBhR2x6TG5ObGRGdHJaWGxkSUQwZ2RISjFaVHRjYmlBZ0lDQjlPMXh1SUNBZ0lGTmxkQzV3Y205MGIzUjVjR1V1WTJ4bFlYSWdQU0JtZFc1amRHbHZiaUJqYkdWaGNpQW9LU0I3WEc0Z0lDQWdJQ0IwYUdsekxuTmxkQ0E5SUU5aWFtVmpkQzVqY21WaGRHVW9iblZzYkNrN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUhKbGRIVnliaUJUWlhRN1hHNGdJSDBvS1NrN1hHNTlYRzVjYmk4cUlDQXFMMXh1WEc1MllYSWdkMkZ5YmlBOUlHNXZiM0E3WEc1MllYSWdkR2x3SUQwZ2JtOXZjRHRjYm5aaGNpQm5aVzVsY21GMFpVTnZiWEJ2Ym1WdWRGUnlZV05sSUQwZ0tHNXZiM0FwT3lBdkx5QjNiM0pySUdGeWIzVnVaQ0JtYkc5M0lHTm9aV05yWEc1MllYSWdabTl5YldGMFEyOXRjRzl1Wlc1MFRtRnRaU0E5SUNodWIyOXdLVHRjYmx4dWFXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNwSUh0Y2JpQWdkbUZ5SUdoaGMwTnZibk52YkdVZ1BTQjBlWEJsYjJZZ1kyOXVjMjlzWlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2M3WEc0Z0lIWmhjaUJqYkdGemMybG1lVkpGSUQwZ0x5Zy9PbDU4V3kxZlhTa29YRngzS1M5bk8xeHVJQ0IyWVhJZ1kyeGhjM05wWm5rZ1BTQm1kVzVqZEdsdmJpQW9jM1J5S1NCN0lISmxkSFZ5YmlCemRISmNiaUFnSUNBdWNtVndiR0ZqWlNoamJHRnpjMmxtZVZKRkxDQm1kVzVqZEdsdmJpQW9ZeWtnZXlCeVpYUjFjbTRnWXk1MGIxVndjR1Z5UTJGelpTZ3BPeUI5S1Z4dUlDQWdJQzV5WlhCc1lXTmxLQzliTFY5ZEwyY3NJQ2NuS1RzZ2ZUdGNibHh1SUNCM1lYSnVJRDBnWm5WdVkzUnBiMjRnS0cxelp5d2dkbTBwSUh0Y2JpQWdJQ0IyWVhJZ2RISmhZMlVnUFNCMmJTQS9JR2RsYm1WeVlYUmxRMjl0Y0c5dVpXNTBWSEpoWTJVb2RtMHBJRG9nSnljN1hHNWNiaUFnSUNCcFppQW9ZMjl1Wm1sbkxuZGhjbTVJWVc1a2JHVnlLU0I3WEc0Z0lDQWdJQ0JqYjI1bWFXY3VkMkZ5YmtoaGJtUnNaWEl1WTJGc2JDaHVkV3hzTENCdGMyY3NJSFp0TENCMGNtRmpaU2s3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hvWVhORGIyNXpiMnhsSUNZbUlDZ2hZMjl1Wm1sbkxuTnBiR1Z1ZENrcElIdGNiaUFnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvS0Z3aVcxWjFaU0IzWVhKdVhUb2dYQ0lnS3lCdGMyY2dLeUIwY21GalpTa3BPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0IwYVhBZ1BTQm1kVzVqZEdsdmJpQW9iWE5uTENCMmJTa2dlMXh1SUNBZ0lHbG1JQ2hvWVhORGIyNXpiMnhsSUNZbUlDZ2hZMjl1Wm1sbkxuTnBiR1Z1ZENrcElIdGNiaUFnSUNBZ0lHTnZibk52YkdVdWQyRnliaWhjSWx0V2RXVWdkR2x3WFRvZ1hDSWdLeUJ0YzJjZ0t5QW9YRzRnSUNBZ0lDQWdJSFp0SUQ4Z1oyVnVaWEpoZEdWRGIyMXdiMjVsYm5SVWNtRmpaU2gyYlNrZ09pQW5KMXh1SUNBZ0lDQWdLU2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUdadmNtMWhkRU52YlhCdmJtVnVkRTVoYldVZ1BTQm1kVzVqZEdsdmJpQW9kbTBzSUdsdVkyeDFaR1ZHYVd4bEtTQjdYRzRnSUNBZ2FXWWdLSFp0TGlSeWIyOTBJRDA5UFNCMmJTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlDYzhVbTl2ZEQ0blhHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCdmNIUnBiMjV6SUQwZ2RIbHdaVzltSUhadElEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbUlIWnRMbU5wWkNBaFBTQnVkV3hzWEc0Z0lDQWdJQ0EvSUhadExtOXdkR2x2Ym5OY2JpQWdJQ0FnSURvZ2RtMHVYMmx6Vm5WbFhHNGdJQ0FnSUNBZ0lEOGdkbTB1Skc5d2RHbHZibk1nZkh3Z2RtMHVZMjl1YzNSeWRXTjBiM0l1YjNCMGFXOXVjMXh1SUNBZ0lDQWdJQ0E2SUhadElIeDhJSHQ5TzF4dUlDQWdJSFpoY2lCdVlXMWxJRDBnYjNCMGFXOXVjeTV1WVcxbElIeDhJRzl3ZEdsdmJuTXVYMk52YlhCdmJtVnVkRlJoWnp0Y2JpQWdJQ0IyWVhJZ1ptbHNaU0E5SUc5d2RHbHZibk11WDE5bWFXeGxPMXh1SUNBZ0lHbG1JQ2doYm1GdFpTQW1KaUJtYVd4bEtTQjdYRzRnSUNBZ0lDQjJZWElnYldGMFkyZ2dQU0JtYVd4bExtMWhkR05vS0M4b1cxNHZYRnhjWEYwcktWeGNMbloxWlNRdktUdGNiaUFnSUNBZ0lHNWhiV1VnUFNCdFlYUmphQ0FtSmlCdFlYUmphRnN4WFR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdLRzVoYldVZ1B5QW9YQ0k4WENJZ0t5QW9ZMnhoYzNOcFpua29ibUZ0WlNrcElDc2dYQ0krWENJcElEb2dYQ0k4UVc1dmJubHRiM1Z6UGx3aUtTQXJYRzRnSUNBZ0lDQW9abWxzWlNBbUppQnBibU5zZFdSbFJtbHNaU0FoUFQwZ1ptRnNjMlVnUHlBb1hDSWdZWFFnWENJZ0t5Qm1hV3hsS1NBNklDY25LVnh1SUNBZ0lDbGNiaUFnZlR0Y2JseHVJQ0IyWVhJZ2NtVndaV0YwSUQwZ1puVnVZM1JwYjI0Z0tITjBjaXdnYmlrZ2UxeHVJQ0FnSUhaaGNpQnlaWE1nUFNBbkp6dGNiaUFnSUNCM2FHbHNaU0FvYmlrZ2UxeHVJQ0FnSUNBZ2FXWWdLRzRnSlNBeUlEMDlQU0F4S1NCN0lISmxjeUFyUFNCemRISTdJSDFjYmlBZ0lDQWdJR2xtSUNodUlENGdNU2tnZXlCemRISWdLejBnYzNSeU95QjlYRzRnSUNBZ0lDQnVJRDQrUFNBeE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjbVZ6WEc0Z0lIMDdYRzVjYmlBZ1oyVnVaWEpoZEdWRGIyMXdiMjVsYm5SVWNtRmpaU0E5SUdaMWJtTjBhVzl1SUNoMmJTa2dlMXh1SUNBZ0lHbG1JQ2gyYlM1ZmFYTldkV1VnSmlZZ2RtMHVKSEJoY21WdWRDa2dlMXh1SUNBZ0lDQWdkbUZ5SUhSeVpXVWdQU0JiWFR0Y2JpQWdJQ0FnSUhaaGNpQmpkWEp5Wlc1MFVtVmpkWEp6YVhabFUyVnhkV1Z1WTJVZ1BTQXdPMXh1SUNBZ0lDQWdkMmhwYkdVZ0tIWnRLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBjbVZsTG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ2JHRnpkQ0E5SUhSeVpXVmJkSEpsWlM1c1pXNW5kR2dnTFNBeFhUdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2JHRnpkQzVqYjI1emRISjFZM1J2Y2lBOVBUMGdkbTB1WTI5dWMzUnlkV04wYjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOMWNuSmxiblJTWldOMWNuTnBkbVZUWlhGMVpXNWpaU3NyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbTBnUFNCMmJTNGtjR0Z5Wlc1ME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHbHVkV1ZjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHTjFjbkpsYm5SU1pXTjFjbk5wZG1WVFpYRjFaVzVqWlNBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnlaV1ZiZEhKbFpTNXNaVzVuZEdnZ0xTQXhYU0E5SUZ0c1lYTjBMQ0JqZFhKeVpXNTBVbVZqZFhKemFYWmxVMlZ4ZFdWdVkyVmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEZKbFkzVnljMmwyWlZObGNYVmxibU5sSUQwZ01EdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RISmxaUzV3ZFhOb0tIWnRLVHRjYmlBZ0lDQWdJQ0FnZG0wZ1BTQjJiUzRrY0dGeVpXNTBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlDZGNYRzVjWEc1bWIzVnVaQ0JwYmx4Y2JseGNiaWNnS3lCMGNtVmxYRzRnSUNBZ0lDQWdJQzV0WVhBb1puVnVZM1JwYjI0Z0tIWnRMQ0JwS1NCN0lISmxkSFZ5YmlBb1hDSmNJaUFySUNocElEMDlQU0F3SUQ4Z0p5MHRMVDRnSnlBNklISmxjR1ZoZENnbklDY3NJRFVnS3lCcElDb2dNaWtwSUNzZ0tFRnljbUY1TG1selFYSnlZWGtvZG0wcFhHNGdJQ0FnSUNBZ0lDQWdJQ0EvSUNnb1ptOXliV0YwUTI5dGNHOXVaVzUwVG1GdFpTaDJiVnN3WFNrcElDc2dYQ0l1TGk0Z0tGd2lJQ3NnS0hadFd6RmRLU0FySUZ3aUlISmxZM1Z5YzJsMlpTQmpZV3hzY3lsY0lpbGNiaUFnSUNBZ0lDQWdJQ0FnSURvZ1ptOXliV0YwUTI5dGNHOXVaVzUwVG1GdFpTaDJiU2twS1RzZ2ZTbGNiaUFnSUNBZ0lDQWdMbXB2YVc0b0oxeGNiaWNwWEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlBb1hDSmNYRzVjWEc0b1ptOTFibVFnYVc0Z1hDSWdLeUFvWm05eWJXRjBRMjl0Y0c5dVpXNTBUbUZ0WlNoMmJTa3BJQ3NnWENJcFhDSXBYRzRnSUNBZ2ZWeHVJQ0I5TzF4dWZWeHVYRzR2S2lBZ0tpOWNibHh1WEc1MllYSWdkV2xrSkRFZ1BTQXdPMXh1WEc0dktpcGNiaUFxSUVFZ1pHVndJR2x6SUdGdUlHOWljMlZ5ZG1GaWJHVWdkR2hoZENCallXNGdhR0YyWlNCdGRXeDBhWEJzWlZ4dUlDb2daR2x5WldOMGFYWmxjeUJ6ZFdKelkzSnBZbWx1WnlCMGJ5QnBkQzVjYmlBcUwxeHVkbUZ5SUVSbGNDQTlJR1oxYm1OMGFXOXVJRVJsY0NBb0tTQjdYRzRnSUhSb2FYTXVhV1FnUFNCMWFXUWtNU3NyTzF4dUlDQjBhR2x6TG5OMVluTWdQU0JiWFR0Y2JuMDdYRzVjYmtSbGNDNXdjbTkwYjNSNWNHVXVZV1JrVTNWaUlEMGdablZ1WTNScGIyNGdZV1JrVTNWaUlDaHpkV0lwSUh0Y2JpQWdkR2hwY3k1emRXSnpMbkIxYzJnb2MzVmlLVHRjYm4wN1hHNWNia1JsY0M1d2NtOTBiM1I1Y0dVdWNtVnRiM1psVTNWaUlEMGdablZ1WTNScGIyNGdjbVZ0YjNabFUzVmlJQ2h6ZFdJcElIdGNiaUFnY21WdGIzWmxLSFJvYVhNdWMzVmljeXdnYzNWaUtUdGNibjA3WEc1Y2JrUmxjQzV3Y205MGIzUjVjR1V1WkdWd1pXNWtJRDBnWm5WdVkzUnBiMjRnWkdWd1pXNWtJQ2dwSUh0Y2JpQWdhV1lnS0VSbGNDNTBZWEpuWlhRcElIdGNiaUFnSUNCRVpYQXVkR0Z5WjJWMExtRmtaRVJsY0NoMGFHbHpLVHRjYmlBZ2ZWeHVmVHRjYmx4dVJHVndMbkJ5YjNSdmRIbHdaUzV1YjNScFpua2dQU0JtZFc1amRHbHZiaUJ1YjNScFpua2dLQ2tnZTF4dUlDQXZMeUJ6ZEdGaWFXeHBlbVVnZEdobElITjFZbk5qY21saVpYSWdiR2x6ZENCbWFYSnpkRnh1SUNCMllYSWdjM1ZpY3lBOUlIUm9hWE11YzNWaWN5NXpiR2xqWlNncE8xeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2diQ0E5SUhOMVluTXViR1Z1WjNSb095QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdjM1ZpYzF0cFhTNTFjR1JoZEdVb0tUdGNiaUFnZlZ4dWZUdGNibHh1THk4Z2RHaGxJR04xY25KbGJuUWdkR0Z5WjJWMElIZGhkR05vWlhJZ1ltVnBibWNnWlhaaGJIVmhkR1ZrTGx4dUx5OGdkR2hwY3lCcGN5Qm5iRzlpWVd4c2VTQjFibWx4ZFdVZ1ltVmpZWFZ6WlNCMGFHVnlaU0JqYjNWc1pDQmlaU0J2Ym14NUlHOXVaVnh1THk4Z2QyRjBZMmhsY2lCaVpXbHVaeUJsZG1Gc2RXRjBaV1FnWVhRZ1lXNTVJSFJwYldVdVhHNUVaWEF1ZEdGeVoyVjBJRDBnYm5Wc2JEdGNiblpoY2lCMFlYSm5aWFJUZEdGamF5QTlJRnRkTzF4dVhHNW1kVzVqZEdsdmJpQndkWE5vVkdGeVoyVjBJQ2hmZEdGeVoyVjBLU0I3WEc0Z0lHbG1JQ2hFWlhBdWRHRnlaMlYwS1NCN0lIUmhjbWRsZEZOMFlXTnJMbkIxYzJnb1JHVndMblJoY21kbGRDazdJSDFjYmlBZ1JHVndMblJoY21kbGRDQTlJRjkwWVhKblpYUTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlIQnZjRlJoY21kbGRDQW9LU0I3WEc0Z0lFUmxjQzUwWVhKblpYUWdQU0IwWVhKblpYUlRkR0ZqYXk1d2IzQW9LVHRjYm4xY2JseHVMeW9nSUNvdlhHNWNiblpoY2lCV1RtOWtaU0E5SUdaMWJtTjBhVzl1SUZaT2IyUmxJQ2hjYmlBZ2RHRm5MRnh1SUNCa1lYUmhMRnh1SUNCamFHbHNaSEpsYml4Y2JpQWdkR1Y0ZEN4Y2JpQWdaV3h0TEZ4dUlDQmpiMjUwWlhoMExGeHVJQ0JqYjIxd2IyNWxiblJQY0hScGIyNXpMRnh1SUNCaGMzbHVZMFpoWTNSdmNubGNiaWtnZTF4dUlDQjBhR2x6TG5SaFp5QTlJSFJoWnp0Y2JpQWdkR2hwY3k1a1lYUmhJRDBnWkdGMFlUdGNiaUFnZEdocGN5NWphR2xzWkhKbGJpQTlJR05vYVd4a2NtVnVPMXh1SUNCMGFHbHpMblJsZUhRZ1BTQjBaWGgwTzF4dUlDQjBhR2x6TG1Wc2JTQTlJR1ZzYlR0Y2JpQWdkR2hwY3k1dWN5QTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ2RHaHBjeTVqYjI1MFpYaDBJRDBnWTI5dWRHVjRkRHRjYmlBZ2RHaHBjeTVtYmtOdmJuUmxlSFFnUFNCMWJtUmxabWx1WldRN1hHNGdJSFJvYVhNdVptNVBjSFJwYjI1eklEMGdkVzVrWldacGJtVmtPMXh1SUNCMGFHbHpMbVp1VTJOdmNHVkpaQ0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdkR2hwY3k1clpYa2dQU0JrWVhSaElDWW1JR1JoZEdFdWEyVjVPMXh1SUNCMGFHbHpMbU52YlhCdmJtVnVkRTl3ZEdsdmJuTWdQU0JqYjIxd2IyNWxiblJQY0hScGIyNXpPMXh1SUNCMGFHbHpMbU52YlhCdmJtVnVkRWx1YzNSaGJtTmxJRDBnZFc1a1pXWnBibVZrTzF4dUlDQjBhR2x6TG5CaGNtVnVkQ0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdkR2hwY3k1eVlYY2dQU0JtWVd4elpUdGNiaUFnZEdocGN5NXBjMU4wWVhScFl5QTlJR1poYkhObE8xeHVJQ0IwYUdsekxtbHpVbTl2ZEVsdWMyVnlkQ0E5SUhSeWRXVTdYRzRnSUhSb2FYTXVhWE5EYjIxdFpXNTBJRDBnWm1Gc2MyVTdYRzRnSUhSb2FYTXVhWE5EYkc5dVpXUWdQU0JtWVd4elpUdGNiaUFnZEdocGN5NXBjMDl1WTJVZ1BTQm1ZV3h6WlR0Y2JpQWdkR2hwY3k1aGMzbHVZMFpoWTNSdmNua2dQU0JoYzNsdVkwWmhZM1J2Y25rN1hHNGdJSFJvYVhNdVlYTjVibU5OWlhSaElEMGdkVzVrWldacGJtVmtPMXh1SUNCMGFHbHpMbWx6UVhONWJtTlFiR0ZqWldodmJHUmxjaUE5SUdaaGJITmxPMXh1ZlR0Y2JseHVkbUZ5SUhCeWIzUnZkSGx3WlVGalkyVnpjMjl5Y3lBOUlIc2dZMmhwYkdRNklIc2dZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxJSDBnZlR0Y2JseHVMeThnUkVWUVVrVkRRVlJGUkRvZ1lXeHBZWE1nWm05eUlHTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObElHWnZjaUJpWVdOcmQyRnlaSE1nWTI5dGNHRjBMbHh1THlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUc1bGVIUWdLaTljYm5CeWIzUnZkSGx3WlVGalkyVnpjMjl5Y3k1amFHbHNaQzVuWlhRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lISmxkSFZ5YmlCMGFHbHpMbU52YlhCdmJtVnVkRWx1YzNSaGJtTmxYRzU5TzF4dVhHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkR2xsY3lnZ1ZrNXZaR1V1Y0hKdmRHOTBlWEJsTENCd2NtOTBiM1I1Y0dWQlkyTmxjM052Y25NZ0tUdGNibHh1ZG1GeUlHTnlaV0YwWlVWdGNIUjVWazV2WkdVZ1BTQm1kVzVqZEdsdmJpQW9kR1Y0ZENrZ2UxeHVJQ0JwWmlBb0lIUmxlSFFnUFQwOUlIWnZhV1FnTUNBcElIUmxlSFFnUFNBbkp6dGNibHh1SUNCMllYSWdibTlrWlNBOUlHNWxkeUJXVG05a1pTZ3BPMXh1SUNCdWIyUmxMblJsZUhRZ1BTQjBaWGgwTzF4dUlDQnViMlJsTG1selEyOXRiV1Z1ZENBOUlIUnlkV1U3WEc0Z0lISmxkSFZ5YmlCdWIyUmxYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWVVpYaDBWazV2WkdVZ0tIWmhiQ2tnZTF4dUlDQnlaWFIxY200Z2JtVjNJRlpPYjJSbEtIVnVaR1ZtYVc1bFpDd2dkVzVrWldacGJtVmtMQ0IxYm1SbFptbHVaV1FzSUZOMGNtbHVaeWgyWVd3cEtWeHVmVnh1WEc0dkx5QnZjSFJwYldsNlpXUWdjMmhoYkd4dmR5QmpiRzl1WlZ4dUx5OGdkWE5sWkNCbWIzSWdjM1JoZEdsaklHNXZaR1Z6SUdGdVpDQnpiRzkwSUc1dlpHVnpJR0psWTJGMWMyVWdkR2hsZVNCdFlYa2dZbVVnY21WMWMyVmtJR0ZqY205emMxeHVMeThnYlhWc2RHbHdiR1VnY21WdVpHVnljeXdnWTJ4dmJtbHVaeUIwYUdWdElHRjJiMmxrY3lCbGNuSnZjbk1nZDJobGJpQkVUMDBnYldGdWFYQjFiR0YwYVc5dWN5QnlaV3g1WEc0dkx5QnZiaUIwYUdWcGNpQmxiRzBnY21WbVpYSmxibU5sTGx4dVpuVnVZM1JwYjI0Z1kyeHZibVZXVG05a1pTQW9kbTV2WkdVc0lHUmxaWEFwSUh0Y2JpQWdkbUZ5SUdOdmJYQnZibVZ1ZEU5d2RHbHZibk1nUFNCMmJtOWtaUzVqYjIxd2IyNWxiblJQY0hScGIyNXpPMXh1SUNCMllYSWdZMnh2Ym1Wa0lEMGdibVYzSUZaT2IyUmxLRnh1SUNBZ0lIWnViMlJsTG5SaFp5eGNiaUFnSUNCMmJtOWtaUzVrWVhSaExGeHVJQ0FnSUhadWIyUmxMbU5vYVd4a2NtVnVMRnh1SUNBZ0lIWnViMlJsTG5SbGVIUXNYRzRnSUNBZ2RtNXZaR1V1Wld4dExGeHVJQ0FnSUhadWIyUmxMbU52Ym5SbGVIUXNYRzRnSUNBZ1kyOXRjRzl1Wlc1MFQzQjBhVzl1Y3l4Y2JpQWdJQ0IyYm05a1pTNWhjM2x1WTBaaFkzUnZjbmxjYmlBZ0tUdGNiaUFnWTJ4dmJtVmtMbTV6SUQwZ2RtNXZaR1V1Ym5NN1hHNGdJR05zYjI1bFpDNXBjMU4wWVhScFl5QTlJSFp1YjJSbExtbHpVM1JoZEdsak8xeHVJQ0JqYkc5dVpXUXVhMlY1SUQwZ2RtNXZaR1V1YTJWNU8xeHVJQ0JqYkc5dVpXUXVhWE5EYjIxdFpXNTBJRDBnZG01dlpHVXVhWE5EYjIxdFpXNTBPMXh1SUNCamJHOXVaV1F1Wm01RGIyNTBaWGgwSUQwZ2RtNXZaR1V1Wm01RGIyNTBaWGgwTzF4dUlDQmpiRzl1WldRdVptNVBjSFJwYjI1eklEMGdkbTV2WkdVdVptNVBjSFJwYjI1ek8xeHVJQ0JqYkc5dVpXUXVabTVUWTI5d1pVbGtJRDBnZG01dlpHVXVabTVUWTI5d1pVbGtPMXh1SUNCamJHOXVaV1F1YVhORGJHOXVaV1FnUFNCMGNuVmxPMXh1SUNCcFppQW9aR1ZsY0NrZ2UxeHVJQ0FnSUdsbUlDaDJibTlrWlM1amFHbHNaSEpsYmlrZ2UxeHVJQ0FnSUNBZ1kyeHZibVZrTG1Ob2FXeGtjbVZ1SUQwZ1kyeHZibVZXVG05a1pYTW9kbTV2WkdVdVkyaHBiR1J5Wlc0c0lIUnlkV1VwTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvWTI5dGNHOXVaVzUwVDNCMGFXOXVjeUFtSmlCamIyMXdiMjVsYm5SUGNIUnBiMjV6TG1Ob2FXeGtjbVZ1S1NCN1hHNGdJQ0FnSUNCamIyMXdiMjVsYm5SUGNIUnBiMjV6TG1Ob2FXeGtjbVZ1SUQwZ1kyeHZibVZXVG05a1pYTW9ZMjl0Y0c5dVpXNTBUM0IwYVc5dWN5NWphR2xzWkhKbGJpd2dkSEoxWlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJqYkc5dVpXUmNibjFjYmx4dVpuVnVZM1JwYjI0Z1kyeHZibVZXVG05a1pYTWdLSFp1YjJSbGN5d2daR1ZsY0NrZ2UxeHVJQ0IyWVhJZ2JHVnVJRDBnZG01dlpHVnpMbXhsYm1kMGFEdGNiaUFnZG1GeUlISmxjeUE5SUc1bGR5QkJjbkpoZVNoc1pXNHBPMXh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHeGxianNnYVNzcktTQjdYRzRnSUNBZ2NtVnpXMmxkSUQwZ1kyeHZibVZXVG05a1pTaDJibTlrWlhOYmFWMHNJR1JsWlhBcE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCeVpYTmNibjFjYmx4dUx5cGNiaUFxSUc1dmRDQjBlWEJsSUdOb1pXTnJhVzVuSUhSb2FYTWdabWxzWlNCaVpXTmhkWE5sSUdac2IzY2daRzlsYzI0bmRDQndiR0Y1SUhkbGJHd2dkMmwwYUZ4dUlDb2daSGx1WVcxcFkyRnNiSGtnWVdOalpYTnphVzVuSUcxbGRHaHZaSE1nYjI0Z1FYSnlZWGtnY0hKdmRHOTBlWEJsWEc0Z0tpOWNibHh1ZG1GeUlHRnljbUY1VUhKdmRHOGdQU0JCY25KaGVTNXdjbTkwYjNSNWNHVTdYRzUyWVhJZ1lYSnlZWGxOWlhSb2IyUnpJRDBnVDJKcVpXTjBMbU55WldGMFpTaGhjbkpoZVZCeWIzUnZLVHRiWEc0Z0lDZHdkWE5vSnl4Y2JpQWdKM0J2Y0Njc1hHNGdJQ2R6YUdsbWRDY3NYRzRnSUNkMWJuTm9hV1owSnl4Y2JpQWdKM053YkdsalpTY3NYRzRnSUNkemIzSjBKeXhjYmlBZ0ozSmxkbVZ5YzJVblhHNWRMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLRzFsZEdodlpDa2dlMXh1SUNBdkx5QmpZV05vWlNCdmNtbG5hVzVoYkNCdFpYUm9iMlJjYmlBZ2RtRnlJRzl5YVdkcGJtRnNJRDBnWVhKeVlYbFFjbTkwYjF0dFpYUm9iMlJkTzF4dUlDQmtaV1lvWVhKeVlYbE5aWFJvYjJSekxDQnRaWFJvYjJRc0lHWjFibU4wYVc5dUlHMTFkR0YwYjNJZ0tDa2dlMXh1SUNBZ0lIWmhjaUJoY21keklEMGdXMTBzSUd4bGJpQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZzdYRzRnSUNBZ2QyaHBiR1VnS0NCc1pXNHRMU0FwSUdGeVozTmJJR3hsYmlCZElEMGdZWEpuZFcxbGJuUnpXeUJzWlc0Z1hUdGNibHh1SUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0J2Y21sbmFXNWhiQzVoY0hCc2VTaDBhR2x6TENCaGNtZHpLVHRjYmlBZ0lDQjJZWElnYjJJZ1BTQjBhR2x6TGw5ZmIySmZYenRjYmlBZ0lDQjJZWElnYVc1elpYSjBaV1E3WEc0Z0lDQWdjM2RwZEdOb0lDaHRaWFJvYjJRcElIdGNiaUFnSUNBZ0lHTmhjMlVnSjNCMWMyZ25PbHh1SUNBZ0lDQWdZMkZ6WlNBbmRXNXphR2xtZENjNlhHNGdJQ0FnSUNBZ0lHbHVjMlZ5ZEdWa0lEMGdZWEpuY3p0Y2JpQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJR05oYzJVZ0ozTndiR2xqWlNjNlhHNGdJQ0FnSUNBZ0lHbHVjMlZ5ZEdWa0lEMGdZWEpuY3k1emJHbGpaU2d5S1R0Y2JpQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR2x1YzJWeWRHVmtLU0I3SUc5aUxtOWljMlZ5ZG1WQmNuSmhlU2hwYm5ObGNuUmxaQ2s3SUgxY2JpQWdJQ0F2THlCdWIzUnBabmtnWTJoaGJtZGxYRzRnSUNBZ2IySXVaR1Z3TG01dmRHbG1lU2dwTzF4dUlDQWdJSEpsZEhWeWJpQnlaWE4xYkhSY2JpQWdmU2s3WEc1OUtUdGNibHh1THlvZ0lDb3ZYRzVjYm5aaGNpQmhjbkpoZVV0bGVYTWdQU0JQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeWhoY25KaGVVMWxkR2h2WkhNcE8xeHVYRzR2S2lwY2JpQXFJRUo1SUdSbFptRjFiSFFzSUhkb1pXNGdZU0J5WldGamRHbDJaU0J3Y205d1pYSjBlU0JwY3lCelpYUXNJSFJvWlNCdVpYY2dkbUZzZFdVZ2FYTmNiaUFxSUdGc2MyOGdZMjl1ZG1WeWRHVmtJSFJ2SUdKbFkyOXRaU0J5WldGamRHbDJaUzRnU0c5M1pYWmxjaUIzYUdWdUlIQmhjM05wYm1jZ1pHOTNiaUJ3Y205d2N5eGNiaUFxSUhkbElHUnZiaWQwSUhkaGJuUWdkRzhnWm05eVkyVWdZMjl1ZG1WeWMybHZiaUJpWldOaGRYTmxJSFJvWlNCMllXeDFaU0J0WVhrZ1ltVWdZU0J1WlhOMFpXUWdkbUZzZFdWY2JpQXFJSFZ1WkdWeUlHRWdabkp2ZW1WdUlHUmhkR0VnYzNSeWRXTjBkWEpsTGlCRGIyNTJaWEowYVc1bklHbDBJSGR2ZFd4a0lHUmxabVZoZENCMGFHVWdiM0IwYVcxcGVtRjBhVzl1TGx4dUlDb3ZYRzUyWVhJZ2IySnpaWEoyWlhKVGRHRjBaU0E5SUh0Y2JpQWdjMmh2ZFd4a1EyOXVkbVZ5ZERvZ2RISjFaVnh1ZlR0Y2JseHVMeW9xWEc0Z0tpQlBZbk5sY25abGNpQmpiR0Z6Y3lCMGFHRjBJR0Z5WlNCaGRIUmhZMmhsWkNCMGJ5QmxZV05vSUc5aWMyVnlkbVZrWEc0Z0tpQnZZbXBsWTNRdUlFOXVZMlVnWVhSMFlXTm9aV1FzSUhSb1pTQnZZbk5sY25abGNpQmpiMjUyWlhKMGN5QjBZWEpuWlhSY2JpQXFJRzlpYW1WamRDZHpJSEJ5YjNCbGNuUjVJR3RsZVhNZ2FXNTBieUJuWlhSMFpYSXZjMlYwZEdWeWN5QjBhR0YwWEc0Z0tpQmpiMnhzWldOMElHUmxjR1Z1WkdWdVkybGxjeUJoYm1RZ1pHbHpjR0YwWTJobGN5QjFjR1JoZEdWekxseHVJQ292WEc1MllYSWdUMkp6WlhKMlpYSWdQU0JtZFc1amRHbHZiaUJQWW5ObGNuWmxjaUFvZG1Gc2RXVXBJSHRjYmlBZ2RHaHBjeTUyWVd4MVpTQTlJSFpoYkhWbE8xeHVJQ0IwYUdsekxtUmxjQ0E5SUc1bGR5QkVaWEFvS1R0Y2JpQWdkR2hwY3k1MmJVTnZkVzUwSUQwZ01EdGNiaUFnWkdWbUtIWmhiSFZsTENBblgxOXZZbDlmSnl3Z2RHaHBjeWs3WEc0Z0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtIWmhiSFZsS1NrZ2UxeHVJQ0FnSUhaaGNpQmhkV2R0Wlc1MElEMGdhR0Z6VUhKdmRHOWNiaUFnSUNBZ0lEOGdjSEp2ZEc5QmRXZHRaVzUwWEc0Z0lDQWdJQ0E2SUdOdmNIbEJkV2R0Wlc1ME8xeHVJQ0FnSUdGMVoyMWxiblFvZG1Gc2RXVXNJR0Z5Y21GNVRXVjBhRzlrY3l3Z1lYSnlZWGxMWlhsektUdGNiaUFnSUNCMGFHbHpMbTlpYzJWeWRtVkJjbkpoZVNoMllXeDFaU2s3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZEdocGN5NTNZV3hyS0haaGJIVmxLVHRjYmlBZ2ZWeHVmVHRjYmx4dUx5b3FYRzRnS2lCWFlXeHJJSFJvY205MVoyZ2daV0ZqYUNCd2NtOXdaWEowZVNCaGJtUWdZMjl1ZG1WeWRDQjBhR1Z0SUdsdWRHOWNiaUFxSUdkbGRIUmxjaTl6WlhSMFpYSnpMaUJVYUdseklHMWxkR2h2WkNCemFHOTFiR1FnYjI1c2VTQmlaU0JqWVd4c1pXUWdkMmhsYmx4dUlDb2dkbUZzZFdVZ2RIbHdaU0JwY3lCUFltcGxZM1F1WEc0Z0tpOWNiazlpYzJWeWRtVnlMbkJ5YjNSdmRIbHdaUzUzWVd4cklEMGdablZ1WTNScGIyNGdkMkZzYXlBb2IySnFLU0I3WEc0Z0lIWmhjaUJyWlhseklEMGdUMkpxWldOMExtdGxlWE1vYjJKcUtUdGNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCclpYbHpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnWkdWbWFXNWxVbVZoWTNScGRtVW9iMkpxTENCclpYbHpXMmxkTENCdlltcGJhMlY1YzF0cFhWMHBPMXh1SUNCOVhHNTlPMXh1WEc0dktpcGNiaUFxSUU5aWMyVnlkbVVnWVNCc2FYTjBJRzltSUVGeWNtRjVJR2wwWlcxekxseHVJQ292WEc1UFluTmxjblpsY2k1d2NtOTBiM1I1Y0dVdWIySnpaWEoyWlVGeWNtRjVJRDBnWm5WdVkzUnBiMjRnYjJKelpYSjJaVUZ5Y21GNUlDaHBkR1Z0Y3lrZ2UxeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2diQ0E5SUdsMFpXMXpMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeWtnZTF4dUlDQWdJRzlpYzJWeWRtVW9hWFJsYlhOYmFWMHBPMXh1SUNCOVhHNTlPMXh1WEc0dkx5Qm9aV3h3WlhKelhHNWNiaThxS2x4dUlDb2dRWFZuYldWdWRDQmhiaUIwWVhKblpYUWdUMkpxWldOMElHOXlJRUZ5Y21GNUlHSjVJR2x1ZEdWeVkyVndkR2x1WjF4dUlDb2dkR2hsSUhCeWIzUnZkSGx3WlNCamFHRnBiaUIxYzJsdVp5QmZYM0J5YjNSdlgxOWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2NISnZkRzlCZFdkdFpXNTBJQ2gwWVhKblpYUXNJSE55WXl3Z2EyVjVjeWtnZTF4dUlDQXZLaUJsYzJ4cGJuUXRaR2x6WVdKc1pTQnVieTF3Y205MGJ5QXFMMXh1SUNCMFlYSm5aWFF1WDE5d2NtOTBiMTlmSUQwZ2MzSmpPMXh1SUNBdktpQmxjMnhwYm5RdFpXNWhZbXhsSUc1dkxYQnliM1J2SUNvdlhHNTlYRzVjYmk4cUtseHVJQ29nUVhWbmJXVnVkQ0JoYmlCMFlYSm5aWFFnVDJKcVpXTjBJRzl5SUVGeWNtRjVJR0o1SUdSbFptbHVhVzVuWEc0Z0tpQm9hV1JrWlc0Z2NISnZjR1Z5ZEdsbGN5NWNiaUFxTDF4dUx5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHNWxlSFFnS2k5Y2JtWjFibU4wYVc5dUlHTnZjSGxCZFdkdFpXNTBJQ2gwWVhKblpYUXNJSE55WXl3Z2EyVjVjeWtnZTF4dUlDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JDQTlJR3RsZVhNdWJHVnVaM1JvT3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ2RtRnlJR3RsZVNBOUlHdGxlWE5iYVYwN1hHNGdJQ0FnWkdWbUtIUmhjbWRsZEN3Z2EyVjVMQ0J6Y21OYmEyVjVYU2s3WEc0Z0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCQmRIUmxiWEIwSUhSdklHTnlaV0YwWlNCaGJpQnZZbk5sY25abGNpQnBibk4wWVc1alpTQm1iM0lnWVNCMllXeDFaU3hjYmlBcUlISmxkSFZ5Ym5NZ2RHaGxJRzVsZHlCdlluTmxjblpsY2lCcFppQnpkV05qWlhOelpuVnNiSGtnYjJKelpYSjJaV1FzWEc0Z0tpQnZjaUIwYUdVZ1pYaHBjM1JwYm1jZ2IySnpaWEoyWlhJZ2FXWWdkR2hsSUhaaGJIVmxJR0ZzY21WaFpIa2dhR0Z6SUc5dVpTNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2IySnpaWEoyWlNBb2RtRnNkV1VzSUdGelVtOXZkRVJoZEdFcElIdGNiaUFnYVdZZ0tDRnBjMDlpYW1WamRDaDJZV3gxWlNrZ2ZId2dkbUZzZFdVZ2FXNXpkR0Z1WTJWdlppQldUbTlrWlNrZ2UxeHVJQ0FnSUhKbGRIVnlibHh1SUNCOVhHNGdJSFpoY2lCdllqdGNiaUFnYVdZZ0tHaGhjMDkzYmloMllXeDFaU3dnSjE5ZmIySmZYeWNwSUNZbUlIWmhiSFZsTGw5ZmIySmZYeUJwYm5OMFlXNWpaVzltSUU5aWMyVnlkbVZ5S1NCN1hHNGdJQ0FnYjJJZ1BTQjJZV3gxWlM1ZlgyOWlYMTg3WEc0Z0lIMGdaV3h6WlNCcFppQW9YRzRnSUNBZ2IySnpaWEoyWlhKVGRHRjBaUzV6YUc5MWJHUkRiMjUyWlhKMElDWW1YRzRnSUNBZ0lXbHpVMlZ5ZG1WeVVtVnVaR1Z5YVc1bktDa2dKaVpjYmlBZ0lDQW9RWEp5WVhrdWFYTkJjbkpoZVNoMllXeDFaU2tnZkh3Z2FYTlFiR0ZwYms5aWFtVmpkQ2gyWVd4MVpTa3BJQ1ltWEc0Z0lDQWdUMkpxWldOMExtbHpSWGgwWlc1emFXSnNaU2gyWVd4MVpTa2dKaVpjYmlBZ0lDQWhkbUZzZFdVdVgybHpWblZsWEc0Z0lDa2dlMXh1SUNBZ0lHOWlJRDBnYm1WM0lFOWljMlZ5ZG1WeUtIWmhiSFZsS1R0Y2JpQWdmVnh1SUNCcFppQW9ZWE5TYjI5MFJHRjBZU0FtSmlCdllpa2dlMXh1SUNBZ0lHOWlMblp0UTI5MWJuUXJLenRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiMkpjYm4xY2JseHVMeW9xWEc0Z0tpQkVaV1pwYm1VZ1lTQnlaV0ZqZEdsMlpTQndjbTl3WlhKMGVTQnZiaUJoYmlCUFltcGxZM1F1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR1JsWm1sdVpWSmxZV04wYVhabElDaGNiaUFnYjJKcUxGeHVJQ0JyWlhrc1hHNGdJSFpoYkN4Y2JpQWdZM1Z6ZEc5dFUyVjBkR1Z5TEZ4dUlDQnphR0ZzYkc5M1hHNHBJSHRjYmlBZ2RtRnlJR1JsY0NBOUlHNWxkeUJFWlhBb0tUdGNibHh1SUNCMllYSWdjSEp2Y0dWeWRIa2dQU0JQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtHOWlhaXdnYTJWNUtUdGNiaUFnYVdZZ0tIQnliM0JsY25SNUlDWW1JSEJ5YjNCbGNuUjVMbU52Ym1acFozVnlZV0pzWlNBOVBUMGdabUZzYzJVcElIdGNiaUFnSUNCeVpYUjFjbTVjYmlBZ2ZWeHVYRzRnSUM4dklHTmhkR1Z5SUdadmNpQndjbVV0WkdWbWFXNWxaQ0JuWlhSMFpYSXZjMlYwZEdWeWMxeHVJQ0IyWVhJZ1oyVjBkR1Z5SUQwZ2NISnZjR1Z5ZEhrZ0ppWWdjSEp2Y0dWeWRIa3VaMlYwTzF4dUlDQjJZWElnYzJWMGRHVnlJRDBnY0hKdmNHVnlkSGtnSmlZZ2NISnZjR1Z5ZEhrdWMyVjBPMXh1WEc0Z0lIWmhjaUJqYUdsc1pFOWlJRDBnSVhOb1lXeHNiM2NnSmlZZ2IySnpaWEoyWlNoMllXd3BPMXh1SUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29iMkpxTENCclpYa3NJSHRjYmlBZ0lDQmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUlISmxZV04wYVhabFIyVjBkR1Z5SUNncElIdGNiaUFnSUNBZ0lIWmhjaUIyWVd4MVpTQTlJR2RsZEhSbGNpQS9JR2RsZEhSbGNpNWpZV3hzS0c5aWFpa2dPaUIyWVd3N1hHNGdJQ0FnSUNCcFppQW9SR1Z3TG5SaGNtZGxkQ2tnZTF4dUlDQWdJQ0FnSUNCa1pYQXVaR1Z3Wlc1a0tDazdYRzRnSUNBZ0lDQWdJR2xtSUNoamFHbHNaRTlpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMmhwYkdSUFlpNWtaWEF1WkdWd1pXNWtLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb2RtRnNkV1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWlhCbGJtUkJjbkpoZVNoMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1ZjYmlBZ0lDQjlMRnh1SUNBZ0lITmxkRG9nWm5WdVkzUnBiMjRnY21WaFkzUnBkbVZUWlhSMFpYSWdLRzVsZDFaaGJDa2dlMXh1SUNBZ0lDQWdkbUZ5SUhaaGJIVmxJRDBnWjJWMGRHVnlJRDhnWjJWMGRHVnlMbU5oYkd3b2IySnFLU0E2SUhaaGJEdGNiaUFnSUNBZ0lDOHFJR1Z6YkdsdWRDMWthWE5oWW14bElHNXZMWE5sYkdZdFkyOXRjR0Z5WlNBcUwxeHVJQ0FnSUNBZ2FXWWdLRzVsZDFaaGJDQTlQVDBnZG1Gc2RXVWdmSHdnS0c1bGQxWmhiQ0FoUFQwZ2JtVjNWbUZzSUNZbUlIWmhiSFZsSUNFOVBTQjJZV3gxWlNrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdVhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNBdktpQmxjMnhwYm5RdFpXNWhZbXhsSUc1dkxYTmxiR1l0WTI5dGNHRnlaU0FxTDF4dUlDQWdJQ0FnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dKaVlnWTNWemRHOXRVMlYwZEdWeUtTQjdYRzRnSUNBZ0lDQWdJR04xYzNSdmJWTmxkSFJsY2lncE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLSE5sZEhSbGNpa2dlMXh1SUNBZ0lDQWdJQ0J6WlhSMFpYSXVZMkZzYkNodlltb3NJRzVsZDFaaGJDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjJZV3dnUFNCdVpYZFdZV3c3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JqYUdsc1pFOWlJRDBnSVhOb1lXeHNiM2NnSmlZZ2IySnpaWEoyWlNodVpYZFdZV3dwTzF4dUlDQWdJQ0FnWkdWd0xtNXZkR2xtZVNncE8xeHVJQ0FnSUgxY2JpQWdmU2s3WEc1OVhHNWNiaThxS2x4dUlDb2dVMlYwSUdFZ2NISnZjR1Z5ZEhrZ2IyNGdZVzRnYjJKcVpXTjBMaUJCWkdSeklIUm9aU0J1WlhjZ2NISnZjR1Z5ZEhrZ1lXNWtYRzRnS2lCMGNtbG5aMlZ5Y3lCamFHRnVaMlVnYm05MGFXWnBZMkYwYVc5dUlHbG1JSFJvWlNCd2NtOXdaWEowZVNCa2IyVnpiaWQwWEc0Z0tpQmhiSEpsWVdSNUlHVjRhWE4wTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJ6WlhRZ0tIUmhjbWRsZEN3Z2EyVjVMQ0IyWVd3cElIdGNiaUFnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvZEdGeVoyVjBLU0FtSmlCcGMxWmhiR2xrUVhKeVlYbEpibVJsZUNoclpYa3BLU0I3WEc0Z0lDQWdkR0Z5WjJWMExteGxibWQwYUNBOUlFMWhkR2d1YldGNEtIUmhjbWRsZEM1c1pXNW5kR2dzSUd0bGVTazdYRzRnSUNBZ2RHRnlaMlYwTG5Od2JHbGpaU2hyWlhrc0lERXNJSFpoYkNrN1hHNGdJQ0FnY21WMGRYSnVJSFpoYkZ4dUlDQjlYRzRnSUdsbUlDaHJaWGtnYVc0Z2RHRnlaMlYwSUNZbUlDRW9hMlY1SUdsdUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVcEtTQjdYRzRnSUNBZ2RHRnlaMlYwVzJ0bGVWMGdQU0IyWVd3N1hHNGdJQ0FnY21WMGRYSnVJSFpoYkZ4dUlDQjlYRzRnSUhaaGNpQnZZaUE5SUNoMFlYSm5aWFFwTGw5ZmIySmZYenRjYmlBZ2FXWWdLSFJoY21kbGRDNWZhWE5XZFdVZ2ZId2dLRzlpSUNZbUlHOWlMblp0UTI5MWJuUXBLU0I3WEc0Z0lDQWdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUFtSmlCM1lYSnVLRnh1SUNBZ0lDQWdKMEYyYjJsa0lHRmtaR2x1WnlCeVpXRmpkR2wyWlNCd2NtOXdaWEowYVdWeklIUnZJR0VnVm5WbElHbHVjM1JoYm1ObElHOXlJR2wwY3lCeWIyOTBJQ1JrWVhSaElDY2dLMXh1SUNBZ0lDQWdKMkYwSUhKMWJuUnBiV1VnTFNCa1pXTnNZWEpsSUdsMElIVndabkp2Ym5RZ2FXNGdkR2hsSUdSaGRHRWdiM0IwYVc5dUxpZGNiaUFnSUNBcE8xeHVJQ0FnSUhKbGRIVnliaUIyWVd4Y2JpQWdmVnh1SUNCcFppQW9JVzlpS1NCN1hHNGdJQ0FnZEdGeVoyVjBXMnRsZVYwZ1BTQjJZV3c3WEc0Z0lDQWdjbVYwZFhKdUlIWmhiRnh1SUNCOVhHNGdJR1JsWm1sdVpWSmxZV04wYVhabEtHOWlMblpoYkhWbExDQnJaWGtzSUhaaGJDazdYRzRnSUc5aUxtUmxjQzV1YjNScFpua29LVHRjYmlBZ2NtVjBkWEp1SUhaaGJGeHVmVnh1WEc0dktpcGNiaUFxSUVSbGJHVjBaU0JoSUhCeWIzQmxjblI1SUdGdVpDQjBjbWxuWjJWeUlHTm9ZVzVuWlNCcFppQnVaV05sYzNOaGNua3VYRzRnS2k5Y2JtWjFibU4wYVc5dUlHUmxiQ0FvZEdGeVoyVjBMQ0JyWlhrcElIdGNiaUFnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvZEdGeVoyVjBLU0FtSmlCcGMxWmhiR2xrUVhKeVlYbEpibVJsZUNoclpYa3BLU0I3WEc0Z0lDQWdkR0Z5WjJWMExuTndiR2xqWlNoclpYa3NJREVwTzF4dUlDQWdJSEpsZEhWeWJseHVJQ0I5WEc0Z0lIWmhjaUJ2WWlBOUlDaDBZWEpuWlhRcExsOWZiMkpmWHp0Y2JpQWdhV1lnS0hSaGNtZGxkQzVmYVhOV2RXVWdmSHdnS0c5aUlDWW1JRzlpTG5adFEyOTFiblFwS1NCN1hHNGdJQ0FnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBbUppQjNZWEp1S0Z4dUlDQWdJQ0FnSjBGMmIybGtJR1JsYkdWMGFXNW5JSEJ5YjNCbGNuUnBaWE1nYjI0Z1lTQldkV1VnYVc1emRHRnVZMlVnYjNJZ2FYUnpJSEp2YjNRZ0pHUmhkR0VnSnlBclhHNGdJQ0FnSUNBbkxTQnFkWE4wSUhObGRDQnBkQ0IwYnlCdWRXeHNMaWRjYmlBZ0lDQXBPMXh1SUNBZ0lISmxkSFZ5Ymx4dUlDQjlYRzRnSUdsbUlDZ2hhR0Z6VDNkdUtIUmhjbWRsZEN3Z2EyVjVLU2tnZTF4dUlDQWdJSEpsZEhWeWJseHVJQ0I5WEc0Z0lHUmxiR1YwWlNCMFlYSm5aWFJiYTJWNVhUdGNiaUFnYVdZZ0tDRnZZaWtnZTF4dUlDQWdJSEpsZEhWeWJseHVJQ0I5WEc0Z0lHOWlMbVJsY0M1dWIzUnBabmtvS1R0Y2JuMWNibHh1THlvcVhHNGdLaUJEYjJ4c1pXTjBJR1JsY0dWdVpHVnVZMmxsY3lCdmJpQmhjbkpoZVNCbGJHVnRaVzUwY3lCM2FHVnVJSFJvWlNCaGNuSmhlU0JwY3lCMGIzVmphR1ZrTENCemFXNWpaVnh1SUNvZ2QyVWdZMkZ1Ym05MElHbHVkR1Z5WTJWd2RDQmhjbkpoZVNCbGJHVnRaVzUwSUdGalkyVnpjeUJzYVd0bElIQnliM0JsY25SNUlHZGxkSFJsY25NdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdSbGNHVnVaRUZ5Y21GNUlDaDJZV3gxWlNrZ2UxeHVJQ0JtYjNJZ0tIWmhjaUJsSUQwZ0tIWnZhV1FnTUNrc0lHa2dQU0F3TENCc0lEMGdkbUZzZFdVdWJHVnVaM1JvT3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ1pTQTlJSFpoYkhWbFcybGRPMXh1SUNBZ0lHVWdKaVlnWlM1ZlgyOWlYMThnSmlZZ1pTNWZYMjlpWDE4dVpHVndMbVJsY0dWdVpDZ3BPMXh1SUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHVXBLU0I3WEc0Z0lDQWdJQ0JrWlhCbGJtUkJjbkpoZVNobEtUdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVMeW9nSUNvdlhHNWNiaThxS2x4dUlDb2dUM0IwYVc5dUlHOTJaWEozY21sMGFXNW5JSE4wY21GMFpXZHBaWE1nWVhKbElHWjFibU4wYVc5dWN5QjBhR0YwSUdoaGJtUnNaVnh1SUNvZ2FHOTNJSFJ2SUcxbGNtZGxJR0VnY0dGeVpXNTBJRzl3ZEdsdmJpQjJZV3gxWlNCaGJtUWdZU0JqYUdsc1pDQnZjSFJwYjI1Y2JpQXFJSFpoYkhWbElHbHVkRzhnZEdobElHWnBibUZzSUhaaGJIVmxMbHh1SUNvdlhHNTJZWElnYzNSeVlYUnpJRDBnWTI5dVptbG5MbTl3ZEdsdmJrMWxjbWRsVTNSeVlYUmxaMmxsY3p0Y2JseHVMeW9xWEc0Z0tpQlBjSFJwYjI1eklIZHBkR2dnY21WemRISnBZM1JwYjI1elhHNGdLaTljYm1sbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lITjBjbUYwY3k1bGJDQTlJSE4wY21GMGN5NXdjbTl3YzBSaGRHRWdQU0JtZFc1amRHbHZiaUFvY0dGeVpXNTBMQ0JqYUdsc1pDd2dkbTBzSUd0bGVTa2dlMXh1SUNBZ0lHbG1JQ2doZG0wcElIdGNiaUFnSUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0FnSUZ3aWIzQjBhVzl1SUZ4Y1hDSmNJaUFySUd0bGVTQXJJRndpWEZ4Y0lpQmpZVzRnYjI1c2VTQmlaU0IxYzJWa0lHUjFjbWx1WnlCcGJuTjBZVzVqWlNCY0lpQXJYRzRnSUNBZ0lDQWdJQ2RqY21WaGRHbHZiaUIzYVhSb0lIUm9aU0JnYm1WM1lDQnJaWGwzYjNKa0xpZGNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJrWldaaGRXeDBVM1J5WVhRb2NHRnlaVzUwTENCamFHbHNaQ2xjYmlBZ2ZUdGNibjFjYmx4dUx5b3FYRzRnS2lCSVpXeHdaWElnZEdoaGRDQnlaV04xY25OcGRtVnNlU0J0WlhKblpYTWdkSGR2SUdSaGRHRWdiMkpxWldOMGN5QjBiMmRsZEdobGNpNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2JXVnlaMlZFWVhSaElDaDBieXdnWm5KdmJTa2dlMXh1SUNCcFppQW9JV1p5YjIwcElIc2djbVYwZFhKdUlIUnZJSDFjYmlBZ2RtRnlJR3RsZVN3Z2RHOVdZV3dzSUdaeWIyMVdZV3c3WEc0Z0lIWmhjaUJyWlhseklEMGdUMkpxWldOMExtdGxlWE1vWm5KdmJTazdYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2EyVjVjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUd0bGVTQTlJR3RsZVhOYmFWMDdYRzRnSUNBZ2RHOVdZV3dnUFNCMGIxdHJaWGxkTzF4dUlDQWdJR1p5YjIxV1lXd2dQU0JtY205dFcydGxlVjA3WEc0Z0lDQWdhV1lnS0NGb1lYTlBkMjRvZEc4c0lHdGxlU2twSUh0Y2JpQWdJQ0FnSUhObGRDaDBieXdnYTJWNUxDQm1jbTl0Vm1Gc0tUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHbHpVR3hoYVc1UFltcGxZM1FvZEc5V1lXd3BJQ1ltSUdselVHeGhhVzVQWW1wbFkzUW9abkp2YlZaaGJDa3BJSHRjYmlBZ0lDQWdJRzFsY21kbFJHRjBZU2gwYjFaaGJDd2dabkp2YlZaaGJDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCMGIxeHVmVnh1WEc0dktpcGNiaUFxSUVSaGRHRmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2JXVnlaMlZFWVhSaFQzSkdiaUFvWEc0Z0lIQmhjbVZ1ZEZaaGJDeGNiaUFnWTJocGJHUldZV3dzWEc0Z0lIWnRYRzRwSUh0Y2JpQWdhV1lnS0NGMmJTa2dlMXh1SUNBZ0lDOHZJR2x1SUdFZ1ZuVmxMbVY0ZEdWdVpDQnRaWEpuWlN3Z1ltOTBhQ0J6YUc5MWJHUWdZbVVnWm5WdVkzUnBiMjV6WEc0Z0lDQWdhV1lnS0NGamFHbHNaRlpoYkNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhCaGNtVnVkRlpoYkZ4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvSVhCaGNtVnVkRlpoYkNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOb2FXeGtWbUZzWEc0Z0lDQWdmVnh1SUNBZ0lDOHZJSGRvWlc0Z2NHRnlaVzUwVm1Gc0lDWWdZMmhwYkdSV1lXd2dZWEpsSUdKdmRHZ2djSEpsYzJWdWRDeGNiaUFnSUNBdkx5QjNaU0J1WldWa0lIUnZJSEpsZEhWeWJpQmhJR1oxYm1OMGFXOXVJSFJvWVhRZ2NtVjBkWEp1Y3lCMGFHVmNiaUFnSUNBdkx5QnRaWEpuWldRZ2NtVnpkV3gwSUc5bUlHSnZkR2dnWm5WdVkzUnBiMjV6TGk0dUlHNXZJRzVsWldRZ2RHOWNiaUFnSUNBdkx5QmphR1ZqYXlCcFppQndZWEpsYm5SV1lXd2dhWE1nWVNCbWRXNWpkR2x2YmlCb1pYSmxJR0psWTJGMWMyVmNiaUFnSUNBdkx5QnBkQ0JvWVhNZ2RHOGdZbVVnWVNCbWRXNWpkR2x2YmlCMGJ5QndZWE56SUhCeVpYWnBiM1Z6SUcxbGNtZGxjeTVjYmlBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0Z2JXVnlaMlZrUkdGMFlVWnVJQ2dwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ0WlhKblpVUmhkR0VvWEc0Z0lDQWdJQ0FnSUhSNWNHVnZaaUJqYUdsc1pGWmhiQ0E5UFQwZ0oyWjFibU4wYVc5dUp5QS9JR05vYVd4a1ZtRnNMbU5oYkd3b2RHaHBjeXdnZEdocGN5a2dPaUJqYUdsc1pGWmhiQ3hjYmlBZ0lDQWdJQ0FnZEhsd1pXOW1JSEJoY21WdWRGWmhiQ0E5UFQwZ0oyWjFibU4wYVc5dUp5QS9JSEJoY21WdWRGWmhiQzVqWVd4c0tIUm9hWE1zSUhSb2FYTXBJRG9nY0dGeVpXNTBWbUZzWEc0Z0lDQWdJQ0FwWEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQnRaWEpuWldSSmJuTjBZVzVqWlVSaGRHRkdiaUFvS1NCN1hHNGdJQ0FnSUNBdkx5QnBibk4wWVc1alpTQnRaWEpuWlZ4dUlDQWdJQ0FnZG1GeUlHbHVjM1JoYm1ObFJHRjBZU0E5SUhSNWNHVnZaaUJqYUdsc1pGWmhiQ0E5UFQwZ0oyWjFibU4wYVc5dUoxeHVJQ0FnSUNBZ0lDQS9JR05vYVd4a1ZtRnNMbU5oYkd3b2RtMHNJSFp0S1Z4dUlDQWdJQ0FnSUNBNklHTm9hV3hrVm1Gc08xeHVJQ0FnSUNBZ2RtRnlJR1JsWm1GMWJIUkVZWFJoSUQwZ2RIbHdaVzltSUhCaGNtVnVkRlpoYkNBOVBUMGdKMloxYm1OMGFXOXVKMXh1SUNBZ0lDQWdJQ0EvSUhCaGNtVnVkRlpoYkM1allXeHNLSFp0TENCMmJTbGNiaUFnSUNBZ0lDQWdPaUJ3WVhKbGJuUldZV3c3WEc0Z0lDQWdJQ0JwWmlBb2FXNXpkR0Z1WTJWRVlYUmhLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ0WlhKblpVUmhkR0VvYVc1emRHRnVZMlZFWVhSaExDQmtaV1poZFd4MFJHRjBZU2xjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmtaV1poZFd4MFJHRjBZVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzV6ZEhKaGRITXVaR0YwWVNBOUlHWjFibU4wYVc5dUlDaGNiaUFnY0dGeVpXNTBWbUZzTEZ4dUlDQmphR2xzWkZaaGJDeGNiaUFnZG0xY2Jpa2dlMXh1SUNCcFppQW9JWFp0S1NCN1hHNGdJQ0FnYVdZZ0tHTm9hV3hrVm1Gc0lDWW1JSFI1Y0dWdlppQmphR2xzWkZaaGJDQWhQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QW1KaUIzWVhKdUtGeHVJQ0FnSUNBZ0lDQW5WR2hsSUZ3aVpHRjBZVndpSUc5d2RHbHZiaUJ6YUc5MWJHUWdZbVVnWVNCbWRXNWpkR2x2YmlBbklDdGNiaUFnSUNBZ0lDQWdKM1JvWVhRZ2NtVjBkWEp1Y3lCaElIQmxjaTFwYm5OMFlXNWpaU0IyWVd4MVpTQnBiaUJqYjIxd2IyNWxiblFnSnlBclhHNGdJQ0FnSUNBZ0lDZGtaV1pwYm1sMGFXOXVjeTRuTEZ4dUlDQWdJQ0FnSUNCMmJWeHVJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdjbVYwZFhKdUlIQmhjbVZ1ZEZaaGJGeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdiV1Z5WjJWRVlYUmhUM0pHYmlod1lYSmxiblJXWVd3c0lHTm9hV3hrVm1Gc0tWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHMWxjbWRsUkdGMFlVOXlSbTRvY0dGeVpXNTBWbUZzTENCamFHbHNaRlpoYkN3Z2RtMHBYRzU5TzF4dVhHNHZLaXBjYmlBcUlFaHZiMnR6SUdGdVpDQndjbTl3Y3lCaGNtVWdiV1Z5WjJWa0lHRnpJR0Z5Y21GNWN5NWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2JXVnlaMlZJYjI5cklDaGNiaUFnY0dGeVpXNTBWbUZzTEZ4dUlDQmphR2xzWkZaaGJGeHVLU0I3WEc0Z0lISmxkSFZ5YmlCamFHbHNaRlpoYkZ4dUlDQWdJRDhnY0dGeVpXNTBWbUZzWEc0Z0lDQWdJQ0EvSUhCaGNtVnVkRlpoYkM1amIyNWpZWFFvWTJocGJHUldZV3dwWEc0Z0lDQWdJQ0E2SUVGeWNtRjVMbWx6UVhKeVlYa29ZMmhwYkdSV1lXd3BYRzRnSUNBZ0lDQWdJRDhnWTJocGJHUldZV3hjYmlBZ0lDQWdJQ0FnT2lCYlkyaHBiR1JXWVd4ZFhHNGdJQ0FnT2lCd1lYSmxiblJXWVd4Y2JuMWNibHh1VEVsR1JVTlpRMHhGWDBoUFQwdFRMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLR2h2YjJzcElIdGNiaUFnYzNSeVlYUnpXMmh2YjJ0ZElEMGdiV1Z5WjJWSWIyOXJPMXh1ZlNrN1hHNWNiaThxS2x4dUlDb2dRWE56WlhSelhHNGdLbHh1SUNvZ1YyaGxiaUJoSUhadElHbHpJSEJ5WlhObGJuUWdLR2x1YzNSaGJtTmxJR055WldGMGFXOXVLU3dnZDJVZ2JtVmxaQ0IwYnlCa2IxeHVJQ29nWVNCMGFISmxaUzEzWVhrZ2JXVnlaMlVnWW1WMGQyVmxiaUJqYjI1emRISjFZM1J2Y2lCdmNIUnBiMjV6TENCcGJuTjBZVzVqWlZ4dUlDb2diM0IwYVc5dWN5QmhibVFnY0dGeVpXNTBJRzl3ZEdsdmJuTXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHMWxjbWRsUVhOelpYUnpJQ2hjYmlBZ2NHRnlaVzUwVm1Gc0xGeHVJQ0JqYUdsc1pGWmhiQ3hjYmlBZ2RtMHNYRzRnSUd0bGVWeHVLU0I3WEc0Z0lIWmhjaUJ5WlhNZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0hCaGNtVnVkRlpoYkNCOGZDQnVkV3hzS1R0Y2JpQWdhV1lnS0dOb2FXeGtWbUZzS1NCN1hHNGdJQ0FnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBbUppQmhjM05sY25SUFltcGxZM1JVZVhCbEtHdGxlU3dnWTJocGJHUldZV3dzSUhadEtUdGNiaUFnSUNCeVpYUjFjbTRnWlhoMFpXNWtLSEpsY3l3Z1kyaHBiR1JXWVd3cFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVjBkWEp1SUhKbGMxeHVJQ0I5WEc1OVhHNWNia0ZUVTBWVVgxUlpVRVZUTG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0hSNWNHVXBJSHRjYmlBZ2MzUnlZWFJ6VzNSNWNHVWdLeUFuY3lkZElEMGdiV1Z5WjJWQmMzTmxkSE03WEc1OUtUdGNibHh1THlvcVhHNGdLaUJYWVhSamFHVnljeTVjYmlBcVhHNGdLaUJYWVhSamFHVnljeUJvWVhOb1pYTWdjMmh2ZFd4a0lHNXZkQ0J2ZG1WeWQzSnBkR1VnYjI1bFhHNGdLaUJoYm05MGFHVnlMQ0J6YnlCM1pTQnRaWEpuWlNCMGFHVnRJR0Z6SUdGeWNtRjVjeTVjYmlBcUwxeHVjM1J5WVhSekxuZGhkR05vSUQwZ1puVnVZM1JwYjI0Z0tGeHVJQ0J3WVhKbGJuUldZV3dzWEc0Z0lHTm9hV3hrVm1Gc0xGeHVJQ0IyYlN4Y2JpQWdhMlY1WEc0cElIdGNiaUFnTHk4Z2QyOXlheUJoY205MWJtUWdSbWx5WldadmVDZHpJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVkMkYwWTJndUxpNWNiaUFnYVdZZ0tIQmhjbVZ1ZEZaaGJDQTlQVDBnYm1GMGFYWmxWMkYwWTJncElIc2djR0Z5Wlc1MFZtRnNJRDBnZFc1a1pXWnBibVZrT3lCOVhHNGdJR2xtSUNoamFHbHNaRlpoYkNBOVBUMGdibUYwYVhabFYyRjBZMmdwSUhzZ1kyaHBiR1JXWVd3Z1BTQjFibVJsWm1sdVpXUTdJSDFjYmlBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHbG1JQ292WEc0Z0lHbG1JQ2doWTJocGJHUldZV3dwSUhzZ2NtVjBkWEp1SUU5aWFtVmpkQzVqY21WaGRHVW9jR0Z5Wlc1MFZtRnNJSHg4SUc1MWJHd3BJSDFjYmlBZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNwSUh0Y2JpQWdJQ0JoYzNObGNuUlBZbXBsWTNSVWVYQmxLR3RsZVN3Z1kyaHBiR1JXWVd3c0lIWnRLVHRjYmlBZ2ZWeHVJQ0JwWmlBb0lYQmhjbVZ1ZEZaaGJDa2dleUJ5WlhSMWNtNGdZMmhwYkdSV1lXd2dmVnh1SUNCMllYSWdjbVYwSUQwZ2UzMDdYRzRnSUdWNGRHVnVaQ2h5WlhRc0lIQmhjbVZ1ZEZaaGJDazdYRzRnSUdadmNpQW9kbUZ5SUd0bGVTUXhJR2x1SUdOb2FXeGtWbUZzS1NCN1hHNGdJQ0FnZG1GeUlIQmhjbVZ1ZENBOUlISmxkRnRyWlhra01WMDdYRzRnSUNBZ2RtRnlJR05vYVd4a0lEMGdZMmhwYkdSV1lXeGJhMlY1SkRGZE8xeHVJQ0FnSUdsbUlDaHdZWEpsYm5RZ0ppWWdJVUZ5Y21GNUxtbHpRWEp5WVhrb2NHRnlaVzUwS1NrZ2UxeHVJQ0FnSUNBZ2NHRnlaVzUwSUQwZ1czQmhjbVZ1ZEYwN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEZ0clpYa2tNVjBnUFNCd1lYSmxiblJjYmlBZ0lDQWdJRDhnY0dGeVpXNTBMbU52Ym1OaGRDaGphR2xzWkNsY2JpQWdJQ0FnSURvZ1FYSnlZWGt1YVhOQmNuSmhlU2hqYUdsc1pDa2dQeUJqYUdsc1pDQTZJRnRqYUdsc1pGMDdYRzRnSUgxY2JpQWdjbVYwZFhKdUlISmxkRnh1ZlR0Y2JseHVMeW9xWEc0Z0tpQlBkR2hsY2lCdlltcGxZM1FnYUdGemFHVnpMbHh1SUNvdlhHNXpkSEpoZEhNdWNISnZjSE1nUFZ4dWMzUnlZWFJ6TG0xbGRHaHZaSE1nUFZ4dWMzUnlZWFJ6TG1sdWFtVmpkQ0E5WEc1emRISmhkSE11WTI5dGNIVjBaV1FnUFNCbWRXNWpkR2x2YmlBb1hHNGdJSEJoY21WdWRGWmhiQ3hjYmlBZ1kyaHBiR1JXWVd3c1hHNGdJSFp0TEZ4dUlDQnJaWGxjYmlrZ2UxeHVJQ0JwWmlBb1kyaHBiR1JXWVd3Z0ppWWdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJR0Z6YzJWeWRFOWlhbVZqZEZSNWNHVW9hMlY1TENCamFHbHNaRlpoYkN3Z2RtMHBPMXh1SUNCOVhHNGdJR2xtSUNnaGNHRnlaVzUwVm1Gc0tTQjdJSEpsZEhWeWJpQmphR2xzWkZaaGJDQjlYRzRnSUhaaGNpQnlaWFFnUFNCUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cE8xeHVJQ0JsZUhSbGJtUW9jbVYwTENCd1lYSmxiblJXWVd3cE8xeHVJQ0JwWmlBb1kyaHBiR1JXWVd3cElIc2daWGgwWlc1a0tISmxkQ3dnWTJocGJHUldZV3dwT3lCOVhHNGdJSEpsZEhWeWJpQnlaWFJjYm4wN1hHNXpkSEpoZEhNdWNISnZkbWxrWlNBOUlHMWxjbWRsUkdGMFlVOXlSbTQ3WEc1Y2JpOHFLbHh1SUNvZ1JHVm1ZWFZzZENCemRISmhkR1ZuZVM1Y2JpQXFMMXh1ZG1GeUlHUmxabUYxYkhSVGRISmhkQ0E5SUdaMWJtTjBhVzl1SUNod1lYSmxiblJXWVd3c0lHTm9hV3hrVm1Gc0tTQjdYRzRnSUhKbGRIVnliaUJqYUdsc1pGWmhiQ0E5UFQwZ2RXNWtaV1pwYm1Wa1hHNGdJQ0FnUHlCd1lYSmxiblJXWVd4Y2JpQWdJQ0E2SUdOb2FXeGtWbUZzWEc1OU8xeHVYRzR2S2lwY2JpQXFJRlpoYkdsa1lYUmxJR052YlhCdmJtVnVkQ0J1WVcxbGMxeHVJQ292WEc1bWRXNWpkR2x2YmlCamFHVmphME52YlhCdmJtVnVkSE1nS0c5d2RHbHZibk1wSUh0Y2JpQWdabTl5SUNoMllYSWdhMlY1SUdsdUlHOXdkR2x2Ym5NdVkyOXRjRzl1Wlc1MGN5a2dlMXh1SUNBZ0lIWmhiR2xrWVhSbFEyOXRjRzl1Wlc1MFRtRnRaU2hyWlhrcE8xeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJSFpoYkdsa1lYUmxRMjl0Y0c5dVpXNTBUbUZ0WlNBb2JtRnRaU2tnZTF4dUlDQnBaaUFvSVM5ZVcyRXRla0V0V2wxYlhGeDNMVjBxSkM4dWRHVnpkQ2h1WVcxbEtTa2dlMXh1SUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0FuU1c1MllXeHBaQ0JqYjIxd2IyNWxiblFnYm1GdFpUb2dYQ0luSUNzZ2JtRnRaU0FySUNkY0lpNGdRMjl0Y0c5dVpXNTBJRzVoYldWeklDY2dLMXh1SUNBZ0lDQWdKMk5oYmlCdmJteDVJR052Ym5SaGFXNGdZV3h3YUdGdWRXMWxjbWxqSUdOb1lYSmhZM1JsY25NZ1lXNWtJSFJvWlNCb2VYQm9aVzRzSUNjZ0sxeHVJQ0FnSUNBZ0oyRnVaQ0J0ZFhOMElITjBZWEowSUhkcGRHZ2dZU0JzWlhSMFpYSXVKMXh1SUNBZ0lDazdYRzRnSUgxY2JpQWdhV1lnS0dselFuVnBiSFJKYmxSaFp5aHVZVzFsS1NCOGZDQmpiMjVtYVdjdWFYTlNaWE5sY25abFpGUmhaeWh1WVcxbEtTa2dlMXh1SUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0FuUkc4Z2JtOTBJSFZ6WlNCaWRXbHNkQzFwYmlCdmNpQnlaWE5sY25abFpDQklWRTFNSUdWc1pXMWxiblJ6SUdGeklHTnZiWEJ2Ym1WdWRDQW5JQ3RjYmlBZ0lDQWdJQ2RwWkRvZ0p5QXJJRzVoYldWY2JpQWdJQ0FwTzF4dUlDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1JXNXpkWEpsSUdGc2JDQndjbTl3Y3lCdmNIUnBiMjRnYzNsdWRHRjRJR0Z5WlNCdWIzSnRZV3hwZW1Wa0lHbHVkRzhnZEdobFhHNGdLaUJQWW1wbFkzUXRZbUZ6WldRZ1ptOXliV0YwTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJ1YjNKdFlXeHBlbVZRY205d2N5QW9iM0IwYVc5dWN5d2dkbTBwSUh0Y2JpQWdkbUZ5SUhCeWIzQnpJRDBnYjNCMGFXOXVjeTV3Y205d2N6dGNiaUFnYVdZZ0tDRndjbTl3Y3lrZ2V5QnlaWFIxY200Z2ZWeHVJQ0IyWVhJZ2NtVnpJRDBnZTMwN1hHNGdJSFpoY2lCcExDQjJZV3dzSUc1aGJXVTdYRzRnSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0hCeWIzQnpLU2tnZTF4dUlDQWdJR2tnUFNCd2NtOXdjeTVzWlc1bmRHZzdYRzRnSUNBZ2QyaHBiR1VnS0drdExTa2dlMXh1SUNBZ0lDQWdkbUZzSUQwZ2NISnZjSE5iYVYwN1hHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIWmhiQ0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lDQWdibUZ0WlNBOUlHTmhiV1ZzYVhwbEtIWmhiQ2s3WEc0Z0lDQWdJQ0FnSUhKbGMxdHVZVzFsWFNBOUlIc2dkSGx3WlRvZ2JuVnNiQ0I5TzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJSGRoY200b0ozQnliM0J6SUcxMWMzUWdZbVVnYzNSeWFXNW5jeUIzYUdWdUlIVnphVzVuSUdGeWNtRjVJSE41Ym5SaGVDNG5LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0JwWmlBb2FYTlFiR0ZwYms5aWFtVmpkQ2h3Y205d2N5a3BJSHRjYmlBZ0lDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z2NISnZjSE1wSUh0Y2JpQWdJQ0FnSUhaaGJDQTlJSEJ5YjNCelcydGxlVjA3WEc0Z0lDQWdJQ0J1WVcxbElEMGdZMkZ0Wld4cGVtVW9hMlY1S1R0Y2JpQWdJQ0FnSUhKbGMxdHVZVzFsWFNBOUlHbHpVR3hoYVc1UFltcGxZM1FvZG1Gc0tWeHVJQ0FnSUNBZ0lDQS9JSFpoYkZ4dUlDQWdJQ0FnSUNBNklIc2dkSGx3WlRvZ2RtRnNJSDA3WEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3BJSHRjYmlBZ0lDQjNZWEp1S0Z4dUlDQWdJQ0FnWENKSmJuWmhiR2xrSUhaaGJIVmxJR1p2Y2lCdmNIUnBiMjRnWEZ4Y0luQnliM0J6WEZ4Y0lqb2daWGh3WldOMFpXUWdZVzRnUVhKeVlYa2diM0lnWVc0Z1QySnFaV04wTENCY0lpQXJYRzRnSUNBZ0lDQmNJbUoxZENCbmIzUWdYQ0lnS3lBb2RHOVNZWGRVZVhCbEtIQnliM0J6S1NrZ0t5QmNJaTVjSWl4Y2JpQWdJQ0FnSUhadFhHNGdJQ0FnS1R0Y2JpQWdmVnh1SUNCdmNIUnBiMjV6TG5CeWIzQnpJRDBnY21Wek8xeHVmVnh1WEc0dktpcGNiaUFxSUU1dmNtMWhiR2w2WlNCaGJHd2dhVzVxWldOMGFXOXVjeUJwYm5SdklFOWlhbVZqZEMxaVlYTmxaQ0JtYjNKdFlYUmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2JtOXliV0ZzYVhwbFNXNXFaV04wSUNodmNIUnBiMjV6TENCMmJTa2dlMXh1SUNCMllYSWdhVzVxWldOMElEMGdiM0IwYVc5dWN5NXBibXBsWTNRN1hHNGdJR2xtSUNnaGFXNXFaV04wS1NCN0lISmxkSFZ5YmlCOVhHNGdJSFpoY2lCdWIzSnRZV3hwZW1Wa0lEMGdiM0IwYVc5dWN5NXBibXBsWTNRZ1BTQjdmVHRjYmlBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb2FXNXFaV04wS1NrZ2UxeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2FXNXFaV04wTG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQnViM0p0WVd4cGVtVmtXMmx1YW1WamRGdHBYVjBnUFNCN0lHWnliMjA2SUdsdWFtVmpkRnRwWFNCOU8xeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElHbG1JQ2hwYzFCc1lXbHVUMkpxWldOMEtHbHVhbVZqZENrcElIdGNiaUFnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnYVc1cVpXTjBLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2RtRnNJRDBnYVc1cVpXTjBXMnRsZVYwN1hHNGdJQ0FnSUNCdWIzSnRZV3hwZW1Wa1cydGxlVjBnUFNCcGMxQnNZV2x1VDJKcVpXTjBLSFpoYkNsY2JpQWdJQ0FnSUNBZ1B5QmxlSFJsYm1Rb2V5Qm1jbTl0T2lCclpYa2dmU3dnZG1Gc0tWeHVJQ0FnSUNBZ0lDQTZJSHNnWm5KdmJUb2dkbUZzSUgwN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNwSUh0Y2JpQWdJQ0IzWVhKdUtGeHVJQ0FnSUNBZ1hDSkpiblpoYkdsa0lIWmhiSFZsSUdadmNpQnZjSFJwYjI0Z1hGeGNJbWx1YW1WamRGeGNYQ0k2SUdWNGNHVmpkR1ZrSUdGdUlFRnljbUY1SUc5eUlHRnVJRTlpYW1WamRDd2dYQ0lnSzF4dUlDQWdJQ0FnWENKaWRYUWdaMjkwSUZ3aUlDc2dLSFJ2VW1GM1ZIbHdaU2hwYm1wbFkzUXBLU0FySUZ3aUxsd2lMRnh1SUNBZ0lDQWdkbTFjYmlBZ0lDQXBPMXh1SUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nVG05eWJXRnNhWHBsSUhKaGR5Qm1kVzVqZEdsdmJpQmthWEpsWTNScGRtVnpJR2x1ZEc4Z2IySnFaV04wSUdadmNtMWhkQzVjYmlBcUwxeHVablZ1WTNScGIyNGdibTl5YldGc2FYcGxSR2x5WldOMGFYWmxjeUFvYjNCMGFXOXVjeWtnZTF4dUlDQjJZWElnWkdseWN5QTlJRzl3ZEdsdmJuTXVaR2x5WldOMGFYWmxjenRjYmlBZ2FXWWdLR1JwY25NcElIdGNiaUFnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnWkdseWN5a2dlMXh1SUNBZ0lDQWdkbUZ5SUdSbFppQTlJR1JwY25OYmEyVjVYVHRjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWkdWbUlEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lHUnBjbk5iYTJWNVhTQTlJSHNnWW1sdVpEb2daR1ZtTENCMWNHUmhkR1U2SUdSbFppQjlPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJoYzNObGNuUlBZbXBsWTNSVWVYQmxJQ2h1WVcxbExDQjJZV3gxWlN3Z2RtMHBJSHRjYmlBZ2FXWWdLQ0ZwYzFCc1lXbHVUMkpxWldOMEtIWmhiSFZsS1NrZ2UxeHVJQ0FnSUhkaGNtNG9YRzRnSUNBZ0lDQmNJa2x1ZG1Gc2FXUWdkbUZzZFdVZ1ptOXlJRzl3ZEdsdmJpQmNYRndpWENJZ0t5QnVZVzFsSUNzZ1hDSmNYRndpT2lCbGVIQmxZM1JsWkNCaGJpQlBZbXBsWTNRc0lGd2lJQ3RjYmlBZ0lDQWdJRndpWW5WMElHZHZkQ0JjSWlBcklDaDBiMUpoZDFSNWNHVW9kbUZzZFdVcEtTQXJJRndpTGx3aUxGeHVJQ0FnSUNBZ2RtMWNiaUFnSUNBcE8xeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dUV1Z5WjJVZ2RIZHZJRzl3ZEdsdmJpQnZZbXBsWTNSeklHbHVkRzhnWVNCdVpYY2diMjVsTGx4dUlDb2dRMjl5WlNCMWRHbHNhWFI1SUhWelpXUWdhVzRnWW05MGFDQnBibk4wWVc1MGFXRjBhVzl1SUdGdVpDQnBibWhsY21sMFlXNWpaUzVjYmlBcUwxeHVablZ1WTNScGIyNGdiV1Z5WjJWUGNIUnBiMjV6SUNoY2JpQWdjR0Z5Wlc1MExGeHVJQ0JqYUdsc1pDeGNiaUFnZG0xY2Jpa2dlMXh1SUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJR05vWldOclEyOXRjRzl1Wlc1MGN5aGphR2xzWkNrN1hHNGdJSDFjYmx4dUlDQnBaaUFvZEhsd1pXOW1JR05vYVd4a0lEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnWTJocGJHUWdQU0JqYUdsc1pDNXZjSFJwYjI1ek8xeHVJQ0I5WEc1Y2JpQWdibTl5YldGc2FYcGxVSEp2Y0hNb1kyaHBiR1FzSUhadEtUdGNiaUFnYm05eWJXRnNhWHBsU1c1cVpXTjBLR05vYVd4a0xDQjJiU2s3WEc0Z0lHNXZjbTFoYkdsNlpVUnBjbVZqZEdsMlpYTW9ZMmhwYkdRcE8xeHVJQ0IyWVhJZ1pYaDBaVzVrYzBaeWIyMGdQU0JqYUdsc1pDNWxlSFJsYm1Sek8xeHVJQ0JwWmlBb1pYaDBaVzVrYzBaeWIyMHBJSHRjYmlBZ0lDQndZWEpsYm5RZ1BTQnRaWEpuWlU5d2RHbHZibk1vY0dGeVpXNTBMQ0JsZUhSbGJtUnpSbkp2YlN3Z2RtMHBPMXh1SUNCOVhHNGdJR2xtSUNoamFHbHNaQzV0YVhocGJuTXBJSHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JDQTlJR05vYVd4a0xtMXBlR2x1Y3k1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwS3lzcElIdGNiaUFnSUNBZ0lIQmhjbVZ1ZENBOUlHMWxjbWRsVDNCMGFXOXVjeWh3WVhKbGJuUXNJR05vYVd4a0xtMXBlR2x1YzF0cFhTd2dkbTBwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0IyWVhJZ2IzQjBhVzl1Y3lBOUlIdDlPMXh1SUNCMllYSWdhMlY1TzF4dUlDQm1iM0lnS0d0bGVTQnBiaUJ3WVhKbGJuUXBJSHRjYmlBZ0lDQnRaWEpuWlVacFpXeGtLR3RsZVNrN1hHNGdJSDFjYmlBZ1ptOXlJQ2hyWlhrZ2FXNGdZMmhwYkdRcElIdGNiaUFnSUNCcFppQW9JV2hoYzA5M2JpaHdZWEpsYm5Rc0lHdGxlU2twSUh0Y2JpQWdJQ0FnSUcxbGNtZGxSbWxsYkdRb2EyVjVLVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdablZ1WTNScGIyNGdiV1Z5WjJWR2FXVnNaQ0FvYTJWNUtTQjdYRzRnSUNBZ2RtRnlJSE4wY21GMElEMGdjM1J5WVhSelcydGxlVjBnZkh3Z1pHVm1ZWFZzZEZOMGNtRjBPMXh1SUNBZ0lHOXdkR2x2Ym5OYmEyVjVYU0E5SUhOMGNtRjBLSEJoY21WdWRGdHJaWGxkTENCamFHbHNaRnRyWlhsZExDQjJiU3dnYTJWNUtUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2IzQjBhVzl1YzF4dWZWeHVYRzR2S2lwY2JpQXFJRkpsYzI5c2RtVWdZVzRnWVhOelpYUXVYRzRnS2lCVWFHbHpJR1oxYm1OMGFXOXVJR2x6SUhWelpXUWdZbVZqWVhWelpTQmphR2xzWkNCcGJuTjBZVzVqWlhNZ2JtVmxaQ0JoWTJObGMzTmNiaUFxSUhSdklHRnpjMlYwY3lCa1pXWnBibVZrSUdsdUlHbDBjeUJoYm1ObGMzUnZjaUJqYUdGcGJpNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2NtVnpiMngyWlVGemMyVjBJQ2hjYmlBZ2IzQjBhVzl1Y3l4Y2JpQWdkSGx3WlN4Y2JpQWdhV1FzWEc0Z0lIZGhjbTVOYVhOemFXNW5YRzRwSUh0Y2JpQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJR2xtSUNvdlhHNGdJR2xtSUNoMGVYQmxiMllnYVdRZ0lUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdjbVYwZFhKdVhHNGdJSDFjYmlBZ2RtRnlJR0Z6YzJWMGN5QTlJRzl3ZEdsdmJuTmJkSGx3WlYwN1hHNGdJQzh2SUdOb1pXTnJJR3h2WTJGc0lISmxaMmx6ZEhKaGRHbHZiaUIyWVhKcFlYUnBiMjV6SUdacGNuTjBYRzRnSUdsbUlDaG9ZWE5QZDI0b1lYTnpaWFJ6TENCcFpDa3BJSHNnY21WMGRYSnVJR0Z6YzJWMGMxdHBaRjBnZlZ4dUlDQjJZWElnWTJGdFpXeHBlbVZrU1dRZ1BTQmpZVzFsYkdsNlpTaHBaQ2s3WEc0Z0lHbG1JQ2hvWVhOUGQyNG9ZWE56WlhSekxDQmpZVzFsYkdsNlpXUkpaQ2twSUhzZ2NtVjBkWEp1SUdGemMyVjBjMXRqWVcxbGJHbDZaV1JKWkYwZ2ZWeHVJQ0IyWVhJZ1VHRnpZMkZzUTJGelpVbGtJRDBnWTJGd2FYUmhiR2w2WlNoallXMWxiR2w2WldSSlpDazdYRzRnSUdsbUlDaG9ZWE5QZDI0b1lYTnpaWFJ6TENCUVlYTmpZV3hEWVhObFNXUXBLU0I3SUhKbGRIVnliaUJoYzNObGRITmJVR0Z6WTJGc1EyRnpaVWxrWFNCOVhHNGdJQzh2SUdaaGJHeGlZV05ySUhSdklIQnliM1J2ZEhsd1pTQmphR0ZwYmx4dUlDQjJZWElnY21WeklEMGdZWE56WlhSelcybGtYU0I4ZkNCaGMzTmxkSE5iWTJGdFpXeHBlbVZrU1dSZElIeDhJR0Z6YzJWMGMxdFFZWE5qWVd4RFlYTmxTV1JkTzF4dUlDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBbUppQjNZWEp1VFdsemMybHVaeUFtSmlBaGNtVnpLU0I3WEc0Z0lDQWdkMkZ5YmloY2JpQWdJQ0FnSUNkR1lXbHNaV1FnZEc4Z2NtVnpiMngyWlNBbklDc2dkSGx3WlM1emJHbGpaU2d3TENBdE1Ta2dLeUFuT2lBbklDc2dhV1FzWEc0Z0lDQWdJQ0J2Y0hScGIyNXpYRzRnSUNBZ0tUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVnpYRzU5WEc1Y2JpOHFJQ0FxTDF4dVhHNW1kVzVqZEdsdmJpQjJZV3hwWkdGMFpWQnliM0FnS0Z4dUlDQnJaWGtzWEc0Z0lIQnliM0JQY0hScGIyNXpMRnh1SUNCd2NtOXdjMFJoZEdFc1hHNGdJSFp0WEc0cElIdGNiaUFnZG1GeUlIQnliM0FnUFNCd2NtOXdUM0IwYVc5dWMxdHJaWGxkTzF4dUlDQjJZWElnWVdKelpXNTBJRDBnSVdoaGMwOTNiaWh3Y205d2MwUmhkR0VzSUd0bGVTazdYRzRnSUhaaGNpQjJZV3gxWlNBOUlIQnliM0J6UkdGMFlWdHJaWGxkTzF4dUlDQXZMeUJvWVc1a2JHVWdZbTl2YkdWaGJpQndjbTl3YzF4dUlDQnBaaUFvYVhOVWVYQmxLRUp2YjJ4bFlXNHNJSEJ5YjNBdWRIbHdaU2twSUh0Y2JpQWdJQ0JwWmlBb1lXSnpaVzUwSUNZbUlDRm9ZWE5QZDI0b2NISnZjQ3dnSjJSbFptRjFiSFFuS1NrZ2UxeHVJQ0FnSUNBZ2RtRnNkV1VnUFNCbVlXeHpaVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLQ0ZwYzFSNWNHVW9VM1J5YVc1bkxDQndjbTl3TG5SNWNHVXBJQ1ltSUNoMllXeDFaU0E5UFQwZ0p5Y2dmSHdnZG1Gc2RXVWdQVDA5SUdoNWNHaGxibUYwWlNoclpYa3BLU2tnZTF4dUlDQWdJQ0FnZG1Gc2RXVWdQU0IwY25WbE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNBdkx5QmphR1ZqYXlCa1pXWmhkV3gwSUhaaGJIVmxYRzRnSUdsbUlDaDJZV3gxWlNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdkbUZzZFdVZ1BTQm5aWFJRY205d1JHVm1ZWFZzZEZaaGJIVmxLSFp0TENCd2NtOXdMQ0JyWlhrcE8xeHVJQ0FnSUM4dklITnBibU5sSUhSb1pTQmtaV1poZFd4MElIWmhiSFZsSUdseklHRWdabkpsYzJnZ1kyOXdlU3hjYmlBZ0lDQXZMeUJ0WVd0bElITjFjbVVnZEc4Z2IySnpaWEoyWlNCcGRDNWNiaUFnSUNCMllYSWdjSEpsZGxOb2IzVnNaRU52Ym5abGNuUWdQU0J2WW5ObGNuWmxjbE4wWVhSbExuTm9iM1ZzWkVOdmJuWmxjblE3WEc0Z0lDQWdiMkp6WlhKMlpYSlRkR0YwWlM1emFHOTFiR1JEYjI1MlpYSjBJRDBnZEhKMVpUdGNiaUFnSUNCdlluTmxjblpsS0haaGJIVmxLVHRjYmlBZ0lDQnZZbk5sY25abGNsTjBZWFJsTG5Ob2IzVnNaRU52Ym5abGNuUWdQU0J3Y21WMlUyaHZkV3hrUTI5dWRtVnlkRHRjYmlBZ2ZWeHVJQ0JwWmlBb1hHNGdJQ0FnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBbUpseHVJQ0FnSUM4dklITnJhWEFnZG1Gc2FXUmhkR2x2YmlCbWIzSWdkMlZsZUNCeVpXTjVZMnhsTFd4cGMzUWdZMmhwYkdRZ1kyOXRjRzl1Wlc1MElIQnliM0J6WEc0Z0lDQWdJU2htWVd4elpTQW1KaUJwYzA5aWFtVmpkQ2gyWVd4MVpTa2dKaVlnS0NkQVltbHVaR2x1WnljZ2FXNGdkbUZzZFdVcEtWeHVJQ0FwSUh0Y2JpQWdJQ0JoYzNObGNuUlFjbTl3S0hCeWIzQXNJR3RsZVN3Z2RtRnNkV1VzSUhadExDQmhZbk5sYm5RcE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCMllXeDFaVnh1ZlZ4dVhHNHZLaXBjYmlBcUlFZGxkQ0IwYUdVZ1pHVm1ZWFZzZENCMllXeDFaU0J2WmlCaElIQnliM0F1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR2RsZEZCeWIzQkVaV1poZFd4MFZtRnNkV1VnS0hadExDQndjbTl3TENCclpYa3BJSHRjYmlBZ0x5OGdibThnWkdWbVlYVnNkQ3dnY21WMGRYSnVJSFZ1WkdWbWFXNWxaRnh1SUNCcFppQW9JV2hoYzA5M2JpaHdjbTl3TENBblpHVm1ZWFZzZENjcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhWdVpHVm1hVzVsWkZ4dUlDQjlYRzRnSUhaaGNpQmtaV1lnUFNCd2NtOXdMbVJsWm1GMWJIUTdYRzRnSUM4dklIZGhjbTRnWVdkaGFXNXpkQ0J1YjI0dFptRmpkRzl5ZVNCa1pXWmhkV3gwY3lCbWIzSWdUMkpxWldOMElDWWdRWEp5WVhsY2JpQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ0ppWWdhWE5QWW1wbFkzUW9aR1ZtS1NrZ2UxeHVJQ0FnSUhkaGNtNG9YRzRnSUNBZ0lDQW5TVzUyWVd4cFpDQmtaV1poZFd4MElIWmhiSFZsSUdadmNpQndjbTl3SUZ3aUp5QXJJR3RsZVNBcklDZGNJam9nSnlBclhHNGdJQ0FnSUNBblVISnZjSE1nZDJsMGFDQjBlWEJsSUU5aWFtVmpkQzlCY25KaGVTQnRkWE4wSUhWelpTQmhJR1poWTNSdmNua2dablZ1WTNScGIyNGdKeUFyWEc0Z0lDQWdJQ0FuZEc4Z2NtVjBkWEp1SUhSb1pTQmtaV1poZFd4MElIWmhiSFZsTGljc1hHNGdJQ0FnSUNCMmJWeHVJQ0FnSUNrN1hHNGdJSDFjYmlBZ0x5OGdkR2hsSUhKaGR5QndjbTl3SUhaaGJIVmxJSGRoY3lCaGJITnZJSFZ1WkdWbWFXNWxaQ0JtY205dElIQnlaWFpwYjNWeklISmxibVJsY2l4Y2JpQWdMeThnY21WMGRYSnVJSEJ5WlhacGIzVnpJR1JsWm1GMWJIUWdkbUZzZFdVZ2RHOGdZWFp2YVdRZ2RXNXVaV05sYzNOaGNua2dkMkYwWTJobGNpQjBjbWxuWjJWeVhHNGdJR2xtSUNoMmJTQW1KaUIyYlM0a2IzQjBhVzl1Y3k1d2NtOXdjMFJoZEdFZ0ppWmNiaUFnSUNCMmJTNGtiM0IwYVc5dWN5NXdjbTl3YzBSaGRHRmJhMlY1WFNBOVBUMGdkVzVrWldacGJtVmtJQ1ltWEc0Z0lDQWdkbTB1WDNCeWIzQnpXMnRsZVYwZ0lUMDlJSFZ1WkdWbWFXNWxaRnh1SUNBcElIdGNiaUFnSUNCeVpYUjFjbTRnZG0wdVgzQnliM0J6VzJ0bGVWMWNiaUFnZlZ4dUlDQXZMeUJqWVd4c0lHWmhZM1J2Y25rZ1puVnVZM1JwYjI0Z1ptOXlJRzV2YmkxR2RXNWpkR2x2YmlCMGVYQmxjMXh1SUNBdkx5QmhJSFpoYkhWbElHbHpJRVoxYm1OMGFXOXVJR2xtSUdsMGN5QndjbTkwYjNSNWNHVWdhWE1nWm5WdVkzUnBiMjRnWlhabGJpQmhZM0p2YzNNZ1pHbG1abVZ5Wlc1MElHVjRaV04xZEdsdmJpQmpiMjUwWlhoMFhHNGdJSEpsZEhWeWJpQjBlWEJsYjJZZ1pHVm1JRDA5UFNBblpuVnVZM1JwYjI0bklDWW1JR2RsZEZSNWNHVW9jSEp2Y0M1MGVYQmxLU0FoUFQwZ0owWjFibU4wYVc5dUoxeHVJQ0FnSUQ4Z1pHVm1MbU5oYkd3b2RtMHBYRzRnSUNBZ09pQmtaV1pjYm4xY2JseHVMeW9xWEc0Z0tpQkJjM05sY25RZ2QyaGxkR2hsY2lCaElIQnliM0FnYVhNZ2RtRnNhV1F1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR0Z6YzJWeWRGQnliM0FnS0Z4dUlDQndjbTl3TEZ4dUlDQnVZVzFsTEZ4dUlDQjJZV3gxWlN4Y2JpQWdkbTBzWEc0Z0lHRmljMlZ1ZEZ4dUtTQjdYRzRnSUdsbUlDaHdjbTl3TG5KbGNYVnBjbVZrSUNZbUlHRmljMlZ1ZENrZ2UxeHVJQ0FnSUhkaGNtNG9YRzRnSUNBZ0lDQW5UV2x6YzJsdVp5QnlaWEYxYVhKbFpDQndjbTl3T2lCY0lpY2dLeUJ1WVcxbElDc2dKMXdpSnl4Y2JpQWdJQ0FnSUhadFhHNGdJQ0FnS1R0Y2JpQWdJQ0J5WlhSMWNtNWNiaUFnZlZ4dUlDQnBaaUFvZG1Gc2RXVWdQVDBnYm5Wc2JDQW1KaUFoY0hKdmNDNXlaWEYxYVhKbFpDa2dlMXh1SUNBZ0lISmxkSFZ5Ymx4dUlDQjlYRzRnSUhaaGNpQjBlWEJsSUQwZ2NISnZjQzUwZVhCbE8xeHVJQ0IyWVhJZ2RtRnNhV1FnUFNBaGRIbHdaU0I4ZkNCMGVYQmxJRDA5UFNCMGNuVmxPMXh1SUNCMllYSWdaWGh3WldOMFpXUlVlWEJsY3lBOUlGdGRPMXh1SUNCcFppQW9kSGx3WlNrZ2UxeHVJQ0FnSUdsbUlDZ2hRWEp5WVhrdWFYTkJjbkpoZVNoMGVYQmxLU2tnZTF4dUlDQWdJQ0FnZEhsd1pTQTlJRnQwZVhCbFhUdGNiaUFnSUNCOVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCMGVYQmxMbXhsYm1kMGFDQW1KaUFoZG1Gc2FXUTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2RtRnlJR0Z6YzJWeWRHVmtWSGx3WlNBOUlHRnpjMlZ5ZEZSNWNHVW9kbUZzZFdVc0lIUjVjR1ZiYVYwcE8xeHVJQ0FnSUNBZ1pYaHdaV04wWldSVWVYQmxjeTV3ZFhOb0tHRnpjMlZ5ZEdWa1ZIbHdaUzVsZUhCbFkzUmxaRlI1Y0dVZ2ZId2dKeWNwTzF4dUlDQWdJQ0FnZG1Gc2FXUWdQU0JoYzNObGNuUmxaRlI1Y0dVdWRtRnNhV1E3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJR2xtSUNnaGRtRnNhV1FwSUh0Y2JpQWdJQ0IzWVhKdUtGeHVJQ0FnSUNBZ1hDSkpiblpoYkdsa0lIQnliM0E2SUhSNWNHVWdZMmhsWTJzZ1ptRnBiR1ZrSUdadmNpQndjbTl3SUZ4Y1hDSmNJaUFySUc1aGJXVWdLeUJjSWx4Y1hDSXVYQ0lnSzF4dUlDQWdJQ0FnWENJZ1JYaHdaV04wWldRZ1hDSWdLeUFvWlhod1pXTjBaV1JVZVhCbGN5NXRZWEFvWTJGd2FYUmhiR2w2WlNrdWFtOXBiaWduTENBbktTa2dLMXh1SUNBZ0lDQWdYQ0lzSUdkdmRDQmNJaUFySUNoMGIxSmhkMVI1Y0dVb2RtRnNkV1VwS1NBcklGd2lMbHdpTEZ4dUlDQWdJQ0FnZG0xY2JpQWdJQ0FwTzF4dUlDQWdJSEpsZEhWeWJseHVJQ0I5WEc0Z0lIWmhjaUIyWVd4cFpHRjBiM0lnUFNCd2NtOXdMblpoYkdsa1lYUnZjanRjYmlBZ2FXWWdLSFpoYkdsa1lYUnZjaWtnZTF4dUlDQWdJR2xtSUNnaGRtRnNhV1JoZEc5eUtIWmhiSFZsS1NrZ2UxeHVJQ0FnSUNBZ2QyRnliaWhjYmlBZ0lDQWdJQ0FnSjBsdWRtRnNhV1FnY0hKdmNEb2dZM1Z6ZEc5dElIWmhiR2xrWVhSdmNpQmphR1ZqYXlCbVlXbHNaV1FnWm05eUlIQnliM0FnWENJbklDc2dibUZ0WlNBcklDZGNJaTRuTEZ4dUlDQWdJQ0FnSUNCMmJWeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVkbUZ5SUhOcGJYQnNaVU5vWldOclVrVWdQU0F2WGloVGRISnBibWQ4VG5WdFltVnlmRUp2YjJ4bFlXNThSblZ1WTNScGIyNThVM2x0WW05c0tTUXZPMXh1WEc1bWRXNWpkR2x2YmlCaGMzTmxjblJVZVhCbElDaDJZV3gxWlN3Z2RIbHdaU2tnZTF4dUlDQjJZWElnZG1Gc2FXUTdYRzRnSUhaaGNpQmxlSEJsWTNSbFpGUjVjR1VnUFNCblpYUlVlWEJsS0hSNWNHVXBPMXh1SUNCcFppQW9jMmx0Y0d4bFEyaGxZMnRTUlM1MFpYTjBLR1Y0Y0dWamRHVmtWSGx3WlNrcElIdGNiaUFnSUNCMllYSWdkQ0E5SUhSNWNHVnZaaUIyWVd4MVpUdGNiaUFnSUNCMllXeHBaQ0E5SUhRZ1BUMDlJR1Y0Y0dWamRHVmtWSGx3WlM1MGIweHZkMlZ5UTJGelpTZ3BPMXh1SUNBZ0lDOHZJR1p2Y2lCd2NtbHRhWFJwZG1VZ2QzSmhjSEJsY2lCdlltcGxZM1J6WEc0Z0lDQWdhV1lnS0NGMllXeHBaQ0FtSmlCMElEMDlQU0FuYjJKcVpXTjBKeWtnZTF4dUlDQWdJQ0FnZG1Gc2FXUWdQU0IyWVd4MVpTQnBibk4wWVc1alpXOW1JSFI1Y0dVN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2FXWWdLR1Y0Y0dWamRHVmtWSGx3WlNBOVBUMGdKMDlpYW1WamRDY3BJSHRjYmlBZ0lDQjJZV3hwWkNBOUlHbHpVR3hoYVc1UFltcGxZM1FvZG1Gc2RXVXBPMXh1SUNCOUlHVnNjMlVnYVdZZ0tHVjRjR1ZqZEdWa1ZIbHdaU0E5UFQwZ0owRnljbUY1SnlrZ2UxeHVJQ0FnSUhaaGJHbGtJRDBnUVhKeVlYa3VhWE5CY25KaGVTaDJZV3gxWlNrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2RtRnNhV1FnUFNCMllXeDFaU0JwYm5OMFlXNWpaVzltSUhSNWNHVTdYRzRnSUgxY2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCMllXeHBaRG9nZG1Gc2FXUXNYRzRnSUNBZ1pYaHdaV04wWldSVWVYQmxPaUJsZUhCbFkzUmxaRlI1Y0dWY2JpQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlGVnpaU0JtZFc1amRHbHZiaUJ6ZEhKcGJtY2dibUZ0WlNCMGJ5QmphR1ZqYXlCaWRXbHNkQzFwYmlCMGVYQmxjeXhjYmlBcUlHSmxZMkYxYzJVZ1lTQnphVzF3YkdVZ1pYRjFZV3hwZEhrZ1kyaGxZMnNnZDJsc2JDQm1ZV2xzSUhkb1pXNGdjblZ1Ym1sdVoxeHVJQ29nWVdOeWIzTnpJR1JwWm1abGNtVnVkQ0IyYlhNZ0x5QnBabkpoYldWekxseHVJQ292WEc1bWRXNWpkR2x2YmlCblpYUlVlWEJsSUNobWJpa2dlMXh1SUNCMllYSWdiV0YwWTJnZ1BTQm1iaUFtSmlCbWJpNTBiMU4wY21sdVp5Z3BMbTFoZEdOb0tDOWVYRnh6S21aMWJtTjBhVzl1SUNoY1hIY3JLUzhwTzF4dUlDQnlaWFIxY200Z2JXRjBZMmdnUHlCdFlYUmphRnN4WFNBNklDY25YRzU5WEc1Y2JtWjFibU4wYVc5dUlHbHpWSGx3WlNBb2RIbHdaU3dnWm00cElIdGNiaUFnYVdZZ0tDRkJjbkpoZVM1cGMwRnljbUY1S0dadUtTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCblpYUlVlWEJsS0dadUtTQTlQVDBnWjJWMFZIbHdaU2gwZVhCbEtWeHVJQ0I5WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCc1pXNGdQU0JtYmk1c1pXNW5kR2c3SUdrZ1BDQnNaVzQ3SUdrckt5a2dlMXh1SUNBZ0lHbG1JQ2huWlhSVWVYQmxLR1p1VzJsZEtTQTlQVDBnWjJWMFZIbHdaU2gwZVhCbEtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1ZjYmlBZ0lDQjlYRzRnSUgxY2JpQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJRzVsZUhRZ0tpOWNiaUFnY21WMGRYSnVJR1poYkhObFhHNTlYRzVjYmk4cUlDQXFMMXh1WEc1bWRXNWpkR2x2YmlCb1lXNWtiR1ZGY25KdmNpQW9aWEp5TENCMmJTd2dhVzVtYnlrZ2UxeHVJQ0JwWmlBb2RtMHBJSHRjYmlBZ0lDQjJZWElnWTNWeUlEMGdkbTA3WEc0Z0lDQWdkMmhwYkdVZ0tDaGpkWElnUFNCamRYSXVKSEJoY21WdWRDa3BJSHRjYmlBZ0lDQWdJSFpoY2lCb2IyOXJjeUE5SUdOMWNpNGtiM0IwYVc5dWN5NWxjbkp2Y2tOaGNIUjFjbVZrTzF4dUlDQWdJQ0FnYVdZZ0tHaHZiMnR6S1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dhRzl2YTNNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR05oY0hSMWNtVWdQU0JvYjI5cmMxdHBYUzVqWVd4c0tHTjFjaXdnWlhKeUxDQjJiU3dnYVc1bWJ5a2dQVDA5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR05oY0hSMWNtVXBJSHNnY21WMGRYSnVJSDFjYmlBZ0lDQWdJQ0FnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbmJHOWlZV3hJWVc1a2JHVkZjbkp2Y2lobExDQmpkWElzSUNkbGNuSnZja05oY0hSMWNtVmtJR2h2YjJzbktUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNiaUFnWjJ4dlltRnNTR0Z1Wkd4bFJYSnliM0lvWlhKeUxDQjJiU3dnYVc1bWJ5azdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZHNiMkpoYkVoaGJtUnNaVVZ5Y205eUlDaGxjbklzSUhadExDQnBibVp2S1NCN1hHNGdJR2xtSUNoamIyNW1hV2N1WlhKeWIzSklZVzVrYkdWeUtTQjdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmpiMjVtYVdjdVpYSnliM0pJWVc1a2JHVnlMbU5oYkd3b2JuVnNiQ3dnWlhKeUxDQjJiU3dnYVc1bWJ5bGNiaUFnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQnNiMmRGY25KdmNpaGxMQ0J1ZFd4c0xDQW5ZMjl1Wm1sbkxtVnljbTl5U0dGdVpHeGxjaWNwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0JzYjJkRmNuSnZjaWhsY25Jc0lIWnRMQ0JwYm1adktUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2JHOW5SWEp5YjNJZ0tHVnljaXdnZG0wc0lHbHVabThwSUh0Y2JpQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNCM1lYSnVLQ2hjSWtWeWNtOXlJR2x1SUZ3aUlDc2dhVzVtYnlBcklGd2lPaUJjWEZ3aVhDSWdLeUFvWlhKeUxuUnZVM1J5YVc1bktDa3BJQ3NnWENKY1hGd2lYQ0lwTENCMmJTazdYRzRnSUgxY2JpQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJR1ZzYzJVZ0tpOWNiaUFnYVdZZ0tDaHBia0p5YjNkelpYSWdmSHdnYVc1WFpXVjRLU0FtSmlCMGVYQmxiMllnWTI5dWMyOXNaU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0dWeWNpazdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkR2h5YjNjZ1pYSnlYRzRnSUgxY2JuMWNibHh1THlvZ0lDb3ZYRzR2S2lCbmJHOWlZV3h6SUUxbGMzTmhaMlZEYUdGdWJtVnNJQ292WEc1Y2JuWmhjaUJqWVd4c1ltRmphM01nUFNCYlhUdGNiblpoY2lCd1pXNWthVzVuSUQwZ1ptRnNjMlU3WEc1Y2JtWjFibU4wYVc5dUlHWnNkWE5vUTJGc2JHSmhZMnR6SUNncElIdGNiaUFnY0dWdVpHbHVaeUE5SUdaaGJITmxPMXh1SUNCMllYSWdZMjl3YVdWeklEMGdZMkZzYkdKaFkydHpMbk5zYVdObEtEQXBPMXh1SUNCallXeHNZbUZqYTNNdWJHVnVaM1JvSUQwZ01EdGNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCamIzQnBaWE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNCamIzQnBaWE5iYVYwb0tUdGNiaUFnZlZ4dWZWeHVYRzR2THlCSVpYSmxJSGRsSUdoaGRtVWdZWE41Ym1NZ1pHVm1aWEp5YVc1bklIZHlZWEJ3WlhKeklIVnphVzVuSUdKdmRHZ2diV2xqY204Z1lXNWtJRzFoWTNKdklIUmhjMnR6TGx4dUx5OGdTVzRnUENBeUxqUWdkMlVnZFhObFpDQnRhV055YnlCMFlYTnJjeUJsZG1WeWVYZG9aWEpsTENCaWRYUWdkR2hsY21VZ1lYSmxJSE52YldVZ2MyTmxibUZ5YVc5eklIZG9aWEpsWEc0dkx5QnRhV055YnlCMFlYTnJjeUJvWVhabElIUnZieUJvYVdkb0lHRWdjSEpwYjNKcGRIa2dZVzVrSUdacGNtVnpJR2x1SUdKbGRIZGxaVzRnYzNWd2NHOXpaV1JzZVZ4dUx5OGdjMlZ4ZFdWdWRHbGhiQ0JsZG1WdWRITWdLR1V1Wnk0Z0l6UTFNakVzSUNNMk5qa3dLU0J2Y2lCbGRtVnVJR0psZEhkbFpXNGdZblZpWW14cGJtY2diMllnZEdobElITmhiV1ZjYmk4dklHVjJaVzUwSUNnak5qVTJOaWt1SUVodmQyVjJaWElzSUhWemFXNW5JRzFoWTNKdklIUmhjMnR6SUdWMlpYSjVkMmhsY21VZ1lXeHpieUJvWVhNZ2MzVmlkR3hsSUhCeWIySnNaVzF6WEc0dkx5QjNhR1Z1SUhOMFlYUmxJR2x6SUdOb1lXNW5aV1FnY21sbmFIUWdZbVZtYjNKbElISmxjR0ZwYm5RZ0tHVXVaeTRnSXpZNE1UTXNJRzkxZEMxcGJpQjBjbUZ1YzJsMGFXOXVjeWt1WEc0dkx5QklaWEpsSUhkbElIVnpaU0J0YVdOeWJ5QjBZWE5ySUdKNUlHUmxabUYxYkhRc0lHSjFkQ0JsZUhCdmMyVWdZU0IzWVhrZ2RHOGdabTl5WTJVZ2JXRmpjbThnZEdGemF5QjNhR1Z1WEc0dkx5QnVaV1ZrWldRZ0tHVXVaeTRnYVc0Z1pYWmxiblFnYUdGdVpHeGxjbk1nWVhSMFlXTm9aV1FnWW5rZ2RpMXZiaWt1WEc1MllYSWdiV2xqY205VWFXMWxja1oxYm1NN1hHNTJZWElnYldGamNtOVVhVzFsY2taMWJtTTdYRzUyWVhJZ2RYTmxUV0ZqY205VVlYTnJJRDBnWm1Gc2MyVTdYRzVjYmk4dklFUmxkR1Z5YldsdVpTQW9iV0ZqY204cElGUmhjMnNnWkdWbVpYSWdhVzF3YkdWdFpXNTBZWFJwYjI0dVhHNHZMeUJVWldOb2JtbGpZV3hzZVNCelpYUkpiVzFsWkdsaGRHVWdjMmh2ZFd4a0lHSmxJSFJvWlNCcFpHVmhiQ0JqYUc5cFkyVXNJR0oxZENCcGRDZHpJRzl1YkhrZ1lYWmhhV3hoWW14bFhHNHZMeUJwYmlCSlJTNGdWR2hsSUc5dWJIa2djRzlzZVdacGJHd2dkR2hoZENCamIyNXphWE4wWlc1MGJIa2djWFZsZFdWeklIUm9aU0JqWVd4c1ltRmpheUJoWm5SbGNpQmhiR3dnUkU5TlhHNHZMeUJsZG1WdWRITWdkSEpwWjJkbGNtVmtJR2x1SUhSb1pTQnpZVzFsSUd4dmIzQWdhWE1nWW5rZ2RYTnBibWNnVFdWemMyRm5aVU5vWVc1dVpXd3VYRzR2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYVdZZ0tpOWNibWxtSUNoMGVYQmxiMllnYzJWMFNXMXRaV1JwWVhSbElDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQnBjMDVoZEdsMlpTaHpaWFJKYlcxbFpHbGhkR1VwS1NCN1hHNGdJRzFoWTNKdlZHbHRaWEpHZFc1aklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSE5sZEVsdGJXVmthV0YwWlNobWJIVnphRU5oYkd4aVlXTnJjeWs3WEc0Z0lIMDdYRzU5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJOWlhOellXZGxRMmhoYm01bGJDQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdLRnh1SUNCcGMwNWhkR2wyWlNoTlpYTnpZV2RsUTJoaGJtNWxiQ2tnZkh4Y2JpQWdMeThnVUdoaGJuUnZiVXBUWEc0Z0lFMWxjM05oWjJWRGFHRnVibVZzTG5SdlUzUnlhVzVuS0NrZ1BUMDlJQ2RiYjJKcVpXTjBJRTFsYzNOaFoyVkRhR0Z1Ym1Wc1EyOXVjM1J5ZFdOMGIzSmRKMXh1S1NrZ2UxeHVJQ0IyWVhJZ1kyaGhibTVsYkNBOUlHNWxkeUJOWlhOellXZGxRMmhoYm01bGJDZ3BPMXh1SUNCMllYSWdjRzl5ZENBOUlHTm9ZVzV1Wld3dWNHOXlkREk3WEc0Z0lHTm9ZVzV1Wld3dWNHOXlkREV1YjI1dFpYTnpZV2RsSUQwZ1pteDFjMmhEWVd4c1ltRmphM003WEc0Z0lHMWhZM0p2VkdsdFpYSkdkVzVqSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lIQnZjblF1Y0c5emRFMWxjM05oWjJVb01TazdYRzRnSUgwN1hHNTlJR1ZzYzJVZ2UxeHVJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYm1WNGRDQXFMMXh1SUNCdFlXTnliMVJwYldWeVJuVnVZeUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCelpYUlVhVzFsYjNWMEtHWnNkWE5vUTJGc2JHSmhZMnR6TENBd0tUdGNiaUFnZlR0Y2JuMWNibHh1THk4Z1JHVjBaWEp0YVc1bElFMXBZM0p2VkdGemF5QmtaV1psY2lCcGJYQnNaVzFsYm5SaGRHbHZiaTVjYmk4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCdVpYaDBMQ0FrWm14dmR5MWthWE5oWW14bExXeHBibVVnS2k5Y2JtbG1JQ2gwZVhCbGIyWWdVSEp2YldselpTQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdhWE5PWVhScGRtVW9VSEp2YldselpTa3BJSHRjYmlBZ2RtRnlJSEFnUFNCUWNtOXRhWE5sTG5KbGMyOXNkbVVvS1R0Y2JpQWdiV2xqY205VWFXMWxja1oxYm1NZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdjQzUwYUdWdUtHWnNkWE5vUTJGc2JHSmhZMnR6S1R0Y2JpQWdJQ0F2THlCcGJpQndjbTlpYkdWdFlYUnBZeUJWU1ZkbFlsWnBaWGR6TENCUWNtOXRhWE5sTG5Sb1pXNGdaRzlsYzI0bmRDQmpiMjF3YkdWMFpXeDVJR0p5WldGckxDQmlkWFJjYmlBZ0lDQXZMeUJwZENCallXNGdaMlYwSUhOMGRXTnJJR2x1SUdFZ2QyVnBjbVFnYzNSaGRHVWdkMmhsY21VZ1kyRnNiR0poWTJ0eklHRnlaU0J3ZFhOb1pXUWdhVzUwYnlCMGFHVmNiaUFnSUNBdkx5QnRhV055YjNSaGMyc2djWFZsZFdVZ1luVjBJSFJvWlNCeGRXVjFaU0JwYzI0bmRDQmlaV2x1WnlCbWJIVnphR1ZrTENCMWJuUnBiQ0IwYUdVZ1luSnZkM05sY2x4dUlDQWdJQzh2SUc1bFpXUnpJSFJ2SUdSdklITnZiV1VnYjNSb1pYSWdkMjl5YXl3Z1pTNW5MaUJvWVc1a2JHVWdZU0IwYVcxbGNpNGdWR2hsY21WbWIzSmxJSGRsSUdOaGJseHVJQ0FnSUM4dklGd2labTl5WTJWY0lpQjBhR1VnYldsamNtOTBZWE5ySUhGMVpYVmxJSFJ2SUdKbElHWnNkWE5vWldRZ1lua2dZV1JrYVc1bklHRnVJR1Z0Y0hSNUlIUnBiV1Z5TGx4dUlDQWdJR2xtSUNocGMwbFBVeWtnZXlCelpYUlVhVzFsYjNWMEtHNXZiM0FwT3lCOVhHNGdJSDA3WEc1OUlHVnNjMlVnZTF4dUlDQXZMeUJtWVd4c1ltRmpheUIwYnlCdFlXTnliMXh1SUNCdGFXTnliMVJwYldWeVJuVnVZeUE5SUcxaFkzSnZWR2x0WlhKR2RXNWpPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGZHlZWEFnWVNCbWRXNWpkR2x2YmlCemJ5QjBhR0YwSUdsbUlHRnVlU0JqYjJSbElHbHVjMmxrWlNCMGNtbG5aMlZ5Y3lCemRHRjBaU0JqYUdGdVoyVXNYRzRnS2lCMGFHVWdZMmhoYm1kbGN5QmhjbVVnY1hWbGRXVmtJSFZ6YVc1bklHRWdWR0Z6YXlCcGJuTjBaV0ZrSUc5bUlHRWdUV2xqY205VVlYTnJMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQjNhWFJvVFdGamNtOVVZWE5ySUNobWJpa2dlMXh1SUNCeVpYUjFjbTRnWm00dVgzZHBkR2hVWVhOcklIeDhJQ2htYmk1ZmQybDBhRlJoYzJzZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkWE5sVFdGamNtOVVZWE5ySUQwZ2RISjFaVHRjYmlBZ0lDQjJZWElnY21WeklEMGdabTR1WVhCd2JIa29iblZzYkN3Z1lYSm5kVzFsYm5SektUdGNiaUFnSUNCMWMyVk5ZV055YjFSaGMyc2dQU0JtWVd4elpUdGNiaUFnSUNCeVpYUjFjbTRnY21WelhHNGdJSDBwWEc1OVhHNWNibVoxYm1OMGFXOXVJRzVsZUhSVWFXTnJJQ2hqWWl3Z1kzUjRLU0I3WEc0Z0lIWmhjaUJmY21WemIyeDJaVHRjYmlBZ1kyRnNiR0poWTJ0ekxuQjFjMmdvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUdsbUlDaGpZaWtnZTF4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdZMkl1WTJGc2JDaGpkSGdwTzF4dUlDQWdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQm9ZVzVrYkdWRmNuSnZjaWhsTENCamRIZ3NJQ2R1WlhoMFZHbGpheWNwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQnBaaUFvWDNKbGMyOXNkbVVwSUh0Y2JpQWdJQ0FnSUY5eVpYTnZiSFpsS0dOMGVDazdYRzRnSUNBZ2ZWeHVJQ0I5S1R0Y2JpQWdhV1lnS0NGd1pXNWthVzVuS1NCN1hHNGdJQ0FnY0dWdVpHbHVaeUE5SUhSeWRXVTdYRzRnSUNBZ2FXWWdLSFZ6WlUxaFkzSnZWR0Z6YXlrZ2UxeHVJQ0FnSUNBZ2JXRmpjbTlVYVcxbGNrWjFibU1vS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdiV2xqY205VWFXMWxja1oxYm1Nb0tUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ0x5OGdKR1pzYjNjdFpHbHpZV0pzWlMxc2FXNWxYRzRnSUdsbUlDZ2hZMklnSmlZZ2RIbHdaVzltSUZCeWIyMXBjMlVnSVQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVJQ2h5WlhOdmJIWmxLU0I3WEc0Z0lDQWdJQ0JmY21WemIyeDJaU0E5SUhKbGMyOXNkbVU3WEc0Z0lDQWdmU2xjYmlBZ2ZWeHVmVnh1WEc0dktpQWdLaTljYmx4dUx5b2dibTkwSUhSNWNHVWdZMmhsWTJ0cGJtY2dkR2hwY3lCbWFXeGxJR0psWTJGMWMyVWdabXh2ZHlCa2IyVnpiaWQwSUhCc1lYa2dkMlZzYkNCM2FYUm9JRkJ5YjNoNUlDb3ZYRzVjYm5aaGNpQnBibWwwVUhKdmVIazdYRzVjYm1sbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lIWmhjaUJoYkd4dmQyVmtSMnh2WW1Gc2N5QTlJRzFoYTJWTllYQW9YRzRnSUNBZ0owbHVabWx1YVhSNUxIVnVaR1ZtYVc1bFpDeE9ZVTRzYVhOR2FXNXBkR1VzYVhOT1lVNHNKeUFyWEc0Z0lDQWdKM0JoY25ObFJteHZZWFFzY0dGeWMyVkpiblFzWkdWamIyUmxWVkpKTEdSbFkyOWtaVlZTU1VOdmJYQnZibVZ1ZEN4bGJtTnZaR1ZWVWtrc1pXNWpiMlJsVlZKSlEyOXRjRzl1Wlc1MExDY2dLMXh1SUNBZ0lDZE5ZWFJvTEU1MWJXSmxjaXhFWVhSbExFRnljbUY1TEU5aWFtVmpkQ3hDYjI5c1pXRnVMRk4wY21sdVp5eFNaV2RGZUhBc1RXRndMRk5sZEN4S1UwOU9MRWx1ZEd3c0p5QXJYRzRnSUNBZ0ozSmxjWFZwY21VbklDOHZJR1p2Y2lCWFpXSndZV05yTDBKeWIzZHpaWEpwWm5sY2JpQWdLVHRjYmx4dUlDQjJZWElnZDJGeWJrNXZibEJ5WlhObGJuUWdQU0JtZFc1amRHbHZiaUFvZEdGeVoyVjBMQ0JyWlhrcElIdGNiaUFnSUNCM1lYSnVLRnh1SUNBZ0lDQWdYQ0pRY205d1pYSjBlU0J2Y2lCdFpYUm9iMlFnWEZ4Y0lsd2lJQ3NnYTJWNUlDc2dYQ0pjWEZ3aUlHbHpJRzV2ZENCa1pXWnBibVZrSUc5dUlIUm9aU0JwYm5OMFlXNWpaU0JpZFhRZ1hDSWdLMXh1SUNBZ0lDQWdKM0psWm1WeVpXNWpaV1FnWkhWeWFXNW5JSEpsYm1SbGNpNGdUV0ZyWlNCemRYSmxJSFJvWVhRZ2RHaHBjeUJ3Y205d1pYSjBlU0JwY3lCeVpXRmpkR2wyWlN3Z0p5QXJYRzRnSUNBZ0lDQW5aV2wwYUdWeUlHbHVJSFJvWlNCa1lYUmhJRzl3ZEdsdmJpd2diM0lnWm05eUlHTnNZWE56TFdKaGMyVmtJR052YlhCdmJtVnVkSE1zSUdKNUlDY2dLMXh1SUNBZ0lDQWdKMmx1YVhScFlXeHBlbWx1WnlCMGFHVWdjSEp2Y0dWeWRIa3VJQ2NnSzF4dUlDQWdJQ0FnSjFObFpUb2dhSFIwY0hNNkx5OTJkV1ZxY3k1dmNtY3Zkakl2WjNWcFpHVXZjbVZoWTNScGRtbDBlUzVvZEcxc0kwUmxZMnhoY21sdVp5MVNaV0ZqZEdsMlpTMVFjbTl3WlhKMGFXVnpMaWNzWEc0Z0lDQWdJQ0IwWVhKblpYUmNiaUFnSUNBcE8xeHVJQ0I5TzF4dVhHNGdJSFpoY2lCb1lYTlFjbTk0ZVNBOVhHNGdJQ0FnZEhsd1pXOW1JRkJ5YjNoNUlDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUpseHVJQ0FnSUZCeWIzaDVMblJ2VTNSeWFXNW5LQ2t1YldGMFkyZ29MMjVoZEdsMlpTQmpiMlJsTHlrN1hHNWNiaUFnYVdZZ0tHaGhjMUJ5YjNoNUtTQjdYRzRnSUNBZ2RtRnlJR2x6UW5WcGJIUkpiazF2WkdsbWFXVnlJRDBnYldGclpVMWhjQ2duYzNSdmNDeHdjbVYyWlc1MExITmxiR1lzWTNSeWJDeHphR2xtZEN4aGJIUXNiV1YwWVN4bGVHRmpkQ2NwTzF4dUlDQWdJR052Ym1acFp5NXJaWGxEYjJSbGN5QTlJRzVsZHlCUWNtOTRlU2hqYjI1bWFXY3VhMlY1UTI5a1pYTXNJSHRjYmlBZ0lDQWdJSE5sZERvZ1puVnVZM1JwYjI0Z2MyVjBJQ2gwWVhKblpYUXNJR3RsZVN3Z2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x6UW5WcGJIUkpiazF2WkdsbWFXVnlLR3RsZVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0IzWVhKdUtDaGNJa0YyYjJsa0lHOTJaWEozY21sMGFXNW5JR0oxYVd4MExXbHVJRzF2WkdsbWFXVnlJR2x1SUdOdmJtWnBaeTVyWlhsRGIyUmxjem9nTGx3aUlDc2dhMlY1S1NrN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sWEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHRnlaMlYwVzJ0bGVWMGdQU0IyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQjJZWElnYUdGelNHRnVaR3hsY2lBOUlIdGNiaUFnSUNCb1lYTTZJR1oxYm1OMGFXOXVJR2hoY3lBb2RHRnlaMlYwTENCclpYa3BJSHRjYmlBZ0lDQWdJSFpoY2lCb1lYTWdQU0JyWlhrZ2FXNGdkR0Z5WjJWME8xeHVJQ0FnSUNBZ2RtRnlJR2x6UVd4c2IzZGxaQ0E5SUdGc2JHOTNaV1JIYkc5aVlXeHpLR3RsZVNrZ2ZId2dhMlY1TG1Ob1lYSkJkQ2d3S1NBOVBUMGdKMThuTzF4dUlDQWdJQ0FnYVdZZ0tDRm9ZWE1nSmlZZ0lXbHpRV3hzYjNkbFpDa2dlMXh1SUNBZ0lDQWdJQ0IzWVhKdVRtOXVVSEpsYzJWdWRDaDBZWEpuWlhRc0lHdGxlU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdhR0Z6SUh4OElDRnBjMEZzYkc5M1pXUmNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdkbUZ5SUdkbGRFaGhibVJzWlhJZ1BTQjdYRzRnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaUJuWlhRZ0tIUmhjbWRsZEN3Z2EyVjVLU0I3WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUd0bGVTQTlQVDBnSjNOMGNtbHVaeWNnSmlZZ0lTaHJaWGtnYVc0Z2RHRnlaMlYwS1NrZ2UxeHVJQ0FnSUNBZ0lDQjNZWEp1VG05dVVISmxjMlZ1ZENoMFlYSm5aWFFzSUd0bGVTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z2RHRnlaMlYwVzJ0bGVWMWNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdhVzVwZEZCeWIzaDVJRDBnWm5WdVkzUnBiMjRnYVc1cGRGQnliM2g1SUNoMmJTa2dlMXh1SUNBZ0lHbG1JQ2hvWVhOUWNtOTRlU2tnZTF4dUlDQWdJQ0FnTHk4Z1pHVjBaWEp0YVc1bElIZG9hV05vSUhCeWIzaDVJR2hoYm1Sc1pYSWdkRzhnZFhObFhHNGdJQ0FnSUNCMllYSWdiM0IwYVc5dWN5QTlJSFp0TGlSdmNIUnBiMjV6TzF4dUlDQWdJQ0FnZG1GeUlHaGhibVJzWlhKeklEMGdiM0IwYVc5dWN5NXlaVzVrWlhJZ0ppWWdiM0IwYVc5dWN5NXlaVzVrWlhJdVgzZHBkR2hUZEhKcGNIQmxaRnh1SUNBZ0lDQWdJQ0EvSUdkbGRFaGhibVJzWlhKY2JpQWdJQ0FnSUNBZ09pQm9ZWE5JWVc1a2JHVnlPMXh1SUNBZ0lDQWdkbTB1WDNKbGJtUmxjbEJ5YjNoNUlEMGdibVYzSUZCeWIzaDVLSFp0TENCb1lXNWtiR1Z5Y3lrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFp0TGw5eVpXNWtaWEpRY205NGVTQTlJSFp0TzF4dUlDQWdJSDFjYmlBZ2ZUdGNibjFjYmx4dUx5b2dJQ292WEc1Y2JuWmhjaUJ6WldWdVQySnFaV04wY3lBOUlHNWxkeUJmVTJWMEtDazdYRzVjYmk4cUtseHVJQ29nVW1WamRYSnphWFpsYkhrZ2RISmhkbVZ5YzJVZ1lXNGdiMkpxWldOMElIUnZJR1YyYjJ0bElHRnNiQ0JqYjI1MlpYSjBaV1JjYmlBcUlHZGxkSFJsY25Nc0lITnZJSFJvWVhRZ1pYWmxjbmtnYm1WemRHVmtJSEJ5YjNCbGNuUjVJR2x1YzJsa1pTQjBhR1VnYjJKcVpXTjBYRzRnS2lCcGN5QmpiMnhzWldOMFpXUWdZWE1nWVNCY0ltUmxaWEJjSWlCa1pYQmxibVJsYm1ONUxseHVJQ292WEc1bWRXNWpkR2x2YmlCMGNtRjJaWEp6WlNBb2RtRnNLU0I3WEc0Z0lGOTBjbUYyWlhKelpTaDJZV3dzSUhObFpXNVBZbXBsWTNSektUdGNiaUFnYzJWbGJrOWlhbVZqZEhNdVkyeGxZWElvS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWDNSeVlYWmxjbk5sSUNoMllXd3NJSE5sWlc0cElIdGNiaUFnZG1GeUlHa3NJR3RsZVhNN1hHNGdJSFpoY2lCcGMwRWdQU0JCY25KaGVTNXBjMEZ5Y21GNUtIWmhiQ2s3WEc0Z0lHbG1JQ2dvSVdselFTQW1KaUFoYVhOUFltcGxZM1FvZG1Gc0tTa2dmSHdnVDJKcVpXTjBMbWx6Um5KdmVtVnVLSFpoYkNrcElIdGNiaUFnSUNCeVpYUjFjbTVjYmlBZ2ZWeHVJQ0JwWmlBb2RtRnNMbDlmYjJKZlh5a2dlMXh1SUNBZ0lIWmhjaUJrWlhCSlpDQTlJSFpoYkM1ZlgyOWlYMTh1WkdWd0xtbGtPMXh1SUNBZ0lHbG1JQ2h6WldWdUxtaGhjeWhrWlhCSlpDa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJseHVJQ0FnSUgxY2JpQWdJQ0J6WldWdUxtRmtaQ2hrWlhCSlpDazdYRzRnSUgxY2JpQWdhV1lnS0dselFTa2dlMXh1SUNBZ0lHa2dQU0IyWVd3dWJHVnVaM1JvTzF4dUlDQWdJSGRvYVd4bElDaHBMUzBwSUhzZ1gzUnlZWFpsY25ObEtIWmhiRnRwWFN3Z2MyVmxiaWs3SUgxY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCclpYbHpJRDBnVDJKcVpXTjBMbXRsZVhNb2RtRnNLVHRjYmlBZ0lDQnBJRDBnYTJWNWN5NXNaVzVuZEdnN1hHNGdJQ0FnZDJocGJHVWdLR2t0TFNrZ2V5QmZkSEpoZG1WeWMyVW9kbUZzVzJ0bGVYTmJhVjFkTENCelpXVnVLVHNnZlZ4dUlDQjlYRzU5WEc1Y2JuWmhjaUJ0WVhKck8xeHVkbUZ5SUcxbFlYTjFjbVU3WEc1Y2JtbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuS1NCN1hHNGdJSFpoY2lCd1pYSm1JRDBnYVc1Q2NtOTNjMlZ5SUNZbUlIZHBibVJ2ZHk1d1pYSm1iM0p0WVc1alpUdGNiaUFnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdsbUlDb3ZYRzRnSUdsbUlDaGNiaUFnSUNCd1pYSm1JQ1ltWEc0Z0lDQWdjR1Z5Wmk1dFlYSnJJQ1ltWEc0Z0lDQWdjR1Z5Wmk1dFpXRnpkWEpsSUNZbVhHNGdJQ0FnY0dWeVppNWpiR1ZoY2sxaGNtdHpJQ1ltWEc0Z0lDQWdjR1Z5Wmk1amJHVmhjazFsWVhOMWNtVnpYRzRnSUNrZ2UxeHVJQ0FnSUcxaGNtc2dQU0JtZFc1amRHbHZiaUFvZEdGbktTQjdJSEpsZEhWeWJpQndaWEptTG0xaGNtc29kR0ZuS1RzZ2ZUdGNiaUFnSUNCdFpXRnpkWEpsSUQwZ1puVnVZM1JwYjI0Z0tHNWhiV1VzSUhOMFlYSjBWR0ZuTENCbGJtUlVZV2NwSUh0Y2JpQWdJQ0FnSUhCbGNtWXViV1ZoYzNWeVpTaHVZVzFsTENCemRHRnlkRlJoWnl3Z1pXNWtWR0ZuS1R0Y2JpQWdJQ0FnSUhCbGNtWXVZMnhsWVhKTllYSnJjeWh6ZEdGeWRGUmhaeWs3WEc0Z0lDQWdJQ0J3WlhKbUxtTnNaV0Z5VFdGeWEzTW9aVzVrVkdGbktUdGNiaUFnSUNBZ0lIQmxjbVl1WTJ4bFlYSk5aV0Z6ZFhKbGN5aHVZVzFsS1R0Y2JpQWdJQ0I5TzF4dUlDQjlYRzU5WEc1Y2JpOHFJQ0FxTDF4dVhHNTJZWElnYm05eWJXRnNhWHBsUlhabGJuUWdQU0JqWVdOb1pXUW9ablZ1WTNScGIyNGdLRzVoYldVcElIdGNiaUFnZG1GeUlIQmhjM05wZG1VZ1BTQnVZVzFsTG1Ob1lYSkJkQ2d3S1NBOVBUMGdKeVluTzF4dUlDQnVZVzFsSUQwZ2NHRnpjMmwyWlNBL0lHNWhiV1V1YzJ4cFkyVW9NU2tnT2lCdVlXMWxPMXh1SUNCMllYSWdiMjVqWlNRa01TQTlJRzVoYldVdVkyaGhja0YwS0RBcElEMDlQU0FuZmljN0lDOHZJRkJ5WldacGVHVmtJR3hoYzNRc0lHTm9aV05yWldRZ1ptbHljM1JjYmlBZ2JtRnRaU0E5SUc5dVkyVWtKREVnUHlCdVlXMWxMbk5zYVdObEtERXBJRG9nYm1GdFpUdGNiaUFnZG1GeUlHTmhjSFIxY21VZ1BTQnVZVzFsTG1Ob1lYSkJkQ2d3S1NBOVBUMGdKeUVuTzF4dUlDQnVZVzFsSUQwZ1kyRndkSFZ5WlNBL0lHNWhiV1V1YzJ4cFkyVW9NU2tnT2lCdVlXMWxPMXh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJRzVoYldVNklHNWhiV1VzWEc0Z0lDQWdiMjVqWlRvZ2IyNWpaU1FrTVN4Y2JpQWdJQ0JqWVhCMGRYSmxPaUJqWVhCMGRYSmxMRnh1SUNBZ0lIQmhjM05wZG1VNklIQmhjM05wZG1WY2JpQWdmVnh1ZlNrN1hHNWNibVoxYm1OMGFXOXVJR055WldGMFpVWnVTVzUyYjJ0bGNpQW9abTV6S1NCN1hHNGdJR1oxYm1OMGFXOXVJR2x1ZG05clpYSWdLQ2tnZTF4dUlDQWdJSFpoY2lCaGNtZDFiV1Z1ZEhNa01TQTlJR0Z5WjNWdFpXNTBjenRjYmx4dUlDQWdJSFpoY2lCbWJuTWdQU0JwYm5admEyVnlMbVp1Y3p0Y2JpQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2htYm5NcEtTQjdYRzRnSUNBZ0lDQjJZWElnWTJ4dmJtVmtJRDBnWm01ekxuTnNhV05sS0NrN1hHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHTnNiMjVsWkM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0JqYkc5dVpXUmJhVjB1WVhCd2JIa29iblZzYkN3Z1lYSm5kVzFsYm5SekpERXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBdkx5QnlaWFIxY200Z2FHRnVaR3hsY2lCeVpYUjFjbTRnZG1Gc2RXVWdabTl5SUhOcGJtZHNaU0JvWVc1a2JHVnljMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWnVjeTVoY0hCc2VTaHVkV3hzTENCaGNtZDFiV1Z1ZEhNcFhHNGdJQ0FnZlZ4dUlDQjlYRzRnSUdsdWRtOXJaWEl1Wm01eklEMGdabTV6TzF4dUlDQnlaWFIxY200Z2FXNTJiMnRsY2x4dWZWeHVYRzVtZFc1amRHbHZiaUIxY0dSaGRHVk1hWE4wWlc1bGNuTWdLRnh1SUNCdmJpeGNiaUFnYjJ4a1QyNHNYRzRnSUdGa1pDeGNiaUFnY21WdGIzWmxKQ1F4TEZ4dUlDQjJiVnh1S1NCN1hHNGdJSFpoY2lCdVlXMWxMQ0JrWldZc0lHTjFjaXdnYjJ4a0xDQmxkbVZ1ZER0Y2JpQWdabTl5SUNodVlXMWxJR2x1SUc5dUtTQjdYRzRnSUNBZ1pHVm1JRDBnWTNWeUlEMGdiMjViYm1GdFpWMDdYRzRnSUNBZ2IyeGtJRDBnYjJ4a1QyNWJibUZ0WlYwN1hHNGdJQ0FnWlhabGJuUWdQU0J1YjNKdFlXeHBlbVZGZG1WdWRDaHVZVzFsS1R0Y2JpQWdJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYVdZZ0tpOWNiaUFnSUNCcFppQW9hWE5WYm1SbFppaGpkWElwS1NCN1hHNGdJQ0FnSUNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklDWW1JSGRoY200b1hHNGdJQ0FnSUNBZ0lGd2lTVzUyWVd4cFpDQm9ZVzVrYkdWeUlHWnZjaUJsZG1WdWRDQmNYRndpWENJZ0t5QW9aWFpsYm5RdWJtRnRaU2tnS3lCY0lseGNYQ0k2SUdkdmRDQmNJaUFySUZOMGNtbHVaeWhqZFhJcExGeHVJQ0FnSUNBZ0lDQjJiVnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2x6Vlc1a1pXWW9iMnhrS1NrZ2UxeHVJQ0FnSUNBZ2FXWWdLR2x6Vlc1a1pXWW9ZM1Z5TG1adWN5a3BJSHRjYmlBZ0lDQWdJQ0FnWTNWeUlEMGdiMjViYm1GdFpWMGdQU0JqY21WaGRHVkdia2x1ZG05clpYSW9ZM1Z5S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdGa1pDaGxkbVZ1ZEM1dVlXMWxMQ0JqZFhJc0lHVjJaVzUwTG05dVkyVXNJR1YyWlc1MExtTmhjSFIxY21Vc0lHVjJaVzUwTG5CaGMzTnBkbVVzSUdWMlpXNTBMbkJoY21GdGN5azdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGpkWElnSVQwOUlHOXNaQ2tnZTF4dUlDQWdJQ0FnYjJ4a0xtWnVjeUE5SUdOMWNqdGNiaUFnSUNBZ0lHOXVXMjVoYldWZElEMGdiMnhrTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0JtYjNJZ0tHNWhiV1VnYVc0Z2IyeGtUMjRwSUh0Y2JpQWdJQ0JwWmlBb2FYTlZibVJsWmlodmJsdHVZVzFsWFNrcElIdGNiaUFnSUNBZ0lHVjJaVzUwSUQwZ2JtOXliV0ZzYVhwbFJYWmxiblFvYm1GdFpTazdYRzRnSUNBZ0lDQnlaVzF2ZG1Va0pERW9aWFpsYm5RdWJtRnRaU3dnYjJ4a1QyNWJibUZ0WlYwc0lHVjJaVzUwTG1OaGNIUjFjbVVwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc0dktpQWdLaTljYmx4dVpuVnVZM1JwYjI0Z2JXVnlaMlZXVG05a1pVaHZiMnNnS0dSbFppd2dhRzl2YTB0bGVTd2dhRzl2YXlrZ2UxeHVJQ0JwWmlBb1pHVm1JR2x1YzNSaGJtTmxiMllnVms1dlpHVXBJSHRjYmlBZ0lDQmtaV1lnUFNCa1pXWXVaR0YwWVM1b2IyOXJJSHg4SUNoa1pXWXVaR0YwWVM1b2IyOXJJRDBnZTMwcE8xeHVJQ0I5WEc0Z0lIWmhjaUJwYm5admEyVnlPMXh1SUNCMllYSWdiMnhrU0c5dmF5QTlJR1JsWmx0b2IyOXJTMlY1WFR0Y2JseHVJQ0JtZFc1amRHbHZiaUIzY21Gd2NHVmtTRzl2YXlBb0tTQjdYRzRnSUNBZ2FHOXZheTVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUM4dklHbHRjRzl5ZEdGdWREb2djbVZ0YjNabElHMWxjbWRsWkNCb2IyOXJJSFJ2SUdWdWMzVnlaU0JwZENkeklHTmhiR3hsWkNCdmJteDVJRzl1WTJWY2JpQWdJQ0F2THlCaGJtUWdjSEpsZG1WdWRDQnRaVzF2Y25rZ2JHVmhhMXh1SUNBZ0lISmxiVzkyWlNocGJuWnZhMlZ5TG1adWN5d2dkM0poY0hCbFpFaHZiMnNwTzF4dUlDQjlYRzVjYmlBZ2FXWWdLR2x6Vlc1a1pXWW9iMnhrU0c5dmF5a3BJSHRjYmlBZ0lDQXZMeUJ1YnlCbGVHbHpkR2x1WnlCb2IyOXJYRzRnSUNBZ2FXNTJiMnRsY2lBOUlHTnlaV0YwWlVadVNXNTJiMnRsY2loYmQzSmhjSEJsWkVodmIydGRLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYVdZZ0tpOWNiaUFnSUNCcFppQW9hWE5FWldZb2IyeGtTRzl2YXk1bWJuTXBJQ1ltSUdselZISjFaU2h2YkdSSWIyOXJMbTFsY21kbFpDa3BJSHRjYmlBZ0lDQWdJQzh2SUdGc2NtVmhaSGtnWVNCdFpYSm5aV1FnYVc1MmIydGxjbHh1SUNBZ0lDQWdhVzUyYjJ0bGNpQTlJRzlzWkVodmIyczdYRzRnSUNBZ0lDQnBiblp2YTJWeUxtWnVjeTV3ZFhOb0tIZHlZWEJ3WldSSWIyOXJLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0x5OGdaWGhwYzNScGJtY2djR3hoYVc0Z2FHOXZhMXh1SUNBZ0lDQWdhVzUyYjJ0bGNpQTlJR055WldGMFpVWnVTVzUyYjJ0bGNpaGJiMnhrU0c5dmF5d2dkM0poY0hCbFpFaHZiMnRkS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCcGJuWnZhMlZ5TG0xbGNtZGxaQ0E5SUhSeWRXVTdYRzRnSUdSbFpsdG9iMjlyUzJWNVhTQTlJR2x1ZG05clpYSTdYRzU5WEc1Y2JpOHFJQ0FxTDF4dVhHNW1kVzVqZEdsdmJpQmxlSFJ5WVdOMFVISnZjSE5HY205dFZrNXZaR1ZFWVhSaElDaGNiaUFnWkdGMFlTeGNiaUFnUTNSdmNpeGNiaUFnZEdGblhHNHBJSHRjYmlBZ0x5OGdkMlVnWVhKbElHOXViSGtnWlhoMGNtRmpkR2x1WnlCeVlYY2dkbUZzZFdWeklHaGxjbVV1WEc0Z0lDOHZJSFpoYkdsa1lYUnBiMjRnWVc1a0lHUmxabUYxYkhRZ2RtRnNkV1Z6SUdGeVpTQm9ZVzVrYkdWa0lHbHVJSFJvWlNCamFHbHNaRnh1SUNBdkx5QmpiMjF3YjI1bGJuUWdhWFJ6Wld4bUxseHVJQ0IyWVhJZ2NISnZjRTl3ZEdsdmJuTWdQU0JEZEc5eUxtOXdkR2x2Ym5NdWNISnZjSE03WEc0Z0lHbG1JQ2hwYzFWdVpHVm1LSEJ5YjNCUGNIUnBiMjV6S1NrZ2UxeHVJQ0FnSUhKbGRIVnlibHh1SUNCOVhHNGdJSFpoY2lCeVpYTWdQU0I3ZlR0Y2JpQWdkbUZ5SUdGMGRISnpJRDBnWkdGMFlTNWhkSFJ5Y3p0Y2JpQWdkbUZ5SUhCeWIzQnpJRDBnWkdGMFlTNXdjbTl3Y3p0Y2JpQWdhV1lnS0dselJHVm1LR0YwZEhKektTQjhmQ0JwYzBSbFppaHdjbTl3Y3lrcElIdGNiaUFnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnY0hKdmNFOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lIWmhjaUJoYkhSTFpYa2dQU0JvZVhCb1pXNWhkR1VvYTJWNUtUdGNiaUFnSUNBZ0lHbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJyWlhsSmJreHZkMlZ5UTJGelpTQTlJR3RsZVM1MGIweHZkMlZ5UTJGelpTZ3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBZ0lDQWdhMlY1SUNFOVBTQnJaWGxKYmt4dmQyVnlRMkZ6WlNBbUpseHVJQ0FnSUNBZ0lDQWdJR0YwZEhKeklDWW1JR2hoYzA5M2JpaGhkSFJ5Y3l3Z2EyVjVTVzVNYjNkbGNrTmhjMlVwWEc0Z0lDQWdJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJwY0NoY2JpQWdJQ0FnSUNBZ0lDQWdJRndpVUhKdmNDQmNYRndpWENJZ0t5QnJaWGxKYmt4dmQyVnlRMkZ6WlNBcklGd2lYRnhjSWlCcGN5QndZWE56WldRZ2RHOGdZMjl0Y0c5dVpXNTBJRndpSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2htYjNKdFlYUkRiMjF3YjI1bGJuUk9ZVzFsS0hSaFp5QjhmQ0JEZEc5eUtTa2dLeUJjSWl3Z1luVjBJSFJvWlNCa1pXTnNZWEpsWkNCd2NtOXdJRzVoYldVZ2FYTmNJaUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJaUJjWEZ3aVhDSWdLeUJyWlhrZ0t5QmNJbHhjWENJdUlGd2lJQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lUbTkwWlNCMGFHRjBJRWhVVFV3Z1lYUjBjbWxpZFhSbGN5QmhjbVVnWTJGelpTMXBibk5sYm5OcGRHbDJaU0JoYm1RZ1kyRnRaV3hEWVhObFpDQmNJaUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbkJ5YjNCeklHNWxaV1FnZEc4Z2RYTmxJSFJvWldseUlHdGxZbUZpTFdOaGMyVWdaWEYxYVhaaGJHVnVkSE1nZDJobGJpQjFjMmx1WnlCcGJpMUVUMDBnWENJZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKMFpXMXdiR0YwWlhNdUlGbHZkU0J6YUc5MWJHUWdjSEp2WW1GaWJIa2dkWE5sSUZ4Y1hDSmNJaUFySUdGc2RFdGxlU0FySUZ3aVhGeGNJaUJwYm5OMFpXRmtJRzltSUZ4Y1hDSmNJaUFySUd0bGVTQXJJRndpWEZ4Y0lpNWNJbHh1SUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHTm9aV05yVUhKdmNDaHlaWE1zSUhCeWIzQnpMQ0JyWlhrc0lHRnNkRXRsZVN3Z2RISjFaU2tnZkh4Y2JpQWdJQ0FnSUdOb1pXTnJVSEp2Y0NoeVpYTXNJR0YwZEhKekxDQnJaWGtzSUdGc2RFdGxlU3dnWm1Gc2MyVXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVnpYRzU5WEc1Y2JtWjFibU4wYVc5dUlHTm9aV05yVUhKdmNDQW9YRzRnSUhKbGN5eGNiaUFnYUdGemFDeGNiaUFnYTJWNUxGeHVJQ0JoYkhSTFpYa3NYRzRnSUhCeVpYTmxjblpsWEc0cElIdGNiaUFnYVdZZ0tHbHpSR1ZtS0doaGMyZ3BLU0I3WEc0Z0lDQWdhV1lnS0doaGMwOTNiaWhvWVhOb0xDQnJaWGtwS1NCN1hHNGdJQ0FnSUNCeVpYTmJhMlY1WFNBOUlHaGhjMmhiYTJWNVhUdGNiaUFnSUNBZ0lHbG1JQ2doY0hKbGMyVnlkbVVwSUh0Y2JpQWdJQ0FnSUNBZ1pHVnNaWFJsSUdoaGMyaGJhMlY1WFR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUIwY25WbFhHNGdJQ0FnZlNCbGJITmxJR2xtSUNob1lYTlBkMjRvYUdGemFDd2dZV3gwUzJWNUtTa2dlMXh1SUNBZ0lDQWdjbVZ6VzJ0bGVWMGdQU0JvWVhOb1cyRnNkRXRsZVYwN1hHNGdJQ0FnSUNCcFppQW9JWEJ5WlhObGNuWmxLU0I3WEc0Z0lDQWdJQ0FnSUdSbGJHVjBaU0JvWVhOb1cyRnNkRXRsZVYwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpWeHVJQ0FnSUgxY2JpQWdmVnh1SUNCeVpYUjFjbTRnWm1Gc2MyVmNibjFjYmx4dUx5b2dJQ292WEc1Y2JpOHZJRlJvWlNCMFpXMXdiR0YwWlNCamIyMXdhV3hsY2lCaGRIUmxiWEIwY3lCMGJ5QnRhVzVwYldsNlpTQjBhR1VnYm1WbFpDQm1iM0lnYm05eWJXRnNhWHBoZEdsdmJpQmllVnh1THk4Z2MzUmhkR2xqWVd4c2VTQmhibUZzZVhwcGJtY2dkR2hsSUhSbGJYQnNZWFJsSUdGMElHTnZiWEJwYkdVZ2RHbHRaUzVjYmk4dlhHNHZMeUJHYjNJZ2NHeGhhVzRnU0ZSTlRDQnRZWEpyZFhBc0lHNXZjbTFoYkdsNllYUnBiMjRnWTJGdUlHSmxJR052YlhCc1pYUmxiSGtnYzJ0cGNIQmxaQ0JpWldOaGRYTmxJSFJvWlZ4dUx5OGdaMlZ1WlhKaGRHVmtJSEpsYm1SbGNpQm1kVzVqZEdsdmJpQnBjeUJuZFdGeVlXNTBaV1ZrSUhSdklISmxkSFZ5YmlCQmNuSmhlVHhXVG05a1pUNHVJRlJvWlhKbElHRnlaVnh1THk4Z2RIZHZJR05oYzJWeklIZG9aWEpsSUdWNGRISmhJRzV2Y20xaGJHbDZZWFJwYjI0Z2FYTWdibVZsWkdWa09seHVYRzR2THlBeExpQlhhR1Z1SUhSb1pTQmphR2xzWkhKbGJpQmpiMjUwWVdsdWN5QmpiMjF3YjI1bGJuUnpJQzBnWW1WallYVnpaU0JoSUdaMWJtTjBhVzl1WVd3Z1kyOXRjRzl1Wlc1MFhHNHZMeUJ0WVhrZ2NtVjBkWEp1SUdGdUlFRnljbUY1SUdsdWMzUmxZV1FnYjJZZ1lTQnphVzVuYkdVZ2NtOXZkQzRnU1c0Z2RHaHBjeUJqWVhObExDQnFkWE4wSUdFZ2MybHRjR3hsWEc0dkx5QnViM0p0WVd4cGVtRjBhVzl1SUdseklHNWxaV1JsWkNBdElHbG1JR0Z1ZVNCamFHbHNaQ0JwY3lCaGJpQkJjbkpoZVN3Z2QyVWdabXhoZEhSbGJpQjBhR1VnZDJodmJHVmNiaTh2SUhSb2FXNW5JSGRwZEdnZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG1OdmJtTmhkQzRnU1hRZ2FYTWdaM1ZoY21GdWRHVmxaQ0IwYnlCaVpTQnZibXg1SURFdGJHVjJaV3dnWkdWbGNGeHVMeThnWW1WallYVnpaU0JtZFc1amRHbHZibUZzSUdOdmJYQnZibVZ1ZEhNZ1lXeHlaV0ZrZVNCdWIzSnRZV3hwZW1VZ2RHaGxhWElnYjNkdUlHTm9hV3hrY21WdUxseHVablZ1WTNScGIyNGdjMmx0Y0d4bFRtOXliV0ZzYVhwbFEyaHBiR1J5Wlc0Z0tHTm9hV3hrY21WdUtTQjdYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1kyaHBiR1J5Wlc0dWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaGphR2xzWkhKbGJsdHBYU2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJCY25KaGVTNXdjbTkwYjNSNWNHVXVZMjl1WTJGMExtRndjR3g1S0Z0ZExDQmphR2xzWkhKbGJpbGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUdOb2FXeGtjbVZ1WEc1OVhHNWNiaTh2SURJdUlGZG9aVzRnZEdobElHTm9hV3hrY21WdUlHTnZiblJoYVc1eklHTnZibk4wY25WamRITWdkR2hoZENCaGJIZGhlWE1nWjJWdVpYSmhkR1ZrSUc1bGMzUmxaQ0JCY25KaGVYTXNYRzR2THlCbExtY3VJRHgwWlcxd2JHRjBaVDRzSUR4emJHOTBQaXdnZGkxbWIzSXNJRzl5SUhkb1pXNGdkR2hsSUdOb2FXeGtjbVZ1SUdseklIQnliM1pwWkdWa0lHSjVJSFZ6WlhKY2JpOHZJSGRwZEdnZ2FHRnVaQzEzY21sMGRHVnVJSEpsYm1SbGNpQm1kVzVqZEdsdmJuTWdMeUJLVTFndUlFbHVJSE4xWTJnZ1kyRnpaWE1nWVNCbWRXeHNJRzV2Y20xaGJHbDZZWFJwYjI1Y2JpOHZJR2x6SUc1bFpXUmxaQ0IwYnlCallYUmxjaUIwYnlCaGJHd2djRzl6YzJsaWJHVWdkSGx3WlhNZ2IyWWdZMmhwYkdSeVpXNGdkbUZzZFdWekxseHVablZ1WTNScGIyNGdibTl5YldGc2FYcGxRMmhwYkdSeVpXNGdLR05vYVd4a2NtVnVLU0I3WEc0Z0lISmxkSFZ5YmlCcGMxQnlhVzFwZEdsMlpTaGphR2xzWkhKbGJpbGNiaUFnSUNBL0lGdGpjbVZoZEdWVVpYaDBWazV2WkdVb1kyaHBiR1J5Wlc0cFhWeHVJQ0FnSURvZ1FYSnlZWGt1YVhOQmNuSmhlU2hqYUdsc1pISmxiaWxjYmlBZ0lDQWdJRDhnYm05eWJXRnNhWHBsUVhKeVlYbERhR2xzWkhKbGJpaGphR2xzWkhKbGJpbGNiaUFnSUNBZ0lEb2dkVzVrWldacGJtVmtYRzU5WEc1Y2JtWjFibU4wYVc5dUlHbHpWR1Y0ZEU1dlpHVWdLRzV2WkdVcElIdGNiaUFnY21WMGRYSnVJR2x6UkdWbUtHNXZaR1VwSUNZbUlHbHpSR1ZtS0c1dlpHVXVkR1Y0ZENrZ0ppWWdhWE5HWVd4elpTaHViMlJsTG1selEyOXRiV1Z1ZENsY2JuMWNibHh1Wm5WdVkzUnBiMjRnYm05eWJXRnNhWHBsUVhKeVlYbERhR2xzWkhKbGJpQW9ZMmhwYkdSeVpXNHNJRzVsYzNSbFpFbHVaR1Y0S1NCN1hHNGdJSFpoY2lCeVpYTWdQU0JiWFR0Y2JpQWdkbUZ5SUdrc0lHTXNJR3hoYzNSSmJtUmxlQ3dnYkdGemREdGNiaUFnWm05eUlDaHBJRDBnTURzZ2FTQThJR05vYVd4a2NtVnVMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnWXlBOUlHTm9hV3hrY21WdVcybGRPMXh1SUNBZ0lHbG1JQ2hwYzFWdVpHVm1LR01wSUh4OElIUjVjR1Z2WmlCaklEMDlQU0FuWW05dmJHVmhiaWNwSUhzZ1kyOXVkR2x1ZFdVZ2ZWeHVJQ0FnSUd4aGMzUkpibVJsZUNBOUlISmxjeTVzWlc1bmRHZ2dMU0F4TzF4dUlDQWdJR3hoYzNRZ1BTQnlaWE5iYkdGemRFbHVaR1Y0WFR0Y2JpQWdJQ0F2THlBZ2JtVnpkR1ZrWEc0Z0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29ZeWtwSUh0Y2JpQWdJQ0FnSUdsbUlDaGpMbXhsYm1kMGFDQStJREFwSUh0Y2JpQWdJQ0FnSUNBZ1l5QTlJRzV2Y20xaGJHbDZaVUZ5Y21GNVEyaHBiR1J5Wlc0b1l5d2dLQ2h1WlhOMFpXUkpibVJsZUNCOGZDQW5KeWtnS3lCY0lsOWNJaUFySUdrcEtUdGNiaUFnSUNBZ0lDQWdMeThnYldWeVoyVWdZV1JxWVdObGJuUWdkR1Y0ZENCdWIyUmxjMXh1SUNBZ0lDQWdJQ0JwWmlBb2FYTlVaWGgwVG05a1pTaGpXekJkS1NBbUppQnBjMVJsZUhST2IyUmxLR3hoYzNRcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WelcyeGhjM1JKYm1SbGVGMGdQU0JqY21WaGRHVlVaWGgwVms1dlpHVW9iR0Z6ZEM1MFpYaDBJQ3NnS0dOYk1GMHBMblJsZUhRcE8xeHVJQ0FnSUNBZ0lDQWdJR011YzJocFpuUW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYTXVjSFZ6YUM1aGNIQnNlU2h5WlhNc0lHTXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCcFppQW9hWE5RY21sdGFYUnBkbVVvWXlrcElIdGNiaUFnSUNBZ0lHbG1JQ2hwYzFSbGVIUk9iMlJsS0d4aGMzUXBLU0I3WEc0Z0lDQWdJQ0FnSUM4dklHMWxjbWRsSUdGa2FtRmpaVzUwSUhSbGVIUWdibTlrWlhOY2JpQWdJQ0FnSUNBZ0x5OGdkR2hwY3lCcGN5QnVaV05sYzNOaGNua2dabTl5SUZOVFVpQm9lV1J5WVhScGIyNGdZbVZqWVhWelpTQjBaWGgwSUc1dlpHVnpJR0Z5WlZ4dUlDQWdJQ0FnSUNBdkx5QmxjM05sYm5ScFlXeHNlU0J0WlhKblpXUWdkMmhsYmlCeVpXNWtaWEpsWkNCMGJ5QklWRTFNSUhOMGNtbHVaM05jYmlBZ0lDQWdJQ0FnY21WelcyeGhjM1JKYm1SbGVGMGdQU0JqY21WaGRHVlVaWGgwVms1dlpHVW9iR0Z6ZEM1MFpYaDBJQ3NnWXlrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHTWdJVDA5SUNjbktTQjdYRzRnSUNBZ0lDQWdJQzh2SUdOdmJuWmxjblFnY0hKcGJXbDBhWFpsSUhSdklIWnViMlJsWEc0Z0lDQWdJQ0FnSUhKbGN5NXdkWE5vS0dOeVpXRjBaVlJsZUhSV1RtOWtaU2hqS1NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2xtSUNocGMxUmxlSFJPYjJSbEtHTXBJQ1ltSUdselZHVjRkRTV2WkdVb2JHRnpkQ2twSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdiV1Z5WjJVZ1lXUnFZV05sYm5RZ2RHVjRkQ0J1YjJSbGMxeHVJQ0FnSUNBZ0lDQnlaWE5iYkdGemRFbHVaR1Y0WFNBOUlHTnlaV0YwWlZSbGVIUldUbTlrWlNoc1lYTjBMblJsZUhRZ0t5QmpMblJsZUhRcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdaR1ZtWVhWc2RDQnJaWGtnWm05eUlHNWxjM1JsWkNCaGNuSmhlU0JqYUdsc1pISmxiaUFvYkdsclpXeDVJR2RsYm1WeVlYUmxaQ0JpZVNCMkxXWnZjaWxjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHpWSEoxWlNoamFHbHNaSEpsYmk1ZmFYTldUR2x6ZENrZ0ppWmNiaUFnSUNBZ0lDQWdJQ0JwYzBSbFppaGpMblJoWnlrZ0ppWmNiaUFnSUNBZ0lDQWdJQ0JwYzFWdVpHVm1LR011YTJWNUtTQW1KbHh1SUNBZ0lDQWdJQ0FnSUdselJHVm1LRzVsYzNSbFpFbHVaR1Y0S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR011YTJWNUlEMGdYQ0pmWDNac2FYTjBYQ0lnS3lCdVpYTjBaV1JKYm1SbGVDQXJJRndpWDF3aUlDc2dhU0FySUZ3aVgxOWNJanRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYTXVjSFZ6YUNoaktUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGMxeHVmVnh1WEc0dktpQWdLaTljYmx4dVpuVnVZM1JwYjI0Z1pXNXpkWEpsUTNSdmNpQW9ZMjl0Y0N3Z1ltRnpaU2tnZTF4dUlDQnBaaUFvWEc0Z0lDQWdZMjl0Y0M1ZlgyVnpUVzlrZFd4bElIeDhYRzRnSUNBZ0tHaGhjMU41YldKdmJDQW1KaUJqYjIxd1cxTjViV0p2YkM1MGIxTjBjbWx1WjFSaFoxMGdQVDA5SUNkTmIyUjFiR1VuS1Z4dUlDQXBJSHRjYmlBZ0lDQmpiMjF3SUQwZ1kyOXRjQzVrWldaaGRXeDBPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQnBjMDlpYW1WamRDaGpiMjF3S1Z4dUlDQWdJRDhnWW1GelpTNWxlSFJsYm1Rb1kyOXRjQ2xjYmlBZ0lDQTZJR052YlhCY2JuMWNibHh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxRWE41Ym1OUWJHRmpaV2h2YkdSbGNpQW9YRzRnSUdaaFkzUnZjbmtzWEc0Z0lHUmhkR0VzWEc0Z0lHTnZiblJsZUhRc1hHNGdJR05vYVd4a2NtVnVMRnh1SUNCMFlXZGNiaWtnZTF4dUlDQjJZWElnYm05a1pTQTlJR055WldGMFpVVnRjSFI1Vms1dlpHVW9LVHRjYmlBZ2JtOWtaUzVoYzNsdVkwWmhZM1J2Y25rZ1BTQm1ZV04wYjNKNU8xeHVJQ0J1YjJSbExtRnplVzVqVFdWMFlTQTlJSHNnWkdGMFlUb2daR0YwWVN3Z1kyOXVkR1Y0ZERvZ1kyOXVkR1Y0ZEN3Z1kyaHBiR1J5Wlc0NklHTm9hV3hrY21WdUxDQjBZV2M2SUhSaFp5QjlPMXh1SUNCeVpYUjFjbTRnYm05a1pWeHVmVnh1WEc1bWRXNWpkR2x2YmlCeVpYTnZiSFpsUVhONWJtTkRiMjF3YjI1bGJuUWdLRnh1SUNCbVlXTjBiM0o1TEZ4dUlDQmlZWE5sUTNSdmNpeGNiaUFnWTI5dWRHVjRkRnh1S1NCN1hHNGdJR2xtSUNocGMxUnlkV1VvWm1GamRHOXllUzVsY25KdmNpa2dKaVlnYVhORVpXWW9abUZqZEc5eWVTNWxjbkp2Y2tOdmJYQXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmhZM1J2Y25rdVpYSnliM0pEYjIxd1hHNGdJSDFjYmx4dUlDQnBaaUFvYVhORVpXWW9abUZqZEc5eWVTNXlaWE52YkhabFpDa3BJSHRjYmlBZ0lDQnlaWFIxY200Z1ptRmpkRzl5ZVM1eVpYTnZiSFpsWkZ4dUlDQjlYRzVjYmlBZ2FXWWdLR2x6VkhKMVpTaG1ZV04wYjNKNUxteHZZV1JwYm1jcElDWW1JR2x6UkdWbUtHWmhZM1J2Y25rdWJHOWhaR2x1WjBOdmJYQXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmhZM1J2Y25rdWJHOWhaR2x1WjBOdmJYQmNiaUFnZlZ4dVhHNGdJR2xtSUNocGMwUmxaaWhtWVdOMGIzSjVMbU52Ym5SbGVIUnpLU2tnZTF4dUlDQWdJQzh2SUdGc2NtVmhaSGtnY0dWdVpHbHVaMXh1SUNBZ0lHWmhZM1J2Y25rdVkyOXVkR1Y0ZEhNdWNIVnphQ2hqYjI1MFpYaDBLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IyWVhJZ1kyOXVkR1Y0ZEhNZ1BTQm1ZV04wYjNKNUxtTnZiblJsZUhSeklEMGdXMk52Ym5SbGVIUmRPMXh1SUNBZ0lIWmhjaUJ6ZVc1aklEMGdkSEoxWlR0Y2JseHVJQ0FnSUhaaGNpQm1iM0pqWlZKbGJtUmxjaUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCc0lEMGdZMjl1ZEdWNGRITXViR1Z1WjNSb095QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuUmxlSFJ6VzJsZExpUm1iM0pqWlZWd1pHRjBaU2dwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0IyWVhJZ2NtVnpiMngyWlNBOUlHOXVZMlVvWm5WdVkzUnBiMjRnS0hKbGN5a2dlMXh1SUNBZ0lDQWdMeThnWTJGamFHVWdjbVZ6YjJ4MlpXUmNiaUFnSUNBZ0lHWmhZM1J2Y25rdWNtVnpiMngyWldRZ1BTQmxibk4xY21WRGRHOXlLSEpsY3l3Z1ltRnpaVU4wYjNJcE8xeHVJQ0FnSUNBZ0x5OGdhVzUyYjJ0bElHTmhiR3hpWVdOcmN5QnZibXg1SUdsbUlIUm9hWE1nYVhNZ2JtOTBJR0VnYzNsdVkyaHliMjV2ZFhNZ2NtVnpiMngyWlZ4dUlDQWdJQ0FnTHk4Z0tHRnplVzVqSUhKbGMyOXNkbVZ6SUdGeVpTQnphR2x0YldWa0lHRnpJSE41Ym1Ob2NtOXViM1Z6SUdSMWNtbHVaeUJUVTFJcFhHNGdJQ0FnSUNCcFppQW9JWE41Ym1NcElIdGNiaUFnSUNBZ0lDQWdabTl5WTJWU1pXNWtaWElvS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUhaaGNpQnlaV3BsWTNRZ1BTQnZibU5sS0daMWJtTjBhVzl1SUNoeVpXRnpiMjRwSUh0Y2JpQWdJQ0FnSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ0ppWWdkMkZ5YmloY2JpQWdJQ0FnSUNBZ1hDSkdZV2xzWldRZ2RHOGdjbVZ6YjJ4MlpTQmhjM2x1WXlCamIyMXdiMjVsYm5RNklGd2lJQ3NnS0ZOMGNtbHVaeWhtWVdOMGIzSjVLU2tnSzF4dUlDQWdJQ0FnSUNBb2NtVmhjMjl1SUQ4Z0tGd2lYRnh1VW1WaGMyOXVPaUJjSWlBcklISmxZWE52YmlrZ09pQW5KeWxjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0JwWmlBb2FYTkVaV1lvWm1GamRHOXllUzVsY25KdmNrTnZiWEFwS1NCN1hHNGdJQ0FnSUNBZ0lHWmhZM1J2Y25rdVpYSnliM0lnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0JtYjNKalpWSmxibVJsY2lncE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ2RtRnlJSEpsY3lBOUlHWmhZM1J2Y25rb2NtVnpiMngyWlN3Z2NtVnFaV04wS1R0Y2JseHVJQ0FnSUdsbUlDaHBjMDlpYW1WamRDaHlaWE1wS1NCN1hHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlISmxjeTUwYUdWdUlEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJQ2dwSUQwK0lGQnliMjFwYzJWY2JpQWdJQ0FnSUNBZ2FXWWdLR2x6Vlc1a1pXWW9abUZqZEc5eWVTNXlaWE52YkhabFpDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTXVkR2hsYmloeVpYTnZiSFpsTENCeVpXcGxZM1FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHbHpSR1ZtS0hKbGN5NWpiMjF3YjI1bGJuUXBJQ1ltSUhSNWNHVnZaaUJ5WlhNdVkyOXRjRzl1Wlc1MExuUm9aVzRnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnY21WekxtTnZiWEJ2Ym1WdWRDNTBhR1Z1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtISmxjeTVsY25KdmNpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCbVlXTjBiM0o1TG1WeWNtOXlRMjl0Y0NBOUlHVnVjM1Z5WlVOMGIzSW9jbVZ6TG1WeWNtOXlMQ0JpWVhObFEzUnZjaWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvYVhORVpXWW9jbVZ6TG14dllXUnBibWNwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdabUZqZEc5eWVTNXNiMkZrYVc1blEyOXRjQ0E5SUdWdWMzVnlaVU4wYjNJb2NtVnpMbXh2WVdScGJtY3NJR0poYzJWRGRHOXlLVHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jbVZ6TG1SbGJHRjVJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbVlXTjBiM0o1TG14dllXUnBibWNnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHpWVzVrWldZb1ptRmpkRzl5ZVM1eVpYTnZiSFpsWkNrZ0ppWWdhWE5WYm1SbFppaG1ZV04wYjNKNUxtVnljbTl5S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWmhZM1J2Y25rdWJHOWhaR2x1WnlBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eVkyVlNaVzVrWlhJb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z2NtVnpMbVJsYkdGNUlIeDhJREl3TUNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtISmxjeTUwYVcxbGIzVjBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lITmxkRlJwYldWdmRYUW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dselZXNWtaV1lvWm1GamRHOXllUzV5WlhOdmJIWmxaQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4Z0tGd2lkR2x0Wlc5MWRDQW9YQ0lnS3lBb2NtVnpMblJwYldWdmRYUXBJQ3NnWENKdGN5bGNJaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2JuVnNiRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDBzSUhKbGN5NTBhVzFsYjNWMEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lITjVibU1nUFNCbVlXeHpaVHRjYmlBZ0lDQXZMeUJ5WlhSMWNtNGdhVzRnWTJGelpTQnlaWE52YkhabFpDQnplVzVqYUhKdmJtOTFjMng1WEc0Z0lDQWdjbVYwZFhKdUlHWmhZM1J2Y25rdWJHOWhaR2x1WjF4dUlDQWdJQ0FnUHlCbVlXTjBiM0o1TG14dllXUnBibWREYjIxd1hHNGdJQ0FnSUNBNklHWmhZM1J2Y25rdWNtVnpiMngyWldSY2JpQWdmVnh1ZlZ4dVhHNHZLaUFnS2k5Y2JseHVablZ1WTNScGIyNGdhWE5CYzNsdVkxQnNZV05sYUc5c1pHVnlJQ2h1YjJSbEtTQjdYRzRnSUhKbGRIVnliaUJ1YjJSbExtbHpRMjl0YldWdWRDQW1KaUJ1YjJSbExtRnplVzVqUm1GamRHOXllVnh1ZlZ4dVhHNHZLaUFnS2k5Y2JseHVablZ1WTNScGIyNGdaMlYwUm1seWMzUkRiMjF3YjI1bGJuUkRhR2xzWkNBb1kyaHBiR1J5Wlc0cElIdGNiaUFnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvWTJocGJHUnlaVzRwS1NCN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCamFHbHNaSEpsYmk1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdkbUZ5SUdNZ1BTQmphR2xzWkhKbGJsdHBYVHRjYmlBZ0lDQWdJR2xtSUNocGMwUmxaaWhqS1NBbUppQW9hWE5FWldZb1l5NWpiMjF3YjI1bGJuUlBjSFJwYjI1ektTQjhmQ0JwYzBGemVXNWpVR3hoWTJWb2IyeGtaWElvWXlrcEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNiaThxSUNBcUwxeHVYRzR2S2lBZ0tpOWNibHh1Wm5WdVkzUnBiMjRnYVc1cGRFVjJaVzUwY3lBb2RtMHBJSHRjYmlBZ2RtMHVYMlYyWlc1MGN5QTlJRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2s3WEc0Z0lIWnRMbDlvWVhOSWIyOXJSWFpsYm5RZ1BTQm1ZV3h6WlR0Y2JpQWdMeThnYVc1cGRDQndZWEpsYm5RZ1lYUjBZV05vWldRZ1pYWmxiblJ6WEc0Z0lIWmhjaUJzYVhOMFpXNWxjbk1nUFNCMmJTNGtiM0IwYVc5dWN5NWZjR0Z5Wlc1MFRHbHpkR1Z1WlhKek8xeHVJQ0JwWmlBb2JHbHpkR1Z1WlhKektTQjdYRzRnSUNBZ2RYQmtZWFJsUTI5dGNHOXVaVzUwVEdsemRHVnVaWEp6S0hadExDQnNhWE4wWlc1bGNuTXBPMXh1SUNCOVhHNTlYRzVjYm5aaGNpQjBZWEpuWlhRN1hHNWNibVoxYm1OMGFXOXVJR0ZrWkNBb1pYWmxiblFzSUdadUxDQnZibU5sS1NCN1hHNGdJR2xtSUNodmJtTmxLU0I3WEc0Z0lDQWdkR0Z5WjJWMExpUnZibU5sS0dWMlpXNTBMQ0JtYmlrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2RHRnlaMlYwTGlSdmJpaGxkbVZ1ZEN3Z1ptNHBPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbGJXOTJaU1F4SUNobGRtVnVkQ3dnWm00cElIdGNiaUFnZEdGeVoyVjBMaVJ2Wm1Zb1pYWmxiblFzSUdadUtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2RYQmtZWFJsUTI5dGNHOXVaVzUwVEdsemRHVnVaWEp6SUNoY2JpQWdkbTBzWEc0Z0lHeHBjM1JsYm1WeWN5eGNiaUFnYjJ4a1RHbHpkR1Z1WlhKelhHNHBJSHRjYmlBZ2RHRnlaMlYwSUQwZ2RtMDdYRzRnSUhWd1pHRjBaVXhwYzNSbGJtVnljeWhzYVhOMFpXNWxjbk1zSUc5c1pFeHBjM1JsYm1WeWN5QjhmQ0I3ZlN3Z1lXUmtMQ0J5WlcxdmRtVWtNU3dnZG0wcE8xeHVJQ0IwWVhKblpYUWdQU0IxYm1SbFptbHVaV1E3WEc1OVhHNWNibVoxYm1OMGFXOXVJR1YyWlc1MGMwMXBlR2x1SUNoV2RXVXBJSHRjYmlBZ2RtRnlJR2h2YjJ0U1JTQTlJQzllYUc5dmF6b3ZPMXh1SUNCV2RXVXVjSEp2ZEc5MGVYQmxMaVJ2YmlBOUlHWjFibU4wYVc5dUlDaGxkbVZ1ZEN3Z1ptNHBJSHRjYmlBZ0lDQjJZWElnZEdocGN5UXhJRDBnZEdocGN6dGNibHh1SUNBZ0lIWmhjaUIyYlNBOUlIUm9hWE03WEc0Z0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29aWFpsYm5RcEtTQjdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JDQTlJR1YyWlc1MExteGxibWQwYURzZ2FTQThJR3c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekpERXVKRzl1S0dWMlpXNTBXMmxkTENCbWJpazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNoMmJTNWZaWFpsYm5SelcyVjJaVzUwWFNCOGZDQW9kbTB1WDJWMlpXNTBjMXRsZG1WdWRGMGdQU0JiWFNrcExuQjFjMmdvWm00cE8xeHVJQ0FnSUNBZ0x5OGdiM0IwYVcxcGVtVWdhRzl2YXpwbGRtVnVkQ0JqYjNOMElHSjVJSFZ6YVc1bklHRWdZbTl2YkdWaGJpQm1iR0ZuSUcxaGNtdGxaQ0JoZENCeVpXZHBjM1J5WVhScGIyNWNiaUFnSUNBZ0lDOHZJR2x1YzNSbFlXUWdiMllnWVNCb1lYTm9JR3h2YjJ0MWNGeHVJQ0FnSUNBZ2FXWWdLR2h2YjJ0U1JTNTBaWE4wS0dWMlpXNTBLU2tnZTF4dUlDQWdJQ0FnSUNCMmJTNWZhR0Z6U0c5dmEwVjJaVzUwSUQwZ2RISjFaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhadFhHNGdJSDA3WEc1Y2JpQWdWblZsTG5CeWIzUnZkSGx3WlM0a2IyNWpaU0E5SUdaMWJtTjBhVzl1SUNobGRtVnVkQ3dnWm00cElIdGNiaUFnSUNCMllYSWdkbTBnUFNCMGFHbHpPMXh1SUNBZ0lHWjFibU4wYVc5dUlHOXVJQ2dwSUh0Y2JpQWdJQ0FnSUhadExpUnZabVlvWlhabGJuUXNJRzl1S1R0Y2JpQWdJQ0FnSUdadUxtRndjR3g1S0hadExDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lIMWNiaUFnSUNCdmJpNW1iaUE5SUdadU8xeHVJQ0FnSUhadExpUnZiaWhsZG1WdWRDd2diMjRwTzF4dUlDQWdJSEpsZEhWeWJpQjJiVnh1SUNCOU8xeHVYRzRnSUZaMVpTNXdjbTkwYjNSNWNHVXVKRzltWmlBOUlHWjFibU4wYVc5dUlDaGxkbVZ1ZEN3Z1ptNHBJSHRjYmlBZ0lDQjJZWElnZEdocGN5UXhJRDBnZEdocGN6dGNibHh1SUNBZ0lIWmhjaUIyYlNBOUlIUm9hWE03WEc0Z0lDQWdMeThnWVd4c1hHNGdJQ0FnYVdZZ0tDRmhjbWQxYldWdWRITXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQjJiUzVmWlhabGJuUnpJRDBnVDJKcVpXTjBMbU55WldGMFpTaHVkV3hzS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUIyYlZ4dUlDQWdJSDFjYmlBZ0lDQXZMeUJoY25KaGVTQnZaaUJsZG1WdWRITmNiaUFnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNobGRtVnVkQ2twSUh0Y2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JzSUQwZ1pYWmxiblF1YkdWdVozUm9PeUJwSUR3Z2JEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE1rTVM0a2IyWm1LR1YyWlc1MFcybGRMQ0JtYmlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnZG0xY2JpQWdJQ0I5WEc0Z0lDQWdMeThnYzNCbFkybG1hV01nWlhabGJuUmNiaUFnSUNCMllYSWdZMkp6SUQwZ2RtMHVYMlYyWlc1MGMxdGxkbVZ1ZEYwN1hHNGdJQ0FnYVdZZ0tDRmpZbk1wSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIyYlZ4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvSVdadUtTQjdYRzRnSUNBZ0lDQjJiUzVmWlhabGJuUnpXMlYyWlc1MFhTQTlJRzUxYkd3N1hHNGdJQ0FnSUNCeVpYUjFjbTRnZG0xY2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0dadUtTQjdYRzRnSUNBZ0lDQXZMeUJ6Y0dWamFXWnBZeUJvWVc1a2JHVnlYRzRnSUNBZ0lDQjJZWElnWTJJN1hHNGdJQ0FnSUNCMllYSWdhU1F4SUQwZ1kySnpMbXhsYm1kMGFEdGNiaUFnSUNBZ0lIZG9hV3hsSUNocEpERXRMU2tnZTF4dUlDQWdJQ0FnSUNCallpQTlJR05pYzF0cEpERmRPMXh1SUNBZ0lDQWdJQ0JwWmlBb1kySWdQVDA5SUdadUlIeDhJR05pTG1adUlEMDlQU0JtYmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR05pY3k1emNHeHBZMlVvYVNReExDQXhLVHRjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMmJWeHVJQ0I5TzF4dVhHNGdJRloxWlM1d2NtOTBiM1I1Y0dVdUpHVnRhWFFnUFNCbWRXNWpkR2x2YmlBb1pYWmxiblFwSUh0Y2JpQWdJQ0IyWVhJZ2RtMGdQU0IwYUdsek8xeHVJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0IyWVhJZ2JHOTNaWEpEWVhObFJYWmxiblFnUFNCbGRtVnVkQzUwYjB4dmQyVnlRMkZ6WlNncE8xeHVJQ0FnSUNBZ2FXWWdLR3h2ZDJWeVEyRnpaVVYyWlc1MElDRTlQU0JsZG1WdWRDQW1KaUIyYlM1ZlpYWmxiblJ6VzJ4dmQyVnlRMkZ6WlVWMlpXNTBYU2tnZTF4dUlDQWdJQ0FnSUNCMGFYQW9YRzRnSUNBZ0lDQWdJQ0FnWENKRmRtVnVkQ0JjWEZ3aVhDSWdLeUJzYjNkbGNrTmhjMlZGZG1WdWRDQXJJRndpWEZ4Y0lpQnBjeUJsYldsMGRHVmtJR2x1SUdOdmJYQnZibVZ1ZENCY0lpQXJYRzRnSUNBZ0lDQWdJQ0FnS0dadmNtMWhkRU52YlhCdmJtVnVkRTVoYldVb2RtMHBLU0FySUZ3aUlHSjFkQ0IwYUdVZ2FHRnVaR3hsY2lCcGN5QnlaV2RwYzNSbGNtVmtJR1p2Y2lCY1hGd2lYQ0lnS3lCbGRtVnVkQ0FySUZ3aVhGeGNJaTRnWENJZ0sxeHVJQ0FnSUNBZ0lDQWdJRndpVG05MFpTQjBhR0YwSUVoVVRVd2dZWFIwY21saWRYUmxjeUJoY21VZ1kyRnpaUzFwYm5ObGJuTnBkR2wyWlNCaGJtUWdlVzkxSUdOaGJtNXZkQ0IxYzJVZ1hDSWdLMXh1SUNBZ0lDQWdJQ0FnSUZ3aWRpMXZiaUIwYnlCc2FYTjBaVzRnZEc4Z1kyRnRaV3hEWVhObElHVjJaVzUwY3lCM2FHVnVJSFZ6YVc1bklHbHVMVVJQVFNCMFpXMXdiR0YwWlhNdUlGd2lJQ3RjYmlBZ0lDQWdJQ0FnSUNCY0lsbHZkU0J6YUc5MWJHUWdjSEp2WW1GaWJIa2dkWE5sSUZ4Y1hDSmNJaUFySUNob2VYQm9aVzVoZEdVb1pYWmxiblFwS1NBcklGd2lYRnhjSWlCcGJuTjBaV0ZrSUc5bUlGeGNYQ0pjSWlBcklHVjJaVzUwSUNzZ1hDSmNYRndpTGx3aVhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQmpZbk1nUFNCMmJTNWZaWFpsYm5SelcyVjJaVzUwWFR0Y2JpQWdJQ0JwWmlBb1kySnpLU0I3WEc0Z0lDQWdJQ0JqWW5NZ1BTQmpZbk11YkdWdVozUm9JRDRnTVNBL0lIUnZRWEp5WVhrb1kySnpLU0E2SUdOaWN6dGNiaUFnSUNBZ0lIWmhjaUJoY21keklEMGdkRzlCY25KaGVTaGhjbWQxYldWdWRITXNJREVwTzF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQXNJR3dnUFNCalluTXViR1Z1WjNSb095QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnWTJKelcybGRMbUZ3Y0d4NUtIWnRMQ0JoY21kektUdGNiaUFnSUNBZ0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHaGhibVJzWlVWeWNtOXlLR1VzSUhadExDQW9YQ0psZG1WdWRDQm9ZVzVrYkdWeUlHWnZjaUJjWEZ3aVhDSWdLeUJsZG1WdWRDQXJJRndpWEZ4Y0lsd2lLU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIWnRYRzRnSUgwN1hHNTlYRzVjYmk4cUlDQXFMMXh1WEc1Y2JseHVMeW9xWEc0Z0tpQlNkVzUwYVcxbElHaGxiSEJsY2lCbWIzSWdjbVZ6YjJ4MmFXNW5JSEpoZHlCamFHbHNaSEpsYmlCV1RtOWtaWE1nYVc1MGJ5QmhJSE5zYjNRZ2IySnFaV04wTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJ5WlhOdmJIWmxVMnh2ZEhNZ0tGeHVJQ0JqYUdsc1pISmxiaXhjYmlBZ1kyOXVkR1Y0ZEZ4dUtTQjdYRzRnSUhaaGNpQnpiRzkwY3lBOUlIdDlPMXh1SUNCcFppQW9JV05vYVd4a2NtVnVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlITnNiM1J6WEc0Z0lIMWNiaUFnWm05eUlDaDJZWElnYVNBOUlEQXNJR3dnUFNCamFHbHNaSEpsYmk1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwS3lzcElIdGNiaUFnSUNCMllYSWdZMmhwYkdRZ1BTQmphR2xzWkhKbGJsdHBYVHRjYmlBZ0lDQjJZWElnWkdGMFlTQTlJR05vYVd4a0xtUmhkR0U3WEc0Z0lDQWdMeThnY21WdGIzWmxJSE5zYjNRZ1lYUjBjbWxpZFhSbElHbG1JSFJvWlNCdWIyUmxJR2x6SUhKbGMyOXNkbVZrSUdGeklHRWdWblZsSUhOc2IzUWdibTlrWlZ4dUlDQWdJR2xtSUNoa1lYUmhJQ1ltSUdSaGRHRXVZWFIwY25NZ0ppWWdaR0YwWVM1aGRIUnljeTV6Ykc5MEtTQjdYRzRnSUNBZ0lDQmtaV3hsZEdVZ1pHRjBZUzVoZEhSeWN5NXpiRzkwTzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJ1WVcxbFpDQnpiRzkwY3lCemFHOTFiR1FnYjI1c2VTQmlaU0J5WlhOd1pXTjBaV1FnYVdZZ2RHaGxJSFp1YjJSbElIZGhjeUJ5Wlc1a1pYSmxaQ0JwYmlCMGFHVmNiaUFnSUNBdkx5QnpZVzFsSUdOdmJuUmxlSFF1WEc0Z0lDQWdhV1lnS0NoamFHbHNaQzVqYjI1MFpYaDBJRDA5UFNCamIyNTBaWGgwSUh4OElHTm9hV3hrTG1adVEyOXVkR1Y0ZENBOVBUMGdZMjl1ZEdWNGRDa2dKaVpjYmlBZ0lDQWdJR1JoZEdFZ0ppWWdaR0YwWVM1emJHOTBJQ0U5SUc1MWJHeGNiaUFnSUNBcElIdGNiaUFnSUNBZ0lIWmhjaUJ1WVcxbElEMGdaR0YwWVM1emJHOTBPMXh1SUNBZ0lDQWdkbUZ5SUhOc2IzUWdQU0FvYzJ4dmRITmJibUZ0WlYwZ2ZId2dLSE5zYjNSelcyNWhiV1ZkSUQwZ1cxMHBLVHRjYmlBZ0lDQWdJR2xtSUNoamFHbHNaQzUwWVdjZ1BUMDlJQ2QwWlcxd2JHRjBaU2NwSUh0Y2JpQWdJQ0FnSUNBZ2MyeHZkQzV3ZFhOb0xtRndjR3g1S0hOc2IzUXNJR05vYVd4a0xtTm9hV3hrY21WdUlIeDhJRnRkS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhOc2IzUXVjSFZ6YUNoamFHbHNaQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDaHpiRzkwY3k1a1pXWmhkV3gwSUh4OElDaHpiRzkwY3k1a1pXWmhkV3gwSUQwZ1cxMHBLUzV3ZFhOb0tHTm9hV3hrS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnTHk4Z2FXZHViM0psSUhOc2IzUnpJSFJvWVhRZ1kyOXVkR0ZwYm5NZ2IyNXNlU0IzYUdsMFpYTndZV05sWEc0Z0lHWnZjaUFvZG1GeUlHNWhiV1VrTVNCcGJpQnpiRzkwY3lrZ2UxeHVJQ0FnSUdsbUlDaHpiRzkwYzF0dVlXMWxKREZkTG1WMlpYSjVLR2x6VjJocGRHVnpjR0ZqWlNrcElIdGNiaUFnSUNBZ0lHUmxiR1YwWlNCemJHOTBjMXR1WVcxbEpERmRPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z2MyeHZkSE5jYm4xY2JseHVablZ1WTNScGIyNGdhWE5YYUdsMFpYTndZV05sSUNodWIyUmxLU0I3WEc0Z0lISmxkSFZ5YmlBb2JtOWtaUzVwYzBOdmJXMWxiblFnSmlZZ0lXNXZaR1V1WVhONWJtTkdZV04wYjNKNUtTQjhmQ0J1YjJSbExuUmxlSFFnUFQwOUlDY2dKMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnlaWE52YkhabFUyTnZjR1ZrVTJ4dmRITWdLRnh1SUNCbWJuTXNJQzh2SUhObFpTQm1iRzkzTDNadWIyUmxYRzRnSUhKbGMxeHVLU0I3WEc0Z0lISmxjeUE5SUhKbGN5QjhmQ0I3ZlR0Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JtYm5NdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaG1ibk5iYVYwcEtTQjdYRzRnSUNBZ0lDQnlaWE52YkhabFUyTnZjR1ZrVTJ4dmRITW9abTV6VzJsZExDQnlaWE1wTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaWE5iWm01elcybGRMbXRsZVYwZ1BTQm1ibk5iYVYwdVptNDdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCeVpYTmNibjFjYmx4dUx5b2dJQ292WEc1Y2JuWmhjaUJoWTNScGRtVkpibk4wWVc1alpTQTlJRzUxYkd3N1hHNTJZWElnYVhOVmNHUmhkR2x1WjBOb2FXeGtRMjl0Y0c5dVpXNTBJRDBnWm1Gc2MyVTdYRzVjYm1aMWJtTjBhVzl1SUdsdWFYUk1hV1psWTNsamJHVWdLSFp0S1NCN1hHNGdJSFpoY2lCdmNIUnBiMjV6SUQwZ2RtMHVKRzl3ZEdsdmJuTTdYRzVjYmlBZ0x5OGdiRzlqWVhSbElHWnBjbk4wSUc1dmJpMWhZbk4wY21GamRDQndZWEpsYm5SY2JpQWdkbUZ5SUhCaGNtVnVkQ0E5SUc5d2RHbHZibk11Y0dGeVpXNTBPMXh1SUNCcFppQW9jR0Z5Wlc1MElDWW1JQ0Z2Y0hScGIyNXpMbUZpYzNSeVlXTjBLU0I3WEc0Z0lDQWdkMmhwYkdVZ0tIQmhjbVZ1ZEM0a2IzQjBhVzl1Y3k1aFluTjBjbUZqZENBbUppQndZWEpsYm5RdUpIQmhjbVZ1ZENrZ2UxeHVJQ0FnSUNBZ2NHRnlaVzUwSUQwZ2NHRnlaVzUwTGlSd1lYSmxiblE3WEc0Z0lDQWdmVnh1SUNBZ0lIQmhjbVZ1ZEM0a1kyaHBiR1J5Wlc0dWNIVnphQ2gyYlNrN1hHNGdJSDFjYmx4dUlDQjJiUzRrY0dGeVpXNTBJRDBnY0dGeVpXNTBPMXh1SUNCMmJTNGtjbTl2ZENBOUlIQmhjbVZ1ZENBL0lIQmhjbVZ1ZEM0a2NtOXZkQ0E2SUhadE8xeHVYRzRnSUhadExpUmphR2xzWkhKbGJpQTlJRnRkTzF4dUlDQjJiUzRrY21WbWN5QTlJSHQ5TzF4dVhHNGdJSFp0TGw5M1lYUmphR1Z5SUQwZ2JuVnNiRHRjYmlBZ2RtMHVYMmx1WVdOMGFYWmxJRDBnYm5Wc2JEdGNiaUFnZG0wdVgyUnBjbVZqZEVsdVlXTjBhWFpsSUQwZ1ptRnNjMlU3WEc0Z0lIWnRMbDlwYzAxdmRXNTBaV1FnUFNCbVlXeHpaVHRjYmlBZ2RtMHVYMmx6UkdWemRISnZlV1ZrSUQwZ1ptRnNjMlU3WEc0Z0lIWnRMbDlwYzBKbGFXNW5SR1Z6ZEhKdmVXVmtJRDBnWm1Gc2MyVTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHeHBabVZqZVdOc1pVMXBlR2x1SUNoV2RXVXBJSHRjYmlBZ1ZuVmxMbkJ5YjNSdmRIbHdaUzVmZFhCa1lYUmxJRDBnWm5WdVkzUnBiMjRnS0hadWIyUmxMQ0JvZVdSeVlYUnBibWNwSUh0Y2JpQWdJQ0IyWVhJZ2RtMGdQU0IwYUdsek8xeHVJQ0FnSUdsbUlDaDJiUzVmYVhOTmIzVnVkR1ZrS1NCN1hHNGdJQ0FnSUNCallXeHNTRzl2YXloMmJTd2dKMkpsWm05eVpWVndaR0YwWlNjcE8xeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ2NISmxka1ZzSUQwZ2RtMHVKR1ZzTzF4dUlDQWdJSFpoY2lCd2NtVjJWbTV2WkdVZ1BTQjJiUzVmZG01dlpHVTdYRzRnSUNBZ2RtRnlJSEJ5WlhaQlkzUnBkbVZKYm5OMFlXNWpaU0E5SUdGamRHbDJaVWx1YzNSaGJtTmxPMXh1SUNBZ0lHRmpkR2wyWlVsdWMzUmhibU5sSUQwZ2RtMDdYRzRnSUNBZ2RtMHVYM1p1YjJSbElEMGdkbTV2WkdVN1hHNGdJQ0FnTHk4Z1ZuVmxMbkJ5YjNSdmRIbHdaUzVmWDNCaGRHTm9YMThnYVhNZ2FXNXFaV04wWldRZ2FXNGdaVzUwY25rZ2NHOXBiblJ6WEc0Z0lDQWdMeThnWW1GelpXUWdiMjRnZEdobElISmxibVJsY21sdVp5QmlZV05yWlc1a0lIVnpaV1F1WEc0Z0lDQWdhV1lnS0NGd2NtVjJWbTV2WkdVcElIdGNiaUFnSUNBZ0lDOHZJR2x1YVhScFlXd2djbVZ1WkdWeVhHNGdJQ0FnSUNCMmJTNGtaV3dnUFNCMmJTNWZYM0JoZEdOb1gxOG9YRzRnSUNBZ0lDQWdJSFp0TGlSbGJDd2dkbTV2WkdVc0lHaDVaSEpoZEdsdVp5d2dabUZzYzJVZ0x5b2djbVZ0YjNabFQyNXNlU0FxTHl4Y2JpQWdJQ0FnSUNBZ2RtMHVKRzl3ZEdsdmJuTXVYM0JoY21WdWRFVnNiU3hjYmlBZ0lDQWdJQ0FnZG0wdUpHOXdkR2x2Ym5NdVgzSmxaa1ZzYlZ4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUM4dklHNXZJRzVsWldRZ1ptOXlJSFJvWlNCeVpXWWdibTlrWlhNZ1lXWjBaWElnYVc1cGRHbGhiQ0J3WVhSamFGeHVJQ0FnSUNBZ0x5OGdkR2hwY3lCd2NtVjJaVzUwY3lCclpXVndhVzVuSUdFZ1pHVjBZV05vWldRZ1JFOU5JSFJ5WldVZ2FXNGdiV1Z0YjNKNUlDZ2pOVGcxTVNsY2JpQWdJQ0FnSUhadExpUnZjSFJwYjI1ekxsOXdZWEpsYm5SRmJHMGdQU0IyYlM0a2IzQjBhVzl1Y3k1ZmNtVm1SV3h0SUQwZ2JuVnNiRHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0x5OGdkWEJrWVhSbGMxeHVJQ0FnSUNBZ2RtMHVKR1ZzSUQwZ2RtMHVYMTl3WVhSamFGOWZLSEJ5WlhaV2JtOWtaU3dnZG01dlpHVXBPMXh1SUNBZ0lIMWNiaUFnSUNCaFkzUnBkbVZKYm5OMFlXNWpaU0E5SUhCeVpYWkJZM1JwZG1WSmJuTjBZVzVqWlR0Y2JpQWdJQ0F2THlCMWNHUmhkR1VnWDE5MmRXVmZYeUJ5WldabGNtVnVZMlZjYmlBZ0lDQnBaaUFvY0hKbGRrVnNLU0I3WEc0Z0lDQWdJQ0J3Y21WMlJXd3VYMTkyZFdWZlh5QTlJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoMmJTNGtaV3dwSUh0Y2JpQWdJQ0FnSUhadExpUmxiQzVmWDNaMVpWOWZJRDBnZG0wN1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUdsbUlIQmhjbVZ1ZENCcGN5QmhiaUJJVDBNc0lIVndaR0YwWlNCcGRITWdKR1ZzSUdGeklIZGxiR3hjYmlBZ0lDQnBaaUFvZG0wdUpIWnViMlJsSUNZbUlIWnRMaVJ3WVhKbGJuUWdKaVlnZG0wdUpIWnViMlJsSUQwOVBTQjJiUzRrY0dGeVpXNTBMbDkyYm05a1pTa2dlMXh1SUNBZ0lDQWdkbTB1SkhCaGNtVnVkQzRrWld3Z1BTQjJiUzRrWld3N1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUhWd1pHRjBaV1FnYUc5dmF5QnBjeUJqWVd4c1pXUWdZbmtnZEdobElITmphR1ZrZFd4bGNpQjBieUJsYm5OMWNtVWdkR2hoZENCamFHbHNaSEpsYmlCaGNtVmNiaUFnSUNBdkx5QjFjR1JoZEdWa0lHbHVJR0VnY0dGeVpXNTBKM01nZFhCa1lYUmxaQ0JvYjI5ckxseHVJQ0I5TzF4dVhHNGdJRloxWlM1d2NtOTBiM1I1Y0dVdUpHWnZjbU5sVlhCa1lYUmxJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUhaaGNpQjJiU0E5SUhSb2FYTTdYRzRnSUNBZ2FXWWdLSFp0TGw5M1lYUmphR1Z5S1NCN1hHNGdJQ0FnSUNCMmJTNWZkMkYwWTJobGNpNTFjR1JoZEdVb0tUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdWblZsTG5CeWIzUnZkSGx3WlM0a1pHVnpkSEp2ZVNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQjJZWElnZG0wZ1BTQjBhR2x6TzF4dUlDQWdJR2xtSUNoMmJTNWZhWE5DWldsdVowUmxjM1J5YjNsbFpDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdVhHNGdJQ0FnZlZ4dUlDQWdJR05oYkd4SWIyOXJLSFp0TENBblltVm1iM0psUkdWemRISnZlU2NwTzF4dUlDQWdJSFp0TGw5cGMwSmxhVzVuUkdWemRISnZlV1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQXZMeUJ5WlcxdmRtVWdjMlZzWmlCbWNtOXRJSEJoY21WdWRGeHVJQ0FnSUhaaGNpQndZWEpsYm5RZ1BTQjJiUzRrY0dGeVpXNTBPMXh1SUNBZ0lHbG1JQ2h3WVhKbGJuUWdKaVlnSVhCaGNtVnVkQzVmYVhOQ1pXbHVaMFJsYzNSeWIzbGxaQ0FtSmlBaGRtMHVKRzl3ZEdsdmJuTXVZV0p6ZEhKaFkzUXBJSHRjYmlBZ0lDQWdJSEpsYlc5MlpTaHdZWEpsYm5RdUpHTm9hV3hrY21WdUxDQjJiU2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJSFJsWVhKa2IzZHVJSGRoZEdOb1pYSnpYRzRnSUNBZ2FXWWdLSFp0TGw5M1lYUmphR1Z5S1NCN1hHNGdJQ0FnSUNCMmJTNWZkMkYwWTJobGNpNTBaV0Z5Wkc5M2JpZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdhU0E5SUhadExsOTNZWFJqYUdWeWN5NXNaVzVuZEdnN1hHNGdJQ0FnZDJocGJHVWdLR2t0TFNrZ2UxeHVJQ0FnSUNBZ2RtMHVYM2RoZEdOb1pYSnpXMmxkTG5SbFlYSmtiM2R1S0NrN1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUhKbGJXOTJaU0J5WldabGNtVnVZMlVnWm5KdmJTQmtZWFJoSUc5aVhHNGdJQ0FnTHk4Z1puSnZlbVZ1SUc5aWFtVmpkQ0J0WVhrZ2JtOTBJR2hoZG1VZ2IySnpaWEoyWlhJdVhHNGdJQ0FnYVdZZ0tIWnRMbDlrWVhSaExsOWZiMkpmWHlrZ2UxeHVJQ0FnSUNBZ2RtMHVYMlJoZEdFdVgxOXZZbDlmTG5adFEyOTFiblF0TFR0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnWTJGc2JDQjBhR1VnYkdGemRDQm9iMjlyTGk0dVhHNGdJQ0FnZG0wdVgybHpSR1Z6ZEhKdmVXVmtJRDBnZEhKMVpUdGNiaUFnSUNBdkx5QnBiblp2YTJVZ1pHVnpkSEp2ZVNCb2IyOXJjeUJ2YmlCamRYSnlaVzUwSUhKbGJtUmxjbVZrSUhSeVpXVmNiaUFnSUNCMmJTNWZYM0JoZEdOb1gxOG9kbTB1WDNadWIyUmxMQ0J1ZFd4c0tUdGNiaUFnSUNBdkx5Qm1hWEpsSUdSbGMzUnliM2xsWkNCb2IyOXJYRzRnSUNBZ1kyRnNiRWh2YjJzb2RtMHNJQ2RrWlhOMGNtOTVaV1FuS1R0Y2JpQWdJQ0F2THlCMGRYSnVJRzltWmlCaGJHd2dhVzV6ZEdGdVkyVWdiR2x6ZEdWdVpYSnpMbHh1SUNBZ0lIWnRMaVJ2Wm1Zb0tUdGNiaUFnSUNBdkx5QnlaVzF2ZG1VZ1gxOTJkV1ZmWHlCeVpXWmxjbVZ1WTJWY2JpQWdJQ0JwWmlBb2RtMHVKR1ZzS1NCN1hHNGdJQ0FnSUNCMmJTNGtaV3d1WDE5MmRXVmZYeUE5SUc1MWJHdzdYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklISmxiR1ZoYzJVZ1kybHlZM1ZzWVhJZ2NtVm1aWEpsYm1ObElDZ2pOamMxT1NsY2JpQWdJQ0JwWmlBb2RtMHVKSFp1YjJSbEtTQjdYRzRnSUNBZ0lDQjJiUzRrZG01dlpHVXVjR0Z5Wlc1MElEMGdiblZzYkR0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHMXZkVzUwUTI5dGNHOXVaVzUwSUNoY2JpQWdkbTBzWEc0Z0lHVnNMRnh1SUNCb2VXUnlZWFJwYm1kY2Jpa2dlMXh1SUNCMmJTNGtaV3dnUFNCbGJEdGNiaUFnYVdZZ0tDRjJiUzRrYjNCMGFXOXVjeTV5Wlc1a1pYSXBJSHRjYmlBZ0lDQjJiUzRrYjNCMGFXOXVjeTV5Wlc1a1pYSWdQU0JqY21WaGRHVkZiWEIwZVZaT2IyUmxPMXh1SUNBZ0lHbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2FXWWdLaTljYmlBZ0lDQWdJR2xtSUNnb2RtMHVKRzl3ZEdsdmJuTXVkR1Z0Y0d4aGRHVWdKaVlnZG0wdUpHOXdkR2x2Ym5NdWRHVnRjR3hoZEdVdVkyaGhja0YwS0RBcElDRTlQU0FuSXljcElIeDhYRzRnSUNBZ0lDQWdJSFp0TGlSdmNIUnBiMjV6TG1Wc0lIeDhJR1ZzS1NCN1hHNGdJQ0FnSUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0FnSUNBZ0oxbHZkU0JoY21VZ2RYTnBibWNnZEdobElISjFiblJwYldVdGIyNXNlU0JpZFdsc1pDQnZaaUJXZFdVZ2QyaGxjbVVnZEdobElIUmxiWEJzWVhSbElDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNkamIyMXdhV3hsY2lCcGN5QnViM1FnWVhaaGFXeGhZbXhsTGlCRmFYUm9aWElnY0hKbExXTnZiWEJwYkdVZ2RHaGxJSFJsYlhCc1lYUmxjeUJwYm5SdklDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNkeVpXNWtaWElnWm5WdVkzUnBiMjV6TENCdmNpQjFjMlVnZEdobElHTnZiWEJwYkdWeUxXbHVZMngxWkdWa0lHSjFhV3hrTGljc1hHNGdJQ0FnSUNBZ0lDQWdkbTFjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhkaGNtNG9YRzRnSUNBZ0lDQWdJQ0FnSjBaaGFXeGxaQ0IwYnlCdGIzVnVkQ0JqYjIxd2IyNWxiblE2SUhSbGJYQnNZWFJsSUc5eUlISmxibVJsY2lCbWRXNWpkR2x2YmlCdWIzUWdaR1ZtYVc1bFpDNG5MRnh1SUNBZ0lDQWdJQ0FnSUhadFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lHTmhiR3hJYjI5cktIWnRMQ0FuWW1WbWIzSmxUVzkxYm5RbktUdGNibHh1SUNCMllYSWdkWEJrWVhSbFEyOXRjRzl1Wlc1ME8xeHVJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYVdZZ0tpOWNiaUFnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dKaVlnWTI5dVptbG5MbkJsY21admNtMWhibU5sSUNZbUlHMWhjbXNwSUh0Y2JpQWdJQ0IxY0dSaGRHVkRiMjF3YjI1bGJuUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNCMllYSWdibUZ0WlNBOUlIWnRMbDl1WVcxbE8xeHVJQ0FnSUNBZ2RtRnlJR2xrSUQwZ2RtMHVYM1ZwWkR0Y2JpQWdJQ0FnSUhaaGNpQnpkR0Z5ZEZSaFp5QTlJRndpZG5WbExYQmxjbVl0YzNSaGNuUTZYQ0lnS3lCcFpEdGNiaUFnSUNBZ0lIWmhjaUJsYm1SVVlXY2dQU0JjSW5aMVpTMXdaWEptTFdWdVpEcGNJaUFySUdsa08xeHVYRzRnSUNBZ0lDQnRZWEpyS0hOMFlYSjBWR0ZuS1R0Y2JpQWdJQ0FnSUhaaGNpQjJibTlrWlNBOUlIWnRMbDl5Wlc1a1pYSW9LVHRjYmlBZ0lDQWdJRzFoY21zb1pXNWtWR0ZuS1R0Y2JpQWdJQ0FnSUcxbFlYTjFjbVVvS0Z3aWRuVmxJRndpSUNzZ2JtRnRaU0FySUZ3aUlISmxibVJsY2x3aUtTd2djM1JoY25SVVlXY3NJR1Z1WkZSaFp5azdYRzVjYmlBZ0lDQWdJRzFoY21zb2MzUmhjblJVWVdjcE8xeHVJQ0FnSUNBZ2RtMHVYM1Z3WkdGMFpTaDJibTlrWlN3Z2FIbGtjbUYwYVc1bktUdGNiaUFnSUNBZ0lHMWhjbXNvWlc1a1ZHRm5LVHRjYmlBZ0lDQWdJRzFsWVhOMWNtVW9LRndpZG5WbElGd2lJQ3NnYm1GdFpTQXJJRndpSUhCaGRHTm9YQ0lwTENCemRHRnlkRlJoWnl3Z1pXNWtWR0ZuS1R0Y2JpQWdJQ0I5TzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhWd1pHRjBaVU52YlhCdmJtVnVkQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lIWnRMbDkxY0dSaGRHVW9kbTB1WDNKbGJtUmxjaWdwTENCb2VXUnlZWFJwYm1jcE8xeHVJQ0FnSUgwN1hHNGdJSDFjYmx4dUlDQXZMeUIzWlNCelpYUWdkR2hwY3lCMGJ5QjJiUzVmZDJGMFkyaGxjaUJwYm5OcFpHVWdkR2hsSUhkaGRHTm9aWEluY3lCamIyNXpkSEoxWTNSdmNseHVJQ0F2THlCemFXNWpaU0IwYUdVZ2QyRjBZMmhsY2lkeklHbHVhWFJwWVd3Z2NHRjBZMmdnYldGNUlHTmhiR3dnSkdadmNtTmxWWEJrWVhSbElDaGxMbWN1SUdsdWMybGtaU0JqYUdsc1pGeHVJQ0F2THlCamIyMXdiMjVsYm5RbmN5QnRiM1Z1ZEdWa0lHaHZiMnNwTENCM2FHbGphQ0J5Wld4cFpYTWdiMjRnZG0wdVgzZGhkR05vWlhJZ1ltVnBibWNnWVd4eVpXRmtlU0JrWldacGJtVmtYRzRnSUc1bGR5QlhZWFJqYUdWeUtIWnRMQ0IxY0dSaGRHVkRiMjF3YjI1bGJuUXNJRzV2YjNBc0lHNTFiR3dzSUhSeWRXVWdMeW9nYVhOU1pXNWtaWEpYWVhSamFHVnlJQ292S1R0Y2JpQWdhSGxrY21GMGFXNW5JRDBnWm1Gc2MyVTdYRzVjYmlBZ0x5OGdiV0Z1ZFdGc2JIa2diVzkxYm5SbFpDQnBibk4wWVc1alpTd2dZMkZzYkNCdGIzVnVkR1ZrSUc5dUlITmxiR1pjYmlBZ0x5OGdiVzkxYm5SbFpDQnBjeUJqWVd4c1pXUWdabTl5SUhKbGJtUmxjaTFqY21WaGRHVmtJR05vYVd4a0lHTnZiWEJ2Ym1WdWRITWdhVzRnYVhSeklHbHVjMlZ5ZEdWa0lHaHZiMnRjYmlBZ2FXWWdLSFp0TGlSMmJtOWtaU0E5UFNCdWRXeHNLU0I3WEc0Z0lDQWdkbTB1WDJselRXOTFiblJsWkNBOUlIUnlkV1U3WEc0Z0lDQWdZMkZzYkVodmIyc29kbTBzSUNkdGIzVnVkR1ZrSnlrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhadFhHNTlYRzVjYm1aMWJtTjBhVzl1SUhWd1pHRjBaVU5vYVd4a1EyOXRjRzl1Wlc1MElDaGNiaUFnZG0wc1hHNGdJSEJ5YjNCelJHRjBZU3hjYmlBZ2JHbHpkR1Z1WlhKekxGeHVJQ0J3WVhKbGJuUldibTlrWlN4Y2JpQWdjbVZ1WkdWeVEyaHBiR1J5Wlc1Y2Jpa2dlMXh1SUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJR2x6VlhCa1lYUnBibWREYUdsc1pFTnZiWEJ2Ym1WdWRDQTlJSFJ5ZFdVN1hHNGdJSDFjYmx4dUlDQXZMeUJrWlhSbGNtMXBibVVnZDJobGRHaGxjaUJqYjIxd2IyNWxiblFnYUdGeklITnNiM1FnWTJocGJHUnlaVzVjYmlBZ0x5OGdkMlVnYm1WbFpDQjBieUJrYnlCMGFHbHpJR0psWm05eVpTQnZkbVZ5ZDNKcGRHbHVaeUFrYjNCMGFXOXVjeTVmY21WdVpHVnlRMmhwYkdSeVpXNWNiaUFnZG1GeUlHaGhjME5vYVd4a2NtVnVJRDBnSVNFb1hHNGdJQ0FnY21WdVpHVnlRMmhwYkdSeVpXNGdmSHdnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJvWVhNZ2JtVjNJSE4wWVhScFl5QnpiRzkwYzF4dUlDQWdJSFp0TGlSdmNIUnBiMjV6TGw5eVpXNWtaWEpEYUdsc1pISmxiaUI4ZkNBZ0x5OGdhR0Z6SUc5c1pDQnpkR0YwYVdNZ2MyeHZkSE5jYmlBZ0lDQndZWEpsYm5SV2JtOWtaUzVrWVhSaExuTmpiM0JsWkZOc2IzUnpJSHg4SUM4dklHaGhjeUJ1WlhjZ2MyTnZjR1ZrSUhOc2IzUnpYRzRnSUNBZ2RtMHVKSE5qYjNCbFpGTnNiM1J6SUNFOVBTQmxiWEIwZVU5aWFtVmpkQ0F2THlCb1lYTWdiMnhrSUhOamIzQmxaQ0J6Ykc5MGMxeHVJQ0FwTzF4dVhHNGdJSFp0TGlSdmNIUnBiMjV6TGw5d1lYSmxiblJXYm05a1pTQTlJSEJoY21WdWRGWnViMlJsTzF4dUlDQjJiUzRrZG01dlpHVWdQU0J3WVhKbGJuUldibTlrWlRzZ0x5OGdkWEJrWVhSbElIWnRKM01nY0d4aFkyVm9iMnhrWlhJZ2JtOWtaU0IzYVhSb2IzVjBJSEpsTFhKbGJtUmxjbHh1WEc0Z0lHbG1JQ2gyYlM1ZmRtNXZaR1VwSUhzZ0x5OGdkWEJrWVhSbElHTm9hV3hrSUhSeVpXVW5jeUJ3WVhKbGJuUmNiaUFnSUNCMmJTNWZkbTV2WkdVdWNHRnlaVzUwSUQwZ2NHRnlaVzUwVm01dlpHVTdYRzRnSUgxY2JpQWdkbTB1Skc5d2RHbHZibk11WDNKbGJtUmxja05vYVd4a2NtVnVJRDBnY21WdVpHVnlRMmhwYkdSeVpXNDdYRzVjYmlBZ0x5OGdkWEJrWVhSbElDUmhkSFJ5Y3lCaGJtUWdKR3hwYzNSbGJtVnljeUJvWVhOb1hHNGdJQzh2SUhSb1pYTmxJR0Z5WlNCaGJITnZJSEpsWVdOMGFYWmxJSE52SUhSb1pYa2diV0Y1SUhSeWFXZG5aWElnWTJocGJHUWdkWEJrWVhSbElHbG1JSFJvWlNCamFHbHNaRnh1SUNBdkx5QjFjMlZrSUhSb1pXMGdaSFZ5YVc1bklISmxibVJsY2x4dUlDQjJiUzRrWVhSMGNuTWdQU0FvY0dGeVpXNTBWbTV2WkdVdVpHRjBZU0FtSmlCd1lYSmxiblJXYm05a1pTNWtZWFJoTG1GMGRISnpLU0I4ZkNCbGJYQjBlVTlpYW1WamREdGNiaUFnZG0wdUpHeHBjM1JsYm1WeWN5QTlJR3hwYzNSbGJtVnljeUI4ZkNCbGJYQjBlVTlpYW1WamREdGNibHh1SUNBdkx5QjFjR1JoZEdVZ2NISnZjSE5jYmlBZ2FXWWdLSEJ5YjNCelJHRjBZU0FtSmlCMmJTNGtiM0IwYVc5dWN5NXdjbTl3Y3lrZ2UxeHVJQ0FnSUc5aWMyVnlkbVZ5VTNSaGRHVXVjMmh2ZFd4a1EyOXVkbVZ5ZENBOUlHWmhiSE5sTzF4dUlDQWdJSFpoY2lCd2NtOXdjeUE5SUhadExsOXdjbTl3Y3p0Y2JpQWdJQ0IyWVhJZ2NISnZjRXRsZVhNZ1BTQjJiUzRrYjNCMGFXOXVjeTVmY0hKdmNFdGxlWE1nZkh3Z1cxMDdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQndjbTl3UzJWNWN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnZG1GeUlHdGxlU0E5SUhCeWIzQkxaWGx6VzJsZE8xeHVJQ0FnSUNBZ2NISnZjSE5iYTJWNVhTQTlJSFpoYkdsa1lYUmxVSEp2Y0NoclpYa3NJSFp0TGlSdmNIUnBiMjV6TG5CeWIzQnpMQ0J3Y205d2MwUmhkR0VzSUhadEtUdGNiaUFnSUNCOVhHNGdJQ0FnYjJKelpYSjJaWEpUZEdGMFpTNXphRzkxYkdSRGIyNTJaWEowSUQwZ2RISjFaVHRjYmlBZ0lDQXZMeUJyWldWd0lHRWdZMjl3ZVNCdlppQnlZWGNnY0hKdmNITkVZWFJoWEc0Z0lDQWdkbTB1Skc5d2RHbHZibk11Y0hKdmNITkVZWFJoSUQwZ2NISnZjSE5FWVhSaE8xeHVJQ0I5WEc1Y2JpQWdMeThnZFhCa1lYUmxJR3hwYzNSbGJtVnljMXh1SUNCcFppQW9iR2x6ZEdWdVpYSnpLU0I3WEc0Z0lDQWdkbUZ5SUc5c1pFeHBjM1JsYm1WeWN5QTlJSFp0TGlSdmNIUnBiMjV6TGw5d1lYSmxiblJNYVhOMFpXNWxjbk03WEc0Z0lDQWdkbTB1Skc5d2RHbHZibk11WDNCaGNtVnVkRXhwYzNSbGJtVnljeUE5SUd4cGMzUmxibVZ5Y3p0Y2JpQWdJQ0IxY0dSaGRHVkRiMjF3YjI1bGJuUk1hWE4wWlc1bGNuTW9kbTBzSUd4cGMzUmxibVZ5Y3l3Z2IyeGtUR2x6ZEdWdVpYSnpLVHRjYmlBZ2ZWeHVJQ0F2THlCeVpYTnZiSFpsSUhOc2IzUnpJQ3NnWm05eVkyVWdkWEJrWVhSbElHbG1JR2hoY3lCamFHbHNaSEpsYmx4dUlDQnBaaUFvYUdGelEyaHBiR1J5Wlc0cElIdGNiaUFnSUNCMmJTNGtjMnh2ZEhNZ1BTQnlaWE52YkhabFUyeHZkSE1vY21WdVpHVnlRMmhwYkdSeVpXNHNJSEJoY21WdWRGWnViMlJsTG1OdmJuUmxlSFFwTzF4dUlDQWdJSFp0TGlSbWIzSmpaVlZ3WkdGMFpTZ3BPMXh1SUNCOVhHNWNiaUFnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3BJSHRjYmlBZ0lDQnBjMVZ3WkdGMGFXNW5RMmhwYkdSRGIyMXdiMjVsYm5RZ1BTQm1ZV3h6WlR0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBjMGx1U1c1aFkzUnBkbVZVY21WbElDaDJiU2tnZTF4dUlDQjNhR2xzWlNBb2RtMGdKaVlnS0hadElEMGdkbTB1SkhCaGNtVnVkQ2twSUh0Y2JpQWdJQ0JwWmlBb2RtMHVYMmx1WVdOMGFYWmxLU0I3SUhKbGRIVnliaUIwY25WbElIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z1ptRnNjMlZjYm4xY2JseHVablZ1WTNScGIyNGdZV04wYVhaaGRHVkRhR2xzWkVOdmJYQnZibVZ1ZENBb2RtMHNJR1JwY21WamRDa2dlMXh1SUNCcFppQW9aR2x5WldOMEtTQjdYRzRnSUNBZ2RtMHVYMlJwY21WamRFbHVZV04wYVhabElEMGdabUZzYzJVN1hHNGdJQ0FnYVdZZ0tHbHpTVzVKYm1GamRHbDJaVlJ5WldVb2RtMHBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNCOVhHNGdJSDBnWld4elpTQnBaaUFvZG0wdVgyUnBjbVZqZEVsdVlXTjBhWFpsS1NCN1hHNGdJQ0FnY21WMGRYSnVYRzRnSUgxY2JpQWdhV1lnS0hadExsOXBibUZqZEdsMlpTQjhmQ0IyYlM1ZmFXNWhZM1JwZG1VZ1BUMDlJRzUxYkd3cElIdGNiaUFnSUNCMmJTNWZhVzVoWTNScGRtVWdQU0JtWVd4elpUdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElIWnRMaVJqYUdsc1pISmxiaTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ1lXTjBhWFpoZEdWRGFHbHNaRU52YlhCdmJtVnVkQ2gyYlM0a1kyaHBiR1J5Wlc1YmFWMHBPMXh1SUNBZ0lIMWNiaUFnSUNCallXeHNTRzl2YXloMmJTd2dKMkZqZEdsMllYUmxaQ2NwTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHUmxZV04wYVhaaGRHVkRhR2xzWkVOdmJYQnZibVZ1ZENBb2RtMHNJR1JwY21WamRDa2dlMXh1SUNCcFppQW9aR2x5WldOMEtTQjdYRzRnSUNBZ2RtMHVYMlJwY21WamRFbHVZV04wYVhabElEMGdkSEoxWlR0Y2JpQWdJQ0JwWmlBb2FYTkpia2x1WVdOMGFYWmxWSEpsWlNoMmJTa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJseHVJQ0FnSUgxY2JpQWdmVnh1SUNCcFppQW9JWFp0TGw5cGJtRmpkR2wyWlNrZ2UxeHVJQ0FnSUhadExsOXBibUZqZEdsMlpTQTlJSFJ5ZFdVN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCMmJTNGtZMmhwYkdSeVpXNHViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUdSbFlXTjBhWFpoZEdWRGFHbHNaRU52YlhCdmJtVnVkQ2gyYlM0a1kyaHBiR1J5Wlc1YmFWMHBPMXh1SUNBZ0lIMWNiaUFnSUNCallXeHNTRzl2YXloMmJTd2dKMlJsWVdOMGFYWmhkR1ZrSnlrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdZMkZzYkVodmIyc2dLSFp0TENCb2IyOXJLU0I3WEc0Z0lIWmhjaUJvWVc1a2JHVnljeUE5SUhadExpUnZjSFJwYjI1elcyaHZiMnRkTzF4dUlDQnBaaUFvYUdGdVpHeGxjbk1wSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2dhaUE5SUdoaGJtUnNaWEp6TG14bGJtZDBhRHNnYVNBOElHbzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnYUdGdVpHeGxjbk5iYVYwdVkyRnNiQ2gyYlNrN1hHNGdJQ0FnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJR2hoYm1Sc1pVVnljbTl5S0dVc0lIWnRMQ0FvYUc5dmF5QXJJRndpSUdodmIydGNJaWtwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0JwWmlBb2RtMHVYMmhoYzBodmIydEZkbVZ1ZENrZ2UxeHVJQ0FnSUhadExpUmxiV2wwS0Nkb2IyOXJPaWNnS3lCb2IyOXJLVHRjYmlBZ2ZWeHVmVnh1WEc0dktpQWdLaTljYmx4dVhHNTJZWElnVFVGWVgxVlFSRUZVUlY5RFQxVk9WQ0E5SURFd01EdGNibHh1ZG1GeUlIRjFaWFZsSUQwZ1cxMDdYRzUyWVhJZ1lXTjBhWFpoZEdWa1EyaHBiR1J5Wlc0Z1BTQmJYVHRjYm5aaGNpQm9ZWE1nUFNCN2ZUdGNiblpoY2lCamFYSmpkV3hoY2lBOUlIdDlPMXh1ZG1GeUlIZGhhWFJwYm1jZ1BTQm1ZV3h6WlR0Y2JuWmhjaUJtYkhWemFHbHVaeUE5SUdaaGJITmxPMXh1ZG1GeUlHbHVaR1Y0SUQwZ01EdGNibHh1THlvcVhHNGdLaUJTWlhObGRDQjBhR1VnYzJOb1pXUjFiR1Z5SjNNZ2MzUmhkR1V1WEc0Z0tpOWNibVoxYm1OMGFXOXVJSEpsYzJWMFUyTm9aV1IxYkdWeVUzUmhkR1VnS0NrZ2UxeHVJQ0JwYm1SbGVDQTlJSEYxWlhWbExteGxibWQwYUNBOUlHRmpkR2wyWVhSbFpFTm9hV3hrY21WdUxteGxibWQwYUNBOUlEQTdYRzRnSUdoaGN5QTlJSHQ5TzF4dUlDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUdOcGNtTjFiR0Z5SUQwZ2UzMDdYRzRnSUgxY2JpQWdkMkZwZEdsdVp5QTlJR1pzZFhOb2FXNW5JRDBnWm1Gc2MyVTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1JteDFjMmdnWW05MGFDQnhkV1YxWlhNZ1lXNWtJSEoxYmlCMGFHVWdkMkYwWTJobGNuTXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHWnNkWE5vVTJOb1pXUjFiR1Z5VVhWbGRXVWdLQ2tnZTF4dUlDQm1iSFZ6YUdsdVp5QTlJSFJ5ZFdVN1hHNGdJSFpoY2lCM1lYUmphR1Z5TENCcFpEdGNibHh1SUNBdkx5QlRiM0owSUhGMVpYVmxJR0psWm05eVpTQm1iSFZ6YUM1Y2JpQWdMeThnVkdocGN5Qmxibk4xY21WeklIUm9ZWFE2WEc0Z0lDOHZJREV1SUVOdmJYQnZibVZ1ZEhNZ1lYSmxJSFZ3WkdGMFpXUWdabkp2YlNCd1lYSmxiblFnZEc4Z1kyaHBiR1F1SUNoaVpXTmhkWE5sSUhCaGNtVnVkQ0JwY3lCaGJIZGhlWE5jYmlBZ0x5OGdJQ0FnWTNKbFlYUmxaQ0JpWldadmNtVWdkR2hsSUdOb2FXeGtLVnh1SUNBdkx5QXlMaUJCSUdOdmJYQnZibVZ1ZENkeklIVnpaWElnZDJGMFkyaGxjbk1nWVhKbElISjFiaUJpWldadmNtVWdhWFJ6SUhKbGJtUmxjaUIzWVhSamFHVnlJQ2hpWldOaGRYTmxYRzRnSUM4dklDQWdJSFZ6WlhJZ2QyRjBZMmhsY25NZ1lYSmxJR055WldGMFpXUWdZbVZtYjNKbElIUm9aU0J5Wlc1a1pYSWdkMkYwWTJobGNpbGNiaUFnTHk4Z015NGdTV1lnWVNCamIyMXdiMjVsYm5RZ2FYTWdaR1Z6ZEhKdmVXVmtJR1IxY21sdVp5QmhJSEJoY21WdWRDQmpiMjF3YjI1bGJuUW5jeUIzWVhSamFHVnlJSEoxYml4Y2JpQWdMeThnSUNBZ2FYUnpJSGRoZEdOb1pYSnpJR05oYmlCaVpTQnphMmx3Y0dWa0xseHVJQ0J4ZFdWMVpTNXpiM0owS0daMWJtTjBhVzl1SUNoaExDQmlLU0I3SUhKbGRIVnliaUJoTG1sa0lDMGdZaTVwWkRzZ2ZTazdYRzVjYmlBZ0x5OGdaRzhnYm05MElHTmhZMmhsSUd4bGJtZDBhQ0JpWldOaGRYTmxJRzF2Y21VZ2QyRjBZMmhsY25NZ2JXbG5hSFFnWW1VZ2NIVnphR1ZrWEc0Z0lDOHZJR0Z6SUhkbElISjFiaUJsZUdsemRHbHVaeUIzWVhSamFHVnljMXh1SUNCbWIzSWdLR2x1WkdWNElEMGdNRHNnYVc1a1pYZ2dQQ0J4ZFdWMVpTNXNaVzVuZEdnN0lHbHVaR1Y0S3lzcElIdGNiaUFnSUNCM1lYUmphR1Z5SUQwZ2NYVmxkV1ZiYVc1a1pYaGRPMXh1SUNBZ0lHbGtJRDBnZDJGMFkyaGxjaTVwWkR0Y2JpQWdJQ0JvWVhOYmFXUmRJRDBnYm5Wc2JEdGNiaUFnSUNCM1lYUmphR1Z5TG5KMWJpZ3BPMXh1SUNBZ0lDOHZJR2x1SUdSbGRpQmlkV2xzWkN3Z1kyaGxZMnNnWVc1a0lITjBiM0FnWTJseVkzVnNZWElnZFhCa1lYUmxjeTVjYmlBZ0lDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBbUppQm9ZWE5iYVdSZElDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lHTnBjbU4xYkdGeVcybGtYU0E5SUNoamFYSmpkV3hoY2x0cFpGMGdmSHdnTUNrZ0t5QXhPMXh1SUNBZ0lDQWdhV1lnS0dOcGNtTjFiR0Z5VzJsa1hTQStJRTFCV0Y5VlVFUkJWRVZmUTA5VlRsUXBJSHRjYmlBZ0lDQWdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDQWdJQ0FuV1c5MUlHMWhlU0JvWVhabElHRnVJR2x1Wm1sdWFYUmxJSFZ3WkdGMFpTQnNiMjl3SUNjZ0t5QW9YRzRnSUNBZ0lDQWdJQ0FnSUNCM1lYUmphR1Z5TG5WelpYSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1B5QW9YQ0pwYmlCM1lYUmphR1Z5SUhkcGRHZ2daWGh3Y21WemMybHZiaUJjWEZ3aVhDSWdLeUFvZDJGMFkyaGxjaTVsZUhCeVpYTnphVzl1S1NBcklGd2lYRnhjSWx3aUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklGd2lhVzRnWVNCamIyMXdiMjVsYm5RZ2NtVnVaR1Z5SUdaMWJtTjBhVzl1TGx3aVhHNGdJQ0FnSUNBZ0lDQWdLU3hjYmlBZ0lDQWdJQ0FnSUNCM1lYUmphR1Z5TG5adFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5OGdhMlZsY0NCamIzQnBaWE1nYjJZZ2NHOXpkQ0J4ZFdWMVpYTWdZbVZtYjNKbElISmxjMlYwZEdsdVp5QnpkR0YwWlZ4dUlDQjJZWElnWVdOMGFYWmhkR1ZrVVhWbGRXVWdQU0JoWTNScGRtRjBaV1JEYUdsc1pISmxiaTV6YkdsalpTZ3BPMXh1SUNCMllYSWdkWEJrWVhSbFpGRjFaWFZsSUQwZ2NYVmxkV1V1YzJ4cFkyVW9LVHRjYmx4dUlDQnlaWE5sZEZOamFHVmtkV3hsY2xOMFlYUmxLQ2s3WEc1Y2JpQWdMeThnWTJGc2JDQmpiMjF3YjI1bGJuUWdkWEJrWVhSbFpDQmhibVFnWVdOMGFYWmhkR1ZrSUdodmIydHpYRzRnSUdOaGJHeEJZM1JwZG1GMFpXUkliMjlyY3loaFkzUnBkbUYwWldSUmRXVjFaU2s3WEc0Z0lHTmhiR3hWY0dSaGRHVmtTRzl2YTNNb2RYQmtZWFJsWkZGMVpYVmxLVHRjYmx4dUlDQXZMeUJrWlhaMGIyOXNJR2h2YjJ0Y2JpQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJR2xtSUNvdlhHNGdJR2xtSUNoa1pYWjBiMjlzY3lBbUppQmpiMjVtYVdjdVpHVjJkRzl2YkhNcElIdGNiaUFnSUNCa1pYWjBiMjlzY3k1bGJXbDBLQ2RtYkhWemFDY3BPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdOaGJHeFZjR1JoZEdWa1NHOXZhM01nS0hGMVpYVmxLU0I3WEc0Z0lIWmhjaUJwSUQwZ2NYVmxkV1V1YkdWdVozUm9PMXh1SUNCM2FHbHNaU0FvYVMwdEtTQjdYRzRnSUNBZ2RtRnlJSGRoZEdOb1pYSWdQU0J4ZFdWMVpWdHBYVHRjYmlBZ0lDQjJZWElnZG0wZ1BTQjNZWFJqYUdWeUxuWnRPMXh1SUNBZ0lHbG1JQ2gyYlM1ZmQyRjBZMmhsY2lBOVBUMGdkMkYwWTJobGNpQW1KaUIyYlM1ZmFYTk5iM1Z1ZEdWa0tTQjdYRzRnSUNBZ0lDQmpZV3hzU0c5dmF5aDJiU3dnSjNWd1pHRjBaV1FuS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCUmRXVjFaU0JoSUd0bGNIUXRZV3hwZG1VZ1kyOXRjRzl1Wlc1MElIUm9ZWFFnZDJGeklHRmpkR2wyWVhSbFpDQmtkWEpwYm1jZ2NHRjBZMmd1WEc0Z0tpQlVhR1VnY1hWbGRXVWdkMmxzYkNCaVpTQndjbTlqWlhOelpXUWdZV1owWlhJZ2RHaGxJR1Z1ZEdseVpTQjBjbVZsSUdoaGN5QmlaV1Z1SUhCaGRHTm9aV1F1WEc0Z0tpOWNibVoxYm1OMGFXOXVJSEYxWlhWbFFXTjBhWFpoZEdWa1EyOXRjRzl1Wlc1MElDaDJiU2tnZTF4dUlDQXZMeUJ6WlhSMGFXNW5JRjlwYm1GamRHbDJaU0IwYnlCbVlXeHpaU0JvWlhKbElITnZJSFJvWVhRZ1lTQnlaVzVrWlhJZ1puVnVZM1JwYjI0Z1kyRnVYRzRnSUM4dklISmxiSGtnYjI0Z1kyaGxZMnRwYm1jZ2QyaGxkR2hsY2lCcGRDZHpJR2x1SUdGdUlHbHVZV04wYVhabElIUnlaV1VnS0dVdVp5NGdjbTkxZEdWeUxYWnBaWGNwWEc0Z0lIWnRMbDlwYm1GamRHbDJaU0E5SUdaaGJITmxPMXh1SUNCaFkzUnBkbUYwWldSRGFHbHNaSEpsYmk1d2RYTm9LSFp0S1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWTJGc2JFRmpkR2wyWVhSbFpFaHZiMnR6SUNoeGRXVjFaU2tnZTF4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSEYxWlhWbExteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdjWFZsZFdWYmFWMHVYMmx1WVdOMGFYWmxJRDBnZEhKMVpUdGNiaUFnSUNCaFkzUnBkbUYwWlVOb2FXeGtRMjl0Y0c5dVpXNTBLSEYxWlhWbFcybGRMQ0IwY25WbElDOHFJSFJ5ZFdVZ0tpOHBPMXh1SUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nVUhWemFDQmhJSGRoZEdOb1pYSWdhVzUwYnlCMGFHVWdkMkYwWTJobGNpQnhkV1YxWlM1Y2JpQXFJRXB2WW5NZ2QybDBhQ0JrZFhCc2FXTmhkR1VnU1VSeklIZHBiR3dnWW1VZ2MydHBjSEJsWkNCMWJteGxjM01nYVhRbmMxeHVJQ29nY0hWemFHVmtJSGRvWlc0Z2RHaGxJSEYxWlhWbElHbHpJR0psYVc1bklHWnNkWE5vWldRdVhHNGdLaTljYm1aMWJtTjBhVzl1SUhGMVpYVmxWMkYwWTJobGNpQW9kMkYwWTJobGNpa2dlMXh1SUNCMllYSWdhV1FnUFNCM1lYUmphR1Z5TG1sa08xeHVJQ0JwWmlBb2FHRnpXMmxrWFNBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnYUdGelcybGtYU0E5SUhSeWRXVTdYRzRnSUNBZ2FXWWdLQ0ZtYkhWemFHbHVaeWtnZTF4dUlDQWdJQ0FnY1hWbGRXVXVjSFZ6YUNoM1lYUmphR1Z5S1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdMeThnYVdZZ1lXeHlaV0ZrZVNCbWJIVnphR2x1Wnl3Z2MzQnNhV05sSUhSb1pTQjNZWFJqYUdWeUlHSmhjMlZrSUc5dUlHbDBjeUJwWkZ4dUlDQWdJQ0FnTHk4Z2FXWWdZV3h5WldGa2VTQndZWE4wSUdsMGN5QnBaQ3dnYVhRZ2QybHNiQ0JpWlNCeWRXNGdibVY0ZENCcGJXMWxaR2xoZEdWc2VTNWNiaUFnSUNBZ0lIWmhjaUJwSUQwZ2NYVmxkV1V1YkdWdVozUm9JQzBnTVR0Y2JpQWdJQ0FnSUhkb2FXeGxJQ2hwSUQ0Z2FXNWtaWGdnSmlZZ2NYVmxkV1ZiYVYwdWFXUWdQaUIzWVhSamFHVnlMbWxrS1NCN1hHNGdJQ0FnSUNBZ0lHa3RMVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEYxWlhWbExuTndiR2xqWlNocElDc2dNU3dnTUN3Z2QyRjBZMmhsY2lrN1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUhGMVpYVmxJSFJvWlNCbWJIVnphRnh1SUNBZ0lHbG1JQ2doZDJGcGRHbHVaeWtnZTF4dUlDQWdJQ0FnZDJGcGRHbHVaeUE5SUhSeWRXVTdYRzRnSUNBZ0lDQnVaWGgwVkdsamF5aG1iSFZ6YUZOamFHVmtkV3hsY2xGMVpYVmxLVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1THlvZ0lDb3ZYRzVjYm5aaGNpQjFhV1FrTWlBOUlEQTdYRzVjYmk4cUtseHVJQ29nUVNCM1lYUmphR1Z5SUhCaGNuTmxjeUJoYmlCbGVIQnlaWE56YVc5dUxDQmpiMnhzWldOMGN5QmtaWEJsYm1SbGJtTnBaWE1zWEc0Z0tpQmhibVFnWm1seVpYTWdZMkZzYkdKaFkyc2dkMmhsYmlCMGFHVWdaWGh3Y21WemMybHZiaUIyWVd4MVpTQmphR0Z1WjJWekxseHVJQ29nVkdocGN5QnBjeUIxYzJWa0lHWnZjaUJpYjNSb0lIUm9aU0FrZDJGMFkyZ29LU0JoY0drZ1lXNWtJR1JwY21WamRHbDJaWE11WEc0Z0tpOWNiblpoY2lCWFlYUmphR1Z5SUQwZ1puVnVZM1JwYjI0Z1YyRjBZMmhsY2lBb1hHNGdJSFp0TEZ4dUlDQmxlSEJQY2tadUxGeHVJQ0JqWWl4Y2JpQWdiM0IwYVc5dWN5eGNiaUFnYVhOU1pXNWtaWEpYWVhSamFHVnlYRzRwSUh0Y2JpQWdkR2hwY3k1MmJTQTlJSFp0TzF4dUlDQnBaaUFvYVhOU1pXNWtaWEpYWVhSamFHVnlLU0I3WEc0Z0lDQWdkbTB1WDNkaGRHTm9aWElnUFNCMGFHbHpPMXh1SUNCOVhHNGdJSFp0TGw5M1lYUmphR1Z5Y3k1d2RYTm9LSFJvYVhNcE8xeHVJQ0F2THlCdmNIUnBiMjV6WEc0Z0lHbG1JQ2h2Y0hScGIyNXpLU0I3WEc0Z0lDQWdkR2hwY3k1a1pXVndJRDBnSVNGdmNIUnBiMjV6TG1SbFpYQTdYRzRnSUNBZ2RHaHBjeTUxYzJWeUlEMGdJU0Z2Y0hScGIyNXpMblZ6WlhJN1hHNGdJQ0FnZEdocGN5NXNZWHA1SUQwZ0lTRnZjSFJwYjI1ekxteGhlbms3WEc0Z0lDQWdkR2hwY3k1emVXNWpJRDBnSVNGdmNIUnBiMjV6TG5ONWJtTTdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkR2hwY3k1a1pXVndJRDBnZEdocGN5NTFjMlZ5SUQwZ2RHaHBjeTVzWVhwNUlEMGdkR2hwY3k1emVXNWpJRDBnWm1Gc2MyVTdYRzRnSUgxY2JpQWdkR2hwY3k1allpQTlJR05pTzF4dUlDQjBhR2x6TG1sa0lEMGdLeXQxYVdRa01qc2dMeThnZFdsa0lHWnZjaUJpWVhSamFHbHVaMXh1SUNCMGFHbHpMbUZqZEdsMlpTQTlJSFJ5ZFdVN1hHNGdJSFJvYVhNdVpHbHlkSGtnUFNCMGFHbHpMbXhoZW5rN0lDOHZJR1p2Y2lCc1lYcDVJSGRoZEdOb1pYSnpYRzRnSUhSb2FYTXVaR1Z3Y3lBOUlGdGRPMXh1SUNCMGFHbHpMbTVsZDBSbGNITWdQU0JiWFR0Y2JpQWdkR2hwY3k1a1pYQkpaSE1nUFNCdVpYY2dYMU5sZENncE8xeHVJQ0IwYUdsekxtNWxkMFJsY0Vsa2N5QTlJRzVsZHlCZlUyVjBLQ2s3WEc0Z0lIUm9hWE11Wlhod2NtVnpjMmx2YmlBOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpZGNiaUFnSUNBL0lHVjRjRTl5Um00dWRHOVRkSEpwYm1jb0tWeHVJQ0FnSURvZ0p5YzdYRzRnSUM4dklIQmhjbk5sSUdWNGNISmxjM05wYjI0Z1ptOXlJR2RsZEhSbGNseHVJQ0JwWmlBb2RIbHdaVzltSUdWNGNFOXlSbTRnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQjBhR2x6TG1kbGRIUmxjaUE5SUdWNGNFOXlSbTQ3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZEdocGN5NW5aWFIwWlhJZ1BTQndZWEp6WlZCaGRHZ29aWGh3VDNKR2JpazdYRzRnSUNBZ2FXWWdLQ0YwYUdsekxtZGxkSFJsY2lrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVuWlhSMFpYSWdQU0JtZFc1amRHbHZiaUFvS1NCN2ZUdGNiaUFnSUNBZ0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dKaVlnZDJGeWJpaGNiaUFnSUNBZ0lDQWdYQ0pHWVdsc1pXUWdkMkYwWTJocGJtY2djR0YwYURvZ1hGeGNJbHdpSUNzZ1pYaHdUM0pHYmlBcklGd2lYRnhjSWlCY0lpQXJYRzRnSUNBZ0lDQWdJQ2RYWVhSamFHVnlJRzl1YkhrZ1lXTmpaWEIwY3lCemFXMXdiR1VnWkc5MExXUmxiR2x0YVhSbFpDQndZWFJvY3k0Z0p5QXJYRzRnSUNBZ0lDQWdJQ2RHYjNJZ1puVnNiQ0JqYjI1MGNtOXNMQ0IxYzJVZ1lTQm1kVzVqZEdsdmJpQnBibk4wWldGa0xpY3NYRzRnSUNBZ0lDQWdJSFp0WEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0IwYUdsekxuWmhiSFZsSUQwZ2RHaHBjeTVzWVhwNVhHNGdJQ0FnUHlCMWJtUmxabWx1WldSY2JpQWdJQ0E2SUhSb2FYTXVaMlYwS0NrN1hHNTlPMXh1WEc0dktpcGNiaUFxSUVWMllXeDFZWFJsSUhSb1pTQm5aWFIwWlhJc0lHRnVaQ0J5WlMxamIyeHNaV04wSUdSbGNHVnVaR1Z1WTJsbGN5NWNiaUFxTDF4dVYyRjBZMmhsY2k1d2NtOTBiM1I1Y0dVdVoyVjBJRDBnWm5WdVkzUnBiMjRnWjJWMElDZ3BJSHRjYmlBZ2NIVnphRlJoY21kbGRDaDBhR2x6S1R0Y2JpQWdkbUZ5SUhaaGJIVmxPMXh1SUNCMllYSWdkbTBnUFNCMGFHbHpMblp0TzF4dUlDQjBjbmtnZTF4dUlDQWdJSFpoYkhWbElEMGdkR2hwY3k1blpYUjBaWEl1WTJGc2JDaDJiU3dnZG0wcE8xeHVJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11ZFhObGNpa2dlMXh1SUNBZ0lDQWdhR0Z1Wkd4bFJYSnliM0lvWlN3Z2RtMHNJQ2hjSW1kbGRIUmxjaUJtYjNJZ2QyRjBZMmhsY2lCY1hGd2lYQ0lnS3lBb2RHaHBjeTVsZUhCeVpYTnphVzl1S1NBcklGd2lYRnhjSWx3aUtTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJR1ZjYmlBZ0lDQjlYRzRnSUgwZ1ptbHVZV3hzZVNCN1hHNGdJQ0FnTHk4Z1hDSjBiM1ZqYUZ3aUlHVjJaWEo1SUhCeWIzQmxjblI1SUhOdklIUm9aWGtnWVhKbElHRnNiQ0IwY21GamEyVmtJR0Z6WEc0Z0lDQWdMeThnWkdWd1pXNWtaVzVqYVdWeklHWnZjaUJrWldWd0lIZGhkR05vYVc1blhHNGdJQ0FnYVdZZ0tIUm9hWE11WkdWbGNDa2dlMXh1SUNBZ0lDQWdkSEpoZG1WeWMyVW9kbUZzZFdVcE8xeHVJQ0FnSUgxY2JpQWdJQ0J3YjNCVVlYSm5aWFFvS1R0Y2JpQWdJQ0IwYUdsekxtTnNaV0Z1ZFhCRVpYQnpLQ2s3WEc0Z0lIMWNiaUFnY21WMGRYSnVJSFpoYkhWbFhHNTlPMXh1WEc0dktpcGNiaUFxSUVGa1pDQmhJR1JsY0dWdVpHVnVZM2tnZEc4Z2RHaHBjeUJrYVhKbFkzUnBkbVV1WEc0Z0tpOWNibGRoZEdOb1pYSXVjSEp2ZEc5MGVYQmxMbUZrWkVSbGNDQTlJR1oxYm1OMGFXOXVJR0ZrWkVSbGNDQW9aR1Z3S1NCN1hHNGdJSFpoY2lCcFpDQTlJR1JsY0M1cFpEdGNiaUFnYVdZZ0tDRjBhR2x6TG01bGQwUmxjRWxrY3k1b1lYTW9hV1FwS1NCN1hHNGdJQ0FnZEdocGN5NXVaWGRFWlhCSlpITXVZV1JrS0dsa0tUdGNiaUFnSUNCMGFHbHpMbTVsZDBSbGNITXVjSFZ6YUNoa1pYQXBPMXh1SUNBZ0lHbG1JQ2doZEdocGN5NWtaWEJKWkhNdWFHRnpLR2xrS1NrZ2UxeHVJQ0FnSUNBZ1pHVndMbUZrWkZOMVlpaDBhR2x6S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc1Y2JpOHFLbHh1SUNvZ1EyeGxZVzRnZFhBZ1ptOXlJR1JsY0dWdVpHVnVZM2tnWTI5c2JHVmpkR2x2Ymk1Y2JpQXFMMXh1VjJGMFkyaGxjaTV3Y205MGIzUjVjR1V1WTJ4bFlXNTFjRVJsY0hNZ1BTQm1kVzVqZEdsdmJpQmpiR1ZoYm5Wd1JHVndjeUFvS1NCN1hHNGdJQ0FnZG1GeUlIUm9hWE1rTVNBOUlIUm9hWE03WEc1Y2JpQWdkbUZ5SUdrZ1BTQjBhR2x6TG1SbGNITXViR1Z1WjNSb08xeHVJQ0IzYUdsc1pTQW9hUzB0S1NCN1hHNGdJQ0FnZG1GeUlHUmxjQ0E5SUhSb2FYTWtNUzVrWlhCelcybGRPMXh1SUNBZ0lHbG1JQ2doZEdocGN5UXhMbTVsZDBSbGNFbGtjeTVvWVhNb1pHVndMbWxrS1NrZ2UxeHVJQ0FnSUNBZ1pHVndMbkpsYlc5MlpWTjFZaWgwYUdsekpERXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQjJZWElnZEcxd0lEMGdkR2hwY3k1a1pYQkpaSE03WEc0Z0lIUm9hWE11WkdWd1NXUnpJRDBnZEdocGN5NXVaWGRFWlhCSlpITTdYRzRnSUhSb2FYTXVibVYzUkdWd1NXUnpJRDBnZEcxd08xeHVJQ0IwYUdsekxtNWxkMFJsY0Vsa2N5NWpiR1ZoY2lncE8xeHVJQ0IwYlhBZ1BTQjBhR2x6TG1SbGNITTdYRzRnSUhSb2FYTXVaR1Z3Y3lBOUlIUm9hWE11Ym1WM1JHVndjenRjYmlBZ2RHaHBjeTV1WlhkRVpYQnpJRDBnZEcxd08xeHVJQ0IwYUdsekxtNWxkMFJsY0hNdWJHVnVaM1JvSUQwZ01EdGNibjA3WEc1Y2JpOHFLbHh1SUNvZ1UzVmljMk55YVdKbGNpQnBiblJsY21aaFkyVXVYRzRnS2lCWGFXeHNJR0psSUdOaGJHeGxaQ0IzYUdWdUlHRWdaR1Z3Wlc1a1pXNWplU0JqYUdGdVoyVnpMbHh1SUNvdlhHNVhZWFJqYUdWeUxuQnliM1J2ZEhsd1pTNTFjR1JoZEdVZ1BTQm1kVzVqZEdsdmJpQjFjR1JoZEdVZ0tDa2dlMXh1SUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ1pXeHpaU0FxTDF4dUlDQnBaaUFvZEdocGN5NXNZWHA1S1NCN1hHNGdJQ0FnZEdocGN5NWthWEowZVNBOUlIUnlkV1U3WEc0Z0lIMGdaV3h6WlNCcFppQW9kR2hwY3k1emVXNWpLU0I3WEc0Z0lDQWdkR2hwY3k1eWRXNG9LVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J4ZFdWMVpWZGhkR05vWlhJb2RHaHBjeWs3WEc0Z0lIMWNibjA3WEc1Y2JpOHFLbHh1SUNvZ1UyTm9aV1IxYkdWeUlHcHZZaUJwYm5SbGNtWmhZMlV1WEc0Z0tpQlhhV3hzSUdKbElHTmhiR3hsWkNCaWVTQjBhR1VnYzJOb1pXUjFiR1Z5TGx4dUlDb3ZYRzVYWVhSamFHVnlMbkJ5YjNSdmRIbHdaUzV5ZFc0Z1BTQm1kVzVqZEdsdmJpQnlkVzRnS0NrZ2UxeHVJQ0JwWmlBb2RHaHBjeTVoWTNScGRtVXBJSHRjYmlBZ0lDQjJZWElnZG1Gc2RXVWdQU0IwYUdsekxtZGxkQ2dwTzF4dUlDQWdJR2xtSUNoY2JpQWdJQ0FnSUhaaGJIVmxJQ0U5UFNCMGFHbHpMblpoYkhWbElIeDhYRzRnSUNBZ0lDQXZMeUJFWldWd0lIZGhkR05vWlhKeklHRnVaQ0IzWVhSamFHVnljeUJ2YmlCUFltcGxZM1F2UVhKeVlYbHpJSE5vYjNWc1pDQm1hWEpsSUdWMlpXNWNiaUFnSUNBZ0lDOHZJSGRvWlc0Z2RHaGxJSFpoYkhWbElHbHpJSFJvWlNCellXMWxMQ0JpWldOaGRYTmxJSFJvWlNCMllXeDFaU0J0WVhsY2JpQWdJQ0FnSUM4dklHaGhkbVVnYlhWMFlYUmxaQzVjYmlBZ0lDQWdJR2x6VDJKcVpXTjBLSFpoYkhWbEtTQjhmRnh1SUNBZ0lDQWdkR2hwY3k1a1pXVndYRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQXZMeUJ6WlhRZ2JtVjNJSFpoYkhWbFhHNGdJQ0FnSUNCMllYSWdiMnhrVm1Gc2RXVWdQU0IwYUdsekxuWmhiSFZsTzF4dUlDQWdJQ0FnZEdocGN5NTJZV3gxWlNBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11ZFhObGNpa2dlMXh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkySXVZMkZzYkNoMGFHbHpMblp0TENCMllXeDFaU3dnYjJ4a1ZtRnNkV1VwTzF4dUlDQWdJQ0FnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxSWEp5YjNJb1pTd2dkR2hwY3k1MmJTd2dLRndpWTJGc2JHSmhZMnNnWm05eUlIZGhkR05vWlhJZ1hGeGNJbHdpSUNzZ0tIUm9hWE11Wlhod2NtVnpjMmx2YmlrZ0t5QmNJbHhjWENKY0lpa3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTmlMbU5oYkd3b2RHaHBjeTUyYlN3Z2RtRnNkV1VzSUc5c1pGWmhiSFZsS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc1Y2JpOHFLbHh1SUNvZ1JYWmhiSFZoZEdVZ2RHaGxJSFpoYkhWbElHOW1JSFJvWlNCM1lYUmphR1Z5TGx4dUlDb2dWR2hwY3lCdmJteDVJR2RsZEhNZ1kyRnNiR1ZrSUdadmNpQnNZWHA1SUhkaGRHTm9aWEp6TGx4dUlDb3ZYRzVYWVhSamFHVnlMbkJ5YjNSdmRIbHdaUzVsZG1Gc2RXRjBaU0E5SUdaMWJtTjBhVzl1SUdWMllXeDFZWFJsSUNncElIdGNiaUFnZEdocGN5NTJZV3gxWlNBOUlIUm9hWE11WjJWMEtDazdYRzRnSUhSb2FYTXVaR2x5ZEhrZ1BTQm1ZV3h6WlR0Y2JuMDdYRzVjYmk4cUtseHVJQ29nUkdWd1pXNWtJRzl1SUdGc2JDQmtaWEJ6SUdOdmJHeGxZM1JsWkNCaWVTQjBhR2x6SUhkaGRHTm9aWEl1WEc0Z0tpOWNibGRoZEdOb1pYSXVjSEp2ZEc5MGVYQmxMbVJsY0dWdVpDQTlJR1oxYm1OMGFXOXVJR1JsY0dWdVpDQW9LU0I3WEc0Z0lDQWdkbUZ5SUhSb2FYTWtNU0E5SUhSb2FYTTdYRzVjYmlBZ2RtRnlJR2tnUFNCMGFHbHpMbVJsY0hNdWJHVnVaM1JvTzF4dUlDQjNhR2xzWlNBb2FTMHRLU0I3WEc0Z0lDQWdkR2hwY3lReExtUmxjSE5iYVYwdVpHVndaVzVrS0NrN1hHNGdJSDFjYm4wN1hHNWNiaThxS2x4dUlDb2dVbVZ0YjNabElITmxiR1lnWm5KdmJTQmhiR3dnWkdWd1pXNWtaVzVqYVdWekp5QnpkV0p6WTNKcFltVnlJR3hwYzNRdVhHNGdLaTljYmxkaGRHTm9aWEl1Y0hKdmRHOTBlWEJsTG5SbFlYSmtiM2R1SUQwZ1puVnVZM1JwYjI0Z2RHVmhjbVJ2ZDI0Z0tDa2dlMXh1SUNBZ0lIWmhjaUIwYUdsekpERWdQU0IwYUdsek8xeHVYRzRnSUdsbUlDaDBhR2x6TG1GamRHbDJaU2tnZTF4dUlDQWdJQzh2SUhKbGJXOTJaU0J6Wld4bUlHWnliMjBnZG0wbmN5QjNZWFJqYUdWeUlHeHBjM1JjYmlBZ0lDQXZMeUIwYUdseklHbHpJR0VnYzI5dFpYZG9ZWFFnWlhod1pXNXphWFpsSUc5d1pYSmhkR2x2YmlCemJ5QjNaU0J6YTJsd0lHbDBYRzRnSUNBZ0x5OGdhV1lnZEdobElIWnRJR2x6SUdKbGFXNW5JR1JsYzNSeWIzbGxaQzVjYmlBZ0lDQnBaaUFvSVhSb2FYTXVkbTB1WDJselFtVnBibWRFWlhOMGNtOTVaV1FwSUh0Y2JpQWdJQ0FnSUhKbGJXOTJaU2gwYUdsekxuWnRMbDkzWVhSamFHVnljeXdnZEdocGN5azdYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQnBJRDBnZEdocGN5NWtaWEJ6TG14bGJtZDBhRHRjYmlBZ0lDQjNhR2xzWlNBb2FTMHRLU0I3WEc0Z0lDQWdJQ0IwYUdsekpERXVaR1Z3YzF0cFhTNXlaVzF2ZG1WVGRXSW9kR2hwY3lReEtUdGNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NWhZM1JwZG1VZ1BTQm1ZV3h6WlR0Y2JpQWdmVnh1ZlR0Y2JseHVMeW9nSUNvdlhHNWNiblpoY2lCemFHRnlaV1JRY205d1pYSjBlVVJsWm1sdWFYUnBiMjRnUFNCN1hHNGdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVXNYRzRnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdaMlYwT2lCdWIyOXdMRnh1SUNCelpYUTZJRzV2YjNCY2JuMDdYRzVjYm1aMWJtTjBhVzl1SUhCeWIzaDVJQ2gwWVhKblpYUXNJSE52ZFhKalpVdGxlU3dnYTJWNUtTQjdYRzRnSUhOb1lYSmxaRkJ5YjNCbGNuUjVSR1ZtYVc1cGRHbHZiaTVuWlhRZ1BTQm1kVzVqZEdsdmJpQndjbTk0ZVVkbGRIUmxjaUFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhOYmMyOTFjbU5sUzJWNVhWdHJaWGxkWEc0Z0lIMDdYRzRnSUhOb1lYSmxaRkJ5YjNCbGNuUjVSR1ZtYVc1cGRHbHZiaTV6WlhRZ1BTQm1kVzVqZEdsdmJpQndjbTk0ZVZObGRIUmxjaUFvZG1Gc0tTQjdYRzRnSUNBZ2RHaHBjMXR6YjNWeVkyVkxaWGxkVzJ0bGVWMGdQU0IyWVd3N1hHNGdJSDA3WEc0Z0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gwWVhKblpYUXNJR3RsZVN3Z2MyaGhjbVZrVUhKdmNHVnlkSGxFWldacGJtbDBhVzl1S1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYVc1cGRGTjBZWFJsSUNoMmJTa2dlMXh1SUNCMmJTNWZkMkYwWTJobGNuTWdQU0JiWFR0Y2JpQWdkbUZ5SUc5d2RITWdQU0IyYlM0a2IzQjBhVzl1Y3p0Y2JpQWdhV1lnS0c5d2RITXVjSEp2Y0hNcElIc2dhVzVwZEZCeWIzQnpLSFp0TENCdmNIUnpMbkJ5YjNCektUc2dmVnh1SUNCcFppQW9iM0IwY3k1dFpYUm9iMlJ6S1NCN0lHbHVhWFJOWlhSb2IyUnpLSFp0TENCdmNIUnpMbTFsZEdodlpITXBPeUI5WEc0Z0lHbG1JQ2h2Y0hSekxtUmhkR0VwSUh0Y2JpQWdJQ0JwYm1sMFJHRjBZU2gyYlNrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2IySnpaWEoyWlNoMmJTNWZaR0YwWVNBOUlIdDlMQ0IwY25WbElDOHFJR0Z6VW05dmRFUmhkR0VnS2k4cE8xeHVJQ0I5WEc0Z0lHbG1JQ2h2Y0hSekxtTnZiWEIxZEdWa0tTQjdJR2x1YVhSRGIyMXdkWFJsWkNoMmJTd2diM0IwY3k1amIyMXdkWFJsWkNrN0lIMWNiaUFnYVdZZ0tHOXdkSE11ZDJGMFkyZ2dKaVlnYjNCMGN5NTNZWFJqYUNBaFBUMGdibUYwYVhabFYyRjBZMmdwSUh0Y2JpQWdJQ0JwYm1sMFYyRjBZMmdvZG0wc0lHOXdkSE11ZDJGMFkyZ3BPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdsdWFYUlFjbTl3Y3lBb2RtMHNJSEJ5YjNCelQzQjBhVzl1Y3lrZ2UxeHVJQ0IyWVhJZ2NISnZjSE5FWVhSaElEMGdkbTB1Skc5d2RHbHZibk11Y0hKdmNITkVZWFJoSUh4OElIdDlPMXh1SUNCMllYSWdjSEp2Y0hNZ1BTQjJiUzVmY0hKdmNITWdQU0I3ZlR0Y2JpQWdMeThnWTJGamFHVWdjSEp2Y0NCclpYbHpJSE52SUhSb1lYUWdablYwZFhKbElIQnliM0J6SUhWd1pHRjBaWE1nWTJGdUlHbDBaWEpoZEdVZ2RYTnBibWNnUVhKeVlYbGNiaUFnTHk4Z2FXNXpkR1ZoWkNCdlppQmtlVzVoYldsaklHOWlhbVZqZENCclpYa2daVzUxYldWeVlYUnBiMjR1WEc0Z0lIWmhjaUJyWlhseklEMGdkbTB1Skc5d2RHbHZibk11WDNCeWIzQkxaWGx6SUQwZ1cxMDdYRzRnSUhaaGNpQnBjMUp2YjNRZ1BTQWhkbTB1SkhCaGNtVnVkRHRjYmlBZ0x5OGdjbTl2ZENCcGJuTjBZVzVqWlNCd2NtOXdjeUJ6YUc5MWJHUWdZbVVnWTI5dWRtVnlkR1ZrWEc0Z0lHOWljMlZ5ZG1WeVUzUmhkR1V1YzJodmRXeGtRMjl1ZG1WeWRDQTlJR2x6VW05dmREdGNiaUFnZG1GeUlHeHZiM0FnUFNCbWRXNWpkR2x2YmlBb0lHdGxlU0FwSUh0Y2JpQWdJQ0JyWlhsekxuQjFjMmdvYTJWNUtUdGNiaUFnSUNCMllYSWdkbUZzZFdVZ1BTQjJZV3hwWkdGMFpWQnliM0FvYTJWNUxDQndjbTl3YzA5d2RHbHZibk1zSUhCeWIzQnpSR0YwWVN3Z2RtMHBPMXh1SUNBZ0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQmxiSE5sSUNvdlhHNGdJQ0FnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJSFpoY2lCb2VYQm9aVzVoZEdWa1MyVjVJRDBnYUhsd2FHVnVZWFJsS0d0bGVTazdYRzRnSUNBZ0lDQnBaaUFvYVhOU1pYTmxjblpsWkVGMGRISnBZblYwWlNob2VYQm9aVzVoZEdWa1MyVjVLU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lHTnZibVpwWnk1cGMxSmxjMlZ5ZG1Wa1FYUjBjaWhvZVhCb1pXNWhkR1ZrUzJWNUtTa2dlMXh1SUNBZ0lDQWdJQ0IzWVhKdUtGeHVJQ0FnSUNBZ0lDQWdJQ2hjSWx4Y1hDSmNJaUFySUdoNWNHaGxibUYwWldSTFpYa2dLeUJjSWx4Y1hDSWdhWE1nWVNCeVpYTmxjblpsWkNCaGRIUnlhV0oxZEdVZ1lXNWtJR05oYm01dmRDQmlaU0IxYzJWa0lHRnpJR052YlhCdmJtVnVkQ0J3Y205d0xsd2lLU3hjYmlBZ0lDQWdJQ0FnSUNCMmJWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdaR1ZtYVc1bFVtVmhZM1JwZG1Vb2NISnZjSE1zSUd0bGVTd2dkbUZzZFdVc0lHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIWnRMaVJ3WVhKbGJuUWdKaVlnSVdselZYQmtZWFJwYm1kRGFHbHNaRU52YlhCdmJtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJa0YyYjJsa0lHMTFkR0YwYVc1bklHRWdjSEp2Y0NCa2FYSmxZM1JzZVNCemFXNWpaU0IwYUdVZ2RtRnNkV1VnZDJsc2JDQmlaU0JjSWlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW05MlpYSjNjbWwwZEdWdUlIZG9aVzVsZG1WeUlIUm9aU0J3WVhKbGJuUWdZMjl0Y0c5dVpXNTBJSEpsTFhKbGJtUmxjbk11SUZ3aUlDdGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aVNXNXpkR1ZoWkN3Z2RYTmxJR0VnWkdGMFlTQnZjaUJqYjIxd2RYUmxaQ0J3Y205d1pYSjBlU0JpWVhObFpDQnZiaUIwYUdVZ2NISnZjQ2R6SUZ3aUlDdGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aWRtRnNkV1V1SUZCeWIzQWdZbVZwYm1jZ2JYVjBZWFJsWkRvZ1hGeGNJbHdpSUNzZ2EyVjVJQ3NnWENKY1hGd2lYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJiVnh1SUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCa1pXWnBibVZTWldGamRHbDJaU2h3Y205d2N5d2dhMlY1TENCMllXeDFaU2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJSE4wWVhScFl5QndjbTl3Y3lCaGNtVWdZV3h5WldGa2VTQndjbTk0YVdWa0lHOXVJSFJvWlNCamIyMXdiMjVsYm5RbmN5QndjbTkwYjNSNWNHVmNiaUFnSUNBdkx5QmtkWEpwYm1jZ1ZuVmxMbVY0ZEdWdVpDZ3BMaUJYWlNCdmJteDVJRzVsWldRZ2RHOGdjSEp2ZUhrZ2NISnZjSE1nWkdWbWFXNWxaQ0JoZEZ4dUlDQWdJQzh2SUdsdWMzUmhiblJwWVhScGIyNGdhR1Z5WlM1Y2JpQWdJQ0JwWmlBb0lTaHJaWGtnYVc0Z2RtMHBLU0I3WEc0Z0lDQWdJQ0J3Y205NGVTaDJiU3dnWENKZmNISnZjSE5jSWl3Z2EyVjVLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnWm05eUlDaDJZWElnYTJWNUlHbHVJSEJ5YjNCelQzQjBhVzl1Y3lrZ2JHOXZjQ2dnYTJWNUlDazdYRzRnSUc5aWMyVnlkbVZ5VTNSaGRHVXVjMmh2ZFd4a1EyOXVkbVZ5ZENBOUlIUnlkV1U3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2x1YVhSRVlYUmhJQ2gyYlNrZ2UxeHVJQ0IyWVhJZ1pHRjBZU0E5SUhadExpUnZjSFJwYjI1ekxtUmhkR0U3WEc0Z0lHUmhkR0VnUFNCMmJTNWZaR0YwWVNBOUlIUjVjR1Z2WmlCa1lYUmhJRDA5UFNBblpuVnVZM1JwYjI0blhHNGdJQ0FnUHlCblpYUkVZWFJoS0dSaGRHRXNJSFp0S1Z4dUlDQWdJRG9nWkdGMFlTQjhmQ0I3ZlR0Y2JpQWdhV1lnS0NGcGMxQnNZV2x1VDJKcVpXTjBLR1JoZEdFcEtTQjdYRzRnSUNBZ1pHRjBZU0E5SUh0OU8xeHVJQ0FnSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ0ppWWdkMkZ5YmloY2JpQWdJQ0FnSUNka1lYUmhJR1oxYm1OMGFXOXVjeUJ6YUc5MWJHUWdjbVYwZFhKdUlHRnVJRzlpYW1WamREcGNYRzRuSUN0Y2JpQWdJQ0FnSUNkb2RIUndjem92TDNaMVpXcHpMbTl5Wnk5Mk1pOW5kV2xrWlM5amIyMXdiMjVsYm5SekxtaDBiV3dqWkdGMFlTMU5kWE4wTFVKbExXRXRSblZ1WTNScGIyNG5MRnh1SUNBZ0lDQWdkbTFjYmlBZ0lDQXBPMXh1SUNCOVhHNGdJQzh2SUhCeWIzaDVJR1JoZEdFZ2IyNGdhVzV6ZEdGdVkyVmNiaUFnZG1GeUlHdGxlWE1nUFNCUFltcGxZM1F1YTJWNWN5aGtZWFJoS1R0Y2JpQWdkbUZ5SUhCeWIzQnpJRDBnZG0wdUpHOXdkR2x2Ym5NdWNISnZjSE03WEc0Z0lIWmhjaUJ0WlhSb2IyUnpJRDBnZG0wdUpHOXdkR2x2Ym5NdWJXVjBhRzlrY3p0Y2JpQWdkbUZ5SUdrZ1BTQnJaWGx6TG14bGJtZDBhRHRjYmlBZ2QyaHBiR1VnS0drdExTa2dlMXh1SUNBZ0lIWmhjaUJyWlhrZ1BTQnJaWGx6VzJsZE8xeHVJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0JwWmlBb2JXVjBhRzlrY3lBbUppQm9ZWE5QZDI0b2JXVjBhRzlrY3l3Z2EyVjVLU2tnZTF4dUlDQWdJQ0FnSUNCM1lYSnVLRnh1SUNBZ0lDQWdJQ0FnSUNoY0lrMWxkR2h2WkNCY1hGd2lYQ0lnS3lCclpYa2dLeUJjSWx4Y1hDSWdhR0Z6SUdGc2NtVmhaSGtnWW1WbGJpQmtaV1pwYm1Wa0lHRnpJR0VnWkdGMFlTQndjbTl3WlhKMGVTNWNJaWtzWEc0Z0lDQWdJQ0FnSUNBZ2RtMWNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSEJ5YjNCeklDWW1JR2hoYzA5M2JpaHdjbTl3Y3l3Z2EyVjVLU2tnZTF4dUlDQWdJQ0FnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBbUppQjNZWEp1S0Z4dUlDQWdJQ0FnSUNCY0lsUm9aU0JrWVhSaElIQnliM0JsY25SNUlGeGNYQ0pjSWlBcklHdGxlU0FySUZ3aVhGeGNJaUJwY3lCaGJISmxZV1I1SUdSbFkyeGhjbVZrSUdGeklHRWdjSEp2Y0M0Z1hDSWdLMXh1SUNBZ0lDQWdJQ0JjSWxWelpTQndjbTl3SUdSbFptRjFiSFFnZG1Gc2RXVWdhVzV6ZEdWaFpDNWNJaXhjYmlBZ0lDQWdJQ0FnZG0xY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNnaGFYTlNaWE5sY25abFpDaHJaWGtwS1NCN1hHNGdJQ0FnSUNCd2NtOTRlU2gyYlN3Z1hDSmZaR0YwWVZ3aUxDQnJaWGtwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0F2THlCdlluTmxjblpsSUdSaGRHRmNiaUFnYjJKelpYSjJaU2hrWVhSaExDQjBjblZsSUM4cUlHRnpVbTl2ZEVSaGRHRWdLaThwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlhSRVlYUmhJQ2hrWVhSaExDQjJiU2tnZTF4dUlDQjBjbmtnZTF4dUlDQWdJSEpsZEhWeWJpQmtZWFJoTG1OaGJHd29kbTBzSUhadEtWeHVJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnYUdGdVpHeGxSWEp5YjNJb1pTd2dkbTBzSUZ3aVpHRjBZU2dwWENJcE8xeHVJQ0FnSUhKbGRIVnliaUI3ZlZ4dUlDQjlYRzU5WEc1Y2JuWmhjaUJqYjIxd2RYUmxaRmRoZEdOb1pYSlBjSFJwYjI1eklEMGdleUJzWVhwNU9pQjBjblZsSUgwN1hHNWNibVoxYm1OMGFXOXVJR2x1YVhSRGIyMXdkWFJsWkNBb2RtMHNJR052YlhCMWRHVmtLU0I3WEc0Z0lDOHZJQ1JtYkc5M0xXUnBjMkZpYkdVdGJHbHVaVnh1SUNCMllYSWdkMkYwWTJobGNuTWdQU0IyYlM1ZlkyOXRjSFYwWldSWFlYUmphR1Z5Y3lBOUlFOWlhbVZqZEM1amNtVmhkR1VvYm5Wc2JDazdYRzRnSUM4dklHTnZiWEIxZEdWa0lIQnliM0JsY25ScFpYTWdZWEpsSUdwMWMzUWdaMlYwZEdWeWN5QmtkWEpwYm1jZ1UxTlNYRzRnSUhaaGNpQnBjMU5UVWlBOUlHbHpVMlZ5ZG1WeVVtVnVaR1Z5YVc1bktDazdYRzVjYmlBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUdOdmJYQjFkR1ZrS1NCN1hHNGdJQ0FnZG1GeUlIVnpaWEpFWldZZ1BTQmpiMjF3ZFhSbFpGdHJaWGxkTzF4dUlDQWdJSFpoY2lCblpYUjBaWElnUFNCMGVYQmxiMllnZFhObGNrUmxaaUE5UFQwZ0oyWjFibU4wYVc5dUp5QS9JSFZ6WlhKRVpXWWdPaUIxYzJWeVJHVm1MbWRsZER0Y2JpQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QW1KaUJuWlhSMFpYSWdQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdkMkZ5YmloY2JpQWdJQ0FnSUNBZ0tGd2lSMlYwZEdWeUlHbHpJRzFwYzNOcGJtY2dabTl5SUdOdmJYQjFkR1ZrSUhCeWIzQmxjblI1SUZ4Y1hDSmNJaUFySUd0bGVTQXJJRndpWEZ4Y0lpNWNJaWtzWEc0Z0lDQWdJQ0FnSUhadFhHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDZ2hhWE5UVTFJcElIdGNiaUFnSUNBZ0lDOHZJR055WldGMFpTQnBiblJsY201aGJDQjNZWFJqYUdWeUlHWnZjaUIwYUdVZ1kyOXRjSFYwWldRZ2NISnZjR1Z5ZEhrdVhHNGdJQ0FnSUNCM1lYUmphR1Z5YzF0clpYbGRJRDBnYm1WM0lGZGhkR05vWlhJb1hHNGdJQ0FnSUNBZ0lIWnRMRnh1SUNBZ0lDQWdJQ0JuWlhSMFpYSWdmSHdnYm05dmNDeGNiaUFnSUNBZ0lDQWdibTl2Y0N4Y2JpQWdJQ0FnSUNBZ1kyOXRjSFYwWldSWFlYUmphR1Z5VDNCMGFXOXVjMXh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJqYjIxd2IyNWxiblF0WkdWbWFXNWxaQ0JqYjIxd2RYUmxaQ0J3Y205d1pYSjBhV1Z6SUdGeVpTQmhiSEpsWVdSNUlHUmxabWx1WldRZ2IyNGdkR2hsWEc0Z0lDQWdMeThnWTI5dGNHOXVaVzUwSUhCeWIzUnZkSGx3WlM0Z1YyVWdiMjVzZVNCdVpXVmtJSFJ2SUdSbFptbHVaU0JqYjIxd2RYUmxaQ0J3Y205d1pYSjBhV1Z6SUdSbFptbHVaV1JjYmlBZ0lDQXZMeUJoZENCcGJuTjBZVzUwYVdGMGFXOXVJR2hsY21VdVhHNGdJQ0FnYVdZZ0tDRW9hMlY1SUdsdUlIWnRLU2tnZTF4dUlDQWdJQ0FnWkdWbWFXNWxRMjl0Y0hWMFpXUW9kbTBzSUd0bGVTd2dkWE5sY2tSbFppazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0JwWmlBb2EyVjVJR2x1SUhadExpUmtZWFJoS1NCN1hHNGdJQ0FnSUNBZ0lIZGhjbTRvS0Z3aVZHaGxJR052YlhCMWRHVmtJSEJ5YjNCbGNuUjVJRnhjWENKY0lpQXJJR3RsZVNBcklGd2lYRnhjSWlCcGN5QmhiSEpsWVdSNUlHUmxabWx1WldRZ2FXNGdaR0YwWVM1Y0lpa3NJSFp0S1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RtMHVKRzl3ZEdsdmJuTXVjSEp2Y0hNZ0ppWWdhMlY1SUdsdUlIWnRMaVJ2Y0hScGIyNXpMbkJ5YjNCektTQjdYRzRnSUNBZ0lDQWdJSGRoY200b0tGd2lWR2hsSUdOdmJYQjFkR1ZrSUhCeWIzQmxjblI1SUZ4Y1hDSmNJaUFySUd0bGVTQXJJRndpWEZ4Y0lpQnBjeUJoYkhKbFlXUjVJR1JsWm1sdVpXUWdZWE1nWVNCd2NtOXdMbHdpS1N3Z2RtMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJrWldacGJtVkRiMjF3ZFhSbFpDQW9YRzRnSUhSaGNtZGxkQ3hjYmlBZ2EyVjVMRnh1SUNCMWMyVnlSR1ZtWEc0cElIdGNiaUFnZG1GeUlITm9iM1ZzWkVOaFkyaGxJRDBnSVdselUyVnlkbVZ5VW1WdVpHVnlhVzVuS0NrN1hHNGdJR2xtSUNoMGVYQmxiMllnZFhObGNrUmxaaUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lITm9ZWEpsWkZCeWIzQmxjblI1UkdWbWFXNXBkR2x2Ymk1blpYUWdQU0J6YUc5MWJHUkRZV05vWlZ4dUlDQWdJQ0FnUHlCamNtVmhkR1ZEYjIxd2RYUmxaRWRsZEhSbGNpaHJaWGtwWEc0Z0lDQWdJQ0E2SUhWelpYSkVaV1k3WEc0Z0lDQWdjMmhoY21Wa1VISnZjR1Z5ZEhsRVpXWnBibWwwYVc5dUxuTmxkQ0E5SUc1dmIzQTdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjMmhoY21Wa1VISnZjR1Z5ZEhsRVpXWnBibWwwYVc5dUxtZGxkQ0E5SUhWelpYSkVaV1l1WjJWMFhHNGdJQ0FnSUNBL0lITm9iM1ZzWkVOaFkyaGxJQ1ltSUhWelpYSkVaV1l1WTJGamFHVWdJVDA5SUdaaGJITmxYRzRnSUNBZ0lDQWdJRDhnWTNKbFlYUmxRMjl0Y0hWMFpXUkhaWFIwWlhJb2EyVjVLVnh1SUNBZ0lDQWdJQ0E2SUhWelpYSkVaV1l1WjJWMFhHNGdJQ0FnSUNBNklHNXZiM0E3WEc0Z0lDQWdjMmhoY21Wa1VISnZjR1Z5ZEhsRVpXWnBibWwwYVc5dUxuTmxkQ0E5SUhWelpYSkVaV1l1YzJWMFhHNGdJQ0FnSUNBL0lIVnpaWEpFWldZdWMyVjBYRzRnSUNBZ0lDQTZJRzV2YjNBN1hHNGdJSDFjYmlBZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnSmlaY2JpQWdJQ0FnSUhOb1lYSmxaRkJ5YjNCbGNuUjVSR1ZtYVc1cGRHbHZiaTV6WlhRZ1BUMDlJRzV2YjNBcElIdGNiaUFnSUNCemFHRnlaV1JRY205d1pYSjBlVVJsWm1sdWFYUnBiMjR1YzJWMElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDQWdLRndpUTI5dGNIVjBaV1FnY0hKdmNHVnlkSGtnWEZ4Y0lsd2lJQ3NnYTJWNUlDc2dYQ0pjWEZ3aUlIZGhjeUJoYzNOcFoyNWxaQ0IwYnlCaWRYUWdhWFFnYUdGeklHNXZJSE5sZEhSbGNpNWNJaWtzWEc0Z0lDQWdJQ0FnSUhSb2FYTmNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZUdGNiaUFnZlZ4dUlDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZEdGeVoyVjBMQ0JyWlhrc0lITm9ZWEpsWkZCeWIzQmxjblI1UkdWbWFXNXBkR2x2YmlrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVU52YlhCMWRHVmtSMlYwZEdWeUlDaHJaWGtwSUh0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlHTnZiWEIxZEdWa1IyVjBkR1Z5SUNncElIdGNiaUFnSUNCMllYSWdkMkYwWTJobGNpQTlJSFJvYVhNdVgyTnZiWEIxZEdWa1YyRjBZMmhsY25NZ0ppWWdkR2hwY3k1ZlkyOXRjSFYwWldSWFlYUmphR1Z5YzF0clpYbGRPMXh1SUNBZ0lHbG1JQ2gzWVhSamFHVnlLU0I3WEc0Z0lDQWdJQ0JwWmlBb2QyRjBZMmhsY2k1a2FYSjBlU2tnZTF4dUlDQWdJQ0FnSUNCM1lYUmphR1Z5TG1WMllXeDFZWFJsS0NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9SR1Z3TG5SaGNtZGxkQ2tnZTF4dUlDQWdJQ0FnSUNCM1lYUmphR1Z5TG1SbGNHVnVaQ2dwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WMGRYSnVJSGRoZEdOb1pYSXVkbUZzZFdWY2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2FXNXBkRTFsZEdodlpITWdLSFp0TENCdFpYUm9iMlJ6S1NCN1hHNGdJSFpoY2lCd2NtOXdjeUE5SUhadExpUnZjSFJwYjI1ekxuQnliM0J6TzF4dUlDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z2JXVjBhRzlrY3lrZ2UxeHVJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0JwWmlBb2JXVjBhRzlrYzF0clpYbGRJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDQWdJQ0JjSWsxbGRHaHZaQ0JjWEZ3aVhDSWdLeUJyWlhrZ0t5QmNJbHhjWENJZ2FHRnpJR0Z1SUhWdVpHVm1hVzVsWkNCMllXeDFaU0JwYmlCMGFHVWdZMjl0Y0c5dVpXNTBJR1JsWm1sdWFYUnBiMjR1SUZ3aUlDdGNiaUFnSUNBZ0lDQWdJQ0JjSWtScFpDQjViM1VnY21WbVpYSmxibU5sSUhSb1pTQm1kVzVqZEdsdmJpQmpiM0p5WldOMGJIay9YQ0lzWEc0Z0lDQWdJQ0FnSUNBZ2RtMWNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNod2NtOXdjeUFtSmlCb1lYTlBkMjRvY0hKdmNITXNJR3RsZVNrcElIdGNiaUFnSUNBZ0lDQWdkMkZ5YmloY2JpQWdJQ0FnSUNBZ0lDQW9YQ0pOWlhSb2IyUWdYRnhjSWx3aUlDc2dhMlY1SUNzZ1hDSmNYRndpSUdoaGN5QmhiSEpsWVdSNUlHSmxaVzRnWkdWbWFXNWxaQ0JoY3lCaElIQnliM0F1WENJcExGeHVJQ0FnSUNBZ0lDQWdJSFp0WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9LR3RsZVNCcGJpQjJiU2tnSmlZZ2FYTlNaWE5sY25abFpDaHJaWGtwS1NCN1hHNGdJQ0FnSUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0FnSUNBZ1hDSk5aWFJvYjJRZ1hGeGNJbHdpSUNzZ2EyVjVJQ3NnWENKY1hGd2lJR052Ym1ac2FXTjBjeUIzYVhSb0lHRnVJR1Y0YVhOMGFXNW5JRloxWlNCcGJuTjBZVzVqWlNCdFpYUm9iMlF1SUZ3aUlDdGNiaUFnSUNBZ0lDQWdJQ0JjSWtGMmIybGtJR1JsWm1sdWFXNW5JR052YlhCdmJtVnVkQ0J0WlhSb2IyUnpJSFJvWVhRZ2MzUmhjblFnZDJsMGFDQmZJRzl5SUNRdVhDSmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2RtMWJhMlY1WFNBOUlHMWxkR2h2WkhOYmEyVjVYU0E5UFNCdWRXeHNJRDhnYm05dmNDQTZJR0pwYm1Rb2JXVjBhRzlrYzF0clpYbGRMQ0IyYlNrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdhVzVwZEZkaGRHTm9JQ2gyYlN3Z2QyRjBZMmdwSUh0Y2JpQWdabTl5SUNoMllYSWdhMlY1SUdsdUlIZGhkR05vS1NCN1hHNGdJQ0FnZG1GeUlHaGhibVJzWlhJZ1BTQjNZWFJqYUZ0clpYbGRPMXh1SUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHaGhibVJzWlhJcEtTQjdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR2hoYm1Sc1pYSXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ1kzSmxZWFJsVjJGMFkyaGxjaWgyYlN3Z2EyVjVMQ0JvWVc1a2JHVnlXMmxkS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdZM0psWVhSbFYyRjBZMmhsY2loMmJTd2dhMlY1TENCb1lXNWtiR1Z5S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsVjJGMFkyaGxjaUFvWEc0Z0lIWnRMRnh1SUNCclpYbFBja1p1TEZ4dUlDQm9ZVzVrYkdWeUxGeHVJQ0J2Y0hScGIyNXpYRzRwSUh0Y2JpQWdhV1lnS0dselVHeGhhVzVQWW1wbFkzUW9hR0Z1Wkd4bGNpa3BJSHRjYmlBZ0lDQnZjSFJwYjI1eklEMGdhR0Z1Wkd4bGNqdGNiaUFnSUNCb1lXNWtiR1Z5SUQwZ2FHRnVaR3hsY2k1b1lXNWtiR1Z5TzF4dUlDQjlYRzRnSUdsbUlDaDBlWEJsYjJZZ2FHRnVaR3hsY2lBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQm9ZVzVrYkdWeUlEMGdkbTFiYUdGdVpHeGxjbDA3WEc0Z0lIMWNiaUFnY21WMGRYSnVJSFp0TGlSM1lYUmphQ2hyWlhsUGNrWnVMQ0JvWVc1a2JHVnlMQ0J2Y0hScGIyNXpLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnpkR0YwWlUxcGVHbHVJQ2hXZFdVcElIdGNiaUFnTHk4Z1pteHZkeUJ6YjIxbGFHOTNJR2hoY3lCd2NtOWliR1Z0Y3lCM2FYUm9JR1JwY21WamRHeDVJR1JsWTJ4aGNtVmtJR1JsWm1sdWFYUnBiMjRnYjJKcVpXTjBYRzRnSUM4dklIZG9aVzRnZFhOcGJtY2dUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1TENCemJ5QjNaU0JvWVhabElIUnZJSEJ5YjJObFpIVnlZV3hzZVNCaWRXbHNaQ0IxY0Z4dUlDQXZMeUIwYUdVZ2IySnFaV04wSUdobGNtVXVYRzRnSUhaaGNpQmtZWFJoUkdWbUlEMGdlMzA3WEc0Z0lHUmhkR0ZFWldZdVoyVjBJRDBnWm5WdVkzUnBiMjRnS0NrZ2V5QnlaWFIxY200Z2RHaHBjeTVmWkdGMFlTQjlPMXh1SUNCMllYSWdjSEp2Y0hORVpXWWdQU0I3ZlR0Y2JpQWdjSEp2Y0hORVpXWXVaMlYwSUQwZ1puVnVZM1JwYjI0Z0tDa2dleUJ5WlhSMWNtNGdkR2hwY3k1ZmNISnZjSE1nZlR0Y2JpQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNCa1lYUmhSR1ZtTG5ObGRDQTlJR1oxYm1OMGFXOXVJQ2h1WlhkRVlYUmhLU0I3WEc0Z0lDQWdJQ0IzWVhKdUtGeHVJQ0FnSUNBZ0lDQW5RWFp2YVdRZ2NtVndiR0ZqYVc1bklHbHVjM1JoYm1ObElISnZiM1FnSkdSaGRHRXVJQ2NnSzF4dUlDQWdJQ0FnSUNBblZYTmxJRzVsYzNSbFpDQmtZWFJoSUhCeWIzQmxjblJwWlhNZ2FXNXpkR1ZoWkM0bkxGeHVJQ0FnSUNBZ0lDQjBhR2x6WEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDA3WEc0Z0lDQWdjSEp2Y0hORVpXWXVjMlYwSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdkMkZ5YmloY0lpUndjbTl3Y3lCcGN5QnlaV0ZrYjI1c2VTNWNJaXdnZEdocGN5azdYRzRnSUNBZ2ZUdGNiaUFnZlZ4dUlDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvVm5WbExuQnliM1J2ZEhsd1pTd2dKeVJrWVhSaEp5d2daR0YwWVVSbFppazdYRzRnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaFdkV1V1Y0hKdmRHOTBlWEJsTENBbkpIQnliM0J6Snl3Z2NISnZjSE5FWldZcE8xeHVYRzRnSUZaMVpTNXdjbTkwYjNSNWNHVXVKSE5sZENBOUlITmxkRHRjYmlBZ1ZuVmxMbkJ5YjNSdmRIbHdaUzRrWkdWc1pYUmxJRDBnWkdWc08xeHVYRzRnSUZaMVpTNXdjbTkwYjNSNWNHVXVKSGRoZEdOb0lEMGdablZ1WTNScGIyNGdLRnh1SUNBZ0lHVjRjRTl5Um00c1hHNGdJQ0FnWTJJc1hHNGdJQ0FnYjNCMGFXOXVjMXh1SUNBcElIdGNiaUFnSUNCMllYSWdkbTBnUFNCMGFHbHpPMXh1SUNBZ0lHbG1JQ2hwYzFCc1lXbHVUMkpxWldOMEtHTmlLU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR055WldGMFpWZGhkR05vWlhJb2RtMHNJR1Y0Y0U5eVJtNHNJR05pTENCdmNIUnBiMjV6S1Z4dUlDQWdJSDFjYmlBZ0lDQnZjSFJwYjI1eklEMGdiM0IwYVc5dWN5QjhmQ0I3ZlR0Y2JpQWdJQ0J2Y0hScGIyNXpMblZ6WlhJZ1BTQjBjblZsTzF4dUlDQWdJSFpoY2lCM1lYUmphR1Z5SUQwZ2JtVjNJRmRoZEdOb1pYSW9kbTBzSUdWNGNFOXlSbTRzSUdOaUxDQnZjSFJwYjI1ektUdGNiaUFnSUNCcFppQW9iM0IwYVc5dWN5NXBiVzFsWkdsaGRHVXBJSHRjYmlBZ0lDQWdJR05pTG1OaGJHd29kbTBzSUhkaGRHTm9aWEl1ZG1Gc2RXVXBPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnZFc1M1lYUmphRVp1SUNncElIdGNiaUFnSUNBZ0lIZGhkR05vWlhJdWRHVmhjbVJ2ZDI0b0tUdGNiaUFnSUNCOVhHNGdJSDA3WEc1OVhHNWNiaThxSUNBcUwxeHVYRzVtZFc1amRHbHZiaUJwYm1sMFVISnZkbWxrWlNBb2RtMHBJSHRjYmlBZ2RtRnlJSEJ5YjNacFpHVWdQU0IyYlM0a2IzQjBhVzl1Y3k1d2NtOTJhV1JsTzF4dUlDQnBaaUFvY0hKdmRtbGtaU2tnZTF4dUlDQWdJSFp0TGw5d2NtOTJhV1JsWkNBOUlIUjVjR1Z2WmlCd2NtOTJhV1JsSUQwOVBTQW5ablZ1WTNScGIyNG5YRzRnSUNBZ0lDQS9JSEJ5YjNacFpHVXVZMkZzYkNoMmJTbGNiaUFnSUNBZ0lEb2djSEp2ZG1sa1pUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJwYm1sMFNXNXFaV04wYVc5dWN5QW9kbTBwSUh0Y2JpQWdkbUZ5SUhKbGMzVnNkQ0E5SUhKbGMyOXNkbVZKYm1wbFkzUW9kbTB1Skc5d2RHbHZibk11YVc1cVpXTjBMQ0IyYlNrN1hHNGdJR2xtSUNoeVpYTjFiSFFwSUh0Y2JpQWdJQ0J2WW5ObGNuWmxjbE4wWVhSbExuTm9iM1ZzWkVOdmJuWmxjblFnUFNCbVlXeHpaVHRjYmlBZ0lDQlBZbXBsWTNRdWEyVjVjeWh5WlhOMWJIUXBMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLR3RsZVNrZ2UxeHVJQ0FnSUNBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHVnNjMlVnS2k5Y2JpQWdJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUdSbFptbHVaVkpsWVdOMGFYWmxLSFp0TENCclpYa3NJSEpsYzNWc2RGdHJaWGxkTENCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aVFYWnZhV1FnYlhWMFlYUnBibWNnWVc0Z2FXNXFaV04wWldRZ2RtRnNkV1VnWkdseVpXTjBiSGtnYzJsdVkyVWdkR2hsSUdOb1lXNW5aWE1nZDJsc2JDQmlaU0JjSWlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW05MlpYSjNjbWwwZEdWdUlIZG9aVzVsZG1WeUlIUm9aU0J3Y205MmFXUmxaQ0JqYjIxd2IyNWxiblFnY21VdGNtVnVaR1Z5Y3k0Z1hDSWdLMXh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSnBibXBsWTNScGIyNGdZbVZwYm1jZ2JYVjBZWFJsWkRvZ1hGeGNJbHdpSUNzZ2EyVjVJQ3NnWENKY1hGd2lYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJiVnh1SUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdaR1ZtYVc1bFVtVmhZM1JwZG1Vb2RtMHNJR3RsZVN3Z2NtVnpkV3gwVzJ0bGVWMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNBZ0lHOWljMlZ5ZG1WeVUzUmhkR1V1YzJodmRXeGtRMjl1ZG1WeWRDQTlJSFJ5ZFdVN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdjbVZ6YjJ4MlpVbHVhbVZqZENBb2FXNXFaV04wTENCMmJTa2dlMXh1SUNCcFppQW9hVzVxWldOMEtTQjdYRzRnSUNBZ0x5OGdhVzVxWldOMElHbHpJRHBoYm5rZ1ltVmpZWFZ6WlNCbWJHOTNJR2x6SUc1dmRDQnpiV0Z5ZENCbGJtOTFaMmdnZEc4Z1ptbG5kWEpsSUc5MWRDQmpZV05vWldSY2JpQWdJQ0IyWVhJZ2NtVnpkV3gwSUQwZ1QySnFaV04wTG1OeVpXRjBaU2h1ZFd4c0tUdGNiaUFnSUNCMllYSWdhMlY1Y3lBOUlHaGhjMU41YldKdmJGeHVJQ0FnSUNBZ1B5QlNaV1pzWldOMExtOTNia3RsZVhNb2FXNXFaV04wS1M1bWFXeDBaWElvWm5WdVkzUnBiMjRnS0d0bGVTa2dlMXh1SUNBZ0lDQWdJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYm1WNGRDQXFMMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2locGJtcGxZM1FzSUd0bGVTa3VaVzUxYldWeVlXSnNaVnh1SUNBZ0lDQWdmU2xjYmlBZ0lDQWdJRG9nVDJKcVpXTjBMbXRsZVhNb2FXNXFaV04wS1R0Y2JseHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2EyVjVjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2RtRnlJR3RsZVNBOUlHdGxlWE5iYVYwN1hHNGdJQ0FnSUNCMllYSWdjSEp2ZG1sa1pVdGxlU0E5SUdsdWFtVmpkRnRyWlhsZExtWnliMjA3WEc0Z0lDQWdJQ0IyWVhJZ2MyOTFjbU5sSUQwZ2RtMDdYRzRnSUNBZ0lDQjNhR2xzWlNBb2MyOTFjbU5sS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6YjNWeVkyVXVYM0J5YjNacFpHVmtJQ1ltSUhCeWIzWnBaR1ZMWlhrZ2FXNGdjMjkxY21ObExsOXdjbTkyYVdSbFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGMzVnNkRnRyWlhsZElEMGdjMjkxY21ObExsOXdjbTkyYVdSbFpGdHdjbTkyYVdSbFMyVjVYVHRjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhOdmRYSmpaU0E5SUhOdmRYSmpaUzRrY0dGeVpXNTBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0NGemIzVnlZMlVwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ2RrWldaaGRXeDBKeUJwYmlCcGJtcGxZM1JiYTJWNVhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhaaGNpQndjbTkyYVdSbFJHVm1ZWFZzZENBOUlHbHVhbVZqZEZ0clpYbGRMbVJsWm1GMWJIUTdYRzRnSUNBZ0lDQWdJQ0FnY21WemRXeDBXMnRsZVYwZ1BTQjBlWEJsYjJZZ2NISnZkbWxrWlVSbFptRjFiSFFnUFQwOUlDZG1kVzVqZEdsdmJpZGNiaUFnSUNBZ0lDQWdJQ0FnSUQ4Z2NISnZkbWxrWlVSbFptRjFiSFF1WTJGc2JDaDJiU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lEb2djSEp2ZG1sa1pVUmxabUYxYkhRN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lIZGhjbTRvS0Z3aVNXNXFaV04wYVc5dUlGeGNYQ0pjSWlBcklHdGxlU0FySUZ3aVhGeGNJaUJ1YjNRZ1ptOTFibVJjSWlrc0lIWnRLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2NtVnpkV3gwWEc0Z0lIMWNibjFjYmx4dUx5b2dJQ292WEc1Y2JpOHFLbHh1SUNvZ1VuVnVkR2x0WlNCb1pXeHdaWElnWm05eUlISmxibVJsY21sdVp5QjJMV1p2Y2lCc2FYTjBjeTVjYmlBcUwxeHVablZ1WTNScGIyNGdjbVZ1WkdWeVRHbHpkQ0FvWEc0Z0lIWmhiQ3hjYmlBZ2NtVnVaR1Z5WEc0cElIdGNiaUFnZG1GeUlISmxkQ3dnYVN3Z2JDd2dhMlY1Y3l3Z2EyVjVPMXh1SUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoMllXd3BJSHg4SUhSNWNHVnZaaUIyWVd3Z1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdjbVYwSUQwZ2JtVjNJRUZ5Y21GNUtIWmhiQzVzWlc1bmRHZ3BPMXh1SUNBZ0lHWnZjaUFvYVNBOUlEQXNJR3dnUFNCMllXd3ViR1Z1WjNSb095QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0J5WlhSYmFWMGdQU0J5Wlc1a1pYSW9kbUZzVzJsZExDQnBLVHRjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUhaaGJDQTlQVDBnSjI1MWJXSmxjaWNwSUh0Y2JpQWdJQ0J5WlhRZ1BTQnVaWGNnUVhKeVlYa29kbUZzS1R0Y2JpQWdJQ0JtYjNJZ0tHa2dQU0F3T3lCcElEd2dkbUZzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJSEpsZEZ0cFhTQTlJSEpsYm1SbGNpaHBJQ3NnTVN3Z2FTazdYRzRnSUNBZ2ZWeHVJQ0I5SUdWc2MyVWdhV1lnS0dselQySnFaV04wS0haaGJDa3BJSHRjYmlBZ0lDQnJaWGx6SUQwZ1QySnFaV04wTG10bGVYTW9kbUZzS1R0Y2JpQWdJQ0J5WlhRZ1BTQnVaWGNnUVhKeVlYa29hMlY1Y3k1c1pXNW5kR2dwTzF4dUlDQWdJR1p2Y2lBb2FTQTlJREFzSUd3Z1BTQnJaWGx6TG14bGJtZDBhRHNnYVNBOElHdzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2EyVjVJRDBnYTJWNWMxdHBYVHRjYmlBZ0lDQWdJSEpsZEZ0cFhTQTlJSEpsYm1SbGNpaDJZV3hiYTJWNVhTd2dhMlY1TENCcEtUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2FXWWdLR2x6UkdWbUtISmxkQ2twSUh0Y2JpQWdJQ0FvY21WMEtTNWZhWE5XVEdsemRDQTlJSFJ5ZFdVN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGRGeHVmVnh1WEc0dktpQWdLaTljYmx4dUx5b3FYRzRnS2lCU2RXNTBhVzFsSUdobGJIQmxjaUJtYjNJZ2NtVnVaR1Z5YVc1bklEeHpiRzkwUGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJ5Wlc1a1pYSlRiRzkwSUNoY2JpQWdibUZ0WlN4Y2JpQWdabUZzYkdKaFkyc3NYRzRnSUhCeWIzQnpMRnh1SUNCaWFXNWtUMkpxWldOMFhHNHBJSHRjYmlBZ2RtRnlJSE5qYjNCbFpGTnNiM1JHYmlBOUlIUm9hWE11SkhOamIzQmxaRk5zYjNSelcyNWhiV1ZkTzF4dUlDQjJZWElnYm05a1pYTTdYRzRnSUdsbUlDaHpZMjl3WldSVGJHOTBSbTRwSUhzZ0x5OGdjMk52Y0dWa0lITnNiM1JjYmlBZ0lDQndjbTl3Y3lBOUlIQnliM0J6SUh4OElIdDlPMXh1SUNBZ0lHbG1JQ2hpYVc1a1QySnFaV04wS1NCN1hHNGdJQ0FnSUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUFtSmlBaGFYTlBZbXBsWTNRb1ltbHVaRTlpYW1WamRDa3BJSHRjYmlBZ0lDQWdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDQWdJQ0FuYzJ4dmRDQjJMV0pwYm1RZ2QybDBhRzkxZENCaGNtZDFiV1Z1ZENCbGVIQmxZM1J6SUdGdUlFOWlhbVZqZENjc1hHNGdJQ0FnSUNBZ0lDQWdkR2hwYzF4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NISnZjSE1nUFNCbGVIUmxibVFvWlhoMFpXNWtLSHQ5TENCaWFXNWtUMkpxWldOMEtTd2djSEp2Y0hNcE8xeHVJQ0FnSUgxY2JpQWdJQ0J1YjJSbGN5QTlJSE5qYjNCbFpGTnNiM1JHYmlod2NtOXdjeWtnZkh3Z1ptRnNiR0poWTJzN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2RtRnlJSE5zYjNST2IyUmxjeUE5SUhSb2FYTXVKSE5zYjNSelcyNWhiV1ZkTzF4dUlDQWdJQzh2SUhkaGNtNGdaSFZ3YkdsallYUmxJSE5zYjNRZ2RYTmhaMlZjYmlBZ0lDQnBaaUFvYzJ4dmRFNXZaR1Z6S1NCN1hHNGdJQ0FnSUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUFtSmlCemJHOTBUbTlrWlhNdVgzSmxibVJsY21Wa0tTQjdYRzRnSUNBZ0lDQWdJSGRoY200b1hHNGdJQ0FnSUNBZ0lDQWdYQ0pFZFhCc2FXTmhkR1VnY0hKbGMyVnVZMlVnYjJZZ2MyeHZkQ0JjWEZ3aVhDSWdLeUJ1WVcxbElDc2dYQ0pjWEZ3aUlHWnZkVzVrSUdsdUlIUm9aU0J6WVcxbElISmxibVJsY2lCMGNtVmxJRndpSUN0Y2JpQWdJQ0FnSUNBZ0lDQmNJaTBnZEdocGN5QjNhV3hzSUd4cGEyVnNlU0JqWVhWelpTQnlaVzVrWlhJZ1pYSnliM0p6TGx3aUxGeHVJQ0FnSUNBZ0lDQWdJSFJvYVhOY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lITnNiM1JPYjJSbGN5NWZjbVZ1WkdWeVpXUWdQU0IwY25WbE8xeHVJQ0FnSUgxY2JpQWdJQ0J1YjJSbGN5QTlJSE5zYjNST2IyUmxjeUI4ZkNCbVlXeHNZbUZqYXp0Y2JpQWdmVnh1WEc0Z0lIWmhjaUIwWVhKblpYUWdQU0J3Y205d2N5QW1KaUJ3Y205d2N5NXpiRzkwTzF4dUlDQnBaaUFvZEdGeVoyVjBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11SkdOeVpXRjBaVVZzWlcxbGJuUW9KM1JsYlhCc1lYUmxKeXdnZXlCemJHOTBPaUIwWVhKblpYUWdmU3dnYm05a1pYTXBYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNXZaR1Z6WEc0Z0lIMWNibjFjYmx4dUx5b2dJQ292WEc1Y2JpOHFLbHh1SUNvZ1VuVnVkR2x0WlNCb1pXeHdaWElnWm05eUlISmxjMjlzZG1sdVp5Qm1hV3gwWlhKelhHNGdLaTljYm1aMWJtTjBhVzl1SUhKbGMyOXNkbVZHYVd4MFpYSWdLR2xrS1NCN1hHNGdJSEpsZEhWeWJpQnlaWE52YkhabFFYTnpaWFFvZEdocGN5NGtiM0IwYVc5dWN5d2dKMlpwYkhSbGNuTW5MQ0JwWkN3Z2RISjFaU2tnZkh3Z2FXUmxiblJwZEhsY2JuMWNibHh1THlvZ0lDb3ZYRzVjYmk4cUtseHVJQ29nVW5WdWRHbHRaU0JvWld4d1pYSWdabTl5SUdOb1pXTnJhVzVuSUd0bGVVTnZaR1Z6SUdaeWIyMGdZMjl1Wm1sbkxseHVJQ29nWlhod2IzTmxaQ0JoY3lCV2RXVXVjSEp2ZEc5MGVYQmxMbDlyWEc0Z0tpQndZWE56YVc1bklHbHVJR1YyWlc1MFMyVjVUbUZ0WlNCaGN5QnNZWE4wSUdGeVozVnRaVzUwSUhObGNHRnlZWFJsYkhrZ1ptOXlJR0poWTJ0M1lYSmtjeUJqYjIxd1lYUmNiaUFxTDF4dVpuVnVZM1JwYjI0Z1kyaGxZMnRMWlhsRGIyUmxjeUFvWEc0Z0lHVjJaVzUwUzJWNVEyOWtaU3hjYmlBZ2EyVjVMRnh1SUNCaWRXbHNkRWx1UVd4cFlYTXNYRzRnSUdWMlpXNTBTMlY1VG1GdFpWeHVLU0I3WEc0Z0lIWmhjaUJyWlhsRGIyUmxjeUE5SUdOdmJtWnBaeTVyWlhsRGIyUmxjMXRyWlhsZElIeDhJR0oxYVd4MFNXNUJiR2xoY3p0Y2JpQWdhV1lnS0d0bGVVTnZaR1Z6S1NCN1hHNGdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvYTJWNVEyOWtaWE1wS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYTJWNVEyOWtaWE11YVc1a1pYaFBaaWhsZG1WdWRFdGxlVU52WkdVcElEMDlQU0F0TVZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2EyVjVRMjlrWlhNZ0lUMDlJR1YyWlc1MFMyVjVRMjlrWlZ4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUdsbUlDaGxkbVZ1ZEV0bGVVNWhiV1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdhSGx3YUdWdVlYUmxLR1YyWlc1MFMyVjVUbUZ0WlNrZ0lUMDlJR3RsZVZ4dUlDQjlYRzU5WEc1Y2JpOHFJQ0FxTDF4dVhHNHZLaXBjYmlBcUlGSjFiblJwYldVZ2FHVnNjR1Z5SUdadmNpQnRaWEpuYVc1bklIWXRZbWx1WkQxY0ltOWlhbVZqZEZ3aUlHbHVkRzhnWVNCV1RtOWtaU2R6SUdSaGRHRXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHSnBibVJQWW1wbFkzUlFjbTl3Y3lBb1hHNGdJR1JoZEdFc1hHNGdJSFJoWnl4Y2JpQWdkbUZzZFdVc1hHNGdJR0Z6VUhKdmNDeGNiaUFnYVhOVGVXNWpYRzRwSUh0Y2JpQWdhV1lnS0haaGJIVmxLU0I3WEc0Z0lDQWdhV1lnS0NGcGMwOWlhbVZqZENoMllXeDFaU2twSUh0Y2JpQWdJQ0FnSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ0ppWWdkMkZ5YmloY2JpQWdJQ0FnSUNBZ0ozWXRZbWx1WkNCM2FYUm9iM1YwSUdGeVozVnRaVzUwSUdWNGNHVmpkSE1nWVc0Z1QySnFaV04wSUc5eUlFRnljbUY1SUhaaGJIVmxKeXhjYmlBZ0lDQWdJQ0FnZEdocGMxeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGJIVmxJRDBnZEc5UFltcGxZM1FvZG1Gc2RXVXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkbUZ5SUdoaGMyZzdYRzRnSUNBZ0lDQjJZWElnYkc5dmNDQTlJR1oxYm1OMGFXOXVJQ2dnYTJWNUlDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBZ0lDQWdhMlY1SUQwOVBTQW5ZMnhoYzNNbklIeDhYRzRnSUNBZ0lDQWdJQ0FnYTJWNUlEMDlQU0FuYzNSNWJHVW5JSHg4WEc0Z0lDQWdJQ0FnSUNBZ2FYTlNaWE5sY25abFpFRjBkSEpwWW5WMFpTaHJaWGtwWEc0Z0lDQWdJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2hoYzJnZ1BTQmtZWFJoTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lIWmhjaUIwZVhCbElEMGdaR0YwWVM1aGRIUnljeUFtSmlCa1lYUmhMbUYwZEhKekxuUjVjR1U3WEc0Z0lDQWdJQ0FnSUNBZ2FHRnphQ0E5SUdGelVISnZjQ0I4ZkNCamIyNW1hV2N1YlhWemRGVnpaVkJ5YjNBb2RHRm5MQ0IwZVhCbExDQnJaWGtwWEc0Z0lDQWdJQ0FnSUNBZ0lDQS9JR1JoZEdFdVpHOXRVSEp2Y0hNZ2ZId2dLR1JoZEdFdVpHOXRVSEp2Y0hNZ1BTQjdmU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lEb2daR0YwWVM1aGRIUnljeUI4ZkNBb1pHRjBZUzVoZEhSeWN5QTlJSHQ5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvSVNoclpYa2dhVzRnYUdGemFDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCb1lYTm9XMnRsZVYwZ1BTQjJZV3gxWlZ0clpYbGRPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR2x6VTNsdVl5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzl1SUQwZ1pHRjBZUzV2YmlCOGZDQW9aR0YwWVM1dmJpQTlJSHQ5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzl1V3loY0luVndaR0YwWlRwY0lpQXJJR3RsZVNsZElEMGdablZ1WTNScGIyNGdLQ1JsZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlZ0clpYbGRJRDBnSkdWMlpXNTBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCMllXeDFaU2tnYkc5dmNDZ2dhMlY1SUNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJrWVhSaFhHNTlYRzVjYmk4cUlDQXFMMXh1WEc0dktpcGNiaUFxSUZKMWJuUnBiV1VnYUdWc2NHVnlJR1p2Y2lCeVpXNWtaWEpwYm1jZ2MzUmhkR2xqSUhSeVpXVnpMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQnlaVzVrWlhKVGRHRjBhV01nS0Z4dUlDQnBibVJsZUN4Y2JpQWdhWE5KYmtadmNseHVLU0I3WEc0Z0lIWmhjaUJqWVdOb1pXUWdQU0IwYUdsekxsOXpkR0YwYVdOVWNtVmxjeUI4ZkNBb2RHaHBjeTVmYzNSaGRHbGpWSEpsWlhNZ1BTQmJYU2s3WEc0Z0lIWmhjaUIwY21WbElEMGdZMkZqYUdWa1cybHVaR1Y0WFR0Y2JpQWdMeThnYVdZZ2FHRnpJR0ZzY21WaFpIa3RjbVZ1WkdWeVpXUWdjM1JoZEdsaklIUnlaV1VnWVc1a0lHNXZkQ0JwYm5OcFpHVWdkaTFtYjNJc1hHNGdJQzh2SUhkbElHTmhiaUJ5WlhWelpTQjBhR1VnYzJGdFpTQjBjbVZsSUdKNUlHUnZhVzVuSUdFZ2MyaGhiR3h2ZHlCamJHOXVaUzVjYmlBZ2FXWWdLSFJ5WldVZ0ppWWdJV2x6U1c1R2IzSXBJSHRjYmlBZ0lDQnlaWFIxY200Z1FYSnlZWGt1YVhOQmNuSmhlU2gwY21WbEtWeHVJQ0FnSUNBZ1B5QmpiRzl1WlZaT2IyUmxjeWgwY21WbEtWeHVJQ0FnSUNBZ09pQmpiRzl1WlZaT2IyUmxLSFJ5WldVcFhHNGdJSDFjYmlBZ0x5OGdiM1JvWlhKM2FYTmxMQ0J5Wlc1a1pYSWdZU0JtY21WemFDQjBjbVZsTGx4dUlDQjBjbVZsSUQwZ1kyRmphR1ZrVzJsdVpHVjRYU0E5SUhSb2FYTXVKRzl3ZEdsdmJuTXVjM1JoZEdsalVtVnVaR1Z5Um01elcybHVaR1Y0WFM1allXeHNLRnh1SUNBZ0lIUm9hWE11WDNKbGJtUmxjbEJ5YjNoNUxGeHVJQ0FnSUc1MWJHd3NYRzRnSUNBZ2RHaHBjeUF2THlCbWIzSWdjbVZ1WkdWeUlHWnVjeUJuWlc1bGNtRjBaV1FnWm05eUlHWjFibU4wYVc5dVlXd2dZMjl0Y0c5dVpXNTBJSFJsYlhCc1lYUmxjMXh1SUNBcE8xeHVJQ0J0WVhKclUzUmhkR2xqS0hSeVpXVXNJQ2hjSWw5ZmMzUmhkR2xqWDE5Y0lpQXJJR2x1WkdWNEtTd2dabUZzYzJVcE8xeHVJQ0J5WlhSMWNtNGdkSEpsWlZ4dWZWeHVYRzR2S2lwY2JpQXFJRkoxYm5ScGJXVWdhR1ZzY0dWeUlHWnZjaUIyTFc5dVkyVXVYRzRnS2lCRlptWmxZM1JwZG1Wc2VTQnBkQ0J0WldGdWN5QnRZWEpyYVc1bklIUm9aU0J1YjJSbElHRnpJSE4wWVhScFl5QjNhWFJvSUdFZ2RXNXBjWFZsSUd0bGVTNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2JXRnlhMDl1WTJVZ0tGeHVJQ0IwY21WbExGeHVJQ0JwYm1SbGVDeGNiaUFnYTJWNVhHNHBJSHRjYmlBZ2JXRnlhMU4wWVhScFl5aDBjbVZsTENBb1hDSmZYMjl1WTJWZlgxd2lJQ3NnYVc1a1pYZ2dLeUFvYTJWNUlEOGdLRndpWDF3aUlDc2dhMlY1S1NBNklGd2lYQ0lwS1N3Z2RISjFaU2s3WEc0Z0lISmxkSFZ5YmlCMGNtVmxYRzU5WEc1Y2JtWjFibU4wYVc5dUlHMWhjbXRUZEdGMGFXTWdLRnh1SUNCMGNtVmxMRnh1SUNCclpYa3NYRzRnSUdselQyNWpaVnh1S1NCN1hHNGdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLSFJ5WldVcEtTQjdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQjBjbVZsTG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQnBaaUFvZEhKbFpWdHBYU0FtSmlCMGVYQmxiMllnZEhKbFpWdHBYU0FoUFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lDQWdiV0Z5YTFOMFlYUnBZMDV2WkdVb2RISmxaVnRwWFN3Z0tHdGxlU0FySUZ3aVgxd2lJQ3NnYVNrc0lHbHpUMjVqWlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUcxaGNtdFRkR0YwYVdOT2IyUmxLSFJ5WldVc0lHdGxlU3dnYVhOUGJtTmxLVHRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCdFlYSnJVM1JoZEdsalRtOWtaU0FvYm05a1pTd2dhMlY1TENCcGMwOXVZMlVwSUh0Y2JpQWdibTlrWlM1cGMxTjBZWFJwWXlBOUlIUnlkV1U3WEc0Z0lHNXZaR1V1YTJWNUlEMGdhMlY1TzF4dUlDQnViMlJsTG1selQyNWpaU0E5SUdselQyNWpaVHRjYm4xY2JseHVMeW9nSUNvdlhHNWNibVoxYm1OMGFXOXVJR0pwYm1SUFltcGxZM1JNYVhOMFpXNWxjbk1nS0dSaGRHRXNJSFpoYkhWbEtTQjdYRzRnSUdsbUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUdsbUlDZ2hhWE5RYkdGcGJrOWlhbVZqZENoMllXeDFaU2twSUh0Y2JpQWdJQ0FnSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ0ppWWdkMkZ5YmloY2JpQWdJQ0FnSUNBZ0ozWXRiMjRnZDJsMGFHOTFkQ0JoY21kMWJXVnVkQ0JsZUhCbFkzUnpJR0Z1SUU5aWFtVmpkQ0IyWVd4MVpTY3NYRzRnSUNBZ0lDQWdJSFJvYVhOY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFpoY2lCdmJpQTlJR1JoZEdFdWIyNGdQU0JrWVhSaExtOXVJRDhnWlhoMFpXNWtLSHQ5TENCa1lYUmhMbTl1S1NBNklIdDlPMXh1SUNBZ0lDQWdabTl5SUNoMllYSWdhMlY1SUdsdUlIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJsZUdsemRHbHVaeUE5SUc5dVcydGxlVjA3WEc0Z0lDQWdJQ0FnSUhaaGNpQnZkWEp6SUQwZ2RtRnNkV1ZiYTJWNVhUdGNiaUFnSUNBZ0lDQWdiMjViYTJWNVhTQTlJR1Y0YVhOMGFXNW5JRDhnVzEwdVkyOXVZMkYwS0dWNGFYTjBhVzVuTENCdmRYSnpLU0E2SUc5MWNuTTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCa1lYUmhYRzU5WEc1Y2JpOHFJQ0FxTDF4dVhHNW1kVzVqZEdsdmJpQnBibk4wWVd4c1VtVnVaR1Z5U0dWc2NHVnljeUFvZEdGeVoyVjBLU0I3WEc0Z0lIUmhjbWRsZEM1ZmJ5QTlJRzFoY210UGJtTmxPMXh1SUNCMFlYSm5aWFF1WDI0Z1BTQjBiMDUxYldKbGNqdGNiaUFnZEdGeVoyVjBMbDl6SUQwZ2RHOVRkSEpwYm1jN1hHNGdJSFJoY21kbGRDNWZiQ0E5SUhKbGJtUmxja3hwYzNRN1hHNGdJSFJoY21kbGRDNWZkQ0E5SUhKbGJtUmxjbE5zYjNRN1hHNGdJSFJoY21kbGRDNWZjU0E5SUd4dmIzTmxSWEYxWVd3N1hHNGdJSFJoY21kbGRDNWZhU0E5SUd4dmIzTmxTVzVrWlhoUFpqdGNiaUFnZEdGeVoyVjBMbDl0SUQwZ2NtVnVaR1Z5VTNSaGRHbGpPMXh1SUNCMFlYSm5aWFF1WDJZZ1BTQnlaWE52YkhabFJtbHNkR1Z5TzF4dUlDQjBZWEpuWlhRdVgyc2dQU0JqYUdWamEwdGxlVU52WkdWek8xeHVJQ0IwWVhKblpYUXVYMklnUFNCaWFXNWtUMkpxWldOMFVISnZjSE03WEc0Z0lIUmhjbWRsZEM1ZmRpQTlJR055WldGMFpWUmxlSFJXVG05a1pUdGNiaUFnZEdGeVoyVjBMbDlsSUQwZ1kzSmxZWFJsUlcxd2RIbFdUbTlrWlR0Y2JpQWdkR0Z5WjJWMExsOTFJRDBnY21WemIyeDJaVk5qYjNCbFpGTnNiM1J6TzF4dUlDQjBZWEpuWlhRdVgyY2dQU0JpYVc1a1QySnFaV04wVEdsemRHVnVaWEp6TzF4dWZWeHVYRzR2S2lBZ0tpOWNibHh1Wm5WdVkzUnBiMjRnUm5WdVkzUnBiMjVoYkZKbGJtUmxja052Ym5SbGVIUWdLRnh1SUNCa1lYUmhMRnh1SUNCd2NtOXdjeXhjYmlBZ1kyaHBiR1J5Wlc0c1hHNGdJSEJoY21WdWRDeGNiaUFnUTNSdmNseHVLU0I3WEc0Z0lIWmhjaUJ2Y0hScGIyNXpJRDBnUTNSdmNpNXZjSFJwYjI1ek8xeHVJQ0IwYUdsekxtUmhkR0VnUFNCa1lYUmhPMXh1SUNCMGFHbHpMbkJ5YjNCeklEMGdjSEp2Y0hNN1hHNGdJSFJvYVhNdVkyaHBiR1J5Wlc0Z1BTQmphR2xzWkhKbGJqdGNiaUFnZEdocGN5NXdZWEpsYm5RZ1BTQndZWEpsYm5RN1hHNGdJSFJvYVhNdWJHbHpkR1Z1WlhKeklEMGdaR0YwWVM1dmJpQjhmQ0JsYlhCMGVVOWlhbVZqZER0Y2JpQWdkR2hwY3k1cGJtcGxZM1JwYjI1eklEMGdjbVZ6YjJ4MlpVbHVhbVZqZENodmNIUnBiMjV6TG1sdWFtVmpkQ3dnY0dGeVpXNTBLVHRjYmlBZ2RHaHBjeTV6Ykc5MGN5QTlJR1oxYm1OMGFXOXVJQ2dwSUhzZ2NtVjBkWEp1SUhKbGMyOXNkbVZUYkc5MGN5aGphR2xzWkhKbGJpd2djR0Z5Wlc1MEtUc2dmVHRjYmx4dUlDQXZMeUJsYm5OMWNtVWdkR2hsSUdOeVpXRjBaVVZzWlcxbGJuUWdablZ1WTNScGIyNGdhVzRnWm5WdVkzUnBiMjVoYkNCamIyMXdiMjVsYm5SelhHNGdJQzh2SUdkbGRITWdZU0IxYm1seGRXVWdZMjl1ZEdWNGRDQXRJSFJvYVhNZ2FYTWdibVZqWlhOellYSjVJR1p2Y2lCamIzSnlaV04wSUc1aGJXVmtJSE5zYjNRZ1kyaGxZMnRjYmlBZ2RtRnlJR052Ym5SbGVIUldiU0E5SUU5aWFtVmpkQzVqY21WaGRHVW9jR0Z5Wlc1MEtUdGNiaUFnZG1GeUlHbHpRMjl0Y0dsc1pXUWdQU0JwYzFSeWRXVW9iM0IwYVc5dWN5NWZZMjl0Y0dsc1pXUXBPMXh1SUNCMllYSWdibVZsWkU1dmNtMWhiR2w2WVhScGIyNGdQU0FoYVhORGIyMXdhV3hsWkR0Y2JseHVJQ0F2THlCemRYQndiM0owSUdadmNpQmpiMjF3YVd4bFpDQm1kVzVqZEdsdmJtRnNJSFJsYlhCc1lYUmxYRzRnSUdsbUlDaHBjME52YlhCcGJHVmtLU0I3WEc0Z0lDQWdMeThnWlhod2IzTnBibWNnSkc5d2RHbHZibk1nWm05eUlISmxibVJsY2xOMFlYUnBZeWdwWEc0Z0lDQWdkR2hwY3k0a2IzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5NN1hHNGdJQ0FnTHk4Z2NISmxMWEpsYzI5c2RtVWdjMnh2ZEhNZ1ptOXlJSEpsYm1SbGNsTnNiM1FvS1Z4dUlDQWdJSFJvYVhNdUpITnNiM1J6SUQwZ2RHaHBjeTV6Ykc5MGN5Z3BPMXh1SUNBZ0lIUm9hWE11SkhOamIzQmxaRk5zYjNSeklEMGdaR0YwWVM1elkyOXdaV1JUYkc5MGN5QjhmQ0JsYlhCMGVVOWlhbVZqZER0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2h2Y0hScGIyNXpMbDl6WTI5d1pVbGtLU0I3WEc0Z0lDQWdkR2hwY3k1Zll5QTlJR1oxYm1OMGFXOXVJQ2hoTENCaUxDQmpMQ0JrS1NCN1hHNGdJQ0FnSUNCMllYSWdkbTV2WkdVZ1BTQmpjbVZoZEdWRmJHVnRaVzUwS0dOdmJuUmxlSFJXYlN3Z1lTd2dZaXdnWXl3Z1pDd2dibVZsWkU1dmNtMWhiR2w2WVhScGIyNHBPMXh1SUNBZ0lDQWdhV1lnS0hadWIyUmxLU0I3WEc0Z0lDQWdJQ0FnSUhadWIyUmxMbVp1VTJOdmNHVkpaQ0E5SUc5d2RHbHZibk11WDNOamIzQmxTV1E3WEc0Z0lDQWdJQ0FnSUhadWIyUmxMbVp1UTI5dWRHVjRkQ0E5SUhCaGNtVnVkRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQjJibTlrWlZ4dUlDQWdJSDA3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZEdocGN5NWZZeUE5SUdaMWJtTjBhVzl1SUNoaExDQmlMQ0JqTENCa0tTQjdJSEpsZEhWeWJpQmpjbVZoZEdWRmJHVnRaVzUwS0dOdmJuUmxlSFJXYlN3Z1lTd2dZaXdnWXl3Z1pDd2dibVZsWkU1dmNtMWhiR2w2WVhScGIyNHBPeUI5TzF4dUlDQjlYRzU5WEc1Y2JtbHVjM1JoYkd4U1pXNWtaWEpJWld4d1pYSnpLRVoxYm1OMGFXOXVZV3hTWlc1a1pYSkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTazdYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVVoxYm1OMGFXOXVZV3hEYjIxd2IyNWxiblFnS0Z4dUlDQkRkRzl5TEZ4dUlDQndjbTl3YzBSaGRHRXNYRzRnSUdSaGRHRXNYRzRnSUdOdmJuUmxlSFJXYlN4Y2JpQWdZMmhwYkdSeVpXNWNiaWtnZTF4dUlDQjJZWElnYjNCMGFXOXVjeUE5SUVOMGIzSXViM0IwYVc5dWN6dGNiaUFnZG1GeUlIQnliM0J6SUQwZ2UzMDdYRzRnSUhaaGNpQndjbTl3VDNCMGFXOXVjeUE5SUc5d2RHbHZibk11Y0hKdmNITTdYRzRnSUdsbUlDaHBjMFJsWmlod2NtOXdUM0IwYVc5dWN5a3BJSHRjYmlBZ0lDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z2NISnZjRTl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJSEJ5YjNCelcydGxlVjBnUFNCMllXeHBaR0YwWlZCeWIzQW9hMlY1TENCd2NtOXdUM0IwYVc5dWN5d2djSEp2Y0hORVlYUmhJSHg4SUdWdGNIUjVUMkpxWldOMEtUdGNiaUFnSUNCOVhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2FXWWdLR2x6UkdWbUtHUmhkR0V1WVhSMGNuTXBLU0I3SUcxbGNtZGxVSEp2Y0hNb2NISnZjSE1zSUdSaGRHRXVZWFIwY25NcE95QjlYRzRnSUNBZ2FXWWdLR2x6UkdWbUtHUmhkR0V1Y0hKdmNITXBLU0I3SUcxbGNtZGxVSEp2Y0hNb2NISnZjSE1zSUdSaGRHRXVjSEp2Y0hNcE95QjlYRzRnSUgxY2JseHVJQ0IyWVhJZ2NtVnVaR1Z5UTI5dWRHVjRkQ0E5SUc1bGR5QkdkVzVqZEdsdmJtRnNVbVZ1WkdWeVEyOXVkR1Y0ZENoY2JpQWdJQ0JrWVhSaExGeHVJQ0FnSUhCeWIzQnpMRnh1SUNBZ0lHTm9hV3hrY21WdUxGeHVJQ0FnSUdOdmJuUmxlSFJXYlN4Y2JpQWdJQ0JEZEc5eVhHNGdJQ2s3WEc1Y2JpQWdkbUZ5SUhadWIyUmxJRDBnYjNCMGFXOXVjeTV5Wlc1a1pYSXVZMkZzYkNodWRXeHNMQ0J5Wlc1a1pYSkRiMjUwWlhoMExsOWpMQ0J5Wlc1a1pYSkRiMjUwWlhoMEtUdGNibHh1SUNCcFppQW9kbTV2WkdVZ2FXNXpkR0Z1WTJWdlppQldUbTlrWlNrZ2UxeHVJQ0FnSUhadWIyUmxMbVp1UTI5dWRHVjRkQ0E5SUdOdmJuUmxlSFJXYlR0Y2JpQWdJQ0IyYm05a1pTNW1iazl3ZEdsdmJuTWdQU0J2Y0hScGIyNXpPMXh1SUNBZ0lHbG1JQ2hrWVhSaExuTnNiM1FwSUh0Y2JpQWdJQ0FnSUNoMmJtOWtaUzVrWVhSaElIeDhJQ2gyYm05a1pTNWtZWFJoSUQwZ2UzMHBLUzV6Ykc5MElEMGdaR0YwWVM1emJHOTBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQjJibTlrWlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJ0WlhKblpWQnliM0J6SUNoMGJ5d2dabkp2YlNrZ2UxeHVJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdabkp2YlNrZ2UxeHVJQ0FnSUhSdlcyTmhiV1ZzYVhwbEtHdGxlU2xkSUQwZ1puSnZiVnRyWlhsZE8xeHVJQ0I5WEc1OVhHNWNiaThxSUNBcUwxeHVYRzVjYmx4dVhHNHZMeUJTWldkcGMzUmxjaUIwYUdVZ1kyOXRjRzl1Wlc1MElHaHZiMnNnZEc4Z2QyVmxlQ0J1WVhScGRtVWdjbVZ1WkdWeUlHVnVaMmx1WlM1Y2JpOHZJRlJvWlNCb2IyOXJJSGRwYkd3Z1ltVWdkSEpwWjJkbGNtVmtJR0o1SUc1aGRHbDJaU3dnYm05MElHcGhkbUZ6WTNKcGNIUXVYRzVjYmx4dUx5OGdWWEJrWVhSbGN5QjBhR1VnYzNSaGRHVWdiMllnZEdobElHTnZiWEJ2Ym1WdWRDQjBieUIzWldWNElHNWhkR2wyWlNCeVpXNWtaWElnWlc1bmFXNWxMbHh1WEc0dktpQWdLaTljYmx4dUx5OGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMGhoYm10ek1UQXhNREF2ZDJWbGVDMXVZWFJwZG1VdFpHbHlaV04wYVhabEwzUnlaV1V2YldGemRHVnlMMk52YlhCdmJtVnVkRnh1WEc0dkx5QnNhWE4wWlc1cGJtY2diMjRnYm1GMGFYWmxJR05oYkd4aVlXTnJYRzVjYmk4cUlDQXFMMXh1WEc0dktpQWdLaTljYmx4dUx5OGdhRzl2YTNNZ2RHOGdZbVVnYVc1MmIydGxaQ0J2YmlCamIyMXdiMjVsYm5RZ1ZrNXZaR1Z6SUdSMWNtbHVaeUJ3WVhSamFGeHVkbUZ5SUdOdmJYQnZibVZ1ZEZaT2IyUmxTRzl2YTNNZ1BTQjdYRzRnSUdsdWFYUTZJR1oxYm1OMGFXOXVJR2x1YVhRZ0tGeHVJQ0FnSUhadWIyUmxMRnh1SUNBZ0lHaDVaSEpoZEdsdVp5eGNiaUFnSUNCd1lYSmxiblJGYkcwc1hHNGdJQ0FnY21WbVJXeHRYRzRnSUNrZ2UxeHVJQ0FnSUdsbUlDZ2hkbTV2WkdVdVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVZ2ZId2dkbTV2WkdVdVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVdVgybHpSR1Z6ZEhKdmVXVmtLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1kyaHBiR1FnUFNCMmJtOWtaUzVqYjIxd2IyNWxiblJKYm5OMFlXNWpaU0E5SUdOeVpXRjBaVU52YlhCdmJtVnVkRWx1YzNSaGJtTmxSbTl5Vm01dlpHVW9YRzRnSUNBZ0lDQWdJSFp1YjJSbExGeHVJQ0FnSUNBZ0lDQmhZM1JwZG1WSmJuTjBZVzVqWlN4Y2JpQWdJQ0FnSUNBZ2NHRnlaVzUwUld4dExGeHVJQ0FnSUNBZ0lDQnlaV1pGYkcxY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCamFHbHNaQzRrYlc5MWJuUW9hSGxrY21GMGFXNW5JRDhnZG01dlpHVXVaV3h0SURvZ2RXNWtaV1pwYm1Wa0xDQm9lV1J5WVhScGJtY3BPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9kbTV2WkdVdVpHRjBZUzVyWldWd1FXeHBkbVVwSUh0Y2JpQWdJQ0FnSUM4dklHdGxjSFF0WVd4cGRtVWdZMjl0Y0c5dVpXNTBjeXdnZEhKbFlYUWdZWE1nWVNCd1lYUmphRnh1SUNBZ0lDQWdkbUZ5SUcxdmRXNTBaV1JPYjJSbElEMGdkbTV2WkdVN0lDOHZJSGR2Y21zZ1lYSnZkVzVrSUdac2IzZGNiaUFnSUNBZ0lHTnZiWEJ2Ym1WdWRGWk9iMlJsU0c5dmEzTXVjSEpsY0dGMFkyZ29iVzkxYm5SbFpFNXZaR1VzSUcxdmRXNTBaV1JPYjJSbEtUdGNiaUFnSUNCOVhHNGdJSDBzWEc1Y2JpQWdjSEpsY0dGMFkyZzZJR1oxYm1OMGFXOXVJSEJ5WlhCaGRHTm9JQ2h2YkdSV2JtOWtaU3dnZG01dlpHVXBJSHRjYmlBZ0lDQjJZWElnYjNCMGFXOXVjeUE5SUhadWIyUmxMbU52YlhCdmJtVnVkRTl3ZEdsdmJuTTdYRzRnSUNBZ2RtRnlJR05vYVd4a0lEMGdkbTV2WkdVdVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVZ1BTQnZiR1JXYm05a1pTNWpiMjF3YjI1bGJuUkpibk4wWVc1alpUdGNiaUFnSUNCMWNHUmhkR1ZEYUdsc1pFTnZiWEJ2Ym1WdWRDaGNiaUFnSUNBZ0lHTm9hV3hrTEZ4dUlDQWdJQ0FnYjNCMGFXOXVjeTV3Y205d2MwUmhkR0VzSUM4dklIVndaR0YwWldRZ2NISnZjSE5jYmlBZ0lDQWdJRzl3ZEdsdmJuTXViR2x6ZEdWdVpYSnpMQ0F2THlCMWNHUmhkR1ZrSUd4cGMzUmxibVZ5YzF4dUlDQWdJQ0FnZG01dlpHVXNJQzh2SUc1bGR5QndZWEpsYm5RZ2RtNXZaR1ZjYmlBZ0lDQWdJRzl3ZEdsdmJuTXVZMmhwYkdSeVpXNGdMeThnYm1WM0lHTm9hV3hrY21WdVhHNGdJQ0FnS1R0Y2JpQWdmU3hjYmx4dUlDQnBibk5sY25RNklHWjFibU4wYVc5dUlHbHVjMlZ5ZENBb2RtNXZaR1VwSUh0Y2JpQWdJQ0IyWVhJZ1kyOXVkR1Y0ZENBOUlIWnViMlJsTG1OdmJuUmxlSFE3WEc0Z0lDQWdkbUZ5SUdOdmJYQnZibVZ1ZEVsdWMzUmhibU5sSUQwZ2RtNXZaR1V1WTI5dGNHOXVaVzUwU1c1emRHRnVZMlU3WEc0Z0lDQWdhV1lnS0NGamIyMXdiMjVsYm5SSmJuTjBZVzVqWlM1ZmFYTk5iM1Z1ZEdWa0tTQjdYRzRnSUNBZ0lDQmpiMjF3YjI1bGJuUkpibk4wWVc1alpTNWZhWE5OYjNWdWRHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lHTmhiR3hJYjI5cktHTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObExDQW5iVzkxYm5SbFpDY3BPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kbTV2WkdVdVpHRjBZUzVyWldWd1FXeHBkbVVwSUh0Y2JpQWdJQ0FnSUdsbUlDaGpiMjUwWlhoMExsOXBjMDF2ZFc1MFpXUXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2RuVmxMWEp2ZFhSbGNpTXhNakV5WEc0Z0lDQWdJQ0FnSUM4dklFUjFjbWx1WnlCMWNHUmhkR1Z6TENCaElHdGxjSFF0WVd4cGRtVWdZMjl0Y0c5dVpXNTBKM01nWTJocGJHUWdZMjl0Y0c5dVpXNTBjeUJ0WVhsY2JpQWdJQ0FnSUNBZ0x5OGdZMmhoYm1kbExDQnpieUJrYVhKbFkzUnNlU0IzWVd4cmFXNW5JSFJvWlNCMGNtVmxJR2hsY21VZ2JXRjVJR05oYkd3Z1lXTjBhWFpoZEdWa0lHaHZiMnR6WEc0Z0lDQWdJQ0FnSUM4dklHOXVJR2x1WTI5eWNtVmpkQ0JqYUdsc1pISmxiaTRnU1c1emRHVmhaQ0IzWlNCd2RYTm9JSFJvWlcwZ2FXNTBieUJoSUhGMVpYVmxJSGRvYVdOb0lIZHBiR3hjYmlBZ0lDQWdJQ0FnTHk4Z1ltVWdjSEp2WTJWemMyVmtJR0ZtZEdWeUlIUm9aU0IzYUc5c1pTQndZWFJqYUNCd2NtOWpaWE56SUdWdVpHVmtMbHh1SUNBZ0lDQWdJQ0J4ZFdWMVpVRmpkR2wyWVhSbFpFTnZiWEJ2Ym1WdWRDaGpiMjF3YjI1bGJuUkpibk4wWVc1alpTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQmhZM1JwZG1GMFpVTm9hV3hrUTI5dGNHOXVaVzUwS0dOdmJYQnZibVZ1ZEVsdWMzUmhibU5sTENCMGNuVmxJQzhxSUdScGNtVmpkQ0FxTHlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlMRnh1WEc0Z0lHUmxjM1J5YjNrNklHWjFibU4wYVc5dUlHUmxjM1J5YjNrZ0tIWnViMlJsS1NCN1hHNGdJQ0FnZG1GeUlHTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObElEMGdkbTV2WkdVdVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVN1hHNGdJQ0FnYVdZZ0tDRmpiMjF3YjI1bGJuUkpibk4wWVc1alpTNWZhWE5FWlhOMGNtOTVaV1FwSUh0Y2JpQWdJQ0FnSUdsbUlDZ2hkbTV2WkdVdVpHRjBZUzVyWldWd1FXeHBkbVVwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVdUpHUmxjM1J5YjNrb0tUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHUmxZV04wYVhaaGRHVkRhR2xzWkVOdmJYQnZibVZ1ZENoamIyMXdiMjVsYm5SSmJuTjBZVzVqWlN3Z2RISjFaU0F2S2lCa2FYSmxZM1FnS2k4cE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1ZlR0Y2JseHVkbUZ5SUdodmIydHpWRzlOWlhKblpTQTlJRTlpYW1WamRDNXJaWGx6S0dOdmJYQnZibVZ1ZEZaT2IyUmxTRzl2YTNNcE8xeHVYRzVtZFc1amRHbHZiaUJqY21WaGRHVkRiMjF3YjI1bGJuUWdLRnh1SUNCRGRHOXlMRnh1SUNCa1lYUmhMRnh1SUNCamIyNTBaWGgwTEZ4dUlDQmphR2xzWkhKbGJpeGNiaUFnZEdGblhHNHBJSHRjYmlBZ2FXWWdLR2x6Vlc1a1pXWW9RM1J2Y2lrcElIdGNiaUFnSUNCeVpYUjFjbTVjYmlBZ2ZWeHVYRzRnSUhaaGNpQmlZWE5sUTNSdmNpQTlJR052Ym5SbGVIUXVKRzl3ZEdsdmJuTXVYMkpoYzJVN1hHNWNiaUFnTHk4Z2NHeGhhVzRnYjNCMGFXOXVjeUJ2WW1wbFkzUTZJSFIxY200Z2FYUWdhVzUwYnlCaElHTnZibk4wY25WamRHOXlYRzRnSUdsbUlDaHBjMDlpYW1WamRDaERkRzl5S1NrZ2UxeHVJQ0FnSUVOMGIzSWdQU0JpWVhObFEzUnZjaTVsZUhSbGJtUW9RM1J2Y2lrN1hHNGdJSDFjYmx4dUlDQXZMeUJwWmlCaGRDQjBhR2x6SUhOMFlXZGxJR2wwSjNNZ2JtOTBJR0VnWTI5dWMzUnlkV04wYjNJZ2IzSWdZVzRnWVhONWJtTWdZMjl0Y0c5dVpXNTBJR1poWTNSdmNua3NYRzRnSUM4dklISmxhbVZqZEM1Y2JpQWdhV1lnS0hSNWNHVnZaaUJEZEc5eUlDRTlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJSGRoY200b0tGd2lTVzUyWVd4cFpDQkRiMjF3YjI1bGJuUWdaR1ZtYVc1cGRHbHZiam9nWENJZ0t5QW9VM1J5YVc1bktFTjBiM0lwS1Nrc0lHTnZiblJsZUhRcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNWNiaUFnZlZ4dVhHNGdJQzh2SUdGemVXNWpJR052YlhCdmJtVnVkRnh1SUNCMllYSWdZWE41Ym1OR1lXTjBiM0o1TzF4dUlDQnBaaUFvYVhOVmJtUmxaaWhEZEc5eUxtTnBaQ2twSUh0Y2JpQWdJQ0JoYzNsdVkwWmhZM1J2Y25rZ1BTQkRkRzl5TzF4dUlDQWdJRU4wYjNJZ1BTQnlaWE52YkhabFFYTjVibU5EYjIxd2IyNWxiblFvWVhONWJtTkdZV04wYjNKNUxDQmlZWE5sUTNSdmNpd2dZMjl1ZEdWNGRDazdYRzRnSUNBZ2FXWWdLRU4wYjNJZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnTHk4Z2NtVjBkWEp1SUdFZ2NHeGhZMlZvYjJ4a1pYSWdibTlrWlNCbWIzSWdZWE41Ym1NZ1kyOXRjRzl1Wlc1MExDQjNhR2xqYUNCcGN5QnlaVzVrWlhKbFpGeHVJQ0FnSUNBZ0x5OGdZWE1nWVNCamIyMXRaVzUwSUc1dlpHVWdZblYwSUhCeVpYTmxjblpsY3lCaGJHd2dkR2hsSUhKaGR5QnBibVp2Y20xaGRHbHZiaUJtYjNJZ2RHaGxJRzV2WkdVdVhHNGdJQ0FnSUNBdkx5QjBhR1VnYVc1bWIzSnRZWFJwYjI0Z2QybHNiQ0JpWlNCMWMyVmtJR1p2Y2lCaGMzbHVZeUJ6WlhKMlpYSXRjbVZ1WkdWeWFXNW5JR0Z1WkNCb2VXUnlZWFJwYjI0dVhHNGdJQ0FnSUNCeVpYUjFjbTRnWTNKbFlYUmxRWE41Ym1OUWJHRmpaV2h2YkdSbGNpaGNiaUFnSUNBZ0lDQWdZWE41Ym1OR1lXTjBiM0o1TEZ4dUlDQWdJQ0FnSUNCa1lYUmhMRnh1SUNBZ0lDQWdJQ0JqYjI1MFpYaDBMRnh1SUNBZ0lDQWdJQ0JqYUdsc1pISmxiaXhjYmlBZ0lDQWdJQ0FnZEdGblhHNGdJQ0FnSUNBcFhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1pHRjBZU0E5SUdSaGRHRWdmSHdnZTMwN1hHNWNiaUFnTHk4Z2NtVnpiMngyWlNCamIyNXpkSEoxWTNSdmNpQnZjSFJwYjI1eklHbHVJR05oYzJVZ1oyeHZZbUZzSUcxcGVHbHVjeUJoY21VZ1lYQndiR2xsWkNCaFpuUmxjbHh1SUNBdkx5QmpiMjF3YjI1bGJuUWdZMjl1YzNSeWRXTjBiM0lnWTNKbFlYUnBiMjVjYmlBZ2NtVnpiMngyWlVOdmJuTjBjblZqZEc5eVQzQjBhVzl1Y3loRGRHOXlLVHRjYmx4dUlDQXZMeUIwY21GdWMyWnZjbTBnWTI5dGNHOXVaVzUwSUhZdGJXOWtaV3dnWkdGMFlTQnBiblJ2SUhCeWIzQnpJQ1lnWlhabGJuUnpYRzRnSUdsbUlDaHBjMFJsWmloa1lYUmhMbTF2WkdWc0tTa2dlMXh1SUNBZ0lIUnlZVzV6Wm05eWJVMXZaR1ZzS0VOMGIzSXViM0IwYVc5dWN5d2daR0YwWVNrN1hHNGdJSDFjYmx4dUlDQXZMeUJsZUhSeVlXTjBJSEJ5YjNCelhHNGdJSFpoY2lCd2NtOXdjMFJoZEdFZ1BTQmxlSFJ5WVdOMFVISnZjSE5HY205dFZrNXZaR1ZFWVhSaEtHUmhkR0VzSUVOMGIzSXNJSFJoWnlrN1hHNWNiaUFnTHk4Z1puVnVZM1JwYjI1aGJDQmpiMjF3YjI1bGJuUmNiaUFnYVdZZ0tHbHpWSEoxWlNoRGRHOXlMbTl3ZEdsdmJuTXVablZ1WTNScGIyNWhiQ2twSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFJuVnVZM1JwYjI1aGJFTnZiWEJ2Ym1WdWRDaERkRzl5TENCd2NtOXdjMFJoZEdFc0lHUmhkR0VzSUdOdmJuUmxlSFFzSUdOb2FXeGtjbVZ1S1Z4dUlDQjlYRzVjYmlBZ0x5OGdaWGgwY21GamRDQnNhWE4wWlc1bGNuTXNJSE5wYm1ObElIUm9aWE5sSUc1bFpXUnpJSFJ2SUdKbElIUnlaV0YwWldRZ1lYTmNiaUFnTHk4Z1kyaHBiR1FnWTI5dGNHOXVaVzUwSUd4cGMzUmxibVZ5Y3lCcGJuTjBaV0ZrSUc5bUlFUlBUU0JzYVhOMFpXNWxjbk5jYmlBZ2RtRnlJR3hwYzNSbGJtVnljeUE5SUdSaGRHRXViMjQ3WEc0Z0lDOHZJSEpsY0d4aFkyVWdkMmwwYUNCc2FYTjBaVzVsY25NZ2QybDBhQ0F1Ym1GMGFYWmxJRzF2WkdsbWFXVnlYRzRnSUM4dklITnZJR2wwSUdkbGRITWdjSEp2WTJWemMyVmtJR1IxY21sdVp5QndZWEpsYm5RZ1kyOXRjRzl1Wlc1MElIQmhkR05vTGx4dUlDQmtZWFJoTG05dUlEMGdaR0YwWVM1dVlYUnBkbVZQYmp0Y2JseHVJQ0JwWmlBb2FYTlVjblZsS0VOMGIzSXViM0IwYVc5dWN5NWhZbk4wY21GamRDa3BJSHRjYmlBZ0lDQXZMeUJoWW5OMGNtRmpkQ0JqYjIxd2IyNWxiblJ6SUdSdklHNXZkQ0JyWldWd0lHRnVlWFJvYVc1blhHNGdJQ0FnTHk4Z2IzUm9aWElnZEdoaGJpQndjbTl3Y3lBbUlHeHBjM1JsYm1WeWN5QW1JSE5zYjNSY2JseHVJQ0FnSUM4dklIZHZjbXNnWVhKdmRXNWtJR1pzYjNkY2JpQWdJQ0IyWVhJZ2MyeHZkQ0E5SUdSaGRHRXVjMnh2ZER0Y2JpQWdJQ0JrWVhSaElEMGdlMzA3WEc0Z0lDQWdhV1lnS0hOc2IzUXBJSHRjYmlBZ0lDQWdJR1JoZEdFdWMyeHZkQ0E5SUhOc2IzUTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMeThnYldWeVoyVWdZMjl0Y0c5dVpXNTBJRzFoYm1GblpXMWxiblFnYUc5dmEzTWdiMjUwYnlCMGFHVWdjR3hoWTJWb2IyeGtaWElnYm05a1pWeHVJQ0J0WlhKblpVaHZiMnR6S0dSaGRHRXBPMXh1WEc0Z0lDOHZJSEpsZEhWeWJpQmhJSEJzWVdObGFHOXNaR1Z5SUhadWIyUmxYRzRnSUhaaGNpQnVZVzFsSUQwZ1EzUnZjaTV2Y0hScGIyNXpMbTVoYldVZ2ZId2dkR0ZuTzF4dUlDQjJZWElnZG01dlpHVWdQU0J1WlhjZ1ZrNXZaR1VvWEc0Z0lDQWdLRndpZG5WbExXTnZiWEJ2Ym1WdWRDMWNJaUFySUNoRGRHOXlMbU5wWkNrZ0t5QW9ibUZ0WlNBL0lDaGNJaTFjSWlBcklHNWhiV1VwSURvZ0p5Y3BLU3hjYmlBZ0lDQmtZWFJoTENCMWJtUmxabWx1WldRc0lIVnVaR1ZtYVc1bFpDd2dkVzVrWldacGJtVmtMQ0JqYjI1MFpYaDBMRnh1SUNBZ0lIc2dRM1J2Y2pvZ1EzUnZjaXdnY0hKdmNITkVZWFJoT2lCd2NtOXdjMFJoZEdFc0lHeHBjM1JsYm1WeWN6b2diR2x6ZEdWdVpYSnpMQ0IwWVdjNklIUmhaeXdnWTJocGJHUnlaVzQ2SUdOb2FXeGtjbVZ1SUgwc1hHNGdJQ0FnWVhONWJtTkdZV04wYjNKNVhHNGdJQ2s3WEc1Y2JpQWdMeThnVjJWbGVDQnpjR1ZqYVdacFl6b2dhVzUyYjJ0bElISmxZM2xqYkdVdGJHbHpkQ0J2Y0hScGJXbDZaV1FnUUhKbGJtUmxjaUJtZFc1amRHbHZiaUJtYjNKY2JpQWdMeThnWlhoMGNtRmpkR2x1WnlCalpXeHNMWE5zYjNRZ2RHVnRjR3hoZEdVdVhHNGdJQzh2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5SVlXNXJjekV3TVRBd0wzZGxaWGd0Ym1GMGFYWmxMV1JwY21WamRHbDJaUzkwY21WbEwyMWhjM1JsY2k5amIyMXdiMjVsYm5SY2JpQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJR2xtSUNvdlhHNGdJSEpsZEhWeWJpQjJibTlrWlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJqY21WaGRHVkRiMjF3YjI1bGJuUkpibk4wWVc1alpVWnZjbFp1YjJSbElDaGNiaUFnZG01dlpHVXNJQzh2SUhkbElHdHViM2NnYVhRbmN5Qk5iM1Z1ZEdWa1EyOXRjRzl1Wlc1MFZrNXZaR1VnWW5WMElHWnNiM2NnWkc5bGMyNG5kRnh1SUNCd1lYSmxiblFzSUM4dklHRmpkR2wyWlVsdWMzUmhibU5sSUdsdUlHeHBabVZqZVdOc1pTQnpkR0YwWlZ4dUlDQndZWEpsYm5SRmJHMHNYRzRnSUhKbFprVnNiVnh1S1NCN1hHNGdJSFpoY2lCdmNIUnBiMjV6SUQwZ2UxeHVJQ0FnSUY5cGMwTnZiWEJ2Ym1WdWREb2dkSEoxWlN4Y2JpQWdJQ0J3WVhKbGJuUTZJSEJoY21WdWRDeGNiaUFnSUNCZmNHRnlaVzUwVm01dlpHVTZJSFp1YjJSbExGeHVJQ0FnSUY5d1lYSmxiblJGYkcwNklIQmhjbVZ1ZEVWc2JTQjhmQ0J1ZFd4c0xGeHVJQ0FnSUY5eVpXWkZiRzA2SUhKbFprVnNiU0I4ZkNCdWRXeHNYRzRnSUgwN1hHNGdJQzh2SUdOb1pXTnJJR2x1YkdsdVpTMTBaVzF3YkdGMFpTQnlaVzVrWlhJZ1puVnVZM1JwYjI1elhHNGdJSFpoY2lCcGJteHBibVZVWlcxd2JHRjBaU0E5SUhadWIyUmxMbVJoZEdFdWFXNXNhVzVsVkdWdGNHeGhkR1U3WEc0Z0lHbG1JQ2hwYzBSbFppaHBibXhwYm1WVVpXMXdiR0YwWlNrcElIdGNiaUFnSUNCdmNIUnBiMjV6TG5KbGJtUmxjaUE5SUdsdWJHbHVaVlJsYlhCc1lYUmxMbkpsYm1SbGNqdGNiaUFnSUNCdmNIUnBiMjV6TG5OMFlYUnBZMUpsYm1SbGNrWnVjeUE5SUdsdWJHbHVaVlJsYlhCc1lYUmxMbk4wWVhScFkxSmxibVJsY2tadWN6dGNiaUFnZlZ4dUlDQnlaWFIxY200Z2JtVjNJSFp1YjJSbExtTnZiWEJ2Ym1WdWRFOXdkR2x2Ym5NdVEzUnZjaWh2Y0hScGIyNXpLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnRaWEpuWlVodmIydHpJQ2hrWVhSaEtTQjdYRzRnSUdsbUlDZ2haR0YwWVM1b2IyOXJLU0I3WEc0Z0lDQWdaR0YwWVM1b2IyOXJJRDBnZTMwN1hHNGdJSDFjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQm9iMjlyYzFSdlRXVnlaMlV1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNCMllYSWdhMlY1SUQwZ2FHOXZhM05VYjAxbGNtZGxXMmxkTzF4dUlDQWdJSFpoY2lCbWNtOXRVR0Z5Wlc1MElEMGdaR0YwWVM1b2IyOXJXMnRsZVYwN1hHNGdJQ0FnZG1GeUlHOTFjbk1nUFNCamIyMXdiMjVsYm5SV1RtOWtaVWh2YjJ0elcydGxlVjA3WEc0Z0lDQWdaR0YwWVM1b2IyOXJXMnRsZVYwZ1BTQm1jbTl0VUdGeVpXNTBJRDhnYldWeVoyVkliMjlySkRFb2IzVnljeXdnWm5KdmJWQmhjbVZ1ZENrZ09pQnZkWEp6TzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHMWxjbWRsU0c5dmF5UXhJQ2h2Ym1Vc0lIUjNieWtnZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z0tHRXNJR0lzSUdNc0lHUXBJSHRjYmlBZ0lDQnZibVVvWVN3Z1lpd2dZeXdnWkNrN1hHNGdJQ0FnZEhkdktHRXNJR0lzSUdNc0lHUXBPMXh1SUNCOVhHNTlYRzVjYmk4dklIUnlZVzV6Wm05eWJTQmpiMjF3YjI1bGJuUWdkaTF0YjJSbGJDQnBibVp2SUNoMllXeDFaU0JoYm1RZ1kyRnNiR0poWTJzcElHbHVkRzljYmk4dklIQnliM0FnWVc1a0lHVjJaVzUwSUdoaGJtUnNaWElnY21WemNHVmpkR2wyWld4NUxseHVablZ1WTNScGIyNGdkSEpoYm5ObWIzSnRUVzlrWld3Z0tHOXdkR2x2Ym5Nc0lHUmhkR0VwSUh0Y2JpQWdkbUZ5SUhCeWIzQWdQU0FvYjNCMGFXOXVjeTV0YjJSbGJDQW1KaUJ2Y0hScGIyNXpMbTF2WkdWc0xuQnliM0FwSUh4OElDZDJZV3gxWlNjN1hHNGdJSFpoY2lCbGRtVnVkQ0E5SUNodmNIUnBiMjV6TG0xdlpHVnNJQ1ltSUc5d2RHbHZibk11Ylc5a1pXd3VaWFpsYm5RcElIeDhJQ2RwYm5CMWRDYzdLR1JoZEdFdWNISnZjSE1nZkh3Z0tHUmhkR0V1Y0hKdmNITWdQU0I3ZlNrcFczQnliM0JkSUQwZ1pHRjBZUzV0YjJSbGJDNTJZV3gxWlR0Y2JpQWdkbUZ5SUc5dUlEMGdaR0YwWVM1dmJpQjhmQ0FvWkdGMFlTNXZiaUE5SUh0OUtUdGNiaUFnYVdZZ0tHbHpSR1ZtS0c5dVcyVjJaVzUwWFNrcElIdGNiaUFnSUNCdmJsdGxkbVZ1ZEYwZ1BTQmJaR0YwWVM1dGIyUmxiQzVqWVd4c1ltRmphMTB1WTI5dVkyRjBLRzl1VzJWMlpXNTBYU2s3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnYjI1YlpYWmxiblJkSUQwZ1pHRjBZUzV0YjJSbGJDNWpZV3hzWW1GamF6dGNiaUFnZlZ4dWZWeHVYRzR2S2lBZ0tpOWNibHh1ZG1GeUlGTkpUVkJNUlY5T1QxSk5RVXhKV2tVZ1BTQXhPMXh1ZG1GeUlFRk1WMEZaVTE5T1QxSk5RVXhKV2tVZ1BTQXlPMXh1WEc0dkx5QjNjbUZ3Y0dWeUlHWjFibU4wYVc5dUlHWnZjaUJ3Y205MmFXUnBibWNnWVNCdGIzSmxJR1pzWlhocFlteGxJR2x1ZEdWeVptRmpaVnh1THk4Z2QybDBhRzkxZENCblpYUjBhVzVuSUhsbGJHeGxaQ0JoZENCaWVTQm1iRzkzWEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZGYkdWdFpXNTBJQ2hjYmlBZ1kyOXVkR1Y0ZEN4Y2JpQWdkR0ZuTEZ4dUlDQmtZWFJoTEZ4dUlDQmphR2xzWkhKbGJpeGNiaUFnYm05eWJXRnNhWHBoZEdsdmJsUjVjR1VzWEc0Z0lHRnNkMkY1YzA1dmNtMWhiR2w2WlZ4dUtTQjdYRzRnSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0dSaGRHRXBJSHg4SUdselVISnBiV2wwYVhabEtHUmhkR0VwS1NCN1hHNGdJQ0FnYm05eWJXRnNhWHBoZEdsdmJsUjVjR1VnUFNCamFHbHNaSEpsYmp0Y2JpQWdJQ0JqYUdsc1pISmxiaUE5SUdSaGRHRTdYRzRnSUNBZ1pHRjBZU0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdmVnh1SUNCcFppQW9hWE5VY25WbEtHRnNkMkY1YzA1dmNtMWhiR2w2WlNrcElIdGNiaUFnSUNCdWIzSnRZV3hwZW1GMGFXOXVWSGx3WlNBOUlFRk1WMEZaVTE5T1QxSk5RVXhKV2tVN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUY5amNtVmhkR1ZGYkdWdFpXNTBLR052Ym5SbGVIUXNJSFJoWnl3Z1pHRjBZU3dnWTJocGJHUnlaVzRzSUc1dmNtMWhiR2w2WVhScGIyNVVlWEJsS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJmWTNKbFlYUmxSV3hsYldWdWRDQW9YRzRnSUdOdmJuUmxlSFFzWEc0Z0lIUmhaeXhjYmlBZ1pHRjBZU3hjYmlBZ1kyaHBiR1J5Wlc0c1hHNGdJRzV2Y20xaGJHbDZZWFJwYjI1VWVYQmxYRzRwSUh0Y2JpQWdhV1lnS0dselJHVm1LR1JoZEdFcElDWW1JR2x6UkdWbUtDaGtZWFJoS1M1ZlgyOWlYMThwS1NCN1hHNGdJQ0FnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBbUppQjNZWEp1S0Z4dUlDQWdJQ0FnWENKQmRtOXBaQ0IxYzJsdVp5QnZZbk5sY25abFpDQmtZWFJoSUc5aWFtVmpkQ0JoY3lCMmJtOWtaU0JrWVhSaE9pQmNJaUFySUNoS1UwOU9Mbk4wY21sdVoybG1lU2hrWVhSaEtTa2dLeUJjSWx4Y2Jsd2lJQ3RjYmlBZ0lDQWdJQ2RCYkhkaGVYTWdZM0psWVhSbElHWnlaWE5vSUhadWIyUmxJR1JoZEdFZ2IySnFaV04wY3lCcGJpQmxZV05vSUhKbGJtUmxjaUVuTEZ4dUlDQWdJQ0FnWTI5dWRHVjRkRnh1SUNBZ0lDazdYRzRnSUNBZ2NtVjBkWEp1SUdOeVpXRjBaVVZ0Y0hSNVZrNXZaR1VvS1Z4dUlDQjlYRzRnSUM4dklHOWlhbVZqZENCemVXNTBZWGdnYVc0Z2RpMWlhVzVrWEc0Z0lHbG1JQ2hwYzBSbFppaGtZWFJoS1NBbUppQnBjMFJsWmloa1lYUmhMbWx6S1NrZ2UxeHVJQ0FnSUhSaFp5QTlJR1JoZEdFdWFYTTdYRzRnSUgxY2JpQWdhV1lnS0NGMFlXY3BJSHRjYmlBZ0lDQXZMeUJwYmlCallYTmxJRzltSUdOdmJYQnZibVZ1ZENBNmFYTWdjMlYwSUhSdklHWmhiSE41SUhaaGJIVmxYRzRnSUNBZ2NtVjBkWEp1SUdOeVpXRjBaVVZ0Y0hSNVZrNXZaR1VvS1Z4dUlDQjlYRzRnSUM4dklIZGhjbTRnWVdkaGFXNXpkQ0J1YjI0dGNISnBiV2wwYVhabElHdGxlVnh1SUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUFtSmx4dUlDQWdJR2x6UkdWbUtHUmhkR0VwSUNZbUlHbHpSR1ZtS0dSaGRHRXVhMlY1S1NBbUppQWhhWE5RY21sdGFYUnBkbVVvWkdGMFlTNXJaWGtwWEc0Z0lDa2dlMXh1SUNBZ0lIdGNiaUFnSUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0FnSUNkQmRtOXBaQ0IxYzJsdVp5QnViMjR0Y0hKcGJXbDBhWFpsSUhaaGJIVmxJR0Z6SUd0bGVTd2dKeUFyWEc0Z0lDQWdJQ0FnSUNkMWMyVWdjM1J5YVc1bkwyNTFiV0psY2lCMllXeDFaU0JwYm5OMFpXRmtMaWNzWEc0Z0lDQWdJQ0FnSUdOdmJuUmxlSFJjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJQzh2SUhOMWNIQnZjblFnYzJsdVoyeGxJR1oxYm1OMGFXOXVJR05vYVd4a2NtVnVJR0Z6SUdSbFptRjFiSFFnYzJOdmNHVmtJSE5zYjNSY2JpQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29ZMmhwYkdSeVpXNHBJQ1ltWEc0Z0lDQWdkSGx3Wlc5bUlHTm9hV3hrY21WdVd6QmRJRDA5UFNBblpuVnVZM1JwYjI0blhHNGdJQ2tnZTF4dUlDQWdJR1JoZEdFZ1BTQmtZWFJoSUh4OElIdDlPMXh1SUNBZ0lHUmhkR0V1YzJOdmNHVmtVMnh2ZEhNZ1BTQjdJR1JsWm1GMWJIUTZJR05vYVd4a2NtVnVXekJkSUgwN1hHNGdJQ0FnWTJocGJHUnlaVzR1YkdWdVozUm9JRDBnTUR0Y2JpQWdmVnh1SUNCcFppQW9ibTl5YldGc2FYcGhkR2x2YmxSNWNHVWdQVDA5SUVGTVYwRlpVMTlPVDFKTlFVeEpXa1VwSUh0Y2JpQWdJQ0JqYUdsc1pISmxiaUE5SUc1dmNtMWhiR2w2WlVOb2FXeGtjbVZ1S0dOb2FXeGtjbVZ1S1R0Y2JpQWdmU0JsYkhObElHbG1JQ2h1YjNKdFlXeHBlbUYwYVc5dVZIbHdaU0E5UFQwZ1UwbE5VRXhGWDA1UFVrMUJURWxhUlNrZ2UxeHVJQ0FnSUdOb2FXeGtjbVZ1SUQwZ2MybHRjR3hsVG05eWJXRnNhWHBsUTJocGJHUnlaVzRvWTJocGJHUnlaVzRwTzF4dUlDQjlYRzRnSUhaaGNpQjJibTlrWlN3Z2JuTTdYRzRnSUdsbUlDaDBlWEJsYjJZZ2RHRm5JRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUhaaGNpQkRkRzl5TzF4dUlDQWdJRzV6SUQwZ0tHTnZiblJsZUhRdUpIWnViMlJsSUNZbUlHTnZiblJsZUhRdUpIWnViMlJsTG01ektTQjhmQ0JqYjI1bWFXY3VaMlYwVkdGblRtRnRaWE53WVdObEtIUmhaeWs3WEc0Z0lDQWdhV1lnS0dOdmJtWnBaeTVwYzFKbGMyVnlkbVZrVkdGbktIUmhaeWtwSUh0Y2JpQWdJQ0FnSUM4dklIQnNZWFJtYjNKdElHSjFhV3gwTFdsdUlHVnNaVzFsYm5SelhHNGdJQ0FnSUNCMmJtOWtaU0E5SUc1bGR5QldUbTlrWlNoY2JpQWdJQ0FnSUNBZ1kyOXVabWxuTG5CaGNuTmxVR3hoZEdadmNtMVVZV2RPWVcxbEtIUmhaeWtzSUdSaGRHRXNJR05vYVd4a2NtVnVMRnh1SUNBZ0lDQWdJQ0IxYm1SbFptbHVaV1FzSUhWdVpHVm1hVzVsWkN3Z1kyOXVkR1Y0ZEZ4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dselJHVm1LRU4wYjNJZ1BTQnlaWE52YkhabFFYTnpaWFFvWTI5dWRHVjRkQzRrYjNCMGFXOXVjeXdnSjJOdmJYQnZibVZ1ZEhNbkxDQjBZV2NwS1NrZ2UxeHVJQ0FnSUNBZ0x5OGdZMjl0Y0c5dVpXNTBYRzRnSUNBZ0lDQjJibTlrWlNBOUlHTnlaV0YwWlVOdmJYQnZibVZ1ZENoRGRHOXlMQ0JrWVhSaExDQmpiMjUwWlhoMExDQmphR2xzWkhKbGJpd2dkR0ZuS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdMeThnZFc1cmJtOTNiaUJ2Y2lCMWJteHBjM1JsWkNCdVlXMWxjM0JoWTJWa0lHVnNaVzFsYm5SelhHNGdJQ0FnSUNBdkx5QmphR1ZqYXlCaGRDQnlkVzUwYVcxbElHSmxZMkYxYzJVZ2FYUWdiV0Y1SUdkbGRDQmhjM05wWjI1bFpDQmhJRzVoYldWemNHRmpaU0IzYUdWdUlHbDBjMXh1SUNBZ0lDQWdMeThnY0dGeVpXNTBJRzV2Y20xaGJHbDZaWE1nWTJocGJHUnlaVzVjYmlBZ0lDQWdJSFp1YjJSbElEMGdibVYzSUZaT2IyUmxLRnh1SUNBZ0lDQWdJQ0IwWVdjc0lHUmhkR0VzSUdOb2FXeGtjbVZ1TEZ4dUlDQWdJQ0FnSUNCMWJtUmxabWx1WldRc0lIVnVaR1ZtYVc1bFpDd2dZMjl1ZEdWNGRGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ0x5OGdaR2x5WldOMElHTnZiWEJ2Ym1WdWRDQnZjSFJwYjI1eklDOGdZMjl1YzNSeWRXTjBiM0pjYmlBZ0lDQjJibTlrWlNBOUlHTnlaV0YwWlVOdmJYQnZibVZ1ZENoMFlXY3NJR1JoZEdFc0lHTnZiblJsZUhRc0lHTm9hV3hrY21WdUtUdGNiaUFnZlZ4dUlDQnBaaUFvYVhORVpXWW9kbTV2WkdVcEtTQjdYRzRnSUNBZ2FXWWdLRzV6S1NCN0lHRndjR3g1VGxNb2RtNXZaR1VzSUc1ektUc2dmVnh1SUNBZ0lISmxkSFZ5YmlCMmJtOWtaVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSEpsZEhWeWJpQmpjbVZoZEdWRmJYQjBlVlpPYjJSbEtDbGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJoY0hCc2VVNVRJQ2gyYm05a1pTd2dibk1zSUdadmNtTmxLU0I3WEc0Z0lIWnViMlJsTG01eklEMGdibk03WEc0Z0lHbG1JQ2gyYm05a1pTNTBZV2NnUFQwOUlDZG1iM0psYVdkdVQySnFaV04wSnlrZ2UxeHVJQ0FnSUM4dklIVnpaU0JrWldaaGRXeDBJRzVoYldWemNHRmpaU0JwYm5OcFpHVWdabTl5WldsbmJrOWlhbVZqZEZ4dUlDQWdJRzV6SUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUdadmNtTmxJRDBnZEhKMVpUdGNiaUFnZlZ4dUlDQnBaaUFvYVhORVpXWW9kbTV2WkdVdVkyaHBiR1J5Wlc0cEtTQjdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUd3Z1BTQjJibTlrWlM1amFHbHNaSEpsYmk1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwS3lzcElIdGNiaUFnSUNBZ0lIWmhjaUJqYUdsc1pDQTlJSFp1YjJSbExtTm9hV3hrY21WdVcybGRPMXh1SUNBZ0lDQWdhV1lnS0dselJHVm1LR05vYVd4a0xuUmhaeWtnSmlZZ0tHbHpWVzVrWldZb1kyaHBiR1F1Ym5NcElIeDhJR2x6VkhKMVpTaG1iM0pqWlNrcEtTQjdYRzRnSUNBZ0lDQWdJR0Z3Y0d4NVRsTW9ZMmhwYkdRc0lHNXpMQ0JtYjNKalpTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNiaThxSUNBcUwxeHVYRzVtZFc1amRHbHZiaUJwYm1sMFVtVnVaR1Z5SUNoMmJTa2dlMXh1SUNCMmJTNWZkbTV2WkdVZ1BTQnVkV3hzT3lBdkx5QjBhR1VnY205dmRDQnZaaUIwYUdVZ1kyaHBiR1FnZEhKbFpWeHVJQ0IyYlM1ZmMzUmhkR2xqVkhKbFpYTWdQU0J1ZFd4c095QXZMeUIyTFc5dVkyVWdZMkZqYUdWa0lIUnlaV1Z6WEc0Z0lIWmhjaUJ2Y0hScGIyNXpJRDBnZG0wdUpHOXdkR2x2Ym5NN1hHNGdJSFpoY2lCd1lYSmxiblJXYm05a1pTQTlJSFp0TGlSMmJtOWtaU0E5SUc5d2RHbHZibk11WDNCaGNtVnVkRlp1YjJSbE95QXZMeUIwYUdVZ2NHeGhZMlZvYjJ4a1pYSWdibTlrWlNCcGJpQndZWEpsYm5RZ2RISmxaVnh1SUNCMllYSWdjbVZ1WkdWeVEyOXVkR1Y0ZENBOUlIQmhjbVZ1ZEZadWIyUmxJQ1ltSUhCaGNtVnVkRlp1YjJSbExtTnZiblJsZUhRN1hHNGdJSFp0TGlSemJHOTBjeUE5SUhKbGMyOXNkbVZUYkc5MGN5aHZjSFJwYjI1ekxsOXlaVzVrWlhKRGFHbHNaSEpsYml3Z2NtVnVaR1Z5UTI5dWRHVjRkQ2s3WEc0Z0lIWnRMaVJ6WTI5d1pXUlRiRzkwY3lBOUlHVnRjSFI1VDJKcVpXTjBPMXh1SUNBdkx5QmlhVzVrSUhSb1pTQmpjbVZoZEdWRmJHVnRaVzUwSUdadUlIUnZJSFJvYVhNZ2FXNXpkR0Z1WTJWY2JpQWdMeThnYzI4Z2RHaGhkQ0IzWlNCblpYUWdjSEp2Y0dWeUlISmxibVJsY2lCamIyNTBaWGgwSUdsdWMybGtaU0JwZEM1Y2JpQWdMeThnWVhKbmN5QnZjbVJsY2pvZ2RHRm5MQ0JrWVhSaExDQmphR2xzWkhKbGJpd2dibTl5YldGc2FYcGhkR2x2YmxSNWNHVXNJR0ZzZDJGNWMwNXZjbTFoYkdsNlpWeHVJQ0F2THlCcGJuUmxjbTVoYkNCMlpYSnphVzl1SUdseklIVnpaV1FnWW5rZ2NtVnVaR1Z5SUdaMWJtTjBhVzl1Y3lCamIyMXdhV3hsWkNCbWNtOXRJSFJsYlhCc1lYUmxjMXh1SUNCMmJTNWZZeUE5SUdaMWJtTjBhVzl1SUNoaExDQmlMQ0JqTENCa0tTQjdJSEpsZEhWeWJpQmpjbVZoZEdWRmJHVnRaVzUwS0hadExDQmhMQ0JpTENCakxDQmtMQ0JtWVd4elpTazdJSDA3WEc0Z0lDOHZJRzV2Y20xaGJHbDZZWFJwYjI0Z2FYTWdZV3gzWVhseklHRndjR3hwWldRZ1ptOXlJSFJvWlNCd2RXSnNhV01nZG1WeWMybHZiaXdnZFhObFpDQnBibHh1SUNBdkx5QjFjMlZ5TFhkeWFYUjBaVzRnY21WdVpHVnlJR1oxYm1OMGFXOXVjeTVjYmlBZ2RtMHVKR055WldGMFpVVnNaVzFsYm5RZ1BTQm1kVzVqZEdsdmJpQW9ZU3dnWWl3Z1l5d2daQ2tnZXlCeVpYUjFjbTRnWTNKbFlYUmxSV3hsYldWdWRDaDJiU3dnWVN3Z1lpd2dZeXdnWkN3Z2RISjFaU2s3SUgwN1hHNWNiaUFnTHk4Z0pHRjBkSEp6SUNZZ0pHeHBjM1JsYm1WeWN5QmhjbVVnWlhod2IzTmxaQ0JtYjNJZ1pXRnphV1Z5SUVoUFF5QmpjbVZoZEdsdmJpNWNiaUFnTHk4Z2RHaGxlU0J1WldWa0lIUnZJR0psSUhKbFlXTjBhWFpsSUhOdklIUm9ZWFFnU0U5RGN5QjFjMmx1WnlCMGFHVnRJR0Z5WlNCaGJIZGhlWE1nZFhCa1lYUmxaRnh1SUNCMllYSWdjR0Z5Wlc1MFJHRjBZU0E5SUhCaGNtVnVkRlp1YjJSbElDWW1JSEJoY21WdWRGWnViMlJsTG1SaGRHRTdYRzVjYmlBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHVnNjMlVnS2k5Y2JpQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNCa1pXWnBibVZTWldGamRHbDJaU2gyYlN3Z0p5UmhkSFJ5Y3ljc0lIQmhjbVZ1ZEVSaGRHRWdKaVlnY0dGeVpXNTBSR0YwWVM1aGRIUnljeUI4ZkNCbGJYQjBlVTlpYW1WamRDd2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSVdselZYQmtZWFJwYm1kRGFHbHNaRU52YlhCdmJtVnVkQ0FtSmlCM1lYSnVLRndpSkdGMGRISnpJR2x6SUhKbFlXUnZibXg1TGx3aUxDQjJiU2s3WEc0Z0lDQWdmU3dnZEhKMVpTazdYRzRnSUNBZ1pHVm1hVzVsVW1WaFkzUnBkbVVvZG0wc0lDY2tiR2x6ZEdWdVpYSnpKeXdnYjNCMGFXOXVjeTVmY0dGeVpXNTBUR2x6ZEdWdVpYSnpJSHg4SUdWdGNIUjVUMkpxWldOMExDQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FoYVhOVmNHUmhkR2x1WjBOb2FXeGtRMjl0Y0c5dVpXNTBJQ1ltSUhkaGNtNG9YQ0lrYkdsemRHVnVaWEp6SUdseklISmxZV1J2Ym14NUxsd2lMQ0IyYlNrN1hHNGdJQ0FnZlN3Z2RISjFaU2s3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnWkdWbWFXNWxVbVZoWTNScGRtVW9kbTBzSUNja1lYUjBjbk1uTENCd1lYSmxiblJFWVhSaElDWW1JSEJoY21WdWRFUmhkR0V1WVhSMGNuTWdmSHdnWlcxd2RIbFBZbXBsWTNRc0lHNTFiR3dzSUhSeWRXVXBPMXh1SUNBZ0lHUmxabWx1WlZKbFlXTjBhWFpsS0hadExDQW5KR3hwYzNSbGJtVnljeWNzSUc5d2RHbHZibk11WDNCaGNtVnVkRXhwYzNSbGJtVnljeUI4ZkNCbGJYQjBlVTlpYW1WamRDd2diblZzYkN3Z2RISjFaU2s3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2NtVnVaR1Z5VFdsNGFXNGdLRloxWlNrZ2UxeHVJQ0F2THlCcGJuTjBZV3hzSUhKMWJuUnBiV1VnWTI5dWRtVnVhV1Z1WTJVZ2FHVnNjR1Z5YzF4dUlDQnBibk4wWVd4c1VtVnVaR1Z5U0dWc2NHVnljeWhXZFdVdWNISnZkRzkwZVhCbEtUdGNibHh1SUNCV2RXVXVjSEp2ZEc5MGVYQmxMaVJ1WlhoMFZHbGpheUE5SUdaMWJtTjBhVzl1SUNobWJpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYaDBWR2xqYXlobWJpd2dkR2hwY3lsY2JpQWdmVHRjYmx4dUlDQldkV1V1Y0hKdmRHOTBlWEJsTGw5eVpXNWtaWElnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2RtRnlJSFp0SUQwZ2RHaHBjenRjYmlBZ0lDQjJZWElnY21WbUlEMGdkbTB1Skc5d2RHbHZibk03WEc0Z0lDQWdkbUZ5SUhKbGJtUmxjaUE5SUhKbFppNXlaVzVrWlhJN1hHNGdJQ0FnZG1GeUlGOXdZWEpsYm5SV2JtOWtaU0E5SUhKbFppNWZjR0Z5Wlc1MFZtNXZaR1U3WEc1Y2JpQWdJQ0JwWmlBb2RtMHVYMmx6VFc5MWJuUmxaQ2tnZTF4dUlDQWdJQ0FnTHk4Z2FXWWdkR2hsSUhCaGNtVnVkQ0JrYVdSdUozUWdkWEJrWVhSbExDQjBhR1VnYzJ4dmRDQnViMlJsY3lCM2FXeHNJR0psSUhSb1pTQnZibVZ6SUdaeWIyMWNiaUFnSUNBZ0lDOHZJR3hoYzNRZ2NtVnVaR1Z5TGlCVWFHVjVJRzVsWldRZ2RHOGdZbVVnWTJ4dmJtVmtJSFJ2SUdWdWMzVnlaU0JjSW1aeVpYTm9ibVZ6YzF3aUlHWnZjaUIwYUdseklISmxibVJsY2k1Y2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUIyYlM0a2MyeHZkSE1wSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSE5zYjNRZ1BTQjJiUzRrYzJ4dmRITmJhMlY1WFR0Y2JpQWdJQ0FnSUNBZ0x5OGdYM0psYm1SbGNtVmtJR2x6SUdFZ1pteGhaeUJoWkdSbFpDQmllU0J5Wlc1a1pYSlRiRzkwTENCaWRYUWdiV0Y1SUc1dmRDQmlaU0J3Y21WelpXNTBYRzRnSUNBZ0lDQWdJQzh2SUdsbUlIUm9aU0J6Ykc5MElHbHpJSEJoYzNObFpDQm1jbTl0SUcxaGJuVmhiR3g1SUhkeWFYUjBaVzRnY21WdVpHVnlJR1oxYm1OMGFXOXVjMXh1SUNBZ0lDQWdJQ0JwWmlBb2MyeHZkQzVmY21WdVpHVnlaV1FnZkh3Z0tITnNiM1JiTUYwZ0ppWWdjMnh2ZEZzd1hTNWxiRzBwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkbTB1SkhOc2IzUnpXMnRsZVYwZ1BTQmpiRzl1WlZaT2IyUmxjeWh6Ykc5MExDQjBjblZsSUM4cUlHUmxaWEFnS2k4cE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtMHVKSE5qYjNCbFpGTnNiM1J6SUQwZ0tGOXdZWEpsYm5SV2JtOWtaU0FtSmlCZmNHRnlaVzUwVm01dlpHVXVaR0YwWVM1elkyOXdaV1JUYkc5MGN5a2dmSHdnWlcxd2RIbFBZbXBsWTNRN1hHNWNiaUFnSUNBdkx5QnpaWFFnY0dGeVpXNTBJSFp1YjJSbExpQjBhR2x6SUdGc2JHOTNjeUJ5Wlc1a1pYSWdablZ1WTNScGIyNXpJSFJ2SUdoaGRtVWdZV05qWlhOelhHNGdJQ0FnTHk4Z2RHOGdkR2hsSUdSaGRHRWdiMjRnZEdobElIQnNZV05sYUc5c1pHVnlJRzV2WkdVdVhHNGdJQ0FnZG0wdUpIWnViMlJsSUQwZ1gzQmhjbVZ1ZEZadWIyUmxPMXh1SUNBZ0lDOHZJSEpsYm1SbGNpQnpaV3htWEc0Z0lDQWdkbUZ5SUhadWIyUmxPMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0IyYm05a1pTQTlJSEpsYm1SbGNpNWpZV3hzS0hadExsOXlaVzVrWlhKUWNtOTRlU3dnZG0wdUpHTnlaV0YwWlVWc1pXMWxiblFwTzF4dUlDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUdoaGJtUnNaVVZ5Y205eUtHVXNJSFp0TENCY0luSmxibVJsY2x3aUtUdGNiaUFnSUNBZ0lDOHZJSEpsZEhWeWJpQmxjbkp2Y2lCeVpXNWtaWElnY21WemRXeDBMRnh1SUNBZ0lDQWdMeThnYjNJZ2NISmxkbWx2ZFhNZ2RtNXZaR1VnZEc4Z2NISmxkbVZ1ZENCeVpXNWtaWElnWlhKeWIzSWdZMkYxYzJsdVp5QmliR0Z1YXlCamIyMXdiMjVsYm5SY2JpQWdJQ0FnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCbGJITmxJQ292WEc0Z0lDQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RtMHVKRzl3ZEdsdmJuTXVjbVZ1WkdWeVJYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbTV2WkdVZ1BTQjJiUzRrYjNCMGFXOXVjeTV5Wlc1a1pYSkZjbkp2Y2k1allXeHNLSFp0TGw5eVpXNWtaWEpRY205NGVTd2dkbTB1SkdOeVpXRjBaVVZzWlcxbGJuUXNJR1VwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHaGhibVJzWlVWeWNtOXlLR1VzSUhadExDQmNJbkpsYm1SbGNrVnljbTl5WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG01dlpHVWdQU0IyYlM1ZmRtNXZaR1U3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJSFp1YjJSbElEMGdkbTB1WDNadWIyUmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IyYm05a1pTQTlJSFp0TGw5MmJtOWtaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdjbVYwZFhKdUlHVnRjSFI1SUhadWIyUmxJR2x1SUdOaGMyVWdkR2hsSUhKbGJtUmxjaUJtZFc1amRHbHZiaUJsY25KdmNtVmtJRzkxZEZ4dUlDQWdJR2xtSUNnaEtIWnViMlJsSUdsdWMzUmhibU5sYjJZZ1ZrNXZaR1VwS1NCN1hHNGdJQ0FnSUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUFtSmlCQmNuSmhlUzVwYzBGeWNtRjVLSFp1YjJSbEtTa2dlMXh1SUNBZ0lDQWdJQ0IzWVhKdUtGeHVJQ0FnSUNBZ0lDQWdJQ2ROZFd4MGFYQnNaU0J5YjI5MElHNXZaR1Z6SUhKbGRIVnlibVZrSUdaeWIyMGdjbVZ1WkdWeUlHWjFibU4wYVc5dUxpQlNaVzVrWlhJZ1puVnVZM1JwYjI0Z0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSjNOb2IzVnNaQ0J5WlhSMWNtNGdZU0J6YVc1bmJHVWdjbTl2ZENCdWIyUmxMaWNzWEc0Z0lDQWdJQ0FnSUNBZ2RtMWNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSFp1YjJSbElEMGdZM0psWVhSbFJXMXdkSGxXVG05a1pTZ3BPMXh1SUNBZ0lIMWNiaUFnSUNBdkx5QnpaWFFnY0dGeVpXNTBYRzRnSUNBZ2RtNXZaR1V1Y0dGeVpXNTBJRDBnWDNCaGNtVnVkRlp1YjJSbE8xeHVJQ0FnSUhKbGRIVnliaUIyYm05a1pWeHVJQ0I5TzF4dWZWeHVYRzR2S2lBZ0tpOWNibHh1ZG1GeUlIVnBaQ0E5SURBN1hHNWNibVoxYm1OMGFXOXVJR2x1YVhSTmFYaHBiaUFvVm5WbEtTQjdYRzRnSUZaMVpTNXdjbTkwYjNSNWNHVXVYMmx1YVhRZ1BTQm1kVzVqZEdsdmJpQW9iM0IwYVc5dWN5a2dlMXh1SUNBZ0lIWmhjaUIyYlNBOUlIUm9hWE03WEc0Z0lDQWdMeThnWVNCMWFXUmNiaUFnSUNCMmJTNWZkV2xrSUQwZ2RXbGtLeXM3WEc1Y2JpQWdJQ0IyWVhJZ2MzUmhjblJVWVdjc0lHVnVaRlJoWnp0Y2JpQWdJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYVdZZ0tpOWNiaUFnSUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUFtSmlCamIyNW1hV2N1Y0dWeVptOXliV0Z1WTJVZ0ppWWdiV0Z5YXlrZ2UxeHVJQ0FnSUNBZ2MzUmhjblJVWVdjZ1BTQmNJbloxWlMxd1pYSm1MWE4wWVhKME9sd2lJQ3NnS0hadExsOTFhV1FwTzF4dUlDQWdJQ0FnWlc1a1ZHRm5JRDBnWENKMmRXVXRjR1Z5WmkxbGJtUTZYQ0lnS3lBb2RtMHVYM1ZwWkNrN1hHNGdJQ0FnSUNCdFlYSnJLSE4wWVhKMFZHRm5LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJoSUdac1lXY2dkRzhnWVhadmFXUWdkR2hwY3lCaVpXbHVaeUJ2WW5ObGNuWmxaRnh1SUNBZ0lIWnRMbDlwYzFaMVpTQTlJSFJ5ZFdVN1hHNGdJQ0FnTHk4Z2JXVnlaMlVnYjNCMGFXOXVjMXh1SUNBZ0lHbG1JQ2h2Y0hScGIyNXpJQ1ltSUc5d2RHbHZibk11WDJselEyOXRjRzl1Wlc1MEtTQjdYRzRnSUNBZ0lDQXZMeUJ2Y0hScGJXbDZaU0JwYm5SbGNtNWhiQ0JqYjIxd2IyNWxiblFnYVc1emRHRnVkR2xoZEdsdmJseHVJQ0FnSUNBZ0x5OGdjMmx1WTJVZ1pIbHVZVzFwWXlCdmNIUnBiMjV6SUcxbGNtZHBibWNnYVhNZ2NISmxkSFI1SUhOc2IzY3NJR0Z1WkNCdWIyNWxJRzltSUhSb1pWeHVJQ0FnSUNBZ0x5OGdhVzUwWlhKdVlXd2dZMjl0Y0c5dVpXNTBJRzl3ZEdsdmJuTWdibVZsWkhNZ2MzQmxZMmxoYkNCMGNtVmhkRzFsYm5RdVhHNGdJQ0FnSUNCcGJtbDBTVzUwWlhKdVlXeERiMjF3YjI1bGJuUW9kbTBzSUc5d2RHbHZibk1wTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjJiUzRrYjNCMGFXOXVjeUE5SUcxbGNtZGxUM0IwYVc5dWN5aGNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpVTnZibk4wY25WamRHOXlUM0IwYVc5dWN5aDJiUzVqYjI1emRISjFZM1J2Y2lrc1hHNGdJQ0FnSUNBZ0lHOXdkR2x2Ym5NZ2ZId2dlMzBzWEc0Z0lDQWdJQ0FnSUhadFhHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnWld4elpTQXFMMXh1SUNBZ0lHbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNCcGJtbDBVSEp2ZUhrb2RtMHBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMmJTNWZjbVZ1WkdWeVVISnZlSGtnUFNCMmJUdGNiaUFnSUNCOVhHNGdJQ0FnTHk4Z1pYaHdiM05sSUhKbFlXd2djMlZzWmx4dUlDQWdJSFp0TGw5elpXeG1JRDBnZG0wN1hHNGdJQ0FnYVc1cGRFeHBabVZqZVdOc1pTaDJiU2s3WEc0Z0lDQWdhVzVwZEVWMlpXNTBjeWgyYlNrN1hHNGdJQ0FnYVc1cGRGSmxibVJsY2loMmJTazdYRzRnSUNBZ1kyRnNiRWh2YjJzb2RtMHNJQ2RpWldadmNtVkRjbVZoZEdVbktUdGNiaUFnSUNCcGJtbDBTVzVxWldOMGFXOXVjeWgyYlNrN0lDOHZJSEpsYzI5c2RtVWdhVzVxWldOMGFXOXVjeUJpWldadmNtVWdaR0YwWVM5d2NtOXdjMXh1SUNBZ0lHbHVhWFJUZEdGMFpTaDJiU2s3WEc0Z0lDQWdhVzVwZEZCeWIzWnBaR1VvZG0wcE95QXZMeUJ5WlhOdmJIWmxJSEJ5YjNacFpHVWdZV1owWlhJZ1pHRjBZUzl3Y205d2MxeHVJQ0FnSUdOaGJHeEliMjlyS0hadExDQW5ZM0psWVhSbFpDY3BPMXh1WEc0Z0lDQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJR2xtSUNvdlhHNGdJQ0FnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dKaVlnWTI5dVptbG5MbkJsY21admNtMWhibU5sSUNZbUlHMWhjbXNwSUh0Y2JpQWdJQ0FnSUhadExsOXVZVzFsSUQwZ1ptOXliV0YwUTI5dGNHOXVaVzUwVG1GdFpTaDJiU3dnWm1Gc2MyVXBPMXh1SUNBZ0lDQWdiV0Z5YXlobGJtUlVZV2NwTzF4dUlDQWdJQ0FnYldWaGMzVnlaU2dvWENKMmRXVWdYQ0lnS3lBb2RtMHVYMjVoYldVcElDc2dYQ0lnYVc1cGRGd2lLU3dnYzNSaGNuUlVZV2NzSUdWdVpGUmhaeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hadExpUnZjSFJwYjI1ekxtVnNLU0I3WEc0Z0lDQWdJQ0IyYlM0a2JXOTFiblFvZG0wdUpHOXdkR2x2Ym5NdVpXd3BPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYVc1cGRFbHVkR1Z5Ym1Gc1EyOXRjRzl1Wlc1MElDaDJiU3dnYjNCMGFXOXVjeWtnZTF4dUlDQjJZWElnYjNCMGN5QTlJSFp0TGlSdmNIUnBiMjV6SUQwZ1QySnFaV04wTG1OeVpXRjBaU2gyYlM1amIyNXpkSEoxWTNSdmNpNXZjSFJwYjI1ektUdGNiaUFnTHk4Z1pHOXBibWNnZEdocGN5QmlaV05oZFhObElHbDBKM01nWm1GemRHVnlJSFJvWVc0Z1pIbHVZVzFwWXlCbGJuVnRaWEpoZEdsdmJpNWNiaUFnZG1GeUlIQmhjbVZ1ZEZadWIyUmxJRDBnYjNCMGFXOXVjeTVmY0dGeVpXNTBWbTV2WkdVN1hHNGdJRzl3ZEhNdWNHRnlaVzUwSUQwZ2IzQjBhVzl1Y3k1d1lYSmxiblE3WEc0Z0lHOXdkSE11WDNCaGNtVnVkRlp1YjJSbElEMGdjR0Z5Wlc1MFZtNXZaR1U3WEc0Z0lHOXdkSE11WDNCaGNtVnVkRVZzYlNBOUlHOXdkR2x2Ym5NdVgzQmhjbVZ1ZEVWc2JUdGNiaUFnYjNCMGN5NWZjbVZtUld4dElEMGdiM0IwYVc5dWN5NWZjbVZtUld4dE8xeHVYRzRnSUhaaGNpQjJibTlrWlVOdmJYQnZibVZ1ZEU5d2RHbHZibk1nUFNCd1lYSmxiblJXYm05a1pTNWpiMjF3YjI1bGJuUlBjSFJwYjI1ek8xeHVJQ0J2Y0hSekxuQnliM0J6UkdGMFlTQTlJSFp1YjJSbFEyOXRjRzl1Wlc1MFQzQjBhVzl1Y3k1d2NtOXdjMFJoZEdFN1hHNGdJRzl3ZEhNdVgzQmhjbVZ1ZEV4cGMzUmxibVZ5Y3lBOUlIWnViMlJsUTI5dGNHOXVaVzUwVDNCMGFXOXVjeTVzYVhOMFpXNWxjbk03WEc0Z0lHOXdkSE11WDNKbGJtUmxja05vYVd4a2NtVnVJRDBnZG01dlpHVkRiMjF3YjI1bGJuUlBjSFJwYjI1ekxtTm9hV3hrY21WdU8xeHVJQ0J2Y0hSekxsOWpiMjF3YjI1bGJuUlVZV2NnUFNCMmJtOWtaVU52YlhCdmJtVnVkRTl3ZEdsdmJuTXVkR0ZuTzF4dVhHNGdJR2xtSUNodmNIUnBiMjV6TG5KbGJtUmxjaWtnZTF4dUlDQWdJRzl3ZEhNdWNtVnVaR1Z5SUQwZ2IzQjBhVzl1Y3k1eVpXNWtaWEk3WEc0Z0lDQWdiM0IwY3k1emRHRjBhV05TWlc1a1pYSkdibk1nUFNCdmNIUnBiMjV6TG5OMFlYUnBZMUpsYm1SbGNrWnVjenRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCeVpYTnZiSFpsUTI5dWMzUnlkV04wYjNKUGNIUnBiMjV6SUNoRGRHOXlLU0I3WEc0Z0lIWmhjaUJ2Y0hScGIyNXpJRDBnUTNSdmNpNXZjSFJwYjI1ek8xeHVJQ0JwWmlBb1EzUnZjaTV6ZFhCbGNpa2dlMXh1SUNBZ0lIWmhjaUJ6ZFhCbGNrOXdkR2x2Ym5NZ1BTQnlaWE52YkhabFEyOXVjM1J5ZFdOMGIzSlBjSFJwYjI1ektFTjBiM0l1YzNWd1pYSXBPMXh1SUNBZ0lIWmhjaUJqWVdOb1pXUlRkWEJsY2s5d2RHbHZibk1nUFNCRGRHOXlMbk4xY0dWeVQzQjBhVzl1Y3p0Y2JpQWdJQ0JwWmlBb2MzVndaWEpQY0hScGIyNXpJQ0U5UFNCallXTm9aV1JUZFhCbGNrOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDOHZJSE4xY0dWeUlHOXdkR2x2YmlCamFHRnVaMlZrTEZ4dUlDQWdJQ0FnTHk4Z2JtVmxaQ0IwYnlCeVpYTnZiSFpsSUc1bGR5QnZjSFJwYjI1ekxseHVJQ0FnSUNBZ1EzUnZjaTV6ZFhCbGNrOXdkR2x2Ym5NZ1BTQnpkWEJsY2s5d2RHbHZibk03WEc0Z0lDQWdJQ0F2THlCamFHVmpheUJwWmlCMGFHVnlaU0JoY21VZ1lXNTVJR3hoZEdVdGJXOWthV1pwWldRdllYUjBZV05vWldRZ2IzQjBhVzl1Y3lBb0l6UTVOellwWEc0Z0lDQWdJQ0IyWVhJZ2JXOWthV1pwWldSUGNIUnBiMjV6SUQwZ2NtVnpiMngyWlUxdlpHbG1hV1ZrVDNCMGFXOXVjeWhEZEc5eUtUdGNiaUFnSUNBZ0lDOHZJSFZ3WkdGMFpTQmlZWE5sSUdWNGRHVnVaQ0J2Y0hScGIyNXpYRzRnSUNBZ0lDQnBaaUFvYlc5a2FXWnBaV1JQY0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0FnSUdWNGRHVnVaQ2hEZEc5eUxtVjRkR1Z1WkU5d2RHbHZibk1zSUcxdlpHbG1hV1ZrVDNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J2Y0hScGIyNXpJRDBnUTNSdmNpNXZjSFJwYjI1eklEMGdiV1Z5WjJWUGNIUnBiMjV6S0hOMWNHVnlUM0IwYVc5dWN5d2dRM1J2Y2k1bGVIUmxibVJQY0hScGIyNXpLVHRjYmlBZ0lDQWdJR2xtSUNodmNIUnBiMjV6TG01aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnYjNCMGFXOXVjeTVqYjIxd2IyNWxiblJ6VzI5d2RHbHZibk11Ym1GdFpWMGdQU0JEZEc5eU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1SUNCeVpYUjFjbTRnYjNCMGFXOXVjMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnlaWE52YkhabFRXOWthV1pwWldSUGNIUnBiMjV6SUNoRGRHOXlLU0I3WEc0Z0lIWmhjaUJ0YjJScFptbGxaRHRjYmlBZ2RtRnlJR3hoZEdWemRDQTlJRU4wYjNJdWIzQjBhVzl1Y3p0Y2JpQWdkbUZ5SUdWNGRHVnVaR1ZrSUQwZ1EzUnZjaTVsZUhSbGJtUlBjSFJwYjI1ek8xeHVJQ0IyWVhJZ2MyVmhiR1ZrSUQwZ1EzUnZjaTV6WldGc1pXUlBjSFJwYjI1ek8xeHVJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdiR0YwWlhOMEtTQjdYRzRnSUNBZ2FXWWdLR3hoZEdWemRGdHJaWGxkSUNFOVBTQnpaV0ZzWldSYmEyVjVYU2tnZTF4dUlDQWdJQ0FnYVdZZ0tDRnRiMlJwWm1sbFpDa2dleUJ0YjJScFptbGxaQ0E5SUh0OU95QjlYRzRnSUNBZ0lDQnRiMlJwWm1sbFpGdHJaWGxkSUQwZ1pHVmtkWEJsS0d4aGRHVnpkRnRyWlhsZExDQmxlSFJsYm1SbFpGdHJaWGxkTENCelpXRnNaV1JiYTJWNVhTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdGIyUnBabWxsWkZ4dWZWeHVYRzVtZFc1amRHbHZiaUJrWldSMWNHVWdLR3hoZEdWemRDd2daWGgwWlc1a1pXUXNJSE5sWVd4bFpDa2dlMXh1SUNBdkx5QmpiMjF3WVhKbElHeGhkR1Z6ZENCaGJtUWdjMlZoYkdWa0lIUnZJR1Z1YzNWeVpTQnNhV1psWTNsamJHVWdhRzl2YTNNZ2QyOXVKM1FnWW1VZ1pIVndiR2xqWVhSbFpGeHVJQ0F2THlCaVpYUjNaV1Z1SUcxbGNtZGxjMXh1SUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoc1lYUmxjM1FwS1NCN1hHNGdJQ0FnZG1GeUlISmxjeUE5SUZ0ZE8xeHVJQ0FnSUhObFlXeGxaQ0E5SUVGeWNtRjVMbWx6UVhKeVlYa29jMlZoYkdWa0tTQS9JSE5sWVd4bFpDQTZJRnR6WldGc1pXUmRPMXh1SUNBZ0lHVjRkR1Z1WkdWa0lEMGdRWEp5WVhrdWFYTkJjbkpoZVNobGVIUmxibVJsWkNrZ1B5QmxlSFJsYm1SbFpDQTZJRnRsZUhSbGJtUmxaRjA3WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JzWVhSbGMzUXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUM4dklIQjFjMmdnYjNKcFoybHVZV3dnYjNCMGFXOXVjeUJoYm1RZ2JtOTBJSE5sWVd4bFpDQnZjSFJwYjI1eklIUnZJR1Y0WTJ4MVpHVWdaSFZ3YkdsallYUmxaQ0J2Y0hScGIyNXpYRzRnSUNBZ0lDQnBaaUFvWlhoMFpXNWtaV1F1YVc1a1pYaFBaaWhzWVhSbGMzUmJhVjBwSUQ0OUlEQWdmSHdnYzJWaGJHVmtMbWx1WkdWNFQyWW9iR0YwWlhOMFcybGRLU0E4SURBcElIdGNiaUFnSUNBZ0lDQWdjbVZ6TG5CMWMyZ29iR0YwWlhOMFcybGRLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhKbGMxeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISmxkSFZ5YmlCc1lYUmxjM1JjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCV2RXVWtNeUFvYjNCMGFXOXVjeWtnZTF4dUlDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBbUpseHVJQ0FnSUNFb2RHaHBjeUJwYm5OMFlXNWpaVzltSUZaMVpTUXpLVnh1SUNBcElIdGNiaUFnSUNCM1lYSnVLQ2RXZFdVZ2FYTWdZU0JqYjI1emRISjFZM1J2Y2lCaGJtUWdjMmh2ZFd4a0lHSmxJR05oYkd4bFpDQjNhWFJvSUhSb1pTQmdibVYzWUNCclpYbDNiM0prSnlrN1hHNGdJSDFjYmlBZ2RHaHBjeTVmYVc1cGRDaHZjSFJwYjI1ektUdGNibjFjYmx4dWFXNXBkRTFwZUdsdUtGWjFaU1F6S1R0Y2JuTjBZWFJsVFdsNGFXNG9WblZsSkRNcE8xeHVaWFpsYm5SelRXbDRhVzRvVm5WbEpETXBPMXh1YkdsbVpXTjVZMnhsVFdsNGFXNG9WblZsSkRNcE8xeHVjbVZ1WkdWeVRXbDRhVzRvVm5WbEpETXBPMXh1WEc0dktpQWdLaTljYmx4dVpuVnVZM1JwYjI0Z2FXNXBkRlZ6WlNBb1ZuVmxLU0I3WEc0Z0lGWjFaUzUxYzJVZ1BTQm1kVzVqZEdsdmJpQW9jR3gxWjJsdUtTQjdYRzRnSUNBZ2RtRnlJR2x1YzNSaGJHeGxaRkJzZFdkcGJuTWdQU0FvZEdocGN5NWZhVzV6ZEdGc2JHVmtVR3gxWjJsdWN5QjhmQ0FvZEdocGN5NWZhVzV6ZEdGc2JHVmtVR3gxWjJsdWN5QTlJRnRkS1NrN1hHNGdJQ0FnYVdZZ0tHbHVjM1JoYkd4bFpGQnNkV2RwYm5NdWFXNWtaWGhQWmlod2JIVm5hVzRwSUQ0Z0xURXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnWVdSa2FYUnBiMjVoYkNCd1lYSmhiV1YwWlhKelhHNGdJQ0FnZG1GeUlHRnlaM01nUFNCMGIwRnljbUY1S0dGeVozVnRaVzUwY3l3Z01TazdYRzRnSUNBZ1lYSm5jeTUxYm5Ob2FXWjBLSFJvYVhNcE8xeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2NHeDFaMmx1TG1sdWMzUmhiR3dnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJSEJzZFdkcGJpNXBibk4wWVd4c0xtRndjR3g1S0hCc2RXZHBiaXdnWVhKbmN5azdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ2NHeDFaMmx1SUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0J3YkhWbmFXNHVZWEJ3Ykhrb2JuVnNiQ3dnWVhKbmN5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdsdWMzUmhiR3hsWkZCc2RXZHBibk11Y0hWemFDaHdiSFZuYVc0cE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdselhHNGdJSDA3WEc1OVhHNWNiaThxSUNBcUwxeHVYRzVtZFc1amRHbHZiaUJwYm1sMFRXbDRhVzRrTVNBb1ZuVmxLU0I3WEc0Z0lGWjFaUzV0YVhocGJpQTlJR1oxYm1OMGFXOXVJQ2h0YVhocGJpa2dlMXh1SUNBZ0lIUm9hWE11YjNCMGFXOXVjeUE5SUcxbGNtZGxUM0IwYVc5dWN5aDBhR2x6TG05d2RHbHZibk1zSUcxcGVHbHVLVHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjMXh1SUNCOU8xeHVmVnh1WEc0dktpQWdLaTljYmx4dVpuVnVZM1JwYjI0Z2FXNXBkRVY0ZEdWdVpDQW9WblZsS1NCN1hHNGdJQzhxS2x4dUlDQWdLaUJGWVdOb0lHbHVjM1JoYm1ObElHTnZibk4wY25WamRHOXlMQ0JwYm1Oc2RXUnBibWNnVm5WbExDQm9ZWE1nWVNCMWJtbHhkV1ZjYmlBZ0lDb2dZMmxrTGlCVWFHbHpJR1Z1WVdKc1pYTWdkWE1nZEc4Z1kzSmxZWFJsSUhkeVlYQndaV1FnWENKamFHbHNaRnh1SUNBZ0tpQmpiMjV6ZEhKMVkzUnZjbk5jSWlCbWIzSWdjSEp2ZEc5MGVYQmhiQ0JwYm1obGNtbDBZVzVqWlNCaGJtUWdZMkZqYUdVZ2RHaGxiUzVjYmlBZ0lDb3ZYRzRnSUZaMVpTNWphV1FnUFNBd08xeHVJQ0IyWVhJZ1kybGtJRDBnTVR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUTJ4aGMzTWdhVzVvWlhKcGRHRnVZMlZjYmlBZ0lDb3ZYRzRnSUZaMVpTNWxlSFJsYm1RZ1BTQm1kVzVqZEdsdmJpQW9aWGgwWlc1a1QzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUdWNGRHVnVaRTl3ZEdsdmJuTWdQU0JsZUhSbGJtUlBjSFJwYjI1eklIeDhJSHQ5TzF4dUlDQWdJSFpoY2lCVGRYQmxjaUE5SUhSb2FYTTdYRzRnSUNBZ2RtRnlJRk4xY0dWeVNXUWdQU0JUZFhCbGNpNWphV1E3WEc0Z0lDQWdkbUZ5SUdOaFkyaGxaRU4wYjNKeklEMGdaWGgwWlc1a1QzQjBhVzl1Y3k1ZlEzUnZjaUI4ZkNBb1pYaDBaVzVrVDNCMGFXOXVjeTVmUTNSdmNpQTlJSHQ5S1R0Y2JpQWdJQ0JwWmlBb1kyRmphR1ZrUTNSdmNuTmJVM1Z3WlhKSlpGMHBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmpZV05vWldSRGRHOXljMXRUZFhCbGNrbGtYVnh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJ1WVcxbElEMGdaWGgwWlc1a1QzQjBhVzl1Y3k1dVlXMWxJSHg4SUZOMWNHVnlMbTl3ZEdsdmJuTXVibUZ0WlR0Y2JpQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QW1KaUJ1WVcxbEtTQjdYRzRnSUNBZ0lDQjJZV3hwWkdGMFpVTnZiWEJ2Ym1WdWRFNWhiV1VvYm1GdFpTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJRk4xWWlBOUlHWjFibU4wYVc5dUlGWjFaVU52YlhCdmJtVnVkQ0FvYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnZEdocGN5NWZhVzVwZENodmNIUnBiMjV6S1R0Y2JpQWdJQ0I5TzF4dUlDQWdJRk4xWWk1d2NtOTBiM1I1Y0dVZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0ZOMWNHVnlMbkJ5YjNSdmRIbHdaU2s3WEc0Z0lDQWdVM1ZpTG5CeWIzUnZkSGx3WlM1amIyNXpkSEoxWTNSdmNpQTlJRk4xWWp0Y2JpQWdJQ0JUZFdJdVkybGtJRDBnWTJsa0t5czdYRzRnSUNBZ1UzVmlMbTl3ZEdsdmJuTWdQU0J0WlhKblpVOXdkR2x2Ym5Nb1hHNGdJQ0FnSUNCVGRYQmxjaTV2Y0hScGIyNXpMRnh1SUNBZ0lDQWdaWGgwWlc1a1QzQjBhVzl1YzF4dUlDQWdJQ2s3WEc0Z0lDQWdVM1ZpV3lkemRYQmxjaWRkSUQwZ1UzVndaWEk3WEc1Y2JpQWdJQ0F2THlCR2IzSWdjSEp2Y0hNZ1lXNWtJR052YlhCMWRHVmtJSEJ5YjNCbGNuUnBaWE1zSUhkbElHUmxabWx1WlNCMGFHVWdjSEp2ZUhrZ1oyVjBkR1Z5Y3lCdmJseHVJQ0FnSUM4dklIUm9aU0JXZFdVZ2FXNXpkR0Z1WTJWeklHRjBJR1Y0ZEdWdWMybHZiaUIwYVcxbExDQnZiaUIwYUdVZ1pYaDBaVzVrWldRZ2NISnZkRzkwZVhCbExpQlVhR2x6WEc0Z0lDQWdMeThnWVhadmFXUnpJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNCallXeHNjeUJtYjNJZ1pXRmphQ0JwYm5OMFlXNWpaU0JqY21WaGRHVmtMbHh1SUNBZ0lHbG1JQ2hUZFdJdWIzQjBhVzl1Y3k1d2NtOXdjeWtnZTF4dUlDQWdJQ0FnYVc1cGRGQnliM0J6SkRFb1UzVmlLVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLRk4xWWk1dmNIUnBiMjV6TG1OdmJYQjFkR1ZrS1NCN1hHNGdJQ0FnSUNCcGJtbDBRMjl0Y0hWMFpXUWtNU2hUZFdJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklHRnNiRzkzSUdaMWNuUm9aWElnWlhoMFpXNXphVzl1TDIxcGVHbHVMM0JzZFdkcGJpQjFjMkZuWlZ4dUlDQWdJRk4xWWk1bGVIUmxibVFnUFNCVGRYQmxjaTVsZUhSbGJtUTdYRzRnSUNBZ1UzVmlMbTFwZUdsdUlEMGdVM1Z3WlhJdWJXbDRhVzQ3WEc0Z0lDQWdVM1ZpTG5WelpTQTlJRk4xY0dWeUxuVnpaVHRjYmx4dUlDQWdJQzh2SUdOeVpXRjBaU0JoYzNObGRDQnlaV2RwYzNSbGNuTXNJSE52SUdWNGRHVnVaR1ZrSUdOc1lYTnpaWE5jYmlBZ0lDQXZMeUJqWVc0Z2FHRjJaU0IwYUdWcGNpQndjbWwyWVhSbElHRnpjMlYwY3lCMGIyOHVYRzRnSUNBZ1FWTlRSVlJmVkZsUVJWTXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9kSGx3WlNrZ2UxeHVJQ0FnSUNBZ1UzVmlXM1I1Y0dWZElEMGdVM1Z3WlhKYmRIbHdaVjA3WEc0Z0lDQWdmU2s3WEc0Z0lDQWdMeThnWlc1aFlteGxJSEpsWTNWeWMybDJaU0J6Wld4bUxXeHZiMnQxY0Z4dUlDQWdJR2xtSUNodVlXMWxLU0I3WEc0Z0lDQWdJQ0JUZFdJdWIzQjBhVzl1Y3k1amIyMXdiMjVsYm5SelcyNWhiV1ZkSUQwZ1UzVmlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJR3RsWlhBZ1lTQnlaV1psY21WdVkyVWdkRzhnZEdobElITjFjR1Z5SUc5d2RHbHZibk1nWVhRZ1pYaDBaVzV6YVc5dUlIUnBiV1V1WEc0Z0lDQWdMeThnYkdGMFpYSWdZWFFnYVc1emRHRnVkR2xoZEdsdmJpQjNaU0JqWVc0Z1kyaGxZMnNnYVdZZ1UzVndaWEluY3lCdmNIUnBiMjV6SUdoaGRtVmNiaUFnSUNBdkx5QmlaV1Z1SUhWd1pHRjBaV1F1WEc0Z0lDQWdVM1ZpTG5OMWNHVnlUM0IwYVc5dWN5QTlJRk4xY0dWeUxtOXdkR2x2Ym5NN1hHNGdJQ0FnVTNWaUxtVjRkR1Z1WkU5d2RHbHZibk1nUFNCbGVIUmxibVJQY0hScGIyNXpPMXh1SUNBZ0lGTjFZaTV6WldGc1pXUlBjSFJwYjI1eklEMGdaWGgwWlc1a0tIdDlMQ0JUZFdJdWIzQjBhVzl1Y3lrN1hHNWNiaUFnSUNBdkx5QmpZV05vWlNCamIyNXpkSEoxWTNSdmNseHVJQ0FnSUdOaFkyaGxaRU4wYjNKelcxTjFjR1Z5U1dSZElEMGdVM1ZpTzF4dUlDQWdJSEpsZEhWeWJpQlRkV0pjYmlBZ2ZUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2FXNXBkRkJ5YjNCekpERWdLRU52YlhBcElIdGNiaUFnZG1GeUlIQnliM0J6SUQwZ1EyOXRjQzV2Y0hScGIyNXpMbkJ5YjNCek8xeHVJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdjSEp2Y0hNcElIdGNiaUFnSUNCd2NtOTRlU2hEYjIxd0xuQnliM1J2ZEhsd1pTd2dYQ0pmY0hKdmNITmNJaXdnYTJWNUtUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJwYm1sMFEyOXRjSFYwWldRa01TQW9RMjl0Y0NrZ2UxeHVJQ0IyWVhJZ1kyOXRjSFYwWldRZ1BTQkRiMjF3TG05d2RHbHZibk11WTI5dGNIVjBaV1E3WEc0Z0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCamIyMXdkWFJsWkNrZ2UxeHVJQ0FnSUdSbFptbHVaVU52YlhCMWRHVmtLRU52YlhBdWNISnZkRzkwZVhCbExDQnJaWGtzSUdOdmJYQjFkR1ZrVzJ0bGVWMHBPMXh1SUNCOVhHNTlYRzVjYmk4cUlDQXFMMXh1WEc1bWRXNWpkR2x2YmlCcGJtbDBRWE56WlhSU1pXZHBjM1JsY25NZ0tGWjFaU2tnZTF4dUlDQXZLaXBjYmlBZ0lDb2dRM0psWVhSbElHRnpjMlYwSUhKbFoybHpkSEpoZEdsdmJpQnRaWFJvYjJSekxseHVJQ0FnS2k5Y2JpQWdRVk5UUlZSZlZGbFFSVk11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvZEhsd1pTa2dlMXh1SUNBZ0lGWjFaVnQwZVhCbFhTQTlJR1oxYm1OMGFXOXVJQ2hjYmlBZ0lDQWdJR2xrTEZ4dUlDQWdJQ0FnWkdWbWFXNXBkR2x2Ymx4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnYVdZZ0tDRmtaV1pwYm1sMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtOXdkR2x2Ym5OYmRIbHdaU0FySUNkekoxMWJhV1JkWEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYVdZZ0tpOWNiaUFnSUNBZ0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ0ppWWdkSGx3WlNBOVBUMGdKMk52YlhCdmJtVnVkQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJZV3hwWkdGMFpVTnZiWEJ2Ym1WdWRFNWhiV1VvYVdRcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxJRDA5UFNBblkyOXRjRzl1Wlc1MEp5QW1KaUJwYzFCc1lXbHVUMkpxWldOMEtHUmxabWx1YVhScGIyNHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1pHVm1hVzVwZEdsdmJpNXVZVzFsSUQwZ1pHVm1hVzVwZEdsdmJpNXVZVzFsSUh4OElHbGtPMXh1SUNBZ0lDQWdJQ0FnSUdSbFptbHVhWFJwYjI0Z1BTQjBhR2x6TG05d2RHbHZibk11WDJKaGMyVXVaWGgwWlc1a0tHUmxabWx1YVhScGIyNHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsSUQwOVBTQW5aR2x5WldOMGFYWmxKeUFtSmlCMGVYQmxiMllnWkdWbWFXNXBkR2x2YmlBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lHUmxabWx1YVhScGIyNGdQU0I3SUdKcGJtUTZJR1JsWm1sdWFYUnBiMjRzSUhWd1pHRjBaVG9nWkdWbWFXNXBkR2x2YmlCOU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdWIzQjBhVzl1YzF0MGVYQmxJQ3NnSjNNblhWdHBaRjBnUFNCa1pXWnBibWwwYVc5dU8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pHVm1hVzVwZEdsdmJseHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNGdJSDBwTzF4dWZWeHVYRzR2S2lBZ0tpOWNibHh1Wm5WdVkzUnBiMjRnWjJWMFEyOXRjRzl1Wlc1MFRtRnRaU0FvYjNCMGN5a2dlMXh1SUNCeVpYUjFjbTRnYjNCMGN5QW1KaUFvYjNCMGN5NURkRzl5TG05d2RHbHZibk11Ym1GdFpTQjhmQ0J2Y0hSekxuUmhaeWxjYm4xY2JseHVablZ1WTNScGIyNGdiV0YwWTJobGN5QW9jR0YwZEdWeWJpd2dibUZ0WlNrZ2UxeHVJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2h3WVhSMFpYSnVLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQndZWFIwWlhKdUxtbHVaR1Y0VDJZb2JtRnRaU2tnUGlBdE1WeHVJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJ3WVhSMFpYSnVJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ3WVhSMFpYSnVMbk53YkdsMEtDY3NKeWt1YVc1a1pYaFBaaWh1WVcxbEtTQStJQzB4WEc0Z0lIMGdaV3h6WlNCcFppQW9hWE5TWldkRmVIQW9jR0YwZEdWeWJpa3BJSHRjYmlBZ0lDQnlaWFIxY200Z2NHRjBkR1Z5Ymk1MFpYTjBLRzVoYldVcFhHNGdJSDFjYmlBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHNWxlSFFnS2k5Y2JpQWdjbVYwZFhKdUlHWmhiSE5sWEc1OVhHNWNibVoxYm1OMGFXOXVJSEJ5ZFc1bFEyRmphR1VnS0d0bFpYQkJiR2wyWlVsdWMzUmhibU5sTENCbWFXeDBaWElwSUh0Y2JpQWdkbUZ5SUdOaFkyaGxJRDBnYTJWbGNFRnNhWFpsU1c1emRHRnVZMlV1WTJGamFHVTdYRzRnSUhaaGNpQnJaWGx6SUQwZ2EyVmxjRUZzYVhabFNXNXpkR0Z1WTJVdWEyVjVjenRjYmlBZ2RtRnlJRjkyYm05a1pTQTlJR3RsWlhCQmJHbDJaVWx1YzNSaGJtTmxMbDkyYm05a1pUdGNiaUFnWm05eUlDaDJZWElnYTJWNUlHbHVJR05oWTJobEtTQjdYRzRnSUNBZ2RtRnlJR05oWTJobFpFNXZaR1VnUFNCallXTm9aVnRyWlhsZE8xeHVJQ0FnSUdsbUlDaGpZV05vWldST2IyUmxLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2JtRnRaU0E5SUdkbGRFTnZiWEJ2Ym1WdWRFNWhiV1VvWTJGamFHVmtUbTlrWlM1amIyMXdiMjVsYm5SUGNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUdsbUlDaHVZVzFsSUNZbUlDRm1hV3gwWlhJb2JtRnRaU2twSUh0Y2JpQWdJQ0FnSUNBZ2NISjFibVZEWVdOb1pVVnVkSEo1S0dOaFkyaGxMQ0JyWlhrc0lHdGxlWE1zSUY5MmJtOWtaU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUhCeWRXNWxRMkZqYUdWRmJuUnllU0FvWEc0Z0lHTmhZMmhsTEZ4dUlDQnJaWGtzWEc0Z0lHdGxlWE1zWEc0Z0lHTjFjbkpsYm5SY2Jpa2dlMXh1SUNCMllYSWdZMkZqYUdWa0pDUXhJRDBnWTJGamFHVmJhMlY1WFR0Y2JpQWdhV1lnS0dOaFkyaGxaQ1FrTVNBbUppQW9JV04xY25KbGJuUWdmSHdnWTJGamFHVmtKQ1F4TG5SaFp5QWhQVDBnWTNWeWNtVnVkQzUwWVdjcEtTQjdYRzRnSUNBZ1kyRmphR1ZrSkNReExtTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObExpUmtaWE4wY205NUtDazdYRzRnSUgxY2JpQWdZMkZqYUdWYmEyVjVYU0E5SUc1MWJHdzdYRzRnSUhKbGJXOTJaU2hyWlhsekxDQnJaWGtwTzF4dWZWeHVYRzUyWVhJZ2NHRjBkR1Z5YmxSNWNHVnpJRDBnVzFOMGNtbHVaeXdnVW1WblJYaHdMQ0JCY25KaGVWMDdYRzVjYm5aaGNpQkxaV1Z3UVd4cGRtVWdQU0I3WEc0Z0lHNWhiV1U2SUNkclpXVndMV0ZzYVhabEp5eGNiaUFnWVdKemRISmhZM1E2SUhSeWRXVXNYRzVjYmlBZ2NISnZjSE02SUh0Y2JpQWdJQ0JwYm1Oc2RXUmxPaUJ3WVhSMFpYSnVWSGx3WlhNc1hHNGdJQ0FnWlhoamJIVmtaVG9nY0dGMGRHVnlibFI1Y0dWekxGeHVJQ0FnSUcxaGVEb2dXMU4wY21sdVp5d2dUblZ0WW1WeVhWeHVJQ0I5TEZ4dVhHNGdJR055WldGMFpXUTZJR1oxYm1OMGFXOXVJR055WldGMFpXUWdLQ2tnZTF4dUlDQWdJSFJvYVhNdVkyRmphR1VnUFNCUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cE8xeHVJQ0FnSUhSb2FYTXVhMlY1Y3lBOUlGdGRPMXh1SUNCOUxGeHVYRzRnSUdSbGMzUnliM2xsWkRvZ1puVnVZM1JwYjI0Z1pHVnpkSEp2ZVdWa0lDZ3BJSHRjYmlBZ0lDQjJZWElnZEdocGN5UXhJRDBnZEdocGN6dGNibHh1SUNBZ0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCMGFHbHpKREV1WTJGamFHVXBJSHRjYmlBZ0lDQWdJSEJ5ZFc1bFEyRmphR1ZGYm5SeWVTaDBhR2x6SkRFdVkyRmphR1VzSUd0bGVTd2dkR2hwY3lReExtdGxlWE1wTzF4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNCM1lYUmphRG9nZTF4dUlDQWdJR2x1WTJ4MVpHVTZJR1oxYm1OMGFXOXVJR2x1WTJ4MVpHVWdLSFpoYkNrZ2UxeHVJQ0FnSUNBZ2NISjFibVZEWVdOb1pTaDBhR2x6TENCbWRXNWpkR2x2YmlBb2JtRnRaU2tnZXlCeVpYUjFjbTRnYldGMFkyaGxjeWgyWVd3c0lHNWhiV1VwT3lCOUtUdGNiaUFnSUNCOUxGeHVJQ0FnSUdWNFkyeDFaR1U2SUdaMWJtTjBhVzl1SUdWNFkyeDFaR1VnS0haaGJDa2dlMXh1SUNBZ0lDQWdjSEoxYm1WRFlXTm9aU2gwYUdsekxDQm1kVzVqZEdsdmJpQW9ibUZ0WlNrZ2V5QnlaWFIxY200Z0lXMWhkR05vWlhNb2RtRnNMQ0J1WVcxbEtUc2dmU2s3WEc0Z0lDQWdmVnh1SUNCOUxGeHVYRzRnSUhKbGJtUmxjam9nWm5WdVkzUnBiMjRnY21WdVpHVnlJQ2dwSUh0Y2JpQWdJQ0IyWVhJZ2MyeHZkQ0E5SUhSb2FYTXVKSE5zYjNSekxtUmxabUYxYkhRN1hHNGdJQ0FnZG1GeUlIWnViMlJsSUQwZ1oyVjBSbWx5YzNSRGIyMXdiMjVsYm5SRGFHbHNaQ2h6Ykc5MEtUdGNiaUFnSUNCMllYSWdZMjl0Y0c5dVpXNTBUM0IwYVc5dWN5QTlJSFp1YjJSbElDWW1JSFp1YjJSbExtTnZiWEJ2Ym1WdWRFOXdkR2x2Ym5NN1hHNGdJQ0FnYVdZZ0tHTnZiWEJ2Ym1WdWRFOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDOHZJR05vWldOcklIQmhkSFJsY201Y2JpQWdJQ0FnSUhaaGNpQnVZVzFsSUQwZ1oyVjBRMjl0Y0c5dVpXNTBUbUZ0WlNoamIyMXdiMjVsYm5SUGNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUhaaGNpQnlaV1lnUFNCMGFHbHpPMXh1SUNBZ0lDQWdkbUZ5SUdsdVkyeDFaR1VnUFNCeVpXWXVhVzVqYkhWa1pUdGNiaUFnSUNBZ0lIWmhjaUJsZUdOc2RXUmxJRDBnY21WbUxtVjRZMngxWkdVN1hHNGdJQ0FnSUNCcFppQW9YRzRnSUNBZ0lDQWdJQzh2SUc1dmRDQnBibU5zZFdSbFpGeHVJQ0FnSUNBZ0lDQW9hVzVqYkhWa1pTQW1KaUFvSVc1aGJXVWdmSHdnSVcxaGRHTm9aWE1vYVc1amJIVmtaU3dnYm1GdFpTa3BLU0I4ZkZ4dUlDQWdJQ0FnSUNBdkx5QmxlR05zZFdSbFpGeHVJQ0FnSUNBZ0lDQW9aWGhqYkhWa1pTQW1KaUJ1WVcxbElDWW1JRzFoZEdOb1pYTW9aWGhqYkhWa1pTd2dibUZ0WlNrcFhHNGdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIWnViMlJsWEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhaaGNpQnlaV1lrTVNBOUlIUm9hWE03WEc0Z0lDQWdJQ0IyWVhJZ1kyRmphR1VnUFNCeVpXWWtNUzVqWVdOb1pUdGNiaUFnSUNBZ0lIWmhjaUJyWlhseklEMGdjbVZtSkRFdWEyVjVjenRjYmlBZ0lDQWdJSFpoY2lCclpYa2dQU0IyYm05a1pTNXJaWGtnUFQwZ2JuVnNiRnh1SUNBZ0lDQWdJQ0F2THlCellXMWxJR052Ym5OMGNuVmpkRzl5SUcxaGVTQm5aWFFnY21WbmFYTjBaWEpsWkNCaGN5QmthV1ptWlhKbGJuUWdiRzlqWVd3Z1kyOXRjRzl1Wlc1MGMxeHVJQ0FnSUNBZ0lDQXZMeUJ6YnlCamFXUWdZV3h2Ym1VZ2FYTWdibTkwSUdWdWIzVm5hQ0FvSXpNeU5qa3BYRzRnSUNBZ0lDQWdJRDhnWTI5dGNHOXVaVzUwVDNCMGFXOXVjeTVEZEc5eUxtTnBaQ0FySUNoamIyMXdiMjVsYm5SUGNIUnBiMjV6TG5SaFp5QS9JQ2hjSWpvNlhDSWdLeUFvWTI5dGNHOXVaVzUwVDNCMGFXOXVjeTUwWVdjcEtTQTZJQ2NuS1Z4dUlDQWdJQ0FnSUNBNklIWnViMlJsTG10bGVUdGNiaUFnSUNBZ0lHbG1JQ2hqWVdOb1pWdHJaWGxkS1NCN1hHNGdJQ0FnSUNBZ0lIWnViMlJsTG1OdmJYQnZibVZ1ZEVsdWMzUmhibU5sSUQwZ1kyRmphR1ZiYTJWNVhTNWpiMjF3YjI1bGJuUkpibk4wWVc1alpUdGNiaUFnSUNBZ0lDQWdMeThnYldGclpTQmpkWEp5Wlc1MElHdGxlU0JtY21WemFHVnpkRnh1SUNBZ0lDQWdJQ0J5WlcxdmRtVW9hMlY1Y3l3Z2EyVjVLVHRjYmlBZ0lDQWdJQ0FnYTJWNWN5NXdkWE5vS0d0bGVTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQmpZV05vWlZ0clpYbGRJRDBnZG01dlpHVTdYRzRnSUNBZ0lDQWdJR3RsZVhNdWNIVnphQ2hyWlhrcE8xeHVJQ0FnSUNBZ0lDQXZMeUJ3Y25WdVpTQnZiR1JsYzNRZ1pXNTBjbmxjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YldGNElDWW1JR3RsZVhNdWJHVnVaM1JvSUQ0Z2NHRnljMlZKYm5Rb2RHaHBjeTV0WVhncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnY0hKMWJtVkRZV05vWlVWdWRISjVLR05oWTJobExDQnJaWGx6V3pCZExDQnJaWGx6TENCMGFHbHpMbDkyYm05a1pTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnZG01dlpHVXVaR0YwWVM1clpXVndRV3hwZG1VZ1BTQjBjblZsTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RtNXZaR1VnZkh3Z0tITnNiM1FnSmlZZ2MyeHZkRnN3WFNsY2JpQWdmVnh1ZlR0Y2JseHVkbUZ5SUdKMWFXeDBTVzVEYjIxd2IyNWxiblJ6SUQwZ2UxeHVJQ0JMWldWd1FXeHBkbVU2SUV0bFpYQkJiR2wyWlZ4dWZUdGNibHh1THlvZ0lDb3ZYRzVjYm1aMWJtTjBhVzl1SUdsdWFYUkhiRzlpWVd4QlVFa2dLRloxWlNrZ2UxeHVJQ0F2THlCamIyNW1hV2RjYmlBZ2RtRnlJR052Ym1acFowUmxaaUE5SUh0OU8xeHVJQ0JqYjI1bWFXZEVaV1l1WjJWMElEMGdablZ1WTNScGIyNGdLQ2tnZXlCeVpYUjFjbTRnWTI5dVptbG5PeUI5TzF4dUlDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUdOdmJtWnBaMFJsWmk1elpYUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNCM1lYSnVLRnh1SUNBZ0lDQWdJQ0FuUkc4Z2JtOTBJSEpsY0d4aFkyVWdkR2hsSUZaMVpTNWpiMjVtYVdjZ2IySnFaV04wTENCelpYUWdhVzVrYVhacFpIVmhiQ0JtYVdWc1pITWdhVzV6ZEdWaFpDNG5YRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMDdYRzRnSUgxY2JpQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0ZaMVpTd2dKMk52Ym1acFp5Y3NJR052Ym1acFowUmxaaWs3WEc1Y2JpQWdMeThnWlhod2IzTmxaQ0IxZEdsc0lHMWxkR2h2WkhNdVhHNGdJQzh2SUU1UFZFVTZJSFJvWlhObElHRnlaU0J1YjNRZ1kyOXVjMmxrWlhKbFpDQndZWEowSUc5bUlIUm9aU0J3ZFdKc2FXTWdRVkJKSUMwZ1lYWnZhV1FnY21Wc2VXbHVaeUJ2Ymx4dUlDQXZMeUIwYUdWdElIVnViR1Z6Y3lCNWIzVWdZWEpsSUdGM1lYSmxJRzltSUhSb1pTQnlhWE5yTGx4dUlDQldkV1V1ZFhScGJDQTlJSHRjYmlBZ0lDQjNZWEp1T2lCM1lYSnVMRnh1SUNBZ0lHVjRkR1Z1WkRvZ1pYaDBaVzVrTEZ4dUlDQWdJRzFsY21kbFQzQjBhVzl1Y3pvZ2JXVnlaMlZQY0hScGIyNXpMRnh1SUNBZ0lHUmxabWx1WlZKbFlXTjBhWFpsT2lCa1pXWnBibVZTWldGamRHbDJaVnh1SUNCOU8xeHVYRzRnSUZaMVpTNXpaWFFnUFNCelpYUTdYRzRnSUZaMVpTNWtaV3hsZEdVZ1BTQmtaV3c3WEc0Z0lGWjFaUzV1WlhoMFZHbGpheUE5SUc1bGVIUlVhV05yTzF4dVhHNGdJRloxWlM1dmNIUnBiMjV6SUQwZ1QySnFaV04wTG1OeVpXRjBaU2h1ZFd4c0tUdGNiaUFnUVZOVFJWUmZWRmxRUlZNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2RIbHdaU2tnZTF4dUlDQWdJRloxWlM1dmNIUnBiMjV6VzNSNWNHVWdLeUFuY3lkZElEMGdUMkpxWldOMExtTnlaV0YwWlNodWRXeHNLVHRjYmlBZ2ZTazdYRzVjYmlBZ0x5OGdkR2hwY3lCcGN5QjFjMlZrSUhSdklHbGtaVzUwYVdaNUlIUm9aU0JjSW1KaGMyVmNJaUJqYjI1emRISjFZM1J2Y2lCMGJ5QmxlSFJsYm1RZ1lXeHNJSEJzWVdsdUxXOWlhbVZqZEZ4dUlDQXZMeUJqYjIxd2IyNWxiblJ6SUhkcGRHZ2dhVzRnVjJWbGVDZHpJRzExYkhScExXbHVjM1JoYm1ObElITmpaVzVoY21sdmN5NWNiaUFnVm5WbExtOXdkR2x2Ym5NdVgySmhjMlVnUFNCV2RXVTdYRzVjYmlBZ1pYaDBaVzVrS0ZaMVpTNXZjSFJwYjI1ekxtTnZiWEJ2Ym1WdWRITXNJR0oxYVd4MFNXNURiMjF3YjI1bGJuUnpLVHRjYmx4dUlDQnBibWwwVlhObEtGWjFaU2s3WEc0Z0lHbHVhWFJOYVhocGJpUXhLRloxWlNrN1hHNGdJR2x1YVhSRmVIUmxibVFvVm5WbEtUdGNiaUFnYVc1cGRFRnpjMlYwVW1WbmFYTjBaWEp6S0ZaMVpTazdYRzU5WEc1Y2JtbHVhWFJIYkc5aVlXeEJVRWtvVm5WbEpETXBPMXh1WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29WblZsSkRNdWNISnZkRzkwZVhCbExDQW5KR2x6VTJWeWRtVnlKeXdnZTF4dUlDQm5aWFE2SUdselUyVnlkbVZ5VW1WdVpHVnlhVzVuWEc1OUtUdGNibHh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtGWjFaU1F6TG5CeWIzUnZkSGx3WlN3Z0p5UnpjM0pEYjI1MFpYaDBKeXdnZTF4dUlDQm5aWFE2SUdaMWJtTjBhVzl1SUdkbGRDQW9LU0I3WEc0Z0lDQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJRzVsZUhRZ0tpOWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NGtkbTV2WkdVZ0ppWWdkR2hwY3k0a2RtNXZaR1V1YzNOeVEyOXVkR1Y0ZEZ4dUlDQjlYRzU5S1R0Y2JseHVWblZsSkRNdWRtVnljMmx2YmlBOUlDY3lMalV1TVRNbk8xeHVYRzR2S2lBZ0tpOWNibHh1THk4Z2RHaGxjMlVnWVhKbElISmxjMlZ5ZG1Wa0lHWnZjaUIzWldJZ1ltVmpZWFZ6WlNCMGFHVjVJR0Z5WlNCa2FYSmxZM1JzZVNCamIyMXdhV3hsWkNCaGQyRjVYRzR2THlCa2RYSnBibWNnZEdWdGNHeGhkR1VnWTI5dGNHbHNZWFJwYjI1Y2JuWmhjaUJwYzFKbGMyVnlkbVZrUVhSMGNpQTlJRzFoYTJWTllYQW9KM04wZVd4bExHTnNZWE56SnlrN1hHNWNiaTh2SUdGMGRISnBZblYwWlhNZ2RHaGhkQ0J6YUc5MWJHUWdZbVVnZFhOcGJtY2djSEp2Y0hNZ1ptOXlJR0pwYm1ScGJtZGNiblpoY2lCaFkyTmxjSFJXWVd4MVpTQTlJRzFoYTJWTllYQW9KMmx1Y0hWMExIUmxlSFJoY21WaExHOXdkR2x2Yml4elpXeGxZM1FzY0hKdlozSmxjM01uS1R0Y2JuWmhjaUJ0ZFhOMFZYTmxVSEp2Y0NBOUlHWjFibU4wYVc5dUlDaDBZV2NzSUhSNWNHVXNJR0YwZEhJcElIdGNiaUFnY21WMGRYSnVJQ2hjYmlBZ0lDQW9ZWFIwY2lBOVBUMGdKM1poYkhWbEp5QW1KaUJoWTJObGNIUldZV3gxWlNoMFlXY3BLU0FtSmlCMGVYQmxJQ0U5UFNBblluVjBkRzl1SnlCOGZGeHVJQ0FnSUNoaGRIUnlJRDA5UFNBbmMyVnNaV04wWldRbklDWW1JSFJoWnlBOVBUMGdKMjl3ZEdsdmJpY3BJSHg4WEc0Z0lDQWdLR0YwZEhJZ1BUMDlJQ2RqYUdWamEyVmtKeUFtSmlCMFlXY2dQVDA5SUNkcGJuQjFkQ2NwSUh4OFhHNGdJQ0FnS0dGMGRISWdQVDA5SUNkdGRYUmxaQ2NnSmlZZ2RHRm5JRDA5UFNBbmRtbGtaVzhuS1Z4dUlDQXBYRzU5TzF4dVhHNTJZWElnYVhORmJuVnRaWEpoZEdWa1FYUjBjaUE5SUcxaGEyVk5ZWEFvSjJOdmJuUmxiblJsWkdsMFlXSnNaU3hrY21GbloyRmliR1VzYzNCbGJHeGphR1ZqYXljcE8xeHVYRzUyWVhJZ2FYTkNiMjlzWldGdVFYUjBjaUE5SUcxaGEyVk5ZWEFvWEc0Z0lDZGhiR3h2ZDJaMWJHeHpZM0psWlc0c1lYTjVibU1zWVhWMGIyWnZZM1Z6TEdGMWRHOXdiR0Y1TEdOb1pXTnJaV1FzWTI5dGNHRmpkQ3hqYjI1MGNtOXNjeXhrWldOc1lYSmxMQ2NnSzF4dUlDQW5aR1ZtWVhWc2RDeGtaV1poZFd4MFkyaGxZMnRsWkN4a1pXWmhkV3gwYlhWMFpXUXNaR1ZtWVhWc2RITmxiR1ZqZEdWa0xHUmxabVZ5TEdScGMyRmliR1ZrTENjZ0sxeHVJQ0FuWlc1aFlteGxaQ3htYjNKdGJtOTJZV3hwWkdGMFpTeG9hV1JrWlc0c2FXNWtaWFJsY20xcGJtRjBaU3hwYm1WeWRDeHBjMjFoY0N4cGRHVnRjMk52Y0dVc2JHOXZjQ3h0ZFd4MGFYQnNaU3duSUN0Y2JpQWdKMjExZEdWa0xHNXZhSEpsWml4dWIzSmxjMmw2WlN4dWIzTm9ZV1JsTEc1dmRtRnNhV1JoZEdVc2JtOTNjbUZ3TEc5d1pXNHNjR0YxYzJWdmJtVjRhWFFzY21WaFpHOXViSGtzSnlBclhHNGdJQ2R5WlhGMWFYSmxaQ3h5WlhabGNuTmxaQ3h6WTI5d1pXUXNjMlZoYld4bGMzTXNjMlZzWldOMFpXUXNjMjl5ZEdGaWJHVXNkSEpoYm5Oc1lYUmxMQ2NnSzF4dUlDQW5kSEoxWlhOd1pXVmtMSFI1Y0dWdGRYTjBiV0YwWTJnc2RtbHphV0pzWlNkY2JpazdYRzVjYm5aaGNpQjRiR2x1YTA1VElEMGdKMmgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5MekU1T1RrdmVHeHBibXNuTzF4dVhHNTJZWElnYVhOWWJHbHVheUE5SUdaMWJtTjBhVzl1SUNodVlXMWxLU0I3WEc0Z0lISmxkSFZ5YmlCdVlXMWxMbU5vWVhKQmRDZzFLU0E5UFQwZ0p6b25JQ1ltSUc1aGJXVXVjMnhwWTJVb01Dd2dOU2tnUFQwOUlDZDRiR2x1YXlkY2JuMDdYRzVjYm5aaGNpQm5aWFJZYkdsdWExQnliM0FnUFNCbWRXNWpkR2x2YmlBb2JtRnRaU2tnZTF4dUlDQnlaWFIxY200Z2FYTlliR2x1YXlodVlXMWxLU0EvSUc1aGJXVXVjMnhwWTJVb05pd2dibUZ0WlM1c1pXNW5kR2dwSURvZ0p5ZGNibjA3WEc1Y2JuWmhjaUJwYzBaaGJITjVRWFIwY2xaaGJIVmxJRDBnWm5WdVkzUnBiMjRnS0haaGJDa2dlMXh1SUNCeVpYUjFjbTRnZG1Gc0lEMDlJRzUxYkd3Z2ZId2dkbUZzSUQwOVBTQm1ZV3h6WlZ4dWZUdGNibHh1THlvZ0lDb3ZYRzVjYm1aMWJtTjBhVzl1SUdkbGJrTnNZWE56Um05eVZtNXZaR1VnS0hadWIyUmxLU0I3WEc0Z0lIWmhjaUJrWVhSaElEMGdkbTV2WkdVdVpHRjBZVHRjYmlBZ2RtRnlJSEJoY21WdWRFNXZaR1VnUFNCMmJtOWtaVHRjYmlBZ2RtRnlJR05vYVd4a1RtOWtaU0E5SUhadWIyUmxPMXh1SUNCM2FHbHNaU0FvYVhORVpXWW9ZMmhwYkdST2IyUmxMbU52YlhCdmJtVnVkRWx1YzNSaGJtTmxLU2tnZTF4dUlDQWdJR05vYVd4a1RtOWtaU0E5SUdOb2FXeGtUbTlrWlM1amIyMXdiMjVsYm5SSmJuTjBZVzVqWlM1ZmRtNXZaR1U3WEc0Z0lDQWdhV1lnS0dOb2FXeGtUbTlrWlNBbUppQmphR2xzWkU1dlpHVXVaR0YwWVNrZ2UxeHVJQ0FnSUNBZ1pHRjBZU0E5SUcxbGNtZGxRMnhoYzNORVlYUmhLR05vYVd4a1RtOWtaUzVrWVhSaExDQmtZWFJoS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnZDJocGJHVWdLR2x6UkdWbUtIQmhjbVZ1ZEU1dlpHVWdQU0J3WVhKbGJuUk9iMlJsTG5CaGNtVnVkQ2twSUh0Y2JpQWdJQ0JwWmlBb2NHRnlaVzUwVG05a1pTQW1KaUJ3WVhKbGJuUk9iMlJsTG1SaGRHRXBJSHRjYmlBZ0lDQWdJR1JoZEdFZ1BTQnRaWEpuWlVOc1lYTnpSR0YwWVNoa1lYUmhMQ0J3WVhKbGJuUk9iMlJsTG1SaGRHRXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVnVaR1Z5UTJ4aGMzTW9aR0YwWVM1emRHRjBhV05EYkdGemN5d2daR0YwWVM1amJHRnpjeWxjYm4xY2JseHVablZ1WTNScGIyNGdiV1Z5WjJWRGJHRnpjMFJoZEdFZ0tHTm9hV3hrTENCd1lYSmxiblFwSUh0Y2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCemRHRjBhV05EYkdGemN6b2dZMjl1WTJGMEtHTm9hV3hrTG5OMFlYUnBZME5zWVhOekxDQndZWEpsYm5RdWMzUmhkR2xqUTJ4aGMzTXBMRnh1SUNBZ0lHTnNZWE56T2lCcGMwUmxaaWhqYUdsc1pDNWpiR0Z6Y3lsY2JpQWdJQ0FnSUQ4Z1cyTm9hV3hrTG1Oc1lYTnpMQ0J3WVhKbGJuUXVZMnhoYzNOZFhHNGdJQ0FnSUNBNklIQmhjbVZ1ZEM1amJHRnpjMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbGJtUmxja05zWVhOeklDaGNiaUFnYzNSaGRHbGpRMnhoYzNNc1hHNGdJR1I1Ym1GdGFXTkRiR0Z6YzF4dUtTQjdYRzRnSUdsbUlDaHBjMFJsWmloemRHRjBhV05EYkdGemN5a2dmSHdnYVhORVpXWW9aSGx1WVcxcFkwTnNZWE56S1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJqYjI1allYUW9jM1JoZEdsalEyeGhjM01zSUhOMGNtbHVaMmxtZVVOc1lYTnpLR1I1Ym1GdGFXTkRiR0Z6Y3lrcFhHNGdJSDFjYmlBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHNWxlSFFnS2k5Y2JpQWdjbVYwZFhKdUlDY25YRzU5WEc1Y2JtWjFibU4wYVc5dUlHTnZibU5oZENBb1lTd2dZaWtnZTF4dUlDQnlaWFIxY200Z1lTQS9JR0lnUHlBb1lTQXJJQ2NnSnlBcklHSXBJRG9nWVNBNklDaGlJSHg4SUNjbktWeHVmVnh1WEc1bWRXNWpkR2x2YmlCemRISnBibWRwWm5sRGJHRnpjeUFvZG1Gc2RXVXBJSHRjYmlBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb2RtRnNkV1VwS1NCN1hHNGdJQ0FnY21WMGRYSnVJSE4wY21sdVoybG1lVUZ5Y21GNUtIWmhiSFZsS1Z4dUlDQjlYRzRnSUdsbUlDaHBjMDlpYW1WamRDaDJZV3gxWlNrcElIdGNiaUFnSUNCeVpYUjFjbTRnYzNSeWFXNW5hV1o1VDJKcVpXTjBLSFpoYkhWbEtWeHVJQ0I5WEc0Z0lHbG1JQ2gwZVhCbGIyWWdkbUZzZFdVZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIWmhiSFZsWEc0Z0lIMWNiaUFnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUc1bGVIUWdLaTljYmlBZ2NtVjBkWEp1SUNjblhHNTlYRzVjYm1aMWJtTjBhVzl1SUhOMGNtbHVaMmxtZVVGeWNtRjVJQ2gyWVd4MVpTa2dlMXh1SUNCMllYSWdjbVZ6SUQwZ0p5YzdYRzRnSUhaaGNpQnpkSEpwYm1kcFptbGxaRHRjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUd3Z1BTQjJZV3gxWlM1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwS3lzcElIdGNiaUFnSUNCcFppQW9hWE5FWldZb2MzUnlhVzVuYVdacFpXUWdQU0J6ZEhKcGJtZHBabmxEYkdGemN5aDJZV3gxWlZ0cFhTa3BJQ1ltSUhOMGNtbHVaMmxtYVdWa0lDRTlQU0FuSnlrZ2UxeHVJQ0FnSUNBZ2FXWWdLSEpsY3lrZ2V5QnlaWE1nS3owZ0p5QW5PeUI5WEc0Z0lDQWdJQ0J5WlhNZ0t6MGdjM1J5YVc1bmFXWnBaV1E3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnlaWE5jYm4xY2JseHVablZ1WTNScGIyNGdjM1J5YVc1bmFXWjVUMkpxWldOMElDaDJZV3gxWlNrZ2UxeHVJQ0IyWVhJZ2NtVnpJRDBnSnljN1hHNGdJR1p2Y2lBb2RtRnlJR3RsZVNCcGJpQjJZV3gxWlNrZ2UxeHVJQ0FnSUdsbUlDaDJZV3gxWlZ0clpYbGRLU0I3WEc0Z0lDQWdJQ0JwWmlBb2NtVnpLU0I3SUhKbGN5QXJQU0FuSUNjN0lIMWNiaUFnSUNBZ0lISmxjeUFyUFNCclpYazdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCeVpYTmNibjFjYmx4dUx5b2dJQ292WEc1Y2JuWmhjaUJ1WVcxbGMzQmhZMlZOWVhBZ1BTQjdYRzRnSUhOMlp6b2dKMmgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5KeXhjYmlBZ2JXRjBhRG9nSjJoMGRIQTZMeTkzZDNjdWR6TXViM0puTHpFNU9UZ3ZUV0YwYUM5TllYUm9UVXduWEc1OU8xeHVYRzUyWVhJZ2FYTklWRTFNVkdGbklEMGdiV0ZyWlUxaGNDaGNiaUFnSjJoMGJXd3NZbTlrZVN4aVlYTmxMR2hsWVdRc2JHbHVheXh0WlhSaExITjBlV3hsTEhScGRHeGxMQ2NnSzF4dUlDQW5ZV1JrY21WemN5eGhjblJwWTJ4bExHRnphV1JsTEdadmIzUmxjaXhvWldGa1pYSXNhREVzYURJc2FETXNhRFFzYURVc2FEWXNhR2R5YjNWd0xHNWhkaXh6WldOMGFXOXVMQ2NnSzF4dUlDQW5aR2wyTEdSa0xHUnNMR1IwTEdacFoyTmhjSFJwYjI0c1ptbG5kWEpsTEhCcFkzUjFjbVVzYUhJc2FXMW5MR3hwTEcxaGFXNHNiMndzY0N4d2NtVXNkV3dzSnlBclhHNGdJQ2RoTEdJc1lXSmljaXhpWkdrc1ltUnZMR0p5TEdOcGRHVXNZMjlrWlN4a1lYUmhMR1JtYml4bGJTeHBMR3RpWkN4dFlYSnJMSEVzY25Bc2NuUXNjblJqTEhKMVlua3NKeUFyWEc0Z0lDZHpMSE5oYlhBc2MyMWhiR3dzYzNCaGJpeHpkSEp2Ym1jc2MzVmlMSE4xY0N4MGFXMWxMSFVzZG1GeUxIZGljaXhoY21WaExHRjFaR2x2TEcxaGNDeDBjbUZqYXl4MmFXUmxieXduSUN0Y2JpQWdKMlZ0WW1Wa0xHOWlhbVZqZEN4d1lYSmhiU3h6YjNWeVkyVXNZMkZ1ZG1GekxITmpjbWx3ZEN4dWIzTmpjbWx3ZEN4a1pXd3NhVzV6TENjZ0sxeHVJQ0FuWTJGd2RHbHZiaXhqYjJ3c1kyOXNaM0p2ZFhBc2RHRmliR1VzZEdobFlXUXNkR0p2Wkhrc2RHUXNkR2dzZEhJc0p5QXJYRzRnSUNkaWRYUjBiMjRzWkdGMFlXeHBjM1FzWm1sbGJHUnpaWFFzWm05eWJTeHBibkIxZEN4c1lXSmxiQ3hzWldkbGJtUXNiV1YwWlhJc2IzQjBaM0p2ZFhBc2IzQjBhVzl1TENjZ0sxeHVJQ0FuYjNWMGNIVjBMSEJ5YjJkeVpYTnpMSE5sYkdWamRDeDBaWGgwWVhKbFlTd25JQ3RjYmlBZ0oyUmxkR0ZwYkhNc1pHbGhiRzluTEcxbGJuVXNiV1Z1ZFdsMFpXMHNjM1Z0YldGeWVTd25JQ3RjYmlBZ0oyTnZiblJsYm5Rc1pXeGxiV1Z1ZEN4emFHRmtiM2NzZEdWdGNHeGhkR1VzWW14dlkydHhkVzkwWlN4cFpuSmhiV1VzZEdadmIzUW5YRzRwTzF4dVhHNHZMeUIwYUdseklHMWhjQ0JwY3lCcGJuUmxiblJwYjI1aGJHeDVJSE5sYkdWamRHbDJaU3dnYjI1c2VTQmpiM1psY21sdVp5QlRWa2NnWld4bGJXVnVkSE1nZEdoaGRDQnRZWGxjYmk4dklHTnZiblJoYVc0Z1kyaHBiR1FnWld4bGJXVnVkSE11WEc1MllYSWdhWE5UVmtjZ1BTQnRZV3RsVFdGd0tGeHVJQ0FuYzNabkxHRnVhVzFoZEdVc1kybHlZMnhsTEdOc2FYQndZWFJvTEdOMWNuTnZjaXhrWldaekxHUmxjMk1zWld4c2FYQnpaU3htYVd4MFpYSXNabTl1ZEMxbVlXTmxMQ2NnSzF4dUlDQW5abTl5WldsbmJrOWlhbVZqZEN4bkxHZHNlWEJvTEdsdFlXZGxMR3hwYm1Vc2JXRnlhMlZ5TEcxaGMyc3NiV2x6YzJsdVp5MW5iSGx3YUN4d1lYUm9MSEJoZEhSbGNtNHNKeUFyWEc0Z0lDZHdiMng1WjI5dUxIQnZiSGxzYVc1bExISmxZM1FzYzNkcGRHTm9MSE41YldKdmJDeDBaWGgwTEhSbGVIUndZWFJvTEhSemNHRnVMSFZ6WlN4MmFXVjNKeXhjYmlBZ2RISjFaVnh1S1R0Y2JseHVYRzVjYm5aaGNpQnBjMUpsYzJWeWRtVmtWR0ZuSUQwZ1puVnVZM1JwYjI0Z0tIUmhaeWtnZTF4dUlDQnlaWFIxY200Z2FYTklWRTFNVkdGbktIUmhaeWtnZkh3Z2FYTlRWa2NvZEdGbktWeHVmVHRjYmx4dVpuVnVZM1JwYjI0Z1oyVjBWR0ZuVG1GdFpYTndZV05sSUNoMFlXY3BJSHRjYmlBZ2FXWWdLR2x6VTFaSEtIUmhaeWtwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKM04yWnlkY2JpQWdmVnh1SUNBdkx5QmlZWE5wWXlCemRYQndiM0owSUdadmNpQk5ZWFJvVFV4Y2JpQWdMeThnYm05MFpTQnBkQ0JrYjJWemJpZDBJSE4xY0hCdmNuUWdiM1JvWlhJZ1RXRjBhRTFNSUdWc1pXMWxiblJ6SUdKbGFXNW5JR052YlhCdmJtVnVkQ0J5YjI5MGMxeHVJQ0JwWmlBb2RHRm5JRDA5UFNBbmJXRjBhQ2NwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKMjFoZEdnblhHNGdJSDFjYm4xY2JseHVkbUZ5SUhWdWEyNXZkMjVGYkdWdFpXNTBRMkZqYUdVZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0c1MWJHd3BPMXh1Wm5WdVkzUnBiMjRnYVhOVmJtdHViM2R1Uld4bGJXVnVkQ0FvZEdGbktTQjdYRzRnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNCcFppQW9JV2x1UW5KdmQzTmxjaWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBjblZsWEc0Z0lIMWNiaUFnYVdZZ0tHbHpVbVZ6WlhKMlpXUlVZV2NvZEdGbktTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVnh1SUNCOVhHNGdJSFJoWnlBOUlIUmhaeTUwYjB4dmQyVnlRMkZ6WlNncE8xeHVJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYVdZZ0tpOWNiaUFnYVdZZ0tIVnVhMjV2ZDI1RmJHVnRaVzUwUTJGamFHVmJkR0ZuWFNBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFZ1YTI1dmQyNUZiR1Z0Wlc1MFEyRmphR1ZiZEdGblhWeHVJQ0I5WEc0Z0lIWmhjaUJsYkNBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvZEdGbktUdGNiaUFnYVdZZ0tIUmhaeTVwYm1SbGVFOW1LQ2N0SnlrZ1BpQXRNU2tnZTF4dUlDQWdJQzh2SUdoMGRIQTZMeTl6ZEdGamEyOTJaWEptYkc5M0xtTnZiUzloTHpJNE1qRXdNelkwTHpFd056QXlORFJjYmlBZ0lDQnlaWFIxY200Z0tIVnVhMjV2ZDI1RmJHVnRaVzUwUTJGamFHVmJkR0ZuWFNBOUlDaGNiaUFnSUNBZ0lHVnNMbU52Ym5OMGNuVmpkRzl5SUQwOVBTQjNhVzVrYjNjdVNGUk5URlZ1YTI1dmQyNUZiR1Z0Wlc1MElIeDhYRzRnSUNBZ0lDQmxiQzVqYjI1emRISjFZM1J2Y2lBOVBUMGdkMmx1Wkc5M0xraFVUVXhGYkdWdFpXNTBYRzRnSUNBZ0tTbGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnlaWFIxY200Z0tIVnVhMjV2ZDI1RmJHVnRaVzUwUTJGamFHVmJkR0ZuWFNBOUlDOUlWRTFNVlc1cmJtOTNia1ZzWlcxbGJuUXZMblJsYzNRb1pXd3VkRzlUZEhKcGJtY29LU2twWEc0Z0lIMWNibjFjYmx4dWRtRnlJR2x6VkdWNGRFbHVjSFYwVkhsd1pTQTlJRzFoYTJWTllYQW9KM1JsZUhRc2JuVnRZbVZ5TEhCaGMzTjNiM0prTEhObFlYSmphQ3hsYldGcGJDeDBaV3dzZFhKc0p5azdYRzVjYmk4cUlDQXFMMXh1WEc0dktpcGNiaUFxSUZGMVpYSjVJR0Z1SUdWc1pXMWxiblFnYzJWc1pXTjBiM0lnYVdZZ2FYUW5jeUJ1YjNRZ1lXNGdaV3hsYldWdWRDQmhiSEpsWVdSNUxseHVJQ292WEc1bWRXNWpkR2x2YmlCeGRXVnllU0FvWld3cElIdGNiaUFnYVdZZ0tIUjVjR1Z2WmlCbGJDQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0IyWVhJZ2MyVnNaV04wWldRZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0dWc0tUdGNiaUFnSUNCcFppQW9JWE5sYkdWamRHVmtLU0I3WEc0Z0lDQWdJQ0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUNZbUlIZGhjbTRvWEc0Z0lDQWdJQ0FnSUNkRFlXNXViM1FnWm1sdVpDQmxiR1Z0Wlc1ME9pQW5JQ3NnWld4Y2JpQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25aR2wySnlsY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlITmxiR1ZqZEdWa1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVjBkWEp1SUdWc1hHNGdJSDFjYm4xY2JseHVMeW9nSUNvdlhHNWNibVoxYm1OMGFXOXVJR055WldGMFpVVnNaVzFsYm5Ra01TQW9kR0ZuVG1GdFpTd2dkbTV2WkdVcElIdGNiaUFnZG1GeUlHVnNiU0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9kR0ZuVG1GdFpTazdYRzRnSUdsbUlDaDBZV2RPWVcxbElDRTlQU0FuYzJWc1pXTjBKeWtnZTF4dUlDQWdJSEpsZEhWeWJpQmxiRzFjYmlBZ2ZWeHVJQ0F2THlCbVlXeHpaU0J2Y2lCdWRXeHNJSGRwYkd3Z2NtVnRiM1psSUhSb1pTQmhkSFJ5YVdKMWRHVWdZblYwSUhWdVpHVm1hVzVsWkNCM2FXeHNJRzV2ZEZ4dUlDQnBaaUFvZG01dlpHVXVaR0YwWVNBbUppQjJibTlrWlM1a1lYUmhMbUYwZEhKeklDWW1JSFp1YjJSbExtUmhkR0V1WVhSMGNuTXViWFZzZEdsd2JHVWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUdWc2JTNXpaWFJCZEhSeWFXSjFkR1VvSjIxMWJIUnBjR3hsSnl3Z0oyMTFiSFJwY0d4bEp5azdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHVnNiVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWRmJHVnRaVzUwVGxNZ0tHNWhiV1Z6Y0dGalpTd2dkR0ZuVG1GdFpTa2dlMXh1SUNCeVpYUjFjbTRnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRFNVRLRzVoYldWemNHRmpaVTFoY0Z0dVlXMWxjM0JoWTJWZExDQjBZV2RPWVcxbEtWeHVmVnh1WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZVWlhoMFRtOWtaU0FvZEdWNGRDa2dlMXh1SUNCeVpYUjFjbTRnWkc5amRXMWxiblF1WTNKbFlYUmxWR1Y0ZEU1dlpHVW9kR1Y0ZENsY2JuMWNibHh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxRMjl0YldWdWRDQW9kR1Y0ZENrZ2UxeHVJQ0J5WlhSMWNtNGdaRzlqZFcxbGJuUXVZM0psWVhSbFEyOXRiV1Z1ZENoMFpYaDBLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBibk5sY25SQ1pXWnZjbVVnS0hCaGNtVnVkRTV2WkdVc0lHNWxkMDV2WkdVc0lISmxabVZ5Wlc1alpVNXZaR1VwSUh0Y2JpQWdjR0Z5Wlc1MFRtOWtaUzVwYm5ObGNuUkNaV1p2Y21Vb2JtVjNUbTlrWlN3Z2NtVm1aWEpsYm1ObFRtOWtaU2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJSEpsYlc5MlpVTm9hV3hrSUNodWIyUmxMQ0JqYUdsc1pDa2dlMXh1SUNCdWIyUmxMbkpsYlc5MlpVTm9hV3hrS0dOb2FXeGtLVHRjYm4xY2JseHVablZ1WTNScGIyNGdZWEJ3Wlc1a1EyaHBiR1FnS0c1dlpHVXNJR05vYVd4a0tTQjdYRzRnSUc1dlpHVXVZWEJ3Wlc1a1EyaHBiR1FvWTJocGJHUXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQndZWEpsYm5ST2IyUmxJQ2h1YjJSbEtTQjdYRzRnSUhKbGRIVnliaUJ1YjJSbExuQmhjbVZ1ZEU1dlpHVmNibjFjYmx4dVpuVnVZM1JwYjI0Z2JtVjRkRk5wWW14cGJtY2dLRzV2WkdVcElIdGNiaUFnY21WMGRYSnVJRzV2WkdVdWJtVjRkRk5wWW14cGJtZGNibjFjYmx4dVpuVnVZM1JwYjI0Z2RHRm5UbUZ0WlNBb2JtOWtaU2tnZTF4dUlDQnlaWFIxY200Z2JtOWtaUzUwWVdkT1lXMWxYRzU5WEc1Y2JtWjFibU4wYVc5dUlITmxkRlJsZUhSRGIyNTBaVzUwSUNodWIyUmxMQ0IwWlhoMEtTQjdYRzRnSUc1dlpHVXVkR1Y0ZEVOdmJuUmxiblFnUFNCMFpYaDBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnpaWFJCZEhSeWFXSjFkR1VnS0c1dlpHVXNJR3RsZVN3Z2RtRnNLU0I3WEc0Z0lHNXZaR1V1YzJWMFFYUjBjbWxpZFhSbEtHdGxlU3dnZG1Gc0tUdGNibjFjYmx4dVhHNTJZWElnYm05a1pVOXdjeUE5SUU5aWFtVmpkQzVtY21WbGVtVW9lMXh1WEhSamNtVmhkR1ZGYkdWdFpXNTBPaUJqY21WaGRHVkZiR1Z0Wlc1MEpERXNYRzVjZEdOeVpXRjBaVVZzWlcxbGJuUk9Vem9nWTNKbFlYUmxSV3hsYldWdWRFNVRMRnh1WEhSamNtVmhkR1ZVWlhoMFRtOWtaVG9nWTNKbFlYUmxWR1Y0ZEU1dlpHVXNYRzVjZEdOeVpXRjBaVU52YlcxbGJuUTZJR055WldGMFpVTnZiVzFsYm5Rc1hHNWNkR2x1YzJWeWRFSmxabTl5WlRvZ2FXNXpaWEowUW1WbWIzSmxMRnh1WEhSeVpXMXZkbVZEYUdsc1pEb2djbVZ0YjNabFEyaHBiR1FzWEc1Y2RHRndjR1Z1WkVOb2FXeGtPaUJoY0hCbGJtUkRhR2xzWkN4Y2JseDBjR0Z5Wlc1MFRtOWtaVG9nY0dGeVpXNTBUbTlrWlN4Y2JseDBibVY0ZEZOcFlteHBibWM2SUc1bGVIUlRhV0pzYVc1bkxGeHVYSFIwWVdkT1lXMWxPaUIwWVdkT1lXMWxMRnh1WEhSelpYUlVaWGgwUTI5dWRHVnVkRG9nYzJWMFZHVjRkRU52Ym5SbGJuUXNYRzVjZEhObGRFRjBkSEpwWW5WMFpUb2djMlYwUVhSMGNtbGlkWFJsWEc1OUtUdGNibHh1THlvZ0lDb3ZYRzVjYm5aaGNpQnlaV1lnUFNCN1hHNGdJR055WldGMFpUb2dablZ1WTNScGIyNGdZM0psWVhSbElDaGZMQ0IyYm05a1pTa2dlMXh1SUNBZ0lISmxaMmx6ZEdWeVVtVm1LSFp1YjJSbEtUdGNiaUFnZlN4Y2JpQWdkWEJrWVhSbE9pQm1kVzVqZEdsdmJpQjFjR1JoZEdVZ0tHOXNaRlp1YjJSbExDQjJibTlrWlNrZ2UxeHVJQ0FnSUdsbUlDaHZiR1JXYm05a1pTNWtZWFJoTG5KbFppQWhQVDBnZG01dlpHVXVaR0YwWVM1eVpXWXBJSHRjYmlBZ0lDQWdJSEpsWjJsemRHVnlVbVZtS0c5c1pGWnViMlJsTENCMGNuVmxLVHRjYmlBZ0lDQWdJSEpsWjJsemRHVnlVbVZtS0hadWIyUmxLVHRjYmlBZ0lDQjlYRzRnSUgwc1hHNGdJR1JsYzNSeWIzazZJR1oxYm1OMGFXOXVJR1JsYzNSeWIza2dLSFp1YjJSbEtTQjdYRzRnSUNBZ2NtVm5hWE4wWlhKU1pXWW9kbTV2WkdVc0lIUnlkV1VwTzF4dUlDQjlYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQnlaV2RwYzNSbGNsSmxaaUFvZG01dlpHVXNJR2x6VW1WdGIzWmhiQ2tnZTF4dUlDQjJZWElnYTJWNUlEMGdkbTV2WkdVdVpHRjBZUzV5WldZN1hHNGdJR2xtSUNnaGEyVjVLU0I3SUhKbGRIVnliaUI5WEc1Y2JpQWdkbUZ5SUhadElEMGdkbTV2WkdVdVkyOXVkR1Y0ZER0Y2JpQWdkbUZ5SUhKbFppQTlJSFp1YjJSbExtTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObElIeDhJSFp1YjJSbExtVnNiVHRjYmlBZ2RtRnlJSEpsWm5NZ1BTQjJiUzRrY21WbWN6dGNiaUFnYVdZZ0tHbHpVbVZ0YjNaaGJDa2dlMXh1SUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtISmxabk5iYTJWNVhTa3BJSHRjYmlBZ0lDQWdJSEpsYlc5MlpTaHlaV1p6VzJ0bGVWMHNJSEpsWmlrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoeVpXWnpXMnRsZVYwZ1BUMDlJSEpsWmlrZ2UxeHVJQ0FnSUNBZ2NtVm1jMXRyWlhsZElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lIMWNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnBaaUFvZG01dlpHVXVaR0YwWVM1eVpXWkpia1p2Y2lrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0ZCY25KaGVTNXBjMEZ5Y21GNUtISmxabk5iYTJWNVhTa3BJSHRjYmlBZ0lDQWdJQ0FnY21WbWMxdHJaWGxkSUQwZ1czSmxabDA3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hKbFpuTmJhMlY1WFM1cGJtUmxlRTltS0hKbFppa2dQQ0F3S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJQ1JtYkc5M0xXUnBjMkZpYkdVdGJHbHVaVnh1SUNBZ0lDQWdJQ0J5WldaelcydGxlVjB1Y0hWemFDaHlaV1lwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaV1p6VzJ0bGVWMGdQU0J5WldZN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1ZtbHlkSFZoYkNCRVQwMGdjR0YwWTJocGJtY2dZV3huYjNKcGRHaHRJR0poYzJWa0lHOXVJRk51WVdKaVpHOXRJR0o1WEc0Z0tpQlRhVzF2YmlCR2NtbHBjeUJXYVc1a2RXMGdLRUJ3WVd4a1pYQnBibVFwWEc0Z0tpQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdUVWxVSUV4cFkyVnVjMlZjYmlBcUlHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXdZV3hrWlhCcGJtUXZjMjVoWW1Ka2IyMHZZbXh2WWk5dFlYTjBaWEl2VEVsRFJVNVRSVnh1SUNwY2JpQXFJRzF2WkdsbWFXVmtJR0o1SUVWMllXNGdXVzkxSUNoQWVYbDRPVGt3T0RBektWeHVJQ3BjYmlBcUlFNXZkQ0IwZVhCbExXTm9aV05yYVc1bklIUm9hWE1nWW1WallYVnpaU0IwYUdseklHWnBiR1VnYVhNZ2NHVnlaaTFqY21sMGFXTmhiQ0JoYm1RZ2RHaGxJR052YzNSY2JpQXFJRzltSUcxaGEybHVaeUJtYkc5M0lIVnVaR1Z5YzNSaGJtUWdhWFFnYVhNZ2JtOTBJSGR2Y25Sb0lHbDBMbHh1SUNvdlhHNWNiblpoY2lCbGJYQjBlVTV2WkdVZ1BTQnVaWGNnVms1dlpHVW9KeWNzSUh0OUxDQmJYU2s3WEc1Y2JuWmhjaUJvYjI5cmN5QTlJRnNuWTNKbFlYUmxKeXdnSjJGamRHbDJZWFJsSnl3Z0ozVndaR0YwWlNjc0lDZHlaVzF2ZG1VbkxDQW5aR1Z6ZEhKdmVTZGRPMXh1WEc1bWRXNWpkR2x2YmlCellXMWxWbTV2WkdVZ0tHRXNJR0lwSUh0Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNCaExtdGxlU0E5UFQwZ1lpNXJaWGtnSmlZZ0tGeHVJQ0FnSUNBZ0tGeHVJQ0FnSUNBZ0lDQmhMblJoWnlBOVBUMGdZaTUwWVdjZ0ppWmNiaUFnSUNBZ0lDQWdZUzVwYzBOdmJXMWxiblFnUFQwOUlHSXVhWE5EYjIxdFpXNTBJQ1ltWEc0Z0lDQWdJQ0FnSUdselJHVm1LR0V1WkdGMFlTa2dQVDA5SUdselJHVm1LR0l1WkdGMFlTa2dKaVpjYmlBZ0lDQWdJQ0FnYzJGdFpVbHVjSFYwVkhsd1pTaGhMQ0JpS1Z4dUlDQWdJQ0FnS1NCOGZDQW9YRzRnSUNBZ0lDQWdJR2x6VkhKMVpTaGhMbWx6UVhONWJtTlFiR0ZqWldodmJHUmxjaWtnSmlaY2JpQWdJQ0FnSUNBZ1lTNWhjM2x1WTBaaFkzUnZjbmtnUFQwOUlHSXVZWE41Ym1OR1lXTjBiM0o1SUNZbVhHNGdJQ0FnSUNBZ0lHbHpWVzVrWldZb1lpNWhjM2x1WTBaaFkzUnZjbmt1WlhKeWIzSXBYRzRnSUNBZ0lDQXBYRzRnSUNBZ0tWeHVJQ0FwWEc1OVhHNWNibVoxYm1OMGFXOXVJSE5oYldWSmJuQjFkRlI1Y0dVZ0tHRXNJR0lwSUh0Y2JpQWdhV1lnS0dFdWRHRm5JQ0U5UFNBbmFXNXdkWFFuS1NCN0lISmxkSFZ5YmlCMGNuVmxJSDFjYmlBZ2RtRnlJR2s3WEc0Z0lIWmhjaUIwZVhCbFFTQTlJR2x6UkdWbUtHa2dQU0JoTG1SaGRHRXBJQ1ltSUdselJHVm1LR2tnUFNCcExtRjBkSEp6S1NBbUppQnBMblI1Y0dVN1hHNGdJSFpoY2lCMGVYQmxRaUE5SUdselJHVm1LR2tnUFNCaUxtUmhkR0VwSUNZbUlHbHpSR1ZtS0drZ1BTQnBMbUYwZEhKektTQW1KaUJwTG5SNWNHVTdYRzRnSUhKbGRIVnliaUIwZVhCbFFTQTlQVDBnZEhsd1pVSWdmSHdnYVhOVVpYaDBTVzV3ZFhSVWVYQmxLSFI1Y0dWQktTQW1KaUJwYzFSbGVIUkpibkIxZEZSNWNHVW9kSGx3WlVJcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVXRsZVZSdlQyeGtTV1I0SUNoamFHbHNaSEpsYml3Z1ltVm5hVzVKWkhnc0lHVnVaRWxrZUNrZ2UxeHVJQ0IyWVhJZ2FTd2dhMlY1TzF4dUlDQjJZWElnYldGd0lEMGdlMzA3WEc0Z0lHWnZjaUFvYVNBOUlHSmxaMmx1U1dSNE95QnBJRHc5SUdWdVpFbGtlRHNnS3l0cEtTQjdYRzRnSUNBZ2EyVjVJRDBnWTJocGJHUnlaVzViYVYwdWEyVjVPMXh1SUNBZ0lHbG1JQ2hwYzBSbFppaHJaWGtwS1NCN0lHMWhjRnRyWlhsZElEMGdhVHNnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJ0WVhCY2JuMWNibHh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxVR0YwWTJoR2RXNWpkR2x2YmlBb1ltRmphMlZ1WkNrZ2UxeHVJQ0IyWVhJZ2FTd2dhanRjYmlBZ2RtRnlJR05pY3lBOUlIdDlPMXh1WEc0Z0lIWmhjaUJ0YjJSMWJHVnpJRDBnWW1GamEyVnVaQzV0YjJSMWJHVnpPMXh1SUNCMllYSWdibTlrWlU5d2N5QTlJR0poWTJ0bGJtUXVibTlrWlU5d2N6dGNibHh1SUNCbWIzSWdLR2tnUFNBd095QnBJRHdnYUc5dmEzTXViR1Z1WjNSb095QXJLMmtwSUh0Y2JpQWdJQ0JqWW5OYmFHOXZhM05iYVYxZElEMGdXMTA3WEc0Z0lDQWdabTl5SUNocUlEMGdNRHNnYWlBOElHMXZaSFZzWlhNdWJHVnVaM1JvT3lBcksyb3BJSHRjYmlBZ0lDQWdJR2xtSUNocGMwUmxaaWh0YjJSMWJHVnpXMnBkVzJodmIydHpXMmxkWFNrcElIdGNiaUFnSUNBZ0lDQWdZMkp6VzJodmIydHpXMmxkWFM1d2RYTm9LRzF2WkhWc1pYTmJhbDFiYUc5dmEzTmJhVjFkS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCbGJYQjBlVTV2WkdWQmRDQW9aV3h0S1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCV1RtOWtaU2h1YjJSbFQzQnpMblJoWjA1aGJXVW9aV3h0S1M1MGIweHZkMlZ5UTJGelpTZ3BMQ0I3ZlN3Z1cxMHNJSFZ1WkdWbWFXNWxaQ3dnWld4dEtWeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdZM0psWVhSbFVtMURZaUFvWTJocGJHUkZiRzBzSUd4cGMzUmxibVZ5Y3lrZ2UxeHVJQ0FnSUdaMWJtTjBhVzl1SUhKbGJXOTJaU0FvS1NCN1hHNGdJQ0FnSUNCcFppQW9MUzF5WlcxdmRtVXViR2x6ZEdWdVpYSnpJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJSEpsYlc5MlpVNXZaR1VvWTJocGJHUkZiRzBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaVzF2ZG1VdWJHbHpkR1Z1WlhKeklEMGdiR2x6ZEdWdVpYSnpPMXh1SUNBZ0lISmxkSFZ5YmlCeVpXMXZkbVZjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUhKbGJXOTJaVTV2WkdVZ0tHVnNLU0I3WEc0Z0lDQWdkbUZ5SUhCaGNtVnVkQ0E5SUc1dlpHVlBjSE11Y0dGeVpXNTBUbTlrWlNobGJDazdYRzRnSUNBZ0x5OGdaV3hsYldWdWRDQnRZWGtnYUdGMlpTQmhiSEpsWVdSNUlHSmxaVzRnY21WdGIzWmxaQ0JrZFdVZ2RHOGdkaTFvZEcxc0lDOGdkaTEwWlhoMFhHNGdJQ0FnYVdZZ0tHbHpSR1ZtS0hCaGNtVnVkQ2twSUh0Y2JpQWdJQ0FnSUc1dlpHVlBjSE11Y21WdGIzWmxRMmhwYkdRb2NHRnlaVzUwTENCbGJDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdhWE5WYm10dWIzZHVSV3hsYldWdWRDUWtNU0FvZG01dlpHVXNJR2x1VmxCeVpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBaGFXNVdVSEpsSUNZbVhHNGdJQ0FnSUNBaGRtNXZaR1V1Ym5NZ0ppWmNiaUFnSUNBZ0lDRW9YRzRnSUNBZ0lDQWdJR052Ym1acFp5NXBaMjV2Y21Wa1JXeGxiV1Z1ZEhNdWJHVnVaM1JvSUNZbVhHNGdJQ0FnSUNBZ0lHTnZibVpwWnk1cFoyNXZjbVZrUld4bGJXVnVkSE11YzI5dFpTaG1kVzVqZEdsdmJpQW9hV2R1YjNKbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2x6VW1WblJYaHdLR2xuYm05eVpTbGNiaUFnSUNBZ0lDQWdJQ0FnSUQ4Z2FXZHViM0psTG5SbGMzUW9kbTV2WkdVdWRHRm5LVnh1SUNBZ0lDQWdJQ0FnSUNBZ09pQnBaMjV2Y21VZ1BUMDlJSFp1YjJSbExuUmhaMXh1SUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnS1NBbUpseHVJQ0FnSUNBZ1kyOXVabWxuTG1selZXNXJibTkzYmtWc1pXMWxiblFvZG01dlpHVXVkR0ZuS1Z4dUlDQWdJQ2xjYmlBZ2ZWeHVYRzRnSUhaaGNpQmpjbVZoZEdsdVowVnNiVWx1VmxCeVpTQTlJREE3WEc0Z0lHWjFibU4wYVc5dUlHTnlaV0YwWlVWc2JTQW9kbTV2WkdVc0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTd2djR0Z5Wlc1MFJXeHRMQ0J5WldaRmJHMHNJRzVsYzNSbFpDa2dlMXh1SUNBZ0lIWnViMlJsTG1selVtOXZkRWx1YzJWeWRDQTlJQ0Z1WlhOMFpXUTdJQzh2SUdadmNpQjBjbUZ1YzJsMGFXOXVJR1Z1ZEdWeUlHTm9aV05yWEc0Z0lDQWdhV1lnS0dOeVpXRjBaVU52YlhCdmJtVnVkQ2gyYm05a1pTd2dhVzV6WlhKMFpXUldibTlrWlZGMVpYVmxMQ0J3WVhKbGJuUkZiRzBzSUhKbFprVnNiU2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnlibHh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJrWVhSaElEMGdkbTV2WkdVdVpHRjBZVHRjYmlBZ0lDQjJZWElnWTJocGJHUnlaVzRnUFNCMmJtOWtaUzVqYUdsc1pISmxianRjYmlBZ0lDQjJZWElnZEdGbklEMGdkbTV2WkdVdWRHRm5PMXh1SUNBZ0lHbG1JQ2hwYzBSbFppaDBZV2NwS1NCN1hHNGdJQ0FnSUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9aR0YwWVNBbUppQmtZWFJoTG5CeVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOeVpXRjBhVzVuUld4dFNXNVdVSEpsS3lzN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0dselZXNXJibTkzYmtWc1pXMWxiblFrSkRFb2RtNXZaR1VzSUdOeVpXRjBhVzVuUld4dFNXNVdVSEpsS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSGRoY200b1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuVlc1cmJtOTNiaUJqZFhOMGIyMGdaV3hsYldWdWREb2dQQ2NnS3lCMFlXY2dLeUFuUGlBdElHUnBaQ0I1YjNVZ0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBbmNtVm5hWE4wWlhJZ2RHaGxJR052YlhCdmJtVnVkQ0JqYjNKeVpXTjBiSGsvSUVadmNpQnlaV04xY25OcGRtVWdZMjl0Y0c5dVpXNTBjeXdnSnlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FuYldGclpTQnpkWEpsSUhSdklIQnliM1pwWkdVZ2RHaGxJRndpYm1GdFpWd2lJRzl3ZEdsdmJpNG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtNXZaR1V1WTI5dWRHVjRkRnh1SUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIWnViMlJsTG1Wc2JTQTlJSFp1YjJSbExtNXpYRzRnSUNBZ0lDQWdJRDhnYm05a1pVOXdjeTVqY21WaGRHVkZiR1Z0Wlc1MFRsTW9kbTV2WkdVdWJuTXNJSFJoWnlsY2JpQWdJQ0FnSUNBZ09pQnViMlJsVDNCekxtTnlaV0YwWlVWc1pXMWxiblFvZEdGbkxDQjJibTlrWlNrN1hHNGdJQ0FnSUNCelpYUlRZMjl3WlNoMmJtOWtaU2s3WEc1Y2JpQWdJQ0FnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0JqY21WaGRHVkRhR2xzWkhKbGJpaDJibTlrWlN3Z1kyaHBiR1J5Wlc0c0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTazdYRzRnSUNBZ0lDQWdJR2xtSUNocGMwUmxaaWhrWVhSaEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsdWRtOXJaVU55WldGMFpVaHZiMnR6S0hadWIyUmxMQ0JwYm5ObGNuUmxaRlp1YjJSbFVYVmxkV1VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbHVjMlZ5ZENod1lYSmxiblJGYkcwc0lIWnViMlJsTG1Wc2JTd2djbVZtUld4dEtUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ0ppWWdaR0YwWVNBbUppQmtZWFJoTG5CeVpTa2dlMXh1SUNBZ0lDQWdJQ0JqY21WaGRHbHVaMFZzYlVsdVZsQnlaUzB0TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQnBaaUFvYVhOVWNuVmxLSFp1YjJSbExtbHpRMjl0YldWdWRDa3BJSHRjYmlBZ0lDQWdJSFp1YjJSbExtVnNiU0E5SUc1dlpHVlBjSE11WTNKbFlYUmxRMjl0YldWdWRDaDJibTlrWlM1MFpYaDBLVHRjYmlBZ0lDQWdJR2x1YzJWeWRDaHdZWEpsYm5SRmJHMHNJSFp1YjJSbExtVnNiU3dnY21WbVJXeHRLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RtNXZaR1V1Wld4dElEMGdibTlrWlU5d2N5NWpjbVZoZEdWVVpYaDBUbTlrWlNoMmJtOWtaUzUwWlhoMEtUdGNiaUFnSUNBZ0lHbHVjMlZ5ZENod1lYSmxiblJGYkcwc0lIWnViMlJsTG1Wc2JTd2djbVZtUld4dEtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQmpjbVZoZEdWRGIyMXdiMjVsYm5RZ0tIWnViMlJsTENCcGJuTmxjblJsWkZadWIyUmxVWFZsZFdVc0lIQmhjbVZ1ZEVWc2JTd2djbVZtUld4dEtTQjdYRzRnSUNBZ2RtRnlJR2tnUFNCMmJtOWtaUzVrWVhSaE8xeHVJQ0FnSUdsbUlDaHBjMFJsWmlocEtTa2dlMXh1SUNBZ0lDQWdkbUZ5SUdselVtVmhZM1JwZG1GMFpXUWdQU0JwYzBSbFppaDJibTlrWlM1amIyMXdiMjVsYm5SSmJuTjBZVzVqWlNrZ0ppWWdhUzVyWldWd1FXeHBkbVU3WEc0Z0lDQWdJQ0JwWmlBb2FYTkVaV1lvYVNBOUlHa3VhRzl2YXlrZ0ppWWdhWE5FWldZb2FTQTlJR2t1YVc1cGRDa3BJSHRjYmlBZ0lDQWdJQ0FnYVNoMmJtOWtaU3dnWm1Gc2MyVWdMeW9nYUhsa2NtRjBhVzVuSUNvdkxDQndZWEpsYm5SRmJHMHNJSEpsWmtWc2JTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQXZMeUJoWm5SbGNpQmpZV3hzYVc1bklIUm9aU0JwYm1sMElHaHZiMnNzSUdsbUlIUm9aU0IyYm05a1pTQnBjeUJoSUdOb2FXeGtJR052YlhCdmJtVnVkRnh1SUNBZ0lDQWdMeThnYVhRZ2MyaHZkV3hrSjNabElHTnlaV0YwWldRZ1lTQmphR2xzWkNCcGJuTjBZVzVqWlNCaGJtUWdiVzkxYm5SbFpDQnBkQzRnZEdobElHTm9hV3hrWEc0Z0lDQWdJQ0F2THlCamIyMXdiMjVsYm5RZ1lXeHpieUJvWVhNZ2MyVjBJSFJvWlNCd2JHRmpaV2h2YkdSbGNpQjJibTlrWlNkeklHVnNiUzVjYmlBZ0lDQWdJQzh2SUdsdUlIUm9ZWFFnWTJGelpTQjNaU0JqWVc0Z2FuVnpkQ0J5WlhSMWNtNGdkR2hsSUdWc1pXMWxiblFnWVc1a0lHSmxJR1J2Ym1VdVhHNGdJQ0FnSUNCcFppQW9hWE5FWldZb2RtNXZaR1V1WTI5dGNHOXVaVzUwU1c1emRHRnVZMlVwS1NCN1hHNGdJQ0FnSUNBZ0lHbHVhWFJEYjIxd2IyNWxiblFvZG01dlpHVXNJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBjMVJ5ZFdVb2FYTlNaV0ZqZEdsMllYUmxaQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaV0ZqZEdsMllYUmxRMjl0Y0c5dVpXNTBLSFp1YjJSbExDQnBibk5sY25SbFpGWnViMlJsVVhWbGRXVXNJSEJoY21WdWRFVnNiU3dnY21WbVJXeHRLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlHbHVhWFJEYjIxd2IyNWxiblFnS0hadWIyUmxMQ0JwYm5ObGNuUmxaRlp1YjJSbFVYVmxkV1VwSUh0Y2JpQWdJQ0JwWmlBb2FYTkVaV1lvZG01dlpHVXVaR0YwWVM1d1pXNWthVzVuU1c1elpYSjBLU2tnZTF4dUlDQWdJQ0FnYVc1elpYSjBaV1JXYm05a1pWRjFaWFZsTG5CMWMyZ3VZWEJ3Ykhrb2FXNXpaWEowWldSV2JtOWtaVkYxWlhWbExDQjJibTlrWlM1a1lYUmhMbkJsYm1ScGJtZEpibk5sY25RcE8xeHVJQ0FnSUNBZ2RtNXZaR1V1WkdGMFlTNXdaVzVrYVc1blNXNXpaWEowSUQwZ2JuVnNiRHRjYmlBZ0lDQjlYRzRnSUNBZ2RtNXZaR1V1Wld4dElEMGdkbTV2WkdVdVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVdUpHVnNPMXh1SUNBZ0lHbG1JQ2hwYzFCaGRHTm9ZV0pzWlNoMmJtOWtaU2twSUh0Y2JpQWdJQ0FnSUdsdWRtOXJaVU55WldGMFpVaHZiMnR6S0hadWIyUmxMQ0JwYm5ObGNuUmxaRlp1YjJSbFVYVmxkV1VwTzF4dUlDQWdJQ0FnYzJWMFUyTnZjR1VvZG01dlpHVXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBdkx5QmxiWEIwZVNCamIyMXdiMjVsYm5RZ2NtOXZkQzVjYmlBZ0lDQWdJQzh2SUhOcmFYQWdZV3hzSUdWc1pXMWxiblF0Y21Wc1lYUmxaQ0J0YjJSMWJHVnpJR1Y0WTJWd2RDQm1iM0lnY21WbUlDZ2pNelExTlNsY2JpQWdJQ0FnSUhKbFoybHpkR1Z5VW1WbUtIWnViMlJsS1R0Y2JpQWdJQ0FnSUM4dklHMWhhMlVnYzNWeVpTQjBieUJwYm5admEyVWdkR2hsSUdsdWMyVnlkQ0JvYjI5clhHNGdJQ0FnSUNCcGJuTmxjblJsWkZadWIyUmxVWFZsZFdVdWNIVnphQ2gyYm05a1pTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdjbVZoWTNScGRtRjBaVU52YlhCdmJtVnVkQ0FvZG01dlpHVXNJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU3dnY0dGeVpXNTBSV3h0TENCeVpXWkZiRzBwSUh0Y2JpQWdJQ0IyWVhJZ2FUdGNiaUFnSUNBdkx5Qm9ZV05ySUdadmNpQWpORE16T1RvZ1lTQnlaV0ZqZEdsMllYUmxaQ0JqYjIxd2IyNWxiblFnZDJsMGFDQnBibTVsY2lCMGNtRnVjMmwwYVc5dVhHNGdJQ0FnTHk4Z1pHOWxjeUJ1YjNRZ2RISnBaMmRsY2lCaVpXTmhkWE5sSUhSb1pTQnBibTVsY2lCdWIyUmxKM01nWTNKbFlYUmxaQ0JvYjI5cmN5QmhjbVVnYm05MElHTmhiR3hsWkZ4dUlDQWdJQzh2SUdGbllXbHVMaUJKZENkeklHNXZkQ0JwWkdWaGJDQjBieUJwYm5admJIWmxJRzF2WkhWc1pTMXpjR1ZqYVdacFl5QnNiMmRwWXlCcGJpQm9aWEpsSUdKMWRGeHVJQ0FnSUM4dklIUm9aWEpsSUdSdlpYTnVKM1FnYzJWbGJTQjBieUJpWlNCaElHSmxkSFJsY2lCM1lYa2dkRzhnWkc4Z2FYUXVYRzRnSUNBZ2RtRnlJR2x1Ym1WeVRtOWtaU0E5SUhadWIyUmxPMXh1SUNBZ0lIZG9hV3hsSUNocGJtNWxjazV2WkdVdVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVcElIdGNiaUFnSUNBZ0lHbHVibVZ5VG05a1pTQTlJR2x1Ym1WeVRtOWtaUzVqYjIxd2IyNWxiblJKYm5OMFlXNWpaUzVmZG01dlpHVTdYRzRnSUNBZ0lDQnBaaUFvYVhORVpXWW9hU0E5SUdsdWJtVnlUbTlrWlM1a1lYUmhLU0FtSmlCcGMwUmxaaWhwSUQwZ2FTNTBjbUZ1YzJsMGFXOXVLU2tnZTF4dUlDQWdJQ0FnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnWTJKekxtRmpkR2wyWVhSbExteGxibWQwYURzZ0t5dHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kySnpMbUZqZEdsMllYUmxXMmxkS0dWdGNIUjVUbTlrWlN3Z2FXNXVaWEpPYjJSbEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwYm5ObGNuUmxaRlp1YjJSbFVYVmxkV1V1Y0hWemFDaHBibTVsY2s1dlpHVXBPMXh1SUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0F2THlCMWJteHBhMlVnWVNCdVpYZHNlU0JqY21WaGRHVmtJR052YlhCdmJtVnVkQ3hjYmlBZ0lDQXZMeUJoSUhKbFlXTjBhWFpoZEdWa0lHdGxaWEF0WVd4cGRtVWdZMjl0Y0c5dVpXNTBJR1J2WlhOdUozUWdhVzV6WlhKMElHbDBjMlZzWmx4dUlDQWdJR2x1YzJWeWRDaHdZWEpsYm5SRmJHMHNJSFp1YjJSbExtVnNiU3dnY21WbVJXeHRLVHRjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUdsdWMyVnlkQ0FvY0dGeVpXNTBMQ0JsYkcwc0lISmxaaVFrTVNrZ2UxeHVJQ0FnSUdsbUlDaHBjMFJsWmlod1lYSmxiblFwS1NCN1hHNGdJQ0FnSUNCcFppQW9hWE5FWldZb2NtVm1KQ1F4S1NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvY21WbUpDUXhMbkJoY21WdWRFNXZaR1VnUFQwOUlIQmhjbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJRzV2WkdWUGNITXVhVzV6WlhKMFFtVm1iM0psS0hCaGNtVnVkQ3dnWld4dExDQnlaV1lrSkRFcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnViMlJsVDNCekxtRndjR1Z1WkVOb2FXeGtLSEJoY21WdWRDd2daV3h0S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCamNtVmhkR1ZEYUdsc1pISmxiaUFvZG01dlpHVXNJR05vYVd4a2NtVnVMQ0JwYm5ObGNuUmxaRlp1YjJSbFVYVmxkV1VwSUh0Y2JpQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hqYUdsc1pISmxiaWtwSUh0Y2JpQWdJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUdOb1pXTnJSSFZ3YkdsallYUmxTMlY1Y3loamFHbHNaSEpsYmlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHTm9hV3hrY21WdUxteGxibWQwYURzZ0t5dHBLU0I3WEc0Z0lDQWdJQ0FnSUdOeVpXRjBaVVZzYlNoamFHbHNaSEpsYmx0cFhTd2dhVzV6WlhKMFpXUldibTlrWlZGMVpYVmxMQ0IyYm05a1pTNWxiRzBzSUc1MWJHd3NJSFJ5ZFdVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FYTlFjbWx0YVhScGRtVW9kbTV2WkdVdWRHVjRkQ2twSUh0Y2JpQWdJQ0FnSUc1dlpHVlBjSE11WVhCd1pXNWtRMmhwYkdRb2RtNXZaR1V1Wld4dExDQnViMlJsVDNCekxtTnlaV0YwWlZSbGVIUk9iMlJsS0ZOMGNtbHVaeWgyYm05a1pTNTBaWGgwS1NrcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlHbHpVR0YwWTJoaFlteGxJQ2gyYm05a1pTa2dlMXh1SUNBZ0lIZG9hV3hsSUNoMmJtOWtaUzVqYjIxd2IyNWxiblJKYm5OMFlXNWpaU2tnZTF4dUlDQWdJQ0FnZG01dlpHVWdQU0IyYm05a1pTNWpiMjF3YjI1bGJuUkpibk4wWVc1alpTNWZkbTV2WkdVN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnBjMFJsWmloMmJtOWtaUzUwWVdjcFhHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQnBiblp2YTJWRGNtVmhkR1ZJYjI5cmN5QW9kbTV2WkdVc0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTa2dlMXh1SUNBZ0lHWnZjaUFvZG1GeUlHa2tNU0E5SURBN0lHa2tNU0E4SUdOaWN5NWpjbVZoZEdVdWJHVnVaM1JvT3lBcksya2tNU2tnZTF4dUlDQWdJQ0FnWTJKekxtTnlaV0YwWlZ0cEpERmRLR1Z0Y0hSNVRtOWtaU3dnZG01dlpHVXBPMXh1SUNBZ0lIMWNiaUFnSUNCcElEMGdkbTV2WkdVdVpHRjBZUzVvYjI5ck95QXZMeUJTWlhWelpTQjJZWEpwWVdKc1pWeHVJQ0FnSUdsbUlDaHBjMFJsWmlocEtTa2dlMXh1SUNBZ0lDQWdhV1lnS0dselJHVm1LR2t1WTNKbFlYUmxLU2tnZXlCcExtTnlaV0YwWlNobGJYQjBlVTV2WkdVc0lIWnViMlJsS1RzZ2ZWeHVJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtHa3VhVzV6WlhKMEtTa2dleUJwYm5ObGNuUmxaRlp1YjJSbFVYVmxkV1V1Y0hWemFDaDJibTlrWlNrN0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZMeUJ6WlhRZ2MyTnZjR1VnYVdRZ1lYUjBjbWxpZFhSbElHWnZjaUJ6WTI5d1pXUWdRMU5UTGx4dUlDQXZMeUIwYUdseklHbHpJR2x0Y0d4bGJXVnVkR1ZrSUdGeklHRWdjM0JsWTJsaGJDQmpZWE5sSUhSdklHRjJiMmxrSUhSb1pTQnZkbVZ5YUdWaFpGeHVJQ0F2THlCdlppQm5iMmx1WnlCMGFISnZkV2RvSUhSb1pTQnViM0p0WVd3Z1lYUjBjbWxpZFhSbElIQmhkR05vYVc1bklIQnliMk5sYzNNdVhHNGdJR1oxYm1OMGFXOXVJSE5sZEZOamIzQmxJQ2gyYm05a1pTa2dlMXh1SUNBZ0lIWmhjaUJwTzF4dUlDQWdJR2xtSUNocGMwUmxaaWhwSUQwZ2RtNXZaR1V1Wm01VFkyOXdaVWxrS1NrZ2UxeHVJQ0FnSUNBZ2JtOWtaVTl3Y3k1elpYUkJkSFJ5YVdKMWRHVW9kbTV2WkdVdVpXeHRMQ0JwTENBbkp5azdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhaaGNpQmhibU5sYzNSdmNpQTlJSFp1YjJSbE8xeHVJQ0FnSUNBZ2QyaHBiR1VnS0dGdVkyVnpkRzl5S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hwYzBSbFppaHBJRDBnWVc1alpYTjBiM0l1WTI5dWRHVjRkQ2tnSmlZZ2FYTkVaV1lvYVNBOUlHa3VKRzl3ZEdsdmJuTXVYM05qYjNCbFNXUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JtOWtaVTl3Y3k1elpYUkJkSFJ5YVdKMWRHVW9kbTV2WkdVdVpXeHRMQ0JwTENBbkp5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWVc1alpYTjBiM0lnUFNCaGJtTmxjM1J2Y2k1d1lYSmxiblE3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJR1p2Y2lCemJHOTBJR052Ym5SbGJuUWdkR2hsZVNCemFHOTFiR1FnWVd4emJ5Qm5aWFFnZEdobElITmpiM0JsU1dRZ1puSnZiU0IwYUdVZ2FHOXpkQ0JwYm5OMFlXNWpaUzVjYmlBZ0lDQnBaaUFvYVhORVpXWW9hU0E5SUdGamRHbDJaVWx1YzNSaGJtTmxLU0FtSmx4dUlDQWdJQ0FnYVNBaFBUMGdkbTV2WkdVdVkyOXVkR1Y0ZENBbUpseHVJQ0FnSUNBZ2FTQWhQVDBnZG01dlpHVXVabTVEYjI1MFpYaDBJQ1ltWEc0Z0lDQWdJQ0JwYzBSbFppaHBJRDBnYVM0a2IzQjBhVzl1Y3k1ZmMyTnZjR1ZKWkNsY2JpQWdJQ0FwSUh0Y2JpQWdJQ0FnSUc1dlpHVlBjSE11YzJWMFFYUjBjbWxpZFhSbEtIWnViMlJsTG1Wc2JTd2dhU3dnSnljcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlHRmtaRlp1YjJSbGN5QW9jR0Z5Wlc1MFJXeHRMQ0J5WldaRmJHMHNJSFp1YjJSbGN5d2djM1JoY25SSlpIZ3NJR1Z1WkVsa2VDd2dhVzV6WlhKMFpXUldibTlrWlZGMVpYVmxLU0I3WEc0Z0lDQWdabTl5SUNnN0lITjBZWEowU1dSNElEdzlJR1Z1WkVsa2VEc2dLeXR6ZEdGeWRFbGtlQ2tnZTF4dUlDQWdJQ0FnWTNKbFlYUmxSV3h0S0hadWIyUmxjMXR6ZEdGeWRFbGtlRjBzSUdsdWMyVnlkR1ZrVm01dlpHVlJkV1YxWlN3Z2NHRnlaVzUwUld4dExDQnlaV1pGYkcwcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlHbHVkbTlyWlVSbGMzUnliM2xJYjI5cklDaDJibTlrWlNrZ2UxeHVJQ0FnSUhaaGNpQnBMQ0JxTzF4dUlDQWdJSFpoY2lCa1lYUmhJRDBnZG01dlpHVXVaR0YwWVR0Y2JpQWdJQ0JwWmlBb2FYTkVaV1lvWkdGMFlTa3BJSHRjYmlBZ0lDQWdJR2xtSUNocGMwUmxaaWhwSUQwZ1pHRjBZUzVvYjI5cktTQW1KaUJwYzBSbFppaHBJRDBnYVM1a1pYTjBjbTk1S1NrZ2V5QnBLSFp1YjJSbEtUc2dmVnh1SUNBZ0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElHTmljeTVrWlhOMGNtOTVMbXhsYm1kMGFEc2dLeXRwS1NCN0lHTmljeTVrWlhOMGNtOTVXMmxkS0hadWIyUmxLVHNnZlZ4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvYVhORVpXWW9hU0E5SUhadWIyUmxMbU5vYVd4a2NtVnVLU2tnZTF4dUlDQWdJQ0FnWm05eUlDaHFJRDBnTURzZ2FpQThJSFp1YjJSbExtTm9hV3hrY21WdUxteGxibWQwYURzZ0t5dHFLU0I3WEc0Z0lDQWdJQ0FnSUdsdWRtOXJaVVJsYzNSeWIzbEliMjlyS0hadWIyUmxMbU5vYVd4a2NtVnVXMnBkS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCeVpXMXZkbVZXYm05a1pYTWdLSEJoY21WdWRFVnNiU3dnZG01dlpHVnpMQ0J6ZEdGeWRFbGtlQ3dnWlc1a1NXUjRLU0I3WEc0Z0lDQWdabTl5SUNnN0lITjBZWEowU1dSNElEdzlJR1Z1WkVsa2VEc2dLeXR6ZEdGeWRFbGtlQ2tnZTF4dUlDQWdJQ0FnZG1GeUlHTm9JRDBnZG01dlpHVnpXM04wWVhKMFNXUjRYVHRjYmlBZ0lDQWdJR2xtSUNocGMwUmxaaWhqYUNrcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0dselJHVm1LR05vTG5SaFp5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpXMXZkbVZCYm1SSmJuWnZhMlZTWlcxdmRtVkliMjlyS0dOb0tUdGNiaUFnSUNBZ0lDQWdJQ0JwYm5admEyVkVaWE4wY205NVNHOXZheWhqYUNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN0lDOHZJRlJsZUhRZ2JtOWtaVnh1SUNBZ0lDQWdJQ0FnSUhKbGJXOTJaVTV2WkdVb1kyZ3VaV3h0S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlISmxiVzkyWlVGdVpFbHVkbTlyWlZKbGJXOTJaVWh2YjJzZ0tIWnViMlJsTENCeWJTa2dlMXh1SUNBZ0lHbG1JQ2hwYzBSbFppaHliU2tnZkh3Z2FYTkVaV1lvZG01dlpHVXVaR0YwWVNrcElIdGNiaUFnSUNBZ0lIWmhjaUJwTzF4dUlDQWdJQ0FnZG1GeUlHeHBjM1JsYm1WeWN5QTlJR05pY3k1eVpXMXZkbVV1YkdWdVozUm9JQ3NnTVR0Y2JpQWdJQ0FnSUdsbUlDaHBjMFJsWmloeWJTa3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2QyVWdhR0YyWlNCaElISmxZM1Z5YzJsMlpXeDVJSEJoYzNObFpDQmtiM2R1SUhKdElHTmhiR3hpWVdOclhHNGdJQ0FnSUNBZ0lDOHZJR2x1WTNKbFlYTmxJSFJvWlNCc2FYTjBaVzVsY25NZ1kyOTFiblJjYmlBZ0lDQWdJQ0FnY20wdWJHbHpkR1Z1WlhKeklDczlJR3hwYzNSbGJtVnljenRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQzh2SUdScGNtVmpkR3g1SUhKbGJXOTJhVzVuWEc0Z0lDQWdJQ0FnSUhKdElEMGdZM0psWVhSbFVtMURZaWgyYm05a1pTNWxiRzBzSUd4cGMzUmxibVZ5Y3lrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNBdkx5QnlaV04xY25OcGRtVnNlU0JwYm5admEyVWdhRzl2YTNNZ2IyNGdZMmhwYkdRZ1kyOXRjRzl1Wlc1MElISnZiM1FnYm05a1pWeHVJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtHa2dQU0IyYm05a1pTNWpiMjF3YjI1bGJuUkpibk4wWVc1alpTa2dKaVlnYVhORVpXWW9hU0E5SUdrdVgzWnViMlJsS1NBbUppQnBjMFJsWmlocExtUmhkR0VwS1NCN1hHNGdJQ0FnSUNBZ0lISmxiVzkyWlVGdVpFbHVkbTlyWlZKbGJXOTJaVWh2YjJzb2FTd2djbTBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWm05eUlDaHBJRDBnTURzZ2FTQThJR05pY3k1eVpXMXZkbVV1YkdWdVozUm9PeUFySzJrcElIdGNiaUFnSUNBZ0lDQWdZMkp6TG5KbGJXOTJaVnRwWFNoMmJtOWtaU3dnY20wcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtHa2dQU0IyYm05a1pTNWtZWFJoTG1odmIyc3BJQ1ltSUdselJHVm1LR2tnUFNCcExuSmxiVzkyWlNrcElIdGNiaUFnSUNBZ0lDQWdhU2gyYm05a1pTd2djbTBwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnY20wb0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnY21WdGIzWmxUbTlrWlNoMmJtOWtaUzVsYkcwcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlIVndaR0YwWlVOb2FXeGtjbVZ1SUNod1lYSmxiblJGYkcwc0lHOXNaRU5vTENCdVpYZERhQ3dnYVc1elpYSjBaV1JXYm05a1pWRjFaWFZsTENCeVpXMXZkbVZQYm14NUtTQjdYRzRnSUNBZ2RtRnlJRzlzWkZOMFlYSjBTV1I0SUQwZ01EdGNiaUFnSUNCMllYSWdibVYzVTNSaGNuUkpaSGdnUFNBd08xeHVJQ0FnSUhaaGNpQnZiR1JGYm1SSlpIZ2dQU0J2YkdSRGFDNXNaVzVuZEdnZ0xTQXhPMXh1SUNBZ0lIWmhjaUJ2YkdSVGRHRnlkRlp1YjJSbElEMGdiMnhrUTJoYk1GMDdYRzRnSUNBZ2RtRnlJRzlzWkVWdVpGWnViMlJsSUQwZ2IyeGtRMmhiYjJ4a1JXNWtTV1I0WFR0Y2JpQWdJQ0IyWVhJZ2JtVjNSVzVrU1dSNElEMGdibVYzUTJndWJHVnVaM1JvSUMwZ01UdGNiaUFnSUNCMllYSWdibVYzVTNSaGNuUldibTlrWlNBOUlHNWxkME5vV3pCZE8xeHVJQ0FnSUhaaGNpQnVaWGRGYm1SV2JtOWtaU0E5SUc1bGQwTm9XMjVsZDBWdVpFbGtlRjA3WEc0Z0lDQWdkbUZ5SUc5c1pFdGxlVlJ2U1dSNExDQnBaSGhKYms5c1pDd2dkbTV2WkdWVWIwMXZkbVVzSUhKbFprVnNiVHRjYmx4dUlDQWdJQzh2SUhKbGJXOTJaVTl1YkhrZ2FYTWdZU0J6Y0dWamFXRnNJR1pzWVdjZ2RYTmxaQ0J2Ym14NUlHSjVJRHgwY21GdWMybDBhVzl1TFdkeWIzVndQbHh1SUNBZ0lDOHZJSFJ2SUdWdWMzVnlaU0J5WlcxdmRtVmtJR1ZzWlcxbGJuUnpJSE4wWVhrZ2FXNGdZMjl5Y21WamRDQnlaV3hoZEdsMlpTQndiM05wZEdsdmJuTmNiaUFnSUNBdkx5QmtkWEpwYm1jZ2JHVmhkbWx1WnlCMGNtRnVjMmwwYVc5dWMxeHVJQ0FnSUhaaGNpQmpZVzVOYjNabElEMGdJWEpsYlc5MlpVOXViSGs3WEc1Y2JpQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lDQWdZMmhsWTJ0RWRYQnNhV05oZEdWTFpYbHpLRzVsZDBOb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCM2FHbHNaU0FvYjJ4a1UzUmhjblJKWkhnZ1BEMGdiMnhrUlc1a1NXUjRJQ1ltSUc1bGQxTjBZWEowU1dSNElEdzlJRzVsZDBWdVpFbGtlQ2tnZTF4dUlDQWdJQ0FnYVdZZ0tHbHpWVzVrWldZb2IyeGtVM1JoY25SV2JtOWtaU2twSUh0Y2JpQWdJQ0FnSUNBZ2IyeGtVM1JoY25SV2JtOWtaU0E5SUc5c1pFTm9XeXNyYjJ4a1UzUmhjblJKWkhoZE95QXZMeUJXYm05a1pTQm9ZWE1nWW1WbGJpQnRiM1psWkNCc1pXWjBYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2x6Vlc1a1pXWW9iMnhrUlc1a1ZtNXZaR1VwS1NCN1hHNGdJQ0FnSUNBZ0lHOXNaRVZ1WkZadWIyUmxJRDBnYjJ4a1EyaGJMUzF2YkdSRmJtUkpaSGhkTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoellXMWxWbTV2WkdVb2IyeGtVM1JoY25SV2JtOWtaU3dnYm1WM1UzUmhjblJXYm05a1pTa3BJSHRjYmlBZ0lDQWdJQ0FnY0dGMFkyaFdibTlrWlNodmJHUlRkR0Z5ZEZadWIyUmxMQ0J1WlhkVGRHRnlkRlp1YjJSbExDQnBibk5sY25SbFpGWnViMlJsVVhWbGRXVXBPMXh1SUNBZ0lDQWdJQ0J2YkdSVGRHRnlkRlp1YjJSbElEMGdiMnhrUTJoYkt5dHZiR1JUZEdGeWRFbGtlRjA3WEc0Z0lDQWdJQ0FnSUc1bGQxTjBZWEowVm01dlpHVWdQU0J1WlhkRGFGc3JLMjVsZDFOMFlYSjBTV1I0WFR0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2MyRnRaVlp1YjJSbEtHOXNaRVZ1WkZadWIyUmxMQ0J1WlhkRmJtUldibTlrWlNrcElIdGNiaUFnSUNBZ0lDQWdjR0YwWTJoV2JtOWtaU2h2YkdSRmJtUldibTlrWlN3Z2JtVjNSVzVrVm01dlpHVXNJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU2s3WEc0Z0lDQWdJQ0FnSUc5c1pFVnVaRlp1YjJSbElEMGdiMnhrUTJoYkxTMXZiR1JGYm1SSlpIaGRPMXh1SUNBZ0lDQWdJQ0J1WlhkRmJtUldibTlrWlNBOUlHNWxkME5vV3kwdGJtVjNSVzVrU1dSNFhUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jMkZ0WlZadWIyUmxLRzlzWkZOMFlYSjBWbTV2WkdVc0lHNWxkMFZ1WkZadWIyUmxLU2tnZXlBdkx5QldibTlrWlNCdGIzWmxaQ0J5YVdkb2RGeHVJQ0FnSUNBZ0lDQndZWFJqYUZadWIyUmxLRzlzWkZOMFlYSjBWbTV2WkdVc0lHNWxkMFZ1WkZadWIyUmxMQ0JwYm5ObGNuUmxaRlp1YjJSbFVYVmxkV1VwTzF4dUlDQWdJQ0FnSUNCallXNU5iM1psSUNZbUlHNXZaR1ZQY0hNdWFXNXpaWEowUW1WbWIzSmxLSEJoY21WdWRFVnNiU3dnYjJ4a1UzUmhjblJXYm05a1pTNWxiRzBzSUc1dlpHVlBjSE11Ym1WNGRGTnBZbXhwYm1jb2IyeGtSVzVrVm01dlpHVXVaV3h0S1NrN1hHNGdJQ0FnSUNBZ0lHOXNaRk4wWVhKMFZtNXZaR1VnUFNCdmJHUkRhRnNySzI5c1pGTjBZWEowU1dSNFhUdGNiaUFnSUNBZ0lDQWdibVYzUlc1a1ZtNXZaR1VnUFNCdVpYZERhRnN0TFc1bGQwVnVaRWxrZUYwN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tITmhiV1ZXYm05a1pTaHZiR1JGYm1SV2JtOWtaU3dnYm1WM1UzUmhjblJXYm05a1pTa3BJSHNnTHk4Z1ZtNXZaR1VnYlc5MlpXUWdiR1ZtZEZ4dUlDQWdJQ0FnSUNCd1lYUmphRlp1YjJSbEtHOXNaRVZ1WkZadWIyUmxMQ0J1WlhkVGRHRnlkRlp1YjJSbExDQnBibk5sY25SbFpGWnViMlJsVVhWbGRXVXBPMXh1SUNBZ0lDQWdJQ0JqWVc1TmIzWmxJQ1ltSUc1dlpHVlBjSE11YVc1elpYSjBRbVZtYjNKbEtIQmhjbVZ1ZEVWc2JTd2diMnhrUlc1a1ZtNXZaR1V1Wld4dExDQnZiR1JUZEdGeWRGWnViMlJsTG1Wc2JTazdYRzRnSUNBZ0lDQWdJRzlzWkVWdVpGWnViMlJsSUQwZ2IyeGtRMmhiTFMxdmJHUkZibVJKWkhoZE8xeHVJQ0FnSUNBZ0lDQnVaWGRUZEdGeWRGWnViMlJsSUQwZ2JtVjNRMmhiS3l0dVpYZFRkR0Z5ZEVsa2VGMDdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYVhOVmJtUmxaaWh2YkdSTFpYbFViMGxrZUNrcElIc2diMnhrUzJWNVZHOUpaSGdnUFNCamNtVmhkR1ZMWlhsVWIwOXNaRWxrZUNodmJHUkRhQ3dnYjJ4a1UzUmhjblJKWkhnc0lHOXNaRVZ1WkVsa2VDazdJSDFjYmlBZ0lDQWdJQ0FnYVdSNFNXNVBiR1FnUFNCcGMwUmxaaWh1WlhkVGRHRnlkRlp1YjJSbExtdGxlU2xjYmlBZ0lDQWdJQ0FnSUNBL0lHOXNaRXRsZVZSdlNXUjRXMjVsZDFOMFlYSjBWbTV2WkdVdWEyVjVYVnh1SUNBZ0lDQWdJQ0FnSURvZ1ptbHVaRWxrZUVsdVQyeGtLRzVsZDFOMFlYSjBWbTV2WkdVc0lHOXNaRU5vTENCdmJHUlRkR0Z5ZEVsa2VDd2diMnhrUlc1a1NXUjRLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHpWVzVrWldZb2FXUjRTVzVQYkdRcEtTQjdJQzh2SUU1bGR5QmxiR1Z0Wlc1MFhHNGdJQ0FnSUNBZ0lDQWdZM0psWVhSbFJXeHRLRzVsZDFOMFlYSjBWbTV2WkdVc0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTd2djR0Z5Wlc1MFJXeHRMQ0J2YkdSVGRHRnlkRlp1YjJSbExtVnNiU2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtNXZaR1ZVYjAxdmRtVWdQU0J2YkdSRGFGdHBaSGhKYms5c1pGMDdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tITmhiV1ZXYm05a1pTaDJibTlrWlZSdlRXOTJaU3dnYm1WM1UzUmhjblJXYm05a1pTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhkR05vVm01dlpHVW9kbTV2WkdWVWIwMXZkbVVzSUc1bGQxTjBZWEowVm01dlpHVXNJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZiR1JEYUZ0cFpIaEpiazlzWkYwZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCallXNU5iM1psSUNZbUlHNXZaR1ZQY0hNdWFXNXpaWEowUW1WbWIzSmxLSEJoY21WdWRFVnNiU3dnZG01dlpHVlViMDF2ZG1VdVpXeHRMQ0J2YkdSVGRHRnlkRlp1YjJSbExtVnNiU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhOaGJXVWdhMlY1SUdKMWRDQmthV1ptWlhKbGJuUWdaV3hsYldWdWRDNGdkSEpsWVhRZ1lYTWdibVYzSUdWc1pXMWxiblJjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnlaV0YwWlVWc2JTaHVaWGRUZEdGeWRGWnViMlJsTENCcGJuTmxjblJsWkZadWIyUmxVWFZsZFdVc0lIQmhjbVZ1ZEVWc2JTd2diMnhrVTNSaGNuUldibTlrWlM1bGJHMHBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnVaWGRUZEdGeWRGWnViMlJsSUQwZ2JtVjNRMmhiS3l0dVpYZFRkR0Z5ZEVsa2VGMDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHZiR1JUZEdGeWRFbGtlQ0ErSUc5c1pFVnVaRWxrZUNrZ2UxeHVJQ0FnSUNBZ2NtVm1SV3h0SUQwZ2FYTlZibVJsWmlodVpYZERhRnR1WlhkRmJtUkpaSGdnS3lBeFhTa2dQeUJ1ZFd4c0lEb2dibVYzUTJoYmJtVjNSVzVrU1dSNElDc2dNVjB1Wld4dE8xeHVJQ0FnSUNBZ1lXUmtWbTV2WkdWektIQmhjbVZ1ZEVWc2JTd2djbVZtUld4dExDQnVaWGREYUN3Z2JtVjNVM1JoY25SSlpIZ3NJRzVsZDBWdVpFbGtlQ3dnYVc1elpYSjBaV1JXYm05a1pWRjFaWFZsS1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0c1bGQxTjBZWEowU1dSNElENGdibVYzUlc1a1NXUjRLU0I3WEc0Z0lDQWdJQ0J5WlcxdmRtVldibTlrWlhNb2NHRnlaVzUwUld4dExDQnZiR1JEYUN3Z2IyeGtVM1JoY25SSlpIZ3NJRzlzWkVWdVpFbGtlQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnWTJobFkydEVkWEJzYVdOaGRHVkxaWGx6SUNoamFHbHNaSEpsYmlrZ2UxeHVJQ0FnSUhaaGNpQnpaV1Z1UzJWNWN5QTlJSHQ5TzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWTJocGJHUnlaVzR1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lIWmhjaUIyYm05a1pTQTlJR05vYVd4a2NtVnVXMmxkTzF4dUlDQWdJQ0FnZG1GeUlHdGxlU0E5SUhadWIyUmxMbXRsZVR0Y2JpQWdJQ0FnSUdsbUlDaHBjMFJsWmloclpYa3BLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHpaV1Z1UzJWNWMxdHJaWGxkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkMkZ5YmloY2JpQWdJQ0FnSUNBZ0lDQWdJQ2hjSWtSMWNHeHBZMkYwWlNCclpYbHpJR1JsZEdWamRHVmtPaUFuWENJZ0t5QnJaWGtnS3lCY0lpY3VJRlJvYVhNZ2JXRjVJR05oZFhObElHRnVJSFZ3WkdGMFpTQmxjbkp2Y2k1Y0lpa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCMmJtOWtaUzVqYjI1MFpYaDBYRzRnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnpaV1Z1UzJWNWMxdHJaWGxkSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUdacGJtUkpaSGhKYms5c1pDQW9ibTlrWlN3Z2IyeGtRMmdzSUhOMFlYSjBMQ0JsYm1RcElIdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdjM1JoY25RN0lHa2dQQ0JsYm1RN0lHa3JLeWtnZTF4dUlDQWdJQ0FnZG1GeUlHTWdQU0J2YkdSRGFGdHBYVHRjYmlBZ0lDQWdJR2xtSUNocGMwUmxaaWhqS1NBbUppQnpZVzFsVm01dlpHVW9ibTlrWlN3Z1l5a3BJSHNnY21WMGRYSnVJR2tnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUhCaGRHTm9WbTV2WkdVZ0tHOXNaRlp1YjJSbExDQjJibTlrWlN3Z2FXNXpaWEowWldSV2JtOWtaVkYxWlhWbExDQnlaVzF2ZG1WUGJteDVLU0I3WEc0Z0lDQWdhV1lnS0c5c1pGWnViMlJsSUQwOVBTQjJibTlrWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUdWc2JTQTlJSFp1YjJSbExtVnNiU0E5SUc5c1pGWnViMlJsTG1Wc2JUdGNibHh1SUNBZ0lHbG1JQ2hwYzFSeWRXVW9iMnhrVm01dlpHVXVhWE5CYzNsdVkxQnNZV05sYUc5c1pHVnlLU2tnZTF4dUlDQWdJQ0FnYVdZZ0tHbHpSR1ZtS0hadWIyUmxMbUZ6ZVc1alJtRmpkRzl5ZVM1eVpYTnZiSFpsWkNrcElIdGNiaUFnSUNBZ0lDQWdhSGxrY21GMFpTaHZiR1JXYm05a1pTNWxiRzBzSUhadWIyUmxMQ0JwYm5ObGNuUmxaRlp1YjJSbFVYVmxkV1VwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZG01dlpHVXVhWE5CYzNsdVkxQnNZV05sYUc5c1pHVnlJRDBnZEhKMVpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5Ymx4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUhKbGRYTmxJR1ZzWlcxbGJuUWdabTl5SUhOMFlYUnBZeUIwY21WbGN5NWNiaUFnSUNBdkx5QnViM1JsSUhkbElHOXViSGtnWkc4Z2RHaHBjeUJwWmlCMGFHVWdkbTV2WkdVZ2FYTWdZMnh2Ym1Wa0lDMWNiaUFnSUNBdkx5QnBaaUIwYUdVZ2JtVjNJRzV2WkdVZ2FYTWdibTkwSUdOc2IyNWxaQ0JwZENCdFpXRnVjeUIwYUdVZ2NtVnVaR1Z5SUdaMWJtTjBhVzl1Y3lCb1lYWmxJR0psWlc1Y2JpQWdJQ0F2THlCeVpYTmxkQ0JpZVNCMGFHVWdhRzkwTFhKbGJHOWhaQzFoY0drZ1lXNWtJSGRsSUc1bFpXUWdkRzhnWkc4Z1lTQndjbTl3WlhJZ2NtVXRjbVZ1WkdWeUxseHVJQ0FnSUdsbUlDaHBjMVJ5ZFdVb2RtNXZaR1V1YVhOVGRHRjBhV01wSUNZbVhHNGdJQ0FnSUNCcGMxUnlkV1VvYjJ4a1ZtNXZaR1V1YVhOVGRHRjBhV01wSUNZbVhHNGdJQ0FnSUNCMmJtOWtaUzVyWlhrZ1BUMDlJRzlzWkZadWIyUmxMbXRsZVNBbUpseHVJQ0FnSUNBZ0tHbHpWSEoxWlNoMmJtOWtaUzVwYzBOc2IyNWxaQ2tnZkh3Z2FYTlVjblZsS0hadWIyUmxMbWx6VDI1alpTa3BYRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQjJibTlrWlM1amIyMXdiMjVsYm5SSmJuTjBZVzVqWlNBOUlHOXNaRlp1YjJSbExtTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObE8xeHVJQ0FnSUNBZ2NtVjBkWEp1WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUdrN1hHNGdJQ0FnZG1GeUlHUmhkR0VnUFNCMmJtOWtaUzVrWVhSaE8xeHVJQ0FnSUdsbUlDaHBjMFJsWmloa1lYUmhLU0FtSmlCcGMwUmxaaWhwSUQwZ1pHRjBZUzVvYjI5cktTQW1KaUJwYzBSbFppaHBJRDBnYVM1d2NtVndZWFJqYUNrcElIdGNiaUFnSUNBZ0lHa29iMnhrVm01dlpHVXNJSFp1YjJSbEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdiMnhrUTJnZ1BTQnZiR1JXYm05a1pTNWphR2xzWkhKbGJqdGNiaUFnSUNCMllYSWdZMmdnUFNCMmJtOWtaUzVqYUdsc1pISmxianRjYmlBZ0lDQnBaaUFvYVhORVpXWW9aR0YwWVNrZ0ppWWdhWE5RWVhSamFHRmliR1VvZG01dlpHVXBLU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tHa2dQU0F3T3lCcElEd2dZMkp6TG5Wd1pHRjBaUzVzWlc1bmRHZzdJQ3NyYVNrZ2V5QmpZbk11ZFhCa1lYUmxXMmxkS0c5c1pGWnViMlJsTENCMmJtOWtaU2s3SUgxY2JpQWdJQ0FnSUdsbUlDaHBjMFJsWmlocElEMGdaR0YwWVM1b2IyOXJLU0FtSmlCcGMwUmxaaWhwSUQwZ2FTNTFjR1JoZEdVcEtTQjdJR2tvYjJ4a1ZtNXZaR1VzSUhadWIyUmxLVHNnZlZ4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvYVhOVmJtUmxaaWgyYm05a1pTNTBaWGgwS1NrZ2UxeHVJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtHOXNaRU5vS1NBbUppQnBjMFJsWmloamFDa3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHOXNaRU5vSUNFOVBTQmphQ2tnZXlCMWNHUmhkR1ZEYUdsc1pISmxiaWhsYkcwc0lHOXNaRU5vTENCamFDd2dhVzV6WlhKMFpXUldibTlrWlZGMVpYVmxMQ0J5WlcxdmRtVlBibXg1S1RzZ2ZWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHBjMFJsWmloamFDa3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHpSR1ZtS0c5c1pGWnViMlJsTG5SbGVIUXBLU0I3SUc1dlpHVlBjSE11YzJWMFZHVjRkRU52Ym5SbGJuUW9aV3h0TENBbkp5azdJSDFjYmlBZ0lDQWdJQ0FnWVdSa1ZtNXZaR1Z6S0dWc2JTd2diblZzYkN3Z1kyZ3NJREFzSUdOb0xteGxibWQwYUNBdElERXNJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dselJHVm1LRzlzWkVOb0tTa2dlMXh1SUNBZ0lDQWdJQ0J5WlcxdmRtVldibTlrWlhNb1pXeHRMQ0J2YkdSRGFDd2dNQ3dnYjJ4a1EyZ3ViR1Z1WjNSb0lDMGdNU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dselJHVm1LRzlzWkZadWIyUmxMblJsZUhRcEtTQjdYRzRnSUNBZ0lDQWdJRzV2WkdWUGNITXVjMlYwVkdWNGRFTnZiblJsYm5Rb1pXeHRMQ0FuSnlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNodmJHUldibTlrWlM1MFpYaDBJQ0U5UFNCMmJtOWtaUzUwWlhoMEtTQjdYRzRnSUNBZ0lDQnViMlJsVDNCekxuTmxkRlJsZUhSRGIyNTBaVzUwS0dWc2JTd2dkbTV2WkdVdWRHVjRkQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hwYzBSbFppaGtZWFJoS1NrZ2UxeHVJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtHa2dQU0JrWVhSaExtaHZiMnNwSUNZbUlHbHpSR1ZtS0drZ1BTQnBMbkJ2YzNSd1lYUmphQ2twSUhzZ2FTaHZiR1JXYm05a1pTd2dkbTV2WkdVcE95QjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdhVzUyYjJ0bFNXNXpaWEowU0c5dmF5QW9kbTV2WkdVc0lIRjFaWFZsTENCcGJtbDBhV0ZzS1NCN1hHNGdJQ0FnTHk4Z1pHVnNZWGtnYVc1elpYSjBJR2h2YjJ0eklHWnZjaUJqYjIxd2IyNWxiblFnY205dmRDQnViMlJsY3l3Z2FXNTJiMnRsSUhSb1pXMGdZV1owWlhJZ2RHaGxYRzRnSUNBZ0x5OGdaV3hsYldWdWRDQnBjeUJ5WldGc2JIa2dhVzV6WlhKMFpXUmNiaUFnSUNCcFppQW9hWE5VY25WbEtHbHVhWFJwWVd3cElDWW1JR2x6UkdWbUtIWnViMlJsTG5CaGNtVnVkQ2twSUh0Y2JpQWdJQ0FnSUhadWIyUmxMbkJoY21WdWRDNWtZWFJoTG5CbGJtUnBibWRKYm5ObGNuUWdQU0J4ZFdWMVpUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCeGRXVjFaUzVzWlc1bmRHZzdJQ3NyYVNrZ2UxeHVJQ0FnSUNBZ0lDQnhkV1YxWlZ0cFhTNWtZWFJoTG1odmIyc3VhVzV6WlhKMEtIRjFaWFZsVzJsZEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQjJZWElnYUhsa2NtRjBhVzl1UW1GcGJHVmtJRDBnWm1Gc2MyVTdYRzRnSUM4dklHeHBjM1FnYjJZZ2JXOWtkV3hsY3lCMGFHRjBJR05oYmlCemEybHdJR055WldGMFpTQm9iMjlySUdSMWNtbHVaeUJvZVdSeVlYUnBiMjRnWW1WallYVnpaU0IwYUdWNVhHNGdJQzh2SUdGeVpTQmhiSEpsWVdSNUlISmxibVJsY21Wa0lHOXVJSFJvWlNCamJHbGxiblFnYjNJZ2FHRnpJRzV2SUc1bFpXUWdabTl5SUdsdWFYUnBZV3hwZW1GMGFXOXVYRzRnSUM4dklFNXZkR1U2SUhOMGVXeGxJR2x6SUdWNFkyeDFaR1ZrSUdKbFkyRjFjMlVnYVhRZ2NtVnNhV1Z6SUc5dUlHbHVhWFJwWVd3Z1kyeHZibVVnWm05eUlHWjFkSFZ5WlZ4dUlDQXZMeUJrWldWd0lIVndaR0YwWlhNZ0tDTTNNRFl6S1M1Y2JpQWdkbUZ5SUdselVtVnVaR1Z5WldSTmIyUjFiR1VnUFNCdFlXdGxUV0Z3S0NkaGRIUnljeXhqYkdGemN5eHpkR0YwYVdORGJHRnpjeXh6ZEdGMGFXTlRkSGxzWlN4clpYa25LVHRjYmx4dUlDQXZMeUJPYjNSbE9pQjBhR2x6SUdseklHRWdZbkp2ZDNObGNpMXZibXg1SUdaMWJtTjBhVzl1SUhOdklIZGxJR05oYmlCaGMzTjFiV1VnWld4dGN5QmhjbVVnUkU5TklHNXZaR1Z6TGx4dUlDQm1kVzVqZEdsdmJpQm9lV1J5WVhSbElDaGxiRzBzSUhadWIyUmxMQ0JwYm5ObGNuUmxaRlp1YjJSbFVYVmxkV1VzSUdsdVZsQnlaU2tnZTF4dUlDQWdJSFpoY2lCcE8xeHVJQ0FnSUhaaGNpQjBZV2NnUFNCMmJtOWtaUzUwWVdjN1hHNGdJQ0FnZG1GeUlHUmhkR0VnUFNCMmJtOWtaUzVrWVhSaE8xeHVJQ0FnSUhaaGNpQmphR2xzWkhKbGJpQTlJSFp1YjJSbExtTm9hV3hrY21WdU8xeHVJQ0FnSUdsdVZsQnlaU0E5SUdsdVZsQnlaU0I4ZkNBb1pHRjBZU0FtSmlCa1lYUmhMbkJ5WlNrN1hHNGdJQ0FnZG01dlpHVXVaV3h0SUQwZ1pXeHRPMXh1WEc0Z0lDQWdhV1lnS0dselZISjFaU2gyYm05a1pTNXBjME52YlcxbGJuUXBJQ1ltSUdselJHVm1LSFp1YjJSbExtRnplVzVqUm1GamRHOXllU2twSUh0Y2JpQWdJQ0FnSUhadWIyUmxMbWx6UVhONWJtTlFiR0ZqWldodmJHUmxjaUE5SUhSeWRXVTdYRzRnSUNBZ0lDQnlaWFIxY200Z2RISjFaVnh1SUNBZ0lIMWNiaUFnSUNBdkx5QmhjM05sY25RZ2JtOWtaU0J0WVhSamFGeHVJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0JwWmlBb0lXRnpjMlZ5ZEU1dlpHVk5ZWFJqYUNobGJHMHNJSFp1YjJSbExDQnBibFpRY21VcEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvYVhORVpXWW9aR0YwWVNrcElIdGNiaUFnSUNBZ0lHbG1JQ2hwYzBSbFppaHBJRDBnWkdGMFlTNW9iMjlyS1NBbUppQnBjMFJsWmlocElEMGdhUzVwYm1sMEtTa2dleUJwS0hadWIyUmxMQ0IwY25WbElDOHFJR2g1WkhKaGRHbHVaeUFxTHlrN0lIMWNiaUFnSUNBZ0lHbG1JQ2hwYzBSbFppaHBJRDBnZG01dlpHVXVZMjl0Y0c5dVpXNTBTVzV6ZEdGdVkyVXBLU0I3WEc0Z0lDQWdJQ0FnSUM4dklHTm9hV3hrSUdOdmJYQnZibVZ1ZEM0Z2FYUWdjMmh2ZFd4a0lHaGhkbVVnYUhsa2NtRjBaV1FnYVhSeklHOTNiaUIwY21WbExseHVJQ0FnSUNBZ0lDQnBibWwwUTI5dGNHOXVaVzUwS0hadWIyUmxMQ0JwYm5ObGNuUmxaRlp1YjJSbFVYVmxkV1VwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2FYTkVaV1lvZEdGbktTa2dlMXh1SUNBZ0lDQWdhV1lnS0dselJHVm1LR05vYVd4a2NtVnVLU2tnZTF4dUlDQWdJQ0FnSUNBdkx5QmxiWEIwZVNCbGJHVnRaVzUwTENCaGJHeHZkeUJqYkdsbGJuUWdkRzhnY0dsamF5QjFjQ0JoYm1RZ2NHOXdkV3hoZEdVZ1kyaHBiR1J5Wlc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZsYkcwdWFHRnpRMmhwYkdST2IyUmxjeWdwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZM0psWVhSbFEyaHBiR1J5Wlc0b2RtNXZaR1VzSUdOb2FXeGtjbVZ1TENCcGJuTmxjblJsWkZadWIyUmxVWFZsZFdVcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SUhZdGFIUnRiQ0JoYm1RZ1pHOXRVSEp2Y0hNNklHbHVibVZ5U0ZSTlRGeHVJQ0FnSUNBZ0lDQWdJR2xtSUNocGMwUmxaaWhwSUQwZ1pHRjBZU2tnSmlZZ2FYTkVaV1lvYVNBOUlHa3VaRzl0VUhKdmNITXBJQ1ltSUdselJHVm1LR2tnUFNCcExtbHVibVZ5U0ZSTlRDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwSUNFOVBTQmxiRzB1YVc1dVpYSklWRTFNS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1Z2WmlCamIyNXpiMnhsSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNGb2VXUnlZWFJwYjI1Q1lXbHNaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUhsa2NtRjBhVzl1UW1GcGJHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSjFCaGNtVnVkRG9nSnl3Z1pXeHRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0ozTmxjblpsY2lCcGJtNWxja2hVVFV3NklDY3NJR2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ25ZMnhwWlc1MElHbHVibVZ5U0ZSTlREb2dKeXdnWld4dExtbHVibVZ5U0ZSTlRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHbDBaWEpoZEdVZ1lXNWtJR052YlhCaGNtVWdZMmhwYkdSeVpXNGdiR2x6ZEhOY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCamFHbHNaSEpsYmsxaGRHTm9JRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmphR2xzWkU1dlpHVWdQU0JsYkcwdVptbHljM1JEYUdsc1pEdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdra01TQTlJREE3SUdra01TQThJR05vYVd4a2NtVnVMbXhsYm1kMGFEc2dhU1F4S3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZqYUdsc1pFNXZaR1VnZkh3Z0lXaDVaSEpoZEdVb1kyaHBiR1JPYjJSbExDQmphR2xzWkhKbGJsdHBKREZkTENCcGJuTmxjblJsWkZadWIyUmxVWFZsZFdVc0lHbHVWbEJ5WlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmphR2xzWkhKbGJrMWhkR05vSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamFHbHNaRTV2WkdVZ1BTQmphR2xzWkU1dlpHVXVibVY0ZEZOcFlteHBibWM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnBaaUJqYUdsc1pFNXZaR1VnYVhNZ2JtOTBJRzUxYkd3c0lHbDBJRzFsWVc1eklIUm9aU0JoWTNSMVlXd2dZMmhwYkdST2IyUmxjeUJzYVhOMElHbHpYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnNiMjVuWlhJZ2RHaGhiaUIwYUdVZ2RtbHlkSFZoYkNCamFHbHNaSEpsYmlCc2FYTjBMbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZqYUdsc1pISmxiazFoZEdOb0lIeDhJR05vYVd4a1RtOWtaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYVdZZ0tpOWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxiMllnWTI5dWMyOXNaU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FoYUhsa2NtRjBhVzl1UW1GcGJHVmtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2g1WkhKaGRHbHZia0poYVd4bFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ2RRWVhKbGJuUTZJQ2NzSUdWc2JTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NkTmFYTnRZWFJqYUdsdVp5QmphR2xzWkU1dlpHVnpJSFp6TGlCV1RtOWtaWE02SUNjc0lHVnNiUzVqYUdsc1pFNXZaR1Z6TENCamFHbHNaSEpsYmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaUFvYVhORVpXWW9aR0YwWVNrcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdaMWJHeEpiblp2YTJVZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUdSaGRHRXBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9JV2x6VW1WdVpHVnlaV1JOYjJSMWJHVW9hMlY1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWm5Wc2JFbHVkbTlyWlNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBiblp2YTJWRGNtVmhkR1ZJYjI5cmN5aDJibTlrWlN3Z2FXNXpaWEowWldSV2JtOWtaVkYxWlhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2doWm5Wc2JFbHVkbTlyWlNBbUppQmtZWFJoV3lkamJHRnpjeWRkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnWlc1emRYSmxJR052Ykd4bFkzUnBibWNnWkdWd2N5Qm1iM0lnWkdWbGNDQmpiR0Z6Y3lCaWFXNWthVzVuY3lCbWIzSWdablYwZFhKbElIVndaR0YwWlhOY2JpQWdJQ0FnSUNBZ0lDQjBjbUYyWlhKelpTaGtZWFJoV3lkamJHRnpjeWRkS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pXeHRMbVJoZEdFZ0lUMDlJSFp1YjJSbExuUmxlSFFwSUh0Y2JpQWdJQ0FnSUdWc2JTNWtZWFJoSUQwZ2RtNXZaR1V1ZEdWNGREdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFJ5ZFdWY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlHRnpjMlZ5ZEU1dlpHVk5ZWFJqYUNBb2JtOWtaU3dnZG01dlpHVXNJR2x1VmxCeVpTa2dlMXh1SUNBZ0lHbG1JQ2hwYzBSbFppaDJibTlrWlM1MFlXY3BLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkbTV2WkdVdWRHRm5MbWx1WkdWNFQyWW9KM1oxWlMxamIyMXdiMjVsYm5RbktTQTlQVDBnTUNCOGZDQW9YRzRnSUNBZ0lDQWdJQ0ZwYzFWdWEyNXZkMjVGYkdWdFpXNTBKQ1F4S0hadWIyUmxMQ0JwYmxaUWNtVXBJQ1ltWEc0Z0lDQWdJQ0FnSUhadWIyUmxMblJoWnk1MGIweHZkMlZ5UTJGelpTZ3BJRDA5UFNBb2JtOWtaUzUwWVdkT1lXMWxJQ1ltSUc1dlpHVXVkR0ZuVG1GdFpTNTBiMHh2ZDJWeVEyRnpaU2dwS1Z4dUlDQWdJQ0FnS1Z4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2JtOWtaUzV1YjJSbFZIbHdaU0E5UFQwZ0tIWnViMlJsTG1selEyOXRiV1Z1ZENBL0lEZ2dPaUF6S1Z4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJ3WVhSamFDQW9iMnhrVm01dlpHVXNJSFp1YjJSbExDQm9lV1J5WVhScGJtY3NJSEpsYlc5MlpVOXViSGtzSUhCaGNtVnVkRVZzYlN3Z2NtVm1SV3h0S1NCN1hHNGdJQ0FnYVdZZ0tHbHpWVzVrWldZb2RtNXZaR1VwS1NCN1hHNGdJQ0FnSUNCcFppQW9hWE5FWldZb2IyeGtWbTV2WkdVcEtTQjdJR2x1ZG05clpVUmxjM1J5YjNsSWIyOXJLRzlzWkZadWIyUmxLVHNnZlZ4dUlDQWdJQ0FnY21WMGRYSnVYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJR2x6U1c1cGRHbGhiRkJoZEdOb0lEMGdabUZzYzJVN1hHNGdJQ0FnZG1GeUlHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTQTlJRnRkTzF4dVhHNGdJQ0FnYVdZZ0tHbHpWVzVrWldZb2IyeGtWbTV2WkdVcEtTQjdYRzRnSUNBZ0lDQXZMeUJsYlhCMGVTQnRiM1Z1ZENBb2JHbHJaV3g1SUdGeklHTnZiWEJ2Ym1WdWRDa3NJR055WldGMFpTQnVaWGNnY205dmRDQmxiR1Z0Wlc1MFhHNGdJQ0FnSUNCcGMwbHVhWFJwWVd4UVlYUmphQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQmpjbVZoZEdWRmJHMG9kbTV2WkdVc0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTd2djR0Z5Wlc1MFJXeHRMQ0J5WldaRmJHMHBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMllYSWdhWE5TWldGc1JXeGxiV1Z1ZENBOUlHbHpSR1ZtS0c5c1pGWnViMlJsTG01dlpHVlVlWEJsS1R0Y2JpQWdJQ0FnSUdsbUlDZ2hhWE5TWldGc1JXeGxiV1Z1ZENBbUppQnpZVzFsVm01dlpHVW9iMnhrVm01dlpHVXNJSFp1YjJSbEtTa2dlMXh1SUNBZ0lDQWdJQ0F2THlCd1lYUmphQ0JsZUdsemRHbHVaeUJ5YjI5MElHNXZaR1ZjYmlBZ0lDQWdJQ0FnY0dGMFkyaFdibTlrWlNodmJHUldibTlrWlN3Z2RtNXZaR1VzSUdsdWMyVnlkR1ZrVm01dlpHVlJkV1YxWlN3Z2NtVnRiM1psVDI1c2VTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYVhOU1pXRnNSV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUM4dklHMXZkVzUwYVc1bklIUnZJR0VnY21WaGJDQmxiR1Z0Wlc1MFhHNGdJQ0FnSUNBZ0lDQWdMeThnWTJobFkyc2dhV1lnZEdocGN5QnBjeUJ6WlhKMlpYSXRjbVZ1WkdWeVpXUWdZMjl1ZEdWdWRDQmhibVFnYVdZZ2QyVWdZMkZ1SUhCbGNtWnZjbTFjYmlBZ0lDQWdJQ0FnSUNBdkx5QmhJSE4xWTJObGMzTm1kV3dnYUhsa2NtRjBhVzl1TGx4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h2YkdSV2JtOWtaUzV1YjJSbFZIbHdaU0E5UFQwZ01TQW1KaUJ2YkdSV2JtOWtaUzVvWVhOQmRIUnlhV0oxZEdVb1UxTlNYMEZVVkZJcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJHUldibTlrWlM1eVpXMXZkbVZCZEhSeWFXSjFkR1VvVTFOU1gwRlVWRklwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhSGxrY21GMGFXNW5JRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR2x6VkhKMVpTaG9lV1J5WVhScGJtY3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYUhsa2NtRjBaU2h2YkdSV2JtOWtaU3dnZG01dlpHVXNJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1MmIydGxTVzV6WlhKMFNHOXZheWgyYm05a1pTd2dhVzV6WlhKMFpXUldibTlrWlZGMVpYVmxMQ0IwY25WbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc5c1pGWnViMlJsWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5WR2hsSUdOc2FXVnVkQzF6YVdSbElISmxibVJsY21Wa0lIWnBjblIxWVd3Z1JFOU5JSFJ5WldVZ2FYTWdibTkwSUcxaGRHTm9hVzVuSUNjZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZHpaWEoyWlhJdGNtVnVaR1Z5WldRZ1kyOXVkR1Z1ZEM0Z1ZHaHBjeUJwY3lCc2FXdGxiSGtnWTJGMWMyVmtJR0o1SUdsdVkyOXljbVZqZENBbklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5TRlJOVENCdFlYSnJkWEFzSUdadmNpQmxlR0Z0Y0d4bElHNWxjM1JwYm1jZ1lteHZZMnN0YkdWMlpXd2daV3hsYldWdWRITWdhVzV6YVdSbElDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2M4Y0Q0c0lHOXlJRzFwYzNOcGJtY2dQSFJpYjJSNVBpNGdRbUZwYkdsdVp5Qm9lV1J5WVhScGIyNGdZVzVrSUhCbGNtWnZjbTFwYm1jZ0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMloxYkd3Z1kyeHBaVzUwTFhOcFpHVWdjbVZ1WkdWeUxpZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1pXbDBhR1Z5SUc1dmRDQnpaWEoyWlhJdGNtVnVaR1Z5WldRc0lHOXlJR2g1WkhKaGRHbHZiaUJtWVdsc1pXUXVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1kzSmxZWFJsSUdGdUlHVnRjSFI1SUc1dlpHVWdZVzVrSUhKbGNHeGhZMlVnYVhSY2JpQWdJQ0FnSUNBZ0lDQnZiR1JXYm05a1pTQTlJR1Z0Y0hSNVRtOWtaVUYwS0c5c1pGWnViMlJsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUhKbGNHeGhZMmx1WnlCbGVHbHpkR2x1WnlCbGJHVnRaVzUwWEc0Z0lDQWdJQ0FnSUhaaGNpQnZiR1JGYkcwZ1BTQnZiR1JXYm05a1pTNWxiRzA3WEc0Z0lDQWdJQ0FnSUhaaGNpQndZWEpsYm5SRmJHMGtNU0E5SUc1dlpHVlBjSE11Y0dGeVpXNTBUbTlrWlNodmJHUkZiRzBwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJR055WldGMFpTQnVaWGNnYm05a1pWeHVJQ0FnSUNBZ0lDQmpjbVZoZEdWRmJHMG9YRzRnSUNBZ0lDQWdJQ0FnZG01dlpHVXNYRzRnSUNBZ0lDQWdJQ0FnYVc1elpYSjBaV1JXYm05a1pWRjFaWFZsTEZ4dUlDQWdJQ0FnSUNBZ0lDOHZJR1Y0ZEhKbGJXVnNlU0J5WVhKbElHVmtaMlVnWTJGelpUb2daRzhnYm05MElHbHVjMlZ5ZENCcFppQnZiR1FnWld4bGJXVnVkQ0JwY3lCcGJpQmhYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2JHVmhkbWx1WnlCMGNtRnVjMmwwYVc5dUxpQlBibXg1SUdoaGNIQmxibk1nZDJobGJpQmpiMjFpYVc1cGJtY2dkSEpoYm5OcGRHbHZiaUFyWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdhMlZsY0MxaGJHbDJaU0FySUVoUFEzTXVJQ2dqTkRVNU1DbGNiaUFnSUNBZ0lDQWdJQ0J2YkdSRmJHMHVYMnhsWVhabFEySWdQeUJ1ZFd4c0lEb2djR0Z5Wlc1MFJXeHRKREVzWEc0Z0lDQWdJQ0FnSUNBZ2JtOWtaVTl3Y3k1dVpYaDBVMmxpYkdsdVp5aHZiR1JGYkcwcFhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2RYQmtZWFJsSUhCaGNtVnVkQ0J3YkdGalpXaHZiR1JsY2lCdWIyUmxJR1ZzWlcxbGJuUXNJSEpsWTNWeWMybDJaV3g1WEc0Z0lDQWdJQ0FnSUdsbUlDaHBjMFJsWmloMmJtOWtaUzV3WVhKbGJuUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJR0Z1WTJWemRHOXlJRDBnZG01dlpHVXVjR0Z5Wlc1ME8xeHVJQ0FnSUNBZ0lDQWdJSFpoY2lCd1lYUmphR0ZpYkdVZ1BTQnBjMUJoZEdOb1lXSnNaU2gyYm05a1pTazdYRzRnSUNBZ0lDQWdJQ0FnZDJocGJHVWdLR0Z1WTJWemRHOXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR05pY3k1a1pYTjBjbTk1TG14bGJtZDBhRHNnS3l0cEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmljeTVrWlhOMGNtOTVXMmxkS0dGdVkyVnpkRzl5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnVZMlZ6ZEc5eUxtVnNiU0E5SUhadWIyUmxMbVZzYlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNod1lYUmphR0ZpYkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTUXhJRDBnTURzZ2FTUXhJRHdnWTJKekxtTnlaV0YwWlM1c1pXNW5kR2c3SUNzcmFTUXhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJKekxtTnlaV0YwWlZ0cEpERmRLR1Z0Y0hSNVRtOWtaU3dnWVc1alpYTjBiM0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUNNMk5URXpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2x1ZG05clpTQnBibk5sY25RZ2FHOXZhM01nZEdoaGRDQnRZWGtnYUdGMlpTQmlaV1Z1SUcxbGNtZGxaQ0JpZVNCamNtVmhkR1VnYUc5dmEzTXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1V1Wnk0Z1ptOXlJR1JwY21WamRHbDJaWE1nZEdoaGRDQjFjMlZ6SUhSb1pTQmNJbWx1YzJWeWRHVmtYQ0lnYUc5dmF5NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR2x1YzJWeWRDQTlJR0Z1WTJWemRHOXlMbVJoZEdFdWFHOXZheTVwYm5ObGNuUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwYm5ObGNuUXViV1Z5WjJWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYzNSaGNuUWdZWFFnYVc1a1pYZ2dNU0IwYnlCaGRtOXBaQ0J5WlMxcGJuWnZhMmx1WnlCamIyMXdiMjVsYm5RZ2JXOTFiblJsWkNCb2IyOXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhU1F5SUQwZ01Uc2dhU1F5SUR3Z2FXNXpaWEowTG1adWN5NXNaVzVuZEdnN0lHa2tNaXNyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibk5sY25RdVptNXpXMmtrTWwwb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsWjJsemRHVnlVbVZtS0dGdVkyVnpkRzl5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnVZMlZ6ZEc5eUlEMGdZVzVqWlhOMGIzSXVjR0Z5Wlc1ME8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJR1JsYzNSeWIza2diMnhrSUc1dlpHVmNiaUFnSUNBZ0lDQWdhV1lnS0dselJHVm1LSEJoY21WdWRFVnNiU1F4S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsYlc5MlpWWnViMlJsY3lod1lYSmxiblJGYkcwa01Td2dXMjlzWkZadWIyUmxYU3dnTUN3Z01DazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYVhORVpXWW9iMnhrVm01dlpHVXVkR0ZuS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2x1ZG05clpVUmxjM1J5YjNsSWIyOXJLRzlzWkZadWIyUmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR2x1ZG05clpVbHVjMlZ5ZEVodmIyc29kbTV2WkdVc0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTd2dhWE5KYm1sMGFXRnNVR0YwWTJncE8xeHVJQ0FnSUhKbGRIVnliaUIyYm05a1pTNWxiRzFjYmlBZ2ZWeHVmVnh1WEc0dktpQWdLaTljYmx4dWRtRnlJR1JwY21WamRHbDJaWE1nUFNCN1hHNGdJR055WldGMFpUb2dkWEJrWVhSbFJHbHlaV04wYVhabGN5eGNiaUFnZFhCa1lYUmxPaUIxY0dSaGRHVkVhWEpsWTNScGRtVnpMRnh1SUNCa1pYTjBjbTk1T2lCbWRXNWpkR2x2YmlCMWJtSnBibVJFYVhKbFkzUnBkbVZ6SUNoMmJtOWtaU2tnZTF4dUlDQWdJSFZ3WkdGMFpVUnBjbVZqZEdsMlpYTW9kbTV2WkdVc0lHVnRjSFI1VG05a1pTazdYRzRnSUgxY2JuMDdYRzVjYm1aMWJtTjBhVzl1SUhWd1pHRjBaVVJwY21WamRHbDJaWE1nS0c5c1pGWnViMlJsTENCMmJtOWtaU2tnZTF4dUlDQnBaaUFvYjJ4a1ZtNXZaR1V1WkdGMFlTNWthWEpsWTNScGRtVnpJSHg4SUhadWIyUmxMbVJoZEdFdVpHbHlaV04wYVhabGN5a2dlMXh1SUNBZ0lGOTFjR1JoZEdVb2IyeGtWbTV2WkdVc0lIWnViMlJsS1R0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmZkWEJrWVhSbElDaHZiR1JXYm05a1pTd2dkbTV2WkdVcElIdGNiaUFnZG1GeUlHbHpRM0psWVhSbElEMGdiMnhrVm01dlpHVWdQVDA5SUdWdGNIUjVUbTlrWlR0Y2JpQWdkbUZ5SUdselJHVnpkSEp2ZVNBOUlIWnViMlJsSUQwOVBTQmxiWEIwZVU1dlpHVTdYRzRnSUhaaGNpQnZiR1JFYVhKeklEMGdibTl5YldGc2FYcGxSR2x5WldOMGFYWmxjeVF4S0c5c1pGWnViMlJsTG1SaGRHRXVaR2x5WldOMGFYWmxjeXdnYjJ4a1ZtNXZaR1V1WTI5dWRHVjRkQ2s3WEc0Z0lIWmhjaUJ1WlhkRWFYSnpJRDBnYm05eWJXRnNhWHBsUkdseVpXTjBhWFpsY3lReEtIWnViMlJsTG1SaGRHRXVaR2x5WldOMGFYWmxjeXdnZG01dlpHVXVZMjl1ZEdWNGRDazdYRzVjYmlBZ2RtRnlJR1JwY25OWGFYUm9TVzV6WlhKMElEMGdXMTA3WEc0Z0lIWmhjaUJrYVhKelYybDBhRkJ2YzNSd1lYUmphQ0E5SUZ0ZE8xeHVYRzRnSUhaaGNpQnJaWGtzSUc5c1pFUnBjaXdnWkdseU8xeHVJQ0JtYjNJZ0tHdGxlU0JwYmlCdVpYZEVhWEp6S1NCN1hHNGdJQ0FnYjJ4a1JHbHlJRDBnYjJ4a1JHbHljMXRyWlhsZE8xeHVJQ0FnSUdScGNpQTlJRzVsZDBScGNuTmJhMlY1WFR0Y2JpQWdJQ0JwWmlBb0lXOXNaRVJwY2lrZ2UxeHVJQ0FnSUNBZ0x5OGdibVYzSUdScGNtVmpkR2wyWlN3Z1ltbHVaRnh1SUNBZ0lDQWdZMkZzYkVodmIyc2tNU2hrYVhJc0lDZGlhVzVrSnl3Z2RtNXZaR1VzSUc5c1pGWnViMlJsS1R0Y2JpQWdJQ0FnSUdsbUlDaGthWEl1WkdWbUlDWW1JR1JwY2k1a1pXWXVhVzV6WlhKMFpXUXBJSHRjYmlBZ0lDQWdJQ0FnWkdseWMxZHBkR2hKYm5ObGNuUXVjSFZ6YUNoa2FYSXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBdkx5QmxlR2x6ZEdsdVp5QmthWEpsWTNScGRtVXNJSFZ3WkdGMFpWeHVJQ0FnSUNBZ1pHbHlMbTlzWkZaaGJIVmxJRDBnYjJ4a1JHbHlMblpoYkhWbE8xeHVJQ0FnSUNBZ1kyRnNiRWh2YjJza01TaGthWElzSUNkMWNHUmhkR1VuTENCMmJtOWtaU3dnYjJ4a1ZtNXZaR1VwTzF4dUlDQWdJQ0FnYVdZZ0tHUnBjaTVrWldZZ0ppWWdaR2x5TG1SbFppNWpiMjF3YjI1bGJuUlZjR1JoZEdWa0tTQjdYRzRnSUNBZ0lDQWdJR1JwY25OWGFYUm9VRzl6ZEhCaGRHTm9MbkIxYzJnb1pHbHlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JwWmlBb1pHbHljMWRwZEdoSmJuTmxjblF1YkdWdVozUm9LU0I3WEc0Z0lDQWdkbUZ5SUdOaGJHeEpibk5sY25RZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdScGNuTlhhWFJvU1c1elpYSjBMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHTmhiR3hJYjI5ckpERW9aR2x5YzFkcGRHaEpibk5sY25SYmFWMHNJQ2RwYm5ObGNuUmxaQ2NzSUhadWIyUmxMQ0J2YkdSV2JtOWtaU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmlBZ0lDQnBaaUFvYVhORGNtVmhkR1VwSUh0Y2JpQWdJQ0FnSUcxbGNtZGxWazV2WkdWSWIyOXJLSFp1YjJSbExDQW5hVzV6WlhKMEp5d2dZMkZzYkVsdWMyVnlkQ2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHTmhiR3hKYm5ObGNuUW9LVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JwWmlBb1pHbHljMWRwZEdoUWIzTjBjR0YwWTJndWJHVnVaM1JvS1NCN1hHNGdJQ0FnYldWeVoyVldUbTlrWlVodmIyc29kbTV2WkdVc0lDZHdiM04wY0dGMFkyZ25MQ0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHUnBjbk5YYVhSb1VHOXpkSEJoZEdOb0xteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUdOaGJHeEliMjlySkRFb1pHbHljMWRwZEdoUWIzTjBjR0YwWTJoYmFWMHNJQ2RqYjIxd2IyNWxiblJWY0dSaGRHVmtKeXdnZG01dlpHVXNJRzlzWkZadWIyUmxLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdsbUlDZ2hhWE5EY21WaGRHVXBJSHRjYmlBZ0lDQm1iM0lnS0d0bGVTQnBiaUJ2YkdSRWFYSnpLU0I3WEc0Z0lDQWdJQ0JwWmlBb0lXNWxkMFJwY25OYmEyVjVYU2tnZTF4dUlDQWdJQ0FnSUNBdkx5QnVieUJzYjI1blpYSWdjSEpsYzJWdWRDd2dkVzVpYVc1a1hHNGdJQ0FnSUNBZ0lHTmhiR3hJYjI5ckpERW9iMnhrUkdseWMxdHJaWGxkTENBbmRXNWlhVzVrSnl3Z2IyeGtWbTV2WkdVc0lHOXNaRlp1YjJSbExDQnBjMFJsYzNSeWIza3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzUyWVhJZ1pXMXdkSGxOYjJScFptbGxjbk1nUFNCUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cE8xeHVYRzVtZFc1amRHbHZiaUJ1YjNKdFlXeHBlbVZFYVhKbFkzUnBkbVZ6SkRFZ0tGeHVJQ0JrYVhKekxGeHVJQ0IyYlZ4dUtTQjdYRzRnSUhaaGNpQnlaWE1nUFNCUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cE8xeHVJQ0JwWmlBb0lXUnBjbk1wSUh0Y2JpQWdJQ0F2THlBa1pteHZkeTFrYVhOaFlteGxMV3hwYm1WY2JpQWdJQ0J5WlhSMWNtNGdjbVZ6WEc0Z0lIMWNiaUFnZG1GeUlHa3NJR1JwY2p0Y2JpQWdabTl5SUNocElEMGdNRHNnYVNBOElHUnBjbk11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNCa2FYSWdQU0JrYVhKelcybGRPMXh1SUNBZ0lHbG1JQ2doWkdseUxtMXZaR2xtYVdWeWN5a2dlMXh1SUNBZ0lDQWdMeThnSkdac2IzY3RaR2x6WVdKc1pTMXNhVzVsWEc0Z0lDQWdJQ0JrYVhJdWJXOWthV1pwWlhKeklEMGdaVzF3ZEhsTmIyUnBabWxsY25NN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsYzF0blpYUlNZWGRFYVhKT1lXMWxLR1JwY2lsZElEMGdaR2x5TzF4dUlDQWdJR1JwY2k1a1pXWWdQU0J5WlhOdmJIWmxRWE56WlhRb2RtMHVKRzl3ZEdsdmJuTXNJQ2RrYVhKbFkzUnBkbVZ6Snl3Z1pHbHlMbTVoYldVc0lIUnlkV1VwTzF4dUlDQjlYRzRnSUM4dklDUm1iRzkzTFdScGMyRmliR1V0YkdsdVpWeHVJQ0J5WlhSMWNtNGdjbVZ6WEc1OVhHNWNibVoxYm1OMGFXOXVJR2RsZEZKaGQwUnBjazVoYldVZ0tHUnBjaWtnZTF4dUlDQnlaWFIxY200Z1pHbHlMbkpoZDA1aGJXVWdmSHdnS0Noa2FYSXVibUZ0WlNrZ0t5QmNJaTVjSWlBcklDaFBZbXBsWTNRdWEyVjVjeWhrYVhJdWJXOWthV1pwWlhKeklIeDhJSHQ5S1M1cWIybHVLQ2N1SnlrcEtWeHVmVnh1WEc1bWRXNWpkR2x2YmlCallXeHNTRzl2YXlReElDaGthWElzSUdodmIyc3NJSFp1YjJSbExDQnZiR1JXYm05a1pTd2dhWE5FWlhOMGNtOTVLU0I3WEc0Z0lIWmhjaUJtYmlBOUlHUnBjaTVrWldZZ0ppWWdaR2x5TG1SbFpsdG9iMjlyWFR0Y2JpQWdhV1lnS0dadUtTQjdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJR1p1S0hadWIyUmxMbVZzYlN3Z1pHbHlMQ0IyYm05a1pTd2diMnhrVm01dlpHVXNJR2x6UkdWemRISnZlU2s3WEc0Z0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnYUdGdVpHeGxSWEp5YjNJb1pTd2dkbTV2WkdVdVkyOXVkR1Y0ZEN3Z0tGd2laR2x5WldOMGFYWmxJRndpSUNzZ0tHUnBjaTV1WVcxbEtTQXJJRndpSUZ3aUlDc2dhRzl2YXlBcklGd2lJR2h2YjJ0Y0lpa3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzUyWVhJZ1ltRnpaVTF2WkhWc1pYTWdQU0JiWEc0Z0lISmxaaXhjYmlBZ1pHbHlaV04wYVhabGMxeHVYVHRjYmx4dUx5b2dJQ292WEc1Y2JtWjFibU4wYVc5dUlIVndaR0YwWlVGMGRISnpJQ2h2YkdSV2JtOWtaU3dnZG01dlpHVXBJSHRjYmlBZ2RtRnlJRzl3ZEhNZ1BTQjJibTlrWlM1amIyMXdiMjVsYm5SUGNIUnBiMjV6TzF4dUlDQnBaaUFvYVhORVpXWW9iM0IwY3lrZ0ppWWdiM0IwY3k1RGRHOXlMbTl3ZEdsdmJuTXVhVzVvWlhKcGRFRjBkSEp6SUQwOVBTQm1ZV3h6WlNrZ2UxeHVJQ0FnSUhKbGRIVnlibHh1SUNCOVhHNGdJR2xtSUNocGMxVnVaR1ZtS0c5c1pGWnViMlJsTG1SaGRHRXVZWFIwY25NcElDWW1JR2x6Vlc1a1pXWW9kbTV2WkdVdVpHRjBZUzVoZEhSeWN5a3BJSHRjYmlBZ0lDQnlaWFIxY201Y2JpQWdmVnh1SUNCMllYSWdhMlY1TENCamRYSXNJRzlzWkR0Y2JpQWdkbUZ5SUdWc2JTQTlJSFp1YjJSbExtVnNiVHRjYmlBZ2RtRnlJRzlzWkVGMGRISnpJRDBnYjJ4a1ZtNXZaR1V1WkdGMFlTNWhkSFJ5Y3lCOGZDQjdmVHRjYmlBZ2RtRnlJR0YwZEhKeklEMGdkbTV2WkdVdVpHRjBZUzVoZEhSeWN5QjhmQ0I3ZlR0Y2JpQWdMeThnWTJ4dmJtVWdiMkp6WlhKMlpXUWdiMkpxWldOMGN5d2dZWE1nZEdobElIVnpaWElnY0hKdlltRmliSGtnZDJGdWRITWdkRzhnYlhWMFlYUmxJR2wwWEc0Z0lHbG1JQ2hwYzBSbFppaGhkSFJ5Y3k1ZlgyOWlYMThwS1NCN1hHNGdJQ0FnWVhSMGNuTWdQU0IyYm05a1pTNWtZWFJoTG1GMGRISnpJRDBnWlhoMFpXNWtLSHQ5TENCaGRIUnljeWs3WEc0Z0lIMWNibHh1SUNCbWIzSWdLR3RsZVNCcGJpQmhkSFJ5Y3lrZ2UxeHVJQ0FnSUdOMWNpQTlJR0YwZEhKelcydGxlVjA3WEc0Z0lDQWdiMnhrSUQwZ2IyeGtRWFIwY25OYmEyVjVYVHRjYmlBZ0lDQnBaaUFvYjJ4a0lDRTlQU0JqZFhJcElIdGNiaUFnSUNBZ0lITmxkRUYwZEhJb1pXeHRMQ0JyWlhrc0lHTjFjaWs3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJQzh2SUNNME16a3hPaUJwYmlCSlJUa3NJSE5sZEhScGJtY2dkSGx3WlNCallXNGdjbVZ6WlhRZ2RtRnNkV1VnWm05eUlHbHVjSFYwVzNSNWNHVTljbUZrYVc5ZFhHNGdJQzh2SUNNMk5qWTJPaUJKUlM5RlpHZGxJR1p2Y21ObGN5QndjbTluY21WemN5QjJZV3gxWlNCa2IzZHVJSFJ2SURFZ1ltVm1iM0psSUhObGRIUnBibWNnWVNCdFlYaGNiaUFnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdsbUlDb3ZYRzRnSUdsbUlDZ29hWE5KUlNCOGZDQnBjMFZrWjJVcElDWW1JR0YwZEhKekxuWmhiSFZsSUNFOVBTQnZiR1JCZEhSeWN5NTJZV3gxWlNrZ2UxeHVJQ0FnSUhObGRFRjBkSElvWld4dExDQW5kbUZzZFdVbkxDQmhkSFJ5Y3k1MllXeDFaU2s3WEc0Z0lIMWNiaUFnWm05eUlDaHJaWGtnYVc0Z2IyeGtRWFIwY25NcElIdGNiaUFnSUNCcFppQW9hWE5WYm1SbFppaGhkSFJ5YzF0clpYbGRLU2tnZTF4dUlDQWdJQ0FnYVdZZ0tHbHpXR3hwYm1zb2EyVjVLU2tnZTF4dUlDQWdJQ0FnSUNCbGJHMHVjbVZ0YjNabFFYUjBjbWxpZFhSbFRsTW9lR3hwYm10T1V5d2daMlYwV0d4cGJtdFFjbTl3S0d0bGVTa3BPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2doYVhORmJuVnRaWEpoZEdWa1FYUjBjaWhyWlhrcEtTQjdYRzRnSUNBZ0lDQWdJR1ZzYlM1eVpXMXZkbVZCZEhSeWFXSjFkR1VvYTJWNUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdjMlYwUVhSMGNpQW9aV3dzSUd0bGVTd2dkbUZzZFdVcElIdGNiaUFnYVdZZ0tHbHpRbTl2YkdWaGJrRjBkSElvYTJWNUtTa2dlMXh1SUNBZ0lDOHZJSE5sZENCaGRIUnlhV0oxZEdVZ1ptOXlJR0pzWVc1cklIWmhiSFZsWEc0Z0lDQWdMeThnWlM1bkxpQThiM0IwYVc5dUlHUnBjMkZpYkdWa1BsTmxiR1ZqZENCdmJtVThMMjl3ZEdsdmJqNWNiaUFnSUNCcFppQW9hWE5HWVd4emVVRjBkSEpXWVd4MVpTaDJZV3gxWlNrcElIdGNiaUFnSUNBZ0lHVnNMbkpsYlc5MlpVRjBkSEpwWW5WMFpTaHJaWGtwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQXZMeUIwWldOb2JtbGpZV3hzZVNCaGJHeHZkMloxYkd4elkzSmxaVzRnYVhNZ1lTQmliMjlzWldGdUlHRjBkSEpwWW5WMFpTQm1iM0lnUEdsbWNtRnRaVDRzWEc0Z0lDQWdJQ0F2THlCaWRYUWdSbXhoYzJnZ1pYaHdaV04wY3lCaElIWmhiSFZsSUc5bUlGd2lkSEoxWlZ3aUlIZG9aVzRnZFhObFpDQnZiaUE4WlcxaVpXUStJSFJoWjF4dUlDQWdJQ0FnZG1Gc2RXVWdQU0JyWlhrZ1BUMDlJQ2RoYkd4dmQyWjFiR3h6WTNKbFpXNG5JQ1ltSUdWc0xuUmhaMDVoYldVZ1BUMDlJQ2RGVFVKRlJDZGNiaUFnSUNBZ0lDQWdQeUFuZEhKMVpTZGNiaUFnSUNBZ0lDQWdPaUJyWlhrN1hHNGdJQ0FnSUNCbGJDNXpaWFJCZEhSeWFXSjFkR1VvYTJWNUxDQjJZV3gxWlNrN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2FXWWdLR2x6Ulc1MWJXVnlZWFJsWkVGMGRISW9hMlY1S1NrZ2UxeHVJQ0FnSUdWc0xuTmxkRUYwZEhKcFluVjBaU2hyWlhrc0lHbHpSbUZzYzNsQmRIUnlWbUZzZFdVb2RtRnNkV1VwSUh4OElIWmhiSFZsSUQwOVBTQW5abUZzYzJVbklEOGdKMlpoYkhObEp5QTZJQ2QwY25WbEp5azdYRzRnSUgwZ1pXeHpaU0JwWmlBb2FYTlliR2x1YXloclpYa3BLU0I3WEc0Z0lDQWdhV1lnS0dselJtRnNjM2xCZEhSeVZtRnNkV1VvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0JsYkM1eVpXMXZkbVZCZEhSeWFXSjFkR1ZPVXloNGJHbHVhMDVUTENCblpYUlliR2x1YTFCeWIzQW9hMlY1S1NrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR1ZzTG5ObGRFRjBkSEpwWW5WMFpVNVRLSGhzYVc1clRsTXNJR3RsZVN3Z2RtRnNkV1VwTzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0JwWmlBb2FYTkdZV3h6ZVVGMGRISldZV3gxWlNoMllXeDFaU2twSUh0Y2JpQWdJQ0FnSUdWc0xuSmxiVzkyWlVGMGRISnBZblYwWlNoclpYa3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBdkx5QWpOekV6T0RvZ1NVVXhNQ0FtSURFeElHWnBjbVZ6SUdsdWNIVjBJR1YyWlc1MElIZG9aVzRnYzJWMGRHbHVaeUJ3YkdGalpXaHZiR1JsY2lCdmJseHVJQ0FnSUNBZ0x5OGdQSFJsZUhSaGNtVmhQaTR1TGlCaWJHOWpheUIwYUdVZ1ptbHljM1FnYVc1d2RYUWdaWFpsYm5RZ1lXNWtJSEpsYlc5MlpTQjBhR1VnWW14dlkydGxjbHh1SUNBZ0lDQWdMeThnYVcxdFpXUnBZWFJsYkhrdVhHNGdJQ0FnSUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2FXWWdLaTljYmlBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ2FYTkpSU0FtSmlBaGFYTkpSVGtnSmlaY2JpQWdJQ0FnSUNBZ1pXd3VkR0ZuVG1GdFpTQTlQVDBnSjFSRldGUkJVa1ZCSnlBbUpseHVJQ0FnSUNBZ0lDQnJaWGtnUFQwOUlDZHdiR0ZqWldodmJHUmxjaWNnSmlZZ0lXVnNMbDlmYVdWd2FGeHVJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCaWJHOWphMlZ5SUQwZ1puVnVZM1JwYjI0Z0tHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCbExuTjBiM0JKYlcxbFpHbGhkR1ZRY205d1lXZGhkR2x2YmlncE8xeHVJQ0FnSUNBZ0lDQWdJR1ZzTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0oybHVjSFYwSnl3Z1lteHZZMnRsY2lrN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJR1ZzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJsdWNIVjBKeXdnWW14dlkydGxjaWs3WEc0Z0lDQWdJQ0FnSUM4dklDUm1iRzkzTFdScGMyRmliR1V0YkdsdVpWeHVJQ0FnSUNBZ0lDQmxiQzVmWDJsbGNHZ2dQU0IwY25WbE95QXZLaUJKUlNCd2JHRmpaV2h2YkdSbGNpQndZWFJqYUdWa0lDb3ZYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmxiQzV6WlhSQmRIUnlhV0oxZEdVb2EyVjVMQ0IyWVd4MVpTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNiblpoY2lCaGRIUnljeUE5SUh0Y2JpQWdZM0psWVhSbE9pQjFjR1JoZEdWQmRIUnljeXhjYmlBZ2RYQmtZWFJsT2lCMWNHUmhkR1ZCZEhSeWMxeHVmVHRjYmx4dUx5b2dJQ292WEc1Y2JtWjFibU4wYVc5dUlIVndaR0YwWlVOc1lYTnpJQ2h2YkdSV2JtOWtaU3dnZG01dlpHVXBJSHRjYmlBZ2RtRnlJR1ZzSUQwZ2RtNXZaR1V1Wld4dE8xeHVJQ0IyWVhJZ1pHRjBZU0E5SUhadWIyUmxMbVJoZEdFN1hHNGdJSFpoY2lCdmJHUkVZWFJoSUQwZ2IyeGtWbTV2WkdVdVpHRjBZVHRjYmlBZ2FXWWdLRnh1SUNBZ0lHbHpWVzVrWldZb1pHRjBZUzV6ZEdGMGFXTkRiR0Z6Y3lrZ0ppWmNiaUFnSUNCcGMxVnVaR1ZtS0dSaGRHRXVZMnhoYzNNcElDWW1JQ2hjYmlBZ0lDQWdJR2x6Vlc1a1pXWW9iMnhrUkdGMFlTa2dmSHdnS0Z4dUlDQWdJQ0FnSUNCcGMxVnVaR1ZtS0c5c1pFUmhkR0V1YzNSaGRHbGpRMnhoYzNNcElDWW1YRzRnSUNBZ0lDQWdJR2x6Vlc1a1pXWW9iMnhrUkdGMFlTNWpiR0Z6Y3lsY2JpQWdJQ0FnSUNsY2JpQWdJQ0FwWEc0Z0lDa2dlMXh1SUNBZ0lISmxkSFZ5Ymx4dUlDQjlYRzVjYmlBZ2RtRnlJR05zY3lBOUlHZGxia05zWVhOelJtOXlWbTV2WkdVb2RtNXZaR1VwTzF4dVhHNGdJQzh2SUdoaGJtUnNaU0IwY21GdWMybDBhVzl1SUdOc1lYTnpaWE5jYmlBZ2RtRnlJSFJ5WVc1emFYUnBiMjVEYkdGemN5QTlJR1ZzTGw5MGNtRnVjMmwwYVc5dVEyeGhjM05sY3p0Y2JpQWdhV1lnS0dselJHVm1LSFJ5WVc1emFYUnBiMjVEYkdGemN5a3BJSHRjYmlBZ0lDQmpiSE1nUFNCamIyNWpZWFFvWTJ4ekxDQnpkSEpwYm1kcFpubERiR0Z6Y3loMGNtRnVjMmwwYVc5dVEyeGhjM01wS1R0Y2JpQWdmVnh1WEc0Z0lDOHZJSE5sZENCMGFHVWdZMnhoYzNOY2JpQWdhV1lnS0dOc2N5QWhQVDBnWld3dVgzQnlaWFpEYkdGemN5a2dlMXh1SUNBZ0lHVnNMbk5sZEVGMGRISnBZblYwWlNnblkyeGhjM01uTENCamJITXBPMXh1SUNBZ0lHVnNMbDl3Y21WMlEyeGhjM01nUFNCamJITTdYRzRnSUgxY2JuMWNibHh1ZG1GeUlHdHNZWE56SUQwZ2UxeHVJQ0JqY21WaGRHVTZJSFZ3WkdGMFpVTnNZWE56TEZ4dUlDQjFjR1JoZEdVNklIVndaR0YwWlVOc1lYTnpYRzU5TzF4dVhHNHZLaUFnS2k5Y2JseHVMeW9nSUNvdlhHNWNibHh1WEc1Y2JseHVYRzVjYmx4dVhHNHZMeUJoWkdRZ1lTQnlZWGNnWVhSMGNpQW9kWE5sSUhSb2FYTWdhVzRnY0hKbFZISmhibk5tYjNKdGN5bGNibHh1WEc1Y2JseHVYRzVjYmx4dVhHNHZMeUJ1YjNSbE9pQjBhR2x6SUc5dWJIa2djbVZ0YjNabGN5QjBhR1VnWVhSMGNpQm1jbTl0SUhSb1pTQkJjbkpoZVNBb1lYUjBjbk5NYVhOMEtTQnpieUIwYUdGMElHbDBYRzR2THlCa2IyVnpiaWQwSUdkbGRDQndjbTlqWlhOelpXUWdZbmtnY0hKdlkyVnpjMEYwZEhKekxseHVMeThnUW5rZ1pHVm1ZWFZzZENCcGRDQmtiMlZ6SUU1UFZDQnlaVzF2ZG1VZ2FYUWdabkp2YlNCMGFHVWdiV0Z3SUNoaGRIUnljMDFoY0NrZ1ltVmpZWFZ6WlNCMGFHVWdiV0Z3SUdselhHNHZMeUJ1WldWa1pXUWdaSFZ5YVc1bklHTnZaR1ZuWlc0dVhHNWNiaThxSUNBcUwxeHVYRzR2S2lwY2JpQXFJRU55YjNOekxYQnNZWFJtYjNKdElHTnZaR1VnWjJWdVpYSmhkR2x2YmlCbWIzSWdZMjl0Y0c5dVpXNTBJSFl0Ylc5a1pXeGNiaUFxTDF4dVhHNWNiaThxS2x4dUlDb2dRM0p2YzNNdGNHeGhkR1p2Y20wZ1kyOWtaV2RsYmlCb1pXeHdaWElnWm05eUlHZGxibVZ5WVhScGJtY2dkaTF0YjJSbGJDQjJZV3gxWlNCaGMzTnBaMjV0Wlc1MElHTnZaR1V1WEc0Z0tpOWNibHh1THlvZ0lDb3ZYRzVjYmk4dklHbHVJSE52YldVZ1kyRnpaWE1zSUhSb1pTQmxkbVZ1ZENCMWMyVmtJR2hoY3lCMGJ5QmlaU0JrWlhSbGNtMXBibVZrSUdGMElISjFiblJwYldWY2JpOHZJSE52SUhkbElIVnpaV1FnYzI5dFpTQnlaWE5sY25abFpDQjBiMnRsYm5NZ1pIVnlhVzVuSUdOdmJYQnBiR1V1WEc1MllYSWdVa0ZPUjBWZlZFOUxSVTRnUFNBblgxOXlKenRjYm5aaGNpQkRTRVZEUzBKUFdGOVNRVVJKVDE5VVQwdEZUaUE5SUNkZlgyTW5PMXh1WEc0dktpQWdLaTljYmx4dUx5OGdibTl5YldGc2FYcGxJSFl0Ylc5a1pXd2daWFpsYm5RZ2RHOXJaVzV6SUhSb1lYUWdZMkZ1SUc5dWJIa2dZbVVnWkdWMFpYSnRhVzVsWkNCaGRDQnlkVzUwYVcxbExseHVMeThnYVhRbmN5QnBiWEJ2Y25SaGJuUWdkRzhnY0d4aFkyVWdkR2hsSUdWMlpXNTBJR0Z6SUhSb1pTQm1hWEp6ZENCcGJpQjBhR1VnWVhKeVlYa2dZbVZqWVhWelpWeHVMeThnZEdobElIZG9iMnhsSUhCdmFXNTBJR2x6SUdWdWMzVnlhVzVuSUhSb1pTQjJMVzF2WkdWc0lHTmhiR3hpWVdOcklHZGxkSE1nWTJGc2JHVmtJR0psWm05eVpWeHVMeThnZFhObGNpMWhkSFJoWTJobFpDQm9ZVzVrYkdWeWN5NWNibVoxYm1OMGFXOXVJRzV2Y20xaGJHbDZaVVYyWlc1MGN5QW9iMjRwSUh0Y2JpQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJR2xtSUNvdlhHNGdJR2xtSUNocGMwUmxaaWh2Ymx0U1FVNUhSVjlVVDB0RlRsMHBLU0I3WEc0Z0lDQWdMeThnU1VVZ2FXNXdkWFJiZEhsd1pUMXlZVzVuWlYwZ2IyNXNlU0J6ZFhCd2IzSjBjeUJnWTJoaGJtZGxZQ0JsZG1WdWRGeHVJQ0FnSUhaaGNpQmxkbVZ1ZENBOUlHbHpTVVVnUHlBblkyaGhibWRsSnlBNklDZHBibkIxZENjN1hHNGdJQ0FnYjI1YlpYWmxiblJkSUQwZ1cxMHVZMjl1WTJGMEtHOXVXMUpCVGtkRlgxUlBTMFZPWFN3Z2IyNWJaWFpsYm5SZElIeDhJRnRkS1R0Y2JpQWdJQ0JrWld4bGRHVWdiMjViVWtGT1IwVmZWRTlMUlU1ZE8xeHVJQ0I5WEc0Z0lDOHZJRlJvYVhNZ2QyRnpJRzl5YVdkcGJtRnNiSGtnYVc1MFpXNWtaV1FnZEc4Z1ptbDRJQ00wTlRJeElHSjFkQ0J1YnlCc2IyNW5aWElnYm1WalpYTnpZWEo1WEc0Z0lDOHZJR0ZtZEdWeUlESXVOUzRnUzJWbGNHbHVaeUJwZENCbWIzSWdZbUZqYTNkaGNtUnpJR052YlhCaGRDQjNhWFJvSUdkbGJtVnlZWFJsWkNCamIyUmxJR1p5YjIwZ1BDQXlMalJjYmlBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHbG1JQ292WEc0Z0lHbG1JQ2hwYzBSbFppaHZibHREU0VWRFMwSlBXRjlTUVVSSlQxOVVUMHRGVGwwcEtTQjdYRzRnSUNBZ2IyNHVZMmhoYm1kbElEMGdXMTB1WTI5dVkyRjBLRzl1VzBOSVJVTkxRazlZWDFKQlJFbFBYMVJQUzBWT1hTd2diMjR1WTJoaGJtZGxJSHg4SUZ0ZEtUdGNiaUFnSUNCa1pXeGxkR1VnYjI1YlEwaEZRMHRDVDFoZlVrRkVTVTlmVkU5TFJVNWRPMXh1SUNCOVhHNTlYRzVjYm5aaGNpQjBZWEpuWlhRa01UdGNibHh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxUMjVqWlVoaGJtUnNaWElnS0doaGJtUnNaWElzSUdWMlpXNTBMQ0JqWVhCMGRYSmxLU0I3WEc0Z0lIWmhjaUJmZEdGeVoyVjBJRDBnZEdGeVoyVjBKREU3SUM4dklITmhkbVVnWTNWeWNtVnVkQ0IwWVhKblpYUWdaV3hsYldWdWRDQnBiaUJqYkc5emRYSmxYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJ2Ym1ObFNHRnVaR3hsY2lBb0tTQjdYRzRnSUNBZ2RtRnlJSEpsY3lBOUlHaGhibVJzWlhJdVlYQndiSGtvYm5Wc2JDd2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQnBaaUFvY21WeklDRTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQnlaVzF2ZG1Va01paGxkbVZ1ZEN3Z2IyNWpaVWhoYm1Sc1pYSXNJR05oY0hSMWNtVXNJRjkwWVhKblpYUXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJoWkdRa01TQW9YRzRnSUdWMlpXNTBMRnh1SUNCb1lXNWtiR1Z5TEZ4dUlDQnZibU5sSkNReExGeHVJQ0JqWVhCMGRYSmxMRnh1SUNCd1lYTnphWFpsWEc0cElIdGNiaUFnYUdGdVpHeGxjaUE5SUhkcGRHaE5ZV055YjFSaGMyc29hR0Z1Wkd4bGNpazdYRzRnSUdsbUlDaHZibU5sSkNReEtTQjdJR2hoYm1Sc1pYSWdQU0JqY21WaGRHVlBibU5sU0dGdVpHeGxjaWhvWVc1a2JHVnlMQ0JsZG1WdWRDd2dZMkZ3ZEhWeVpTazdJSDFjYmlBZ2RHRnlaMlYwSkRFdVlXUmtSWFpsYm5STWFYTjBaVzVsY2loY2JpQWdJQ0JsZG1WdWRDeGNiaUFnSUNCb1lXNWtiR1Z5TEZ4dUlDQWdJSE4xY0hCdmNuUnpVR0Z6YzJsMlpWeHVJQ0FnSUNBZ1B5QjdJR05oY0hSMWNtVTZJR05oY0hSMWNtVXNJSEJoYzNOcGRtVTZJSEJoYzNOcGRtVWdmVnh1SUNBZ0lDQWdPaUJqWVhCMGRYSmxYRzRnSUNrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbGJXOTJaU1F5SUNoY2JpQWdaWFpsYm5Rc1hHNGdJR2hoYm1Sc1pYSXNYRzRnSUdOaGNIUjFjbVVzWEc0Z0lGOTBZWEpuWlhSY2Jpa2dlMXh1SUNBb1gzUmhjbWRsZENCOGZDQjBZWEpuWlhRa01Ta3VjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWhjYmlBZ0lDQmxkbVZ1ZEN4Y2JpQWdJQ0JvWVc1a2JHVnlMbDkzYVhSb1ZHRnpheUI4ZkNCb1lXNWtiR1Z5TEZ4dUlDQWdJR05oY0hSMWNtVmNiaUFnS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnZFhCa1lYUmxSRTlOVEdsemRHVnVaWEp6SUNodmJHUldibTlrWlN3Z2RtNXZaR1VwSUh0Y2JpQWdhV1lnS0dselZXNWtaV1lvYjJ4a1ZtNXZaR1V1WkdGMFlTNXZiaWtnSmlZZ2FYTlZibVJsWmloMmJtOWtaUzVrWVhSaExtOXVLU2tnZTF4dUlDQWdJSEpsZEhWeWJseHVJQ0I5WEc0Z0lIWmhjaUJ2YmlBOUlIWnViMlJsTG1SaGRHRXViMjRnZkh3Z2UzMDdYRzRnSUhaaGNpQnZiR1JQYmlBOUlHOXNaRlp1YjJSbExtUmhkR0V1YjI0Z2ZId2dlMzA3WEc0Z0lIUmhjbWRsZENReElEMGdkbTV2WkdVdVpXeHRPMXh1SUNCdWIzSnRZV3hwZW1WRmRtVnVkSE1vYjI0cE8xeHVJQ0IxY0dSaGRHVk1hWE4wWlc1bGNuTW9iMjRzSUc5c1pFOXVMQ0JoWkdRa01Td2djbVZ0YjNabEpESXNJSFp1YjJSbExtTnZiblJsZUhRcE8xeHVJQ0IwWVhKblpYUWtNU0E5SUhWdVpHVm1hVzVsWkR0Y2JuMWNibHh1ZG1GeUlHVjJaVzUwY3lBOUlIdGNiaUFnWTNKbFlYUmxPaUIxY0dSaGRHVkVUMDFNYVhOMFpXNWxjbk1zWEc0Z0lIVndaR0YwWlRvZ2RYQmtZWFJsUkU5TlRHbHpkR1Z1WlhKelhHNTlPMXh1WEc0dktpQWdLaTljYmx4dVpuVnVZM1JwYjI0Z2RYQmtZWFJsUkU5TlVISnZjSE1nS0c5c1pGWnViMlJsTENCMmJtOWtaU2tnZTF4dUlDQnBaaUFvYVhOVmJtUmxaaWh2YkdSV2JtOWtaUzVrWVhSaExtUnZiVkJ5YjNCektTQW1KaUJwYzFWdVpHVm1LSFp1YjJSbExtUmhkR0V1Wkc5dFVISnZjSE1wS1NCN1hHNGdJQ0FnY21WMGRYSnVYRzRnSUgxY2JpQWdkbUZ5SUd0bGVTd2dZM1Z5TzF4dUlDQjJZWElnWld4dElEMGdkbTV2WkdVdVpXeHRPMXh1SUNCMllYSWdiMnhrVUhKdmNITWdQU0J2YkdSV2JtOWtaUzVrWVhSaExtUnZiVkJ5YjNCeklIeDhJSHQ5TzF4dUlDQjJZWElnY0hKdmNITWdQU0IyYm05a1pTNWtZWFJoTG1SdmJWQnliM0J6SUh4OElIdDlPMXh1SUNBdkx5QmpiRzl1WlNCdlluTmxjblpsWkNCdlltcGxZM1J6TENCaGN5QjBhR1VnZFhObGNpQndjbTlpWVdKc2VTQjNZVzUwY3lCMGJ5QnRkWFJoZEdVZ2FYUmNiaUFnYVdZZ0tHbHpSR1ZtS0hCeWIzQnpMbDlmYjJKZlh5a3BJSHRjYmlBZ0lDQndjbTl3Y3lBOUlIWnViMlJsTG1SaGRHRXVaRzl0VUhKdmNITWdQU0JsZUhSbGJtUW9lMzBzSUhCeWIzQnpLVHRjYmlBZ2ZWeHVYRzRnSUdadmNpQW9hMlY1SUdsdUlHOXNaRkJ5YjNCektTQjdYRzRnSUNBZ2FXWWdLR2x6Vlc1a1pXWW9jSEp2Y0hOYmEyVjVYU2twSUh0Y2JpQWdJQ0FnSUdWc2JWdHJaWGxkSUQwZ0p5YzdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lHWnZjaUFvYTJWNUlHbHVJSEJ5YjNCektTQjdYRzRnSUNBZ1kzVnlJRDBnY0hKdmNITmJhMlY1WFR0Y2JpQWdJQ0F2THlCcFoyNXZjbVVnWTJocGJHUnlaVzRnYVdZZ2RHaGxJRzV2WkdVZ2FHRnpJSFJsZUhSRGIyNTBaVzUwSUc5eUlHbHVibVZ5U0ZSTlRDeGNiaUFnSUNBdkx5QmhjeUIwYUdWelpTQjNhV3hzSUhSb2NtOTNJR0YzWVhrZ1pYaHBjM1JwYm1jZ1JFOU5JRzV2WkdWeklHRnVaQ0JqWVhWelpTQnlaVzF2ZG1Gc0lHVnljbTl5YzF4dUlDQWdJQzh2SUc5dUlITjFZbk5sY1hWbGJuUWdjR0YwWTJobGN5QW9Jek16TmpBcFhHNGdJQ0FnYVdZZ0tHdGxlU0E5UFQwZ0ozUmxlSFJEYjI1MFpXNTBKeUI4ZkNCclpYa2dQVDA5SUNkcGJtNWxja2hVVFV3bktTQjdYRzRnSUNBZ0lDQnBaaUFvZG01dlpHVXVZMmhwYkdSeVpXNHBJSHNnZG01dlpHVXVZMmhwYkdSeVpXNHViR1Z1WjNSb0lEMGdNRHNnZlZ4dUlDQWdJQ0FnYVdZZ0tHTjFjaUE5UFQwZ2IyeGtVSEp2Y0hOYmEyVjVYU2tnZXlCamIyNTBhVzUxWlNCOVhHNGdJQ0FnSUNBdkx5QWpOall3TVNCM2IzSnJJR0Z5YjNWdVpDQkRhSEp2YldVZ2RtVnljMmx2YmlBOFBTQTFOU0JpZFdjZ2QyaGxjbVVnYzJsdVoyeGxJSFJsZUhST2IyUmxYRzRnSUNBZ0lDQXZMeUJ5WlhCc1lXTmxaQ0JpZVNCcGJtNWxja2hVVFV3dmRHVjRkRU52Ym5SbGJuUWdjbVYwWVdsdWN5QnBkSE1nY0dGeVpXNTBUbTlrWlNCd2NtOXdaWEowZVZ4dUlDQWdJQ0FnYVdZZ0tHVnNiUzVqYUdsc1pFNXZaR1Z6TG14bGJtZDBhQ0E5UFQwZ01Ta2dlMXh1SUNBZ0lDQWdJQ0JsYkcwdWNtVnRiM1psUTJocGJHUW9aV3h0TG1Ob2FXeGtUbTlrWlhOYk1GMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hyWlhrZ1BUMDlJQ2QyWVd4MVpTY3BJSHRjYmlBZ0lDQWdJQzh2SUhOMGIzSmxJSFpoYkhWbElHRnpJRjkyWVd4MVpTQmhjeUIzWld4c0lITnBibU5sWEc0Z0lDQWdJQ0F2THlCdWIyNHRjM1J5YVc1bklIWmhiSFZsY3lCM2FXeHNJR0psSUhOMGNtbHVaMmxtYVdWa1hHNGdJQ0FnSUNCbGJHMHVYM1poYkhWbElEMGdZM1Z5TzF4dUlDQWdJQ0FnTHk4Z1lYWnZhV1FnY21WelpYUjBhVzVuSUdOMWNuTnZjaUJ3YjNOcGRHbHZiaUIzYUdWdUlIWmhiSFZsSUdseklIUm9aU0J6WVcxbFhHNGdJQ0FnSUNCMllYSWdjM1J5UTNWeUlEMGdhWE5WYm1SbFppaGpkWElwSUQ4Z0p5Y2dPaUJUZEhKcGJtY29ZM1Z5S1R0Y2JpQWdJQ0FnSUdsbUlDaHphRzkxYkdSVmNHUmhkR1ZXWVd4MVpTaGxiRzBzSUhOMGNrTjFjaWtwSUh0Y2JpQWdJQ0FnSUNBZ1pXeHRMblpoYkhWbElEMGdjM1J5UTNWeU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JsYkcxYmEyVjVYU0E5SUdOMWNqdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVMeThnWTJobFkyc2djR3hoZEdadmNtMXpMM2RsWWk5MWRHbHNMMkYwZEhKekxtcHpJR0ZqWTJWd2RGWmhiSFZsWEc1Y2JseHVablZ1WTNScGIyNGdjMmh2ZFd4a1ZYQmtZWFJsVm1Gc2RXVWdLR1ZzYlN3Z1kyaGxZMnRXWVd3cElIdGNiaUFnY21WMGRYSnVJQ2doWld4dExtTnZiWEJ2YzJsdVp5QW1KaUFvWEc0Z0lDQWdaV3h0TG5SaFowNWhiV1VnUFQwOUlDZFBVRlJKVDA0bklIeDhYRzRnSUNBZ2FYTk9iM1JKYmtadlkzVnpRVzVrUkdseWRIa29aV3h0TENCamFHVmphMVpoYkNrZ2ZIeGNiaUFnSUNCcGMwUnBjblI1VjJsMGFFMXZaR2xtYVdWeWN5aGxiRzBzSUdOb1pXTnJWbUZzS1Z4dUlDQXBLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBjMDV2ZEVsdVJtOWpkWE5CYm1SRWFYSjBlU0FvWld4dExDQmphR1ZqYTFaaGJDa2dlMXh1SUNBdkx5QnlaWFIxY200Z2RISjFaU0IzYUdWdUlIUmxlSFJpYjNnZ0tDNXVkVzFpWlhJZ1lXNWtJQzUwY21sdEtTQnNiM05sY3lCbWIyTjFjeUJoYm1RZ2FYUnpJSFpoYkhWbElHbHpYRzRnSUM4dklHNXZkQ0JsY1hWaGJDQjBieUIwYUdVZ2RYQmtZWFJsWkNCMllXeDFaVnh1SUNCMllYSWdibTkwU1c1R2IyTjFjeUE5SUhSeWRXVTdYRzRnSUM4dklDTTJNVFUzWEc0Z0lDOHZJSGR2Y21zZ1lYSnZkVzVrSUVsRklHSjFaeUIzYUdWdUlHRmpZMlZ6YzJsdVp5QmtiMk4xYldWdWRDNWhZM1JwZG1WRmJHVnRaVzUwSUdsdUlHRnVJR2xtY21GdFpWeHVJQ0IwY25rZ2V5QnViM1JKYmtadlkzVnpJRDBnWkc5amRXMWxiblF1WVdOMGFYWmxSV3hsYldWdWRDQWhQVDBnWld4dE95QjlJR05oZEdOb0lDaGxLU0I3ZlZ4dUlDQnlaWFIxY200Z2JtOTBTVzVHYjJOMWN5QW1KaUJsYkcwdWRtRnNkV1VnSVQwOUlHTm9aV05yVm1Gc1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdselJHbHlkSGxYYVhSb1RXOWthV1pwWlhKeklDaGxiRzBzSUc1bGQxWmhiQ2tnZTF4dUlDQjJZWElnZG1Gc2RXVWdQU0JsYkcwdWRtRnNkV1U3WEc0Z0lIWmhjaUJ0YjJScFptbGxjbk1nUFNCbGJHMHVYM1pOYjJScFptbGxjbk03SUM4dklHbHVhbVZqZEdWa0lHSjVJSFl0Ylc5a1pXd2djblZ1ZEdsdFpWeHVJQ0JwWmlBb2FYTkVaV1lvYlc5a2FXWnBaWEp6S1NrZ2UxeHVJQ0FnSUdsbUlDaHRiMlJwWm1sbGNuTXViR0Y2ZVNrZ2UxeHVJQ0FnSUNBZ0x5OGdhVzV3ZFhSeklIZHBkR2dnYkdGNmVTQnphRzkxYkdRZ2IyNXNlU0JpWlNCMWNHUmhkR1ZrSUhkb1pXNGdibTkwSUdsdUlHWnZZM1Z6WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJWY2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0cxdlpHbG1hV1Z5Y3k1dWRXMWlaWElwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYjA1MWJXSmxjaWgyWVd4MVpTa2dJVDA5SUhSdlRuVnRZbVZ5S0c1bGQxWmhiQ2xjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLRzF2WkdsbWFXVnljeTUwY21sdEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1V1ZEhKcGJTZ3BJQ0U5UFNCdVpYZFdZV3d1ZEhKcGJTZ3BYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCMllXeDFaU0FoUFQwZ2JtVjNWbUZzWEc1OVhHNWNiblpoY2lCa2IyMVFjbTl3Y3lBOUlIdGNiaUFnWTNKbFlYUmxPaUIxY0dSaGRHVkVUMDFRY205d2N5eGNiaUFnZFhCa1lYUmxPaUIxY0dSaGRHVkVUMDFRY205d2MxeHVmVHRjYmx4dUx5b2dJQ292WEc1Y2JuWmhjaUJ3WVhKelpWTjBlV3hsVkdWNGRDQTlJR05oWTJobFpDaG1kVzVqZEdsdmJpQW9ZM056VkdWNGRDa2dlMXh1SUNCMllYSWdjbVZ6SUQwZ2UzMDdYRzRnSUhaaGNpQnNhWE4wUkdWc2FXMXBkR1Z5SUQwZ0x6c29QeUZiWGloZEtseGNLU2t2Wnp0Y2JpQWdkbUZ5SUhCeWIzQmxjblI1UkdWc2FXMXBkR1Z5SUQwZ0x6b29MaXNwTHp0Y2JpQWdZM056VkdWNGRDNXpjR3hwZENoc2FYTjBSR1ZzYVcxcGRHVnlLUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2hwZEdWdEtTQjdYRzRnSUNBZ2FXWWdLR2wwWlcwcElIdGNiaUFnSUNBZ0lIWmhjaUIwYlhBZ1BTQnBkR1Z0TG5Od2JHbDBLSEJ5YjNCbGNuUjVSR1ZzYVcxcGRHVnlLVHRjYmlBZ0lDQWdJSFJ0Y0M1c1pXNW5kR2dnUGlBeElDWW1JQ2h5WlhOYmRHMXdXekJkTG5SeWFXMG9LVjBnUFNCMGJYQmJNVjB1ZEhKcGJTZ3BLVHRjYmlBZ0lDQjlYRzRnSUgwcE8xeHVJQ0J5WlhSMWNtNGdjbVZ6WEc1OUtUdGNibHh1THk4Z2JXVnlaMlVnYzNSaGRHbGpJR0Z1WkNCa2VXNWhiV2xqSUhOMGVXeGxJR1JoZEdFZ2IyNGdkR2hsSUhOaGJXVWdkbTV2WkdWY2JtWjFibU4wYVc5dUlHNXZjbTFoYkdsNlpWTjBlV3hsUkdGMFlTQW9aR0YwWVNrZ2UxeHVJQ0IyWVhJZ2MzUjViR1VnUFNCdWIzSnRZV3hwZW1WVGRIbHNaVUpwYm1ScGJtY29aR0YwWVM1emRIbHNaU2s3WEc0Z0lDOHZJSE4wWVhScFl5QnpkSGxzWlNCcGN5QndjbVV0Y0hKdlkyVnpjMlZrSUdsdWRHOGdZVzRnYjJKcVpXTjBJR1IxY21sdVp5QmpiMjF3YVd4aGRHbHZibHh1SUNBdkx5QmhibVFnYVhNZ1lXeDNZWGx6SUdFZ1puSmxjMmdnYjJKcVpXTjBMQ0J6YnlCcGRDZHpJSE5oWm1VZ2RHOGdiV1Z5WjJVZ2FXNTBieUJwZEZ4dUlDQnlaWFIxY200Z1pHRjBZUzV6ZEdGMGFXTlRkSGxzWlZ4dUlDQWdJRDhnWlhoMFpXNWtLR1JoZEdFdWMzUmhkR2xqVTNSNWJHVXNJSE4wZVd4bEtWeHVJQ0FnSURvZ2MzUjViR1ZjYm4xY2JseHVMeThnYm05eWJXRnNhWHBsSUhCdmMzTnBZbXhsSUdGeWNtRjVJQzhnYzNSeWFXNW5JSFpoYkhWbGN5QnBiblJ2SUU5aWFtVmpkRnh1Wm5WdVkzUnBiMjRnYm05eWJXRnNhWHBsVTNSNWJHVkNhVzVrYVc1bklDaGlhVzVrYVc1blUzUjViR1VwSUh0Y2JpQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29ZbWx1WkdsdVoxTjBlV3hsS1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYjA5aWFtVmpkQ2hpYVc1a2FXNW5VM1I1YkdVcFhHNGdJSDFjYmlBZ2FXWWdLSFI1Y0dWdlppQmlhVzVrYVc1blUzUjViR1VnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUhCaGNuTmxVM1I1YkdWVVpYaDBLR0pwYm1ScGJtZFRkSGxzWlNsY2JpQWdmVnh1SUNCeVpYUjFjbTRnWW1sdVpHbHVaMU4wZVd4bFhHNTlYRzVjYmk4cUtseHVJQ29nY0dGeVpXNTBJR052YlhCdmJtVnVkQ0J6ZEhsc1pTQnphRzkxYkdRZ1ltVWdZV1owWlhJZ1kyaHBiR1FuYzF4dUlDb2djMjhnZEdoaGRDQndZWEpsYm5RZ1kyOXRjRzl1Wlc1MEozTWdjM1I1YkdVZ1kyOTFiR1FnYjNabGNuSnBaR1VnYVhSY2JpQXFMMXh1Wm5WdVkzUnBiMjRnWjJWMFUzUjViR1VnS0hadWIyUmxMQ0JqYUdWamEwTm9hV3hrS1NCN1hHNGdJSFpoY2lCeVpYTWdQU0I3ZlR0Y2JpQWdkbUZ5SUhOMGVXeGxSR0YwWVR0Y2JseHVJQ0JwWmlBb1kyaGxZMnREYUdsc1pDa2dlMXh1SUNBZ0lIWmhjaUJqYUdsc1pFNXZaR1VnUFNCMmJtOWtaVHRjYmlBZ0lDQjNhR2xzWlNBb1kyaHBiR1JPYjJSbExtTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObEtTQjdYRzRnSUNBZ0lDQmphR2xzWkU1dlpHVWdQU0JqYUdsc1pFNXZaR1V1WTI5dGNHOXVaVzUwU1c1emRHRnVZMlV1WDNadWIyUmxPMXh1SUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNCamFHbHNaRTV2WkdVZ0ppWWdZMmhwYkdST2IyUmxMbVJoZEdFZ0ppWmNiaUFnSUNBZ0lDQWdLSE4wZVd4bFJHRjBZU0E5SUc1dmNtMWhiR2w2WlZOMGVXeGxSR0YwWVNoamFHbHNaRTV2WkdVdVpHRjBZU2twWEc0Z0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ1pYaDBaVzVrS0hKbGN5d2djM1I1YkdWRVlYUmhLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JwWmlBb0tITjBlV3hsUkdGMFlTQTlJRzV2Y20xaGJHbDZaVk4wZVd4bFJHRjBZU2gyYm05a1pTNWtZWFJoS1NrcElIdGNiaUFnSUNCbGVIUmxibVFvY21WekxDQnpkSGxzWlVSaGRHRXBPMXh1SUNCOVhHNWNiaUFnZG1GeUlIQmhjbVZ1ZEU1dlpHVWdQU0IyYm05a1pUdGNiaUFnZDJocGJHVWdLQ2h3WVhKbGJuUk9iMlJsSUQwZ2NHRnlaVzUwVG05a1pTNXdZWEpsYm5RcEtTQjdYRzRnSUNBZ2FXWWdLSEJoY21WdWRFNXZaR1V1WkdGMFlTQW1KaUFvYzNSNWJHVkVZWFJoSUQwZ2JtOXliV0ZzYVhwbFUzUjViR1ZFWVhSaEtIQmhjbVZ1ZEU1dlpHVXVaR0YwWVNrcEtTQjdYRzRnSUNBZ0lDQmxlSFJsYm1Rb2NtVnpMQ0J6ZEhsc1pVUmhkR0VwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVZ6WEc1OVhHNWNiaThxSUNBcUwxeHVYRzUyWVhJZ1kzTnpWbUZ5VWtVZ1BTQXZYaTB0THp0Y2JuWmhjaUJwYlhCdmNuUmhiblJTUlNBOUlDOWNYSE1xSVdsdGNHOXlkR0Z1ZENRdk8xeHVkbUZ5SUhObGRGQnliM0FnUFNCbWRXNWpkR2x2YmlBb1pXd3NJRzVoYldVc0lIWmhiQ2tnZTF4dUlDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdhV1lnS2k5Y2JpQWdhV1lnS0dOemMxWmhjbEpGTG5SbGMzUW9ibUZ0WlNrcElIdGNiaUFnSUNCbGJDNXpkSGxzWlM1elpYUlFjbTl3WlhKMGVTaHVZVzFsTENCMllXd3BPMXh1SUNCOUlHVnNjMlVnYVdZZ0tHbHRjRzl5ZEdGdWRGSkZMblJsYzNRb2RtRnNLU2tnZTF4dUlDQWdJR1ZzTG5OMGVXeGxMbk5sZEZCeWIzQmxjblI1S0c1aGJXVXNJSFpoYkM1eVpYQnNZV05sS0dsdGNHOXlkR0Z1ZEZKRkxDQW5KeWtzSUNkcGJYQnZjblJoYm5RbktUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQjJZWElnYm05eWJXRnNhWHBsWkU1aGJXVWdQU0J1YjNKdFlXeHBlbVVvYm1GdFpTazdYRzRnSUNBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb2RtRnNLU2tnZTF4dUlDQWdJQ0FnTHk4Z1UzVndjRzl5ZENCMllXeDFaWE1nWVhKeVlYa2dZM0psWVhSbFpDQmllU0JoZFhSdmNISmxabWw0WlhJc0lHVXVaeTVjYmlBZ0lDQWdJQzh2SUh0a2FYTndiR0Y1T2lCYlhDSXRkMlZpYTJsMExXSnZlRndpTENCY0lpMXRjeTFtYkdWNFltOTRYQ0lzSUZ3aVpteGxlRndpWFgxY2JpQWdJQ0FnSUM4dklGTmxkQ0IwYUdWdElHOXVaU0JpZVNCdmJtVXNJR0Z1WkNCMGFHVWdZbkp2ZDNObGNpQjNhV3hzSUc5dWJIa2djMlYwSUhSb2IzTmxJR2wwSUdOaGJpQnlaV052WjI1cGVtVmNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCc1pXNGdQU0IyWVd3dWJHVnVaM1JvT3lCcElEd2diR1Z1T3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnWld3dWMzUjViR1ZiYm05eWJXRnNhWHBsWkU1aGJXVmRJRDBnZG1Gc1cybGRPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCbGJDNXpkSGxzWlZ0dWIzSnRZV3hwZW1Wa1RtRnRaVjBnUFNCMllXdzdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OU8xeHVYRzUyWVhJZ2RtVnVaRzl5VG1GdFpYTWdQU0JiSjFkbFltdHBkQ2NzSUNkTmIzb25MQ0FuYlhNblhUdGNibHh1ZG1GeUlHVnRjSFI1VTNSNWJHVTdYRzUyWVhJZ2JtOXliV0ZzYVhwbElEMGdZMkZqYUdWa0tHWjFibU4wYVc5dUlDaHdjbTl3S1NCN1hHNGdJR1Z0Y0hSNVUzUjViR1VnUFNCbGJYQjBlVk4wZVd4bElIeDhJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oyUnBkaWNwTG5OMGVXeGxPMXh1SUNCd2NtOXdJRDBnWTJGdFpXeHBlbVVvY0hKdmNDazdYRzRnSUdsbUlDaHdjbTl3SUNFOVBTQW5abWxzZEdWeUp5QW1KaUFvY0hKdmNDQnBiaUJsYlhCMGVWTjBlV3hsS1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ3Y205d1hHNGdJSDFjYmlBZ2RtRnlJR05oY0U1aGJXVWdQU0J3Y205d0xtTm9ZWEpCZENnd0tTNTBiMVZ3Y0dWeVEyRnpaU2dwSUNzZ2NISnZjQzV6YkdsalpTZ3hLVHRjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQjJaVzVrYjNKT1lXMWxjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUhaaGNpQnVZVzFsSUQwZ2RtVnVaRzl5VG1GdFpYTmJhVjBnS3lCallYQk9ZVzFsTzF4dUlDQWdJR2xtSUNodVlXMWxJR2x1SUdWdGNIUjVVM1I1YkdVcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdVlXMWxYRzRnSUNBZ2ZWeHVJQ0I5WEc1OUtUdGNibHh1Wm5WdVkzUnBiMjRnZFhCa1lYUmxVM1I1YkdVZ0tHOXNaRlp1YjJSbExDQjJibTlrWlNrZ2UxeHVJQ0IyWVhJZ1pHRjBZU0E5SUhadWIyUmxMbVJoZEdFN1hHNGdJSFpoY2lCdmJHUkVZWFJoSUQwZ2IyeGtWbTV2WkdVdVpHRjBZVHRjYmx4dUlDQnBaaUFvYVhOVmJtUmxaaWhrWVhSaExuTjBZWFJwWTFOMGVXeGxLU0FtSmlCcGMxVnVaR1ZtS0dSaGRHRXVjM1I1YkdVcElDWW1YRzRnSUNBZ2FYTlZibVJsWmlodmJHUkVZWFJoTG5OMFlYUnBZMU4wZVd4bEtTQW1KaUJwYzFWdVpHVm1LRzlzWkVSaGRHRXVjM1I1YkdVcFhHNGdJQ2tnZTF4dUlDQWdJSEpsZEhWeWJseHVJQ0I5WEc1Y2JpQWdkbUZ5SUdOMWNpd2dibUZ0WlR0Y2JpQWdkbUZ5SUdWc0lEMGdkbTV2WkdVdVpXeHRPMXh1SUNCMllYSWdiMnhrVTNSaGRHbGpVM1I1YkdVZ1BTQnZiR1JFWVhSaExuTjBZWFJwWTFOMGVXeGxPMXh1SUNCMllYSWdiMnhrVTNSNWJHVkNhVzVrYVc1bklEMGdiMnhrUkdGMFlTNXViM0p0WVd4cGVtVmtVM1I1YkdVZ2ZId2diMnhrUkdGMFlTNXpkSGxzWlNCOGZDQjdmVHRjYmx4dUlDQXZMeUJwWmlCemRHRjBhV01nYzNSNWJHVWdaWGhwYzNSekxDQnpkSGxzWldKcGJtUnBibWNnWVd4eVpXRmtlU0J0WlhKblpXUWdhVzUwYnlCcGRDQjNhR1Z1SUdSdmFXNW5JRzV2Y20xaGJHbDZaVk4wZVd4bFJHRjBZVnh1SUNCMllYSWdiMnhrVTNSNWJHVWdQU0J2YkdSVGRHRjBhV05UZEhsc1pTQjhmQ0J2YkdSVGRIbHNaVUpwYm1ScGJtYzdYRzVjYmlBZ2RtRnlJSE4wZVd4bElEMGdibTl5YldGc2FYcGxVM1I1YkdWQ2FXNWthVzVuS0hadWIyUmxMbVJoZEdFdWMzUjViR1VwSUh4OElIdDlPMXh1WEc0Z0lDOHZJSE4wYjNKbElHNXZjbTFoYkdsNlpXUWdjM1I1YkdVZ2RXNWtaWElnWVNCa2FXWm1aWEpsYm5RZ2EyVjVJR1p2Y2lCdVpYaDBJR1JwWm1aY2JpQWdMeThnYldGclpTQnpkWEpsSUhSdklHTnNiMjVsSUdsMElHbG1JR2wwSjNNZ2NtVmhZM1JwZG1Vc0lITnBibU5sSUhSb1pTQjFjMlZ5SUd4cGEyVnNlU0IzWVc1MGMxeHVJQ0F2THlCMGJ5QnRkWFJoZEdVZ2FYUXVYRzRnSUhadWIyUmxMbVJoZEdFdWJtOXliV0ZzYVhwbFpGTjBlV3hsSUQwZ2FYTkVaV1lvYzNSNWJHVXVYMTl2WWw5ZktWeHVJQ0FnSUQ4Z1pYaDBaVzVrS0h0OUxDQnpkSGxzWlNsY2JpQWdJQ0E2SUhOMGVXeGxPMXh1WEc0Z0lIWmhjaUJ1WlhkVGRIbHNaU0E5SUdkbGRGTjBlV3hsS0hadWIyUmxMQ0IwY25WbEtUdGNibHh1SUNCbWIzSWdLRzVoYldVZ2FXNGdiMnhrVTNSNWJHVXBJSHRjYmlBZ0lDQnBaaUFvYVhOVmJtUmxaaWh1WlhkVGRIbHNaVnR1WVcxbFhTa3BJSHRjYmlBZ0lDQWdJSE5sZEZCeWIzQW9aV3dzSUc1aGJXVXNJQ2NuS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnWm05eUlDaHVZVzFsSUdsdUlHNWxkMU4wZVd4bEtTQjdYRzRnSUNBZ1kzVnlJRDBnYm1WM1UzUjViR1ZiYm1GdFpWMDdYRzRnSUNBZ2FXWWdLR04xY2lBaFBUMGdiMnhrVTNSNWJHVmJibUZ0WlYwcElIdGNiaUFnSUNBZ0lDOHZJR2xsT1NCelpYUjBhVzVuSUhSdklHNTFiR3dnYUdGeklHNXZJR1ZtWm1WamRDd2diWFZ6ZENCMWMyVWdaVzF3ZEhrZ2MzUnlhVzVuWEc0Z0lDQWdJQ0J6WlhSUWNtOXdLR1ZzTENCdVlXMWxMQ0JqZFhJZ1BUMGdiblZzYkNBL0lDY25JRG9nWTNWeUtUdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVkbUZ5SUhOMGVXeGxJRDBnZTF4dUlDQmpjbVZoZEdVNklIVndaR0YwWlZOMGVXeGxMRnh1SUNCMWNHUmhkR1U2SUhWd1pHRjBaVk4wZVd4bFhHNTlPMXh1WEc0dktpQWdLaTljYmx4dUx5b3FYRzRnS2lCQlpHUWdZMnhoYzNNZ2QybDBhQ0JqYjIxd1lYUnBZbWxzYVhSNUlHWnZjaUJUVmtjZ2MybHVZMlVnWTJ4aGMzTk1hWE4wSUdseklHNXZkQ0J6ZFhCd2IzSjBaV1FnYjI1Y2JpQXFJRk5XUnlCbGJHVnRaVzUwY3lCcGJpQkpSVnh1SUNvdlhHNW1kVzVqZEdsdmJpQmhaR1JEYkdGemN5QW9aV3dzSUdOc2N5a2dlMXh1SUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2FXWWdLaTljYmlBZ2FXWWdLQ0ZqYkhNZ2ZId2dJU2hqYkhNZ1BTQmpiSE11ZEhKcGJTZ3BLU2tnZTF4dUlDQWdJSEpsZEhWeWJseHVJQ0I5WEc1Y2JpQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJR1ZzYzJVZ0tpOWNiaUFnYVdZZ0tHVnNMbU5zWVhOelRHbHpkQ2tnZTF4dUlDQWdJR2xtSUNoamJITXVhVzVrWlhoUFppZ25JQ2NwSUQ0Z0xURXBJSHRjYmlBZ0lDQWdJR05zY3k1emNHeHBkQ2d2WEZ4ekt5OHBMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLR01wSUhzZ2NtVjBkWEp1SUdWc0xtTnNZWE56VEdsemRDNWhaR1FvWXlrN0lIMHBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCbGJDNWpiR0Z6YzB4cGMzUXVZV1JrS0dOc2N5azdYRzRnSUNBZ2ZWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIWmhjaUJqZFhJZ1BTQmNJaUJjSWlBcklDaGxiQzVuWlhSQmRIUnlhV0oxZEdVb0oyTnNZWE56SnlrZ2ZId2dKeWNwSUNzZ1hDSWdYQ0k3WEc0Z0lDQWdhV1lnS0dOMWNpNXBibVJsZUU5bUtDY2dKeUFySUdOc2N5QXJJQ2NnSnlrZ1BDQXdLU0I3WEc0Z0lDQWdJQ0JsYkM1elpYUkJkSFJ5YVdKMWRHVW9KMk5zWVhOekp5d2dLR04xY2lBcklHTnNjeWt1ZEhKcGJTZ3BLVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJTWlcxdmRtVWdZMnhoYzNNZ2QybDBhQ0JqYjIxd1lYUnBZbWxzYVhSNUlHWnZjaUJUVmtjZ2MybHVZMlVnWTJ4aGMzTk1hWE4wSUdseklHNXZkQ0J6ZFhCd2IzSjBaV1FnYjI1Y2JpQXFJRk5XUnlCbGJHVnRaVzUwY3lCcGJpQkpSVnh1SUNvdlhHNW1kVzVqZEdsdmJpQnlaVzF2ZG1WRGJHRnpjeUFvWld3c0lHTnNjeWtnZTF4dUlDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdhV1lnS2k5Y2JpQWdhV1lnS0NGamJITWdmSHdnSVNoamJITWdQU0JqYkhNdWRISnBiU2dwS1NrZ2UxeHVJQ0FnSUhKbGRIVnlibHh1SUNCOVhHNWNiaUFnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdWc2MyVWdLaTljYmlBZ2FXWWdLR1ZzTG1Oc1lYTnpUR2x6ZENrZ2UxeHVJQ0FnSUdsbUlDaGpiSE11YVc1a1pYaFBaaWduSUNjcElENGdMVEVwSUh0Y2JpQWdJQ0FnSUdOc2N5NXpjR3hwZENndlhGeHpLeThwTG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0dNcElIc2djbVYwZFhKdUlHVnNMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9ZeWs3SUgwcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JsYkM1amJHRnpjMHhwYzNRdWNtVnRiM1psS0dOc2N5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDZ2haV3d1WTJ4aGMzTk1hWE4wTG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnWld3dWNtVnRiM1psUVhSMGNtbGlkWFJsS0NkamJHRnpjeWNwTzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IyWVhJZ1kzVnlJRDBnWENJZ1hDSWdLeUFvWld3dVoyVjBRWFIwY21saWRYUmxLQ2RqYkdGemN5Y3BJSHg4SUNjbktTQXJJRndpSUZ3aU8xeHVJQ0FnSUhaaGNpQjBZWElnUFNBbklDY2dLeUJqYkhNZ0t5QW5JQ2M3WEc0Z0lDQWdkMmhwYkdVZ0tHTjFjaTVwYm1SbGVFOW1LSFJoY2lrZ1BqMGdNQ2tnZTF4dUlDQWdJQ0FnWTNWeUlEMGdZM1Z5TG5KbGNHeGhZMlVvZEdGeUxDQW5JQ2NwTzF4dUlDQWdJSDFjYmlBZ0lDQmpkWElnUFNCamRYSXVkSEpwYlNncE8xeHVJQ0FnSUdsbUlDaGpkWElwSUh0Y2JpQWdJQ0FnSUdWc0xuTmxkRUYwZEhKcFluVjBaU2duWTJ4aGMzTW5MQ0JqZFhJcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JsYkM1eVpXMXZkbVZCZEhSeWFXSjFkR1VvSjJOc1lYTnpKeWs3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYmk4cUlDQXFMMXh1WEc1bWRXNWpkR2x2YmlCeVpYTnZiSFpsVkhKaGJuTnBkR2x2YmlBb1pHVm1LU0I3WEc0Z0lHbG1JQ2doWkdWbUtTQjdYRzRnSUNBZ2NtVjBkWEp1WEc0Z0lIMWNiaUFnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdWc2MyVWdLaTljYmlBZ2FXWWdLSFI1Y0dWdlppQmtaV1lnUFQwOUlDZHZZbXBsWTNRbktTQjdYRzRnSUNBZ2RtRnlJSEpsY3lBOUlIdDlPMXh1SUNBZ0lHbG1JQ2hrWldZdVkzTnpJQ0U5UFNCbVlXeHpaU2tnZTF4dUlDQWdJQ0FnWlhoMFpXNWtLSEpsY3l3Z1lYVjBiME56YzFSeVlXNXphWFJwYjI0b1pHVm1MbTVoYldVZ2ZId2dKM1luS1NrN1hHNGdJQ0FnZlZ4dUlDQWdJR1Y0ZEdWdVpDaHlaWE1zSUdSbFppazdYRzRnSUNBZ2NtVjBkWEp1SUhKbGMxeHVJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJrWldZZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHRjFkRzlEYzNOVWNtRnVjMmwwYVc5dUtHUmxaaWxjYmlBZ2ZWeHVmVnh1WEc1MllYSWdZWFYwYjBOemMxUnlZVzV6YVhScGIyNGdQU0JqWVdOb1pXUW9ablZ1WTNScGIyNGdLRzVoYldVcElIdGNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQmxiblJsY2tOc1lYTnpPaUFvYm1GdFpTQXJJRndpTFdWdWRHVnlYQ0lwTEZ4dUlDQWdJR1Z1ZEdWeVZHOURiR0Z6Y3pvZ0tHNWhiV1VnS3lCY0lpMWxiblJsY2kxMGIxd2lLU3hjYmlBZ0lDQmxiblJsY2tGamRHbDJaVU5zWVhOek9pQW9ibUZ0WlNBcklGd2lMV1Z1ZEdWeUxXRmpkR2wyWlZ3aUtTeGNiaUFnSUNCc1pXRjJaVU5zWVhOek9pQW9ibUZ0WlNBcklGd2lMV3hsWVhabFhDSXBMRnh1SUNBZ0lHeGxZWFpsVkc5RGJHRnpjem9nS0c1aGJXVWdLeUJjSWkxc1pXRjJaUzEwYjF3aUtTeGNiaUFnSUNCc1pXRjJaVUZqZEdsMlpVTnNZWE56T2lBb2JtRnRaU0FySUZ3aUxXeGxZWFpsTFdGamRHbDJaVndpS1Z4dUlDQjlYRzU5S1R0Y2JseHVkbUZ5SUdoaGMxUnlZVzV6YVhScGIyNGdQU0JwYmtKeWIzZHpaWElnSmlZZ0lXbHpTVVU1TzF4dWRtRnlJRlJTUVU1VFNWUkpUMDRnUFNBbmRISmhibk5wZEdsdmJpYzdYRzUyWVhJZ1FVNUpUVUZVU1U5T0lEMGdKMkZ1YVcxaGRHbHZiaWM3WEc1Y2JpOHZJRlJ5WVc1emFYUnBiMjRnY0hKdmNHVnlkSGt2WlhabGJuUWdjMjVwWm1acGJtZGNiblpoY2lCMGNtRnVjMmwwYVc5dVVISnZjQ0E5SUNkMGNtRnVjMmwwYVc5dUp6dGNiblpoY2lCMGNtRnVjMmwwYVc5dVJXNWtSWFpsYm5RZ1BTQW5kSEpoYm5OcGRHbHZibVZ1WkNjN1hHNTJZWElnWVc1cGJXRjBhVzl1VUhKdmNDQTlJQ2RoYm1sdFlYUnBiMjRuTzF4dWRtRnlJR0Z1YVcxaGRHbHZia1Z1WkVWMlpXNTBJRDBnSjJGdWFXMWhkR2x2Ym1WdVpDYzdYRzVwWmlBb2FHRnpWSEpoYm5OcGRHbHZiaWtnZTF4dUlDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdhV1lnS2k5Y2JpQWdhV1lnS0hkcGJtUnZkeTV2Ym5SeVlXNXphWFJwYjI1bGJtUWdQVDA5SUhWdVpHVm1hVzVsWkNBbUpseHVJQ0FnSUhkcGJtUnZkeTV2Ym5kbFltdHBkSFJ5WVc1emFYUnBiMjVsYm1RZ0lUMDlJSFZ1WkdWbWFXNWxaRnh1SUNBcElIdGNiaUFnSUNCMGNtRnVjMmwwYVc5dVVISnZjQ0E5SUNkWFpXSnJhWFJVY21GdWMybDBhVzl1Snp0Y2JpQWdJQ0IwY21GdWMybDBhVzl1Ulc1a1JYWmxiblFnUFNBbmQyVmlhMmwwVkhKaGJuTnBkR2x2YmtWdVpDYzdYRzRnSUgxY2JpQWdhV1lnS0hkcGJtUnZkeTV2Ym1GdWFXMWhkR2x2Ym1WdVpDQTlQVDBnZFc1a1pXWnBibVZrSUNZbVhHNGdJQ0FnZDJsdVpHOTNMbTl1ZDJWaWEybDBZVzVwYldGMGFXOXVaVzVrSUNFOVBTQjFibVJsWm1sdVpXUmNiaUFnS1NCN1hHNGdJQ0FnWVc1cGJXRjBhVzl1VUhKdmNDQTlJQ2RYWldKcmFYUkJibWx0WVhScGIyNG5PMXh1SUNBZ0lHRnVhVzFoZEdsdmJrVnVaRVYyWlc1MElEMGdKM2RsWW10cGRFRnVhVzFoZEdsdmJrVnVaQ2M3WEc0Z0lIMWNibjFjYmx4dUx5OGdZbWx1WkdsdVp5QjBieUIzYVc1a2IzY2dhWE1nYm1WalpYTnpZWEo1SUhSdklHMWhhMlVnYUc5MElISmxiRzloWkNCM2IzSnJJR2x1SUVsRklHbHVJSE4wY21samRDQnRiMlJsWEc1MllYSWdjbUZtSUQwZ2FXNUNjbTkzYzJWeVhHNGdJRDhnZDJsdVpHOTNMbkpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlZ4dUlDQWdJRDhnZDJsdVpHOTNMbkpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlM1aWFXNWtLSGRwYm1SdmR5bGNiaUFnSUNBNklITmxkRlJwYldWdmRYUmNiaUFnT2lBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2JtVjRkQ0FxTHlCbWRXNWpkR2x2YmlBb1ptNHBJSHNnY21WMGRYSnVJR1p1S0NrN0lIMDdYRzVjYm1aMWJtTjBhVzl1SUc1bGVIUkdjbUZ0WlNBb1ptNHBJSHRjYmlBZ2NtRm1LR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0J5WVdZb1ptNHBPMXh1SUNCOUtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1lXUmtWSEpoYm5OcGRHbHZia05zWVhOeklDaGxiQ3dnWTJ4ektTQjdYRzRnSUhaaGNpQjBjbUZ1YzJsMGFXOXVRMnhoYzNObGN5QTlJR1ZzTGw5MGNtRnVjMmwwYVc5dVEyeGhjM05sY3lCOGZDQW9aV3d1WDNSeVlXNXphWFJwYjI1RGJHRnpjMlZ6SUQwZ1cxMHBPMXh1SUNCcFppQW9kSEpoYm5OcGRHbHZia05zWVhOelpYTXVhVzVrWlhoUFppaGpiSE1wSUR3Z01Da2dlMXh1SUNBZ0lIUnlZVzV6YVhScGIyNURiR0Z6YzJWekxuQjFjMmdvWTJ4ektUdGNiaUFnSUNCaFpHUkRiR0Z6Y3lobGJDd2dZMnh6S1R0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnlaVzF2ZG1WVWNtRnVjMmwwYVc5dVEyeGhjM01nS0dWc0xDQmpiSE1wSUh0Y2JpQWdhV1lnS0dWc0xsOTBjbUZ1YzJsMGFXOXVRMnhoYzNObGN5a2dlMXh1SUNBZ0lISmxiVzkyWlNobGJDNWZkSEpoYm5OcGRHbHZia05zWVhOelpYTXNJR05zY3lrN1hHNGdJSDFjYmlBZ2NtVnRiM1psUTJ4aGMzTW9aV3dzSUdOc2N5azdYRzU5WEc1Y2JtWjFibU4wYVc5dUlIZG9aVzVVY21GdWMybDBhVzl1Ulc1a2N5QW9YRzRnSUdWc0xGeHVJQ0JsZUhCbFkzUmxaRlI1Y0dVc1hHNGdJR05pWEc0cElIdGNiaUFnZG1GeUlISmxaaUE5SUdkbGRGUnlZVzV6YVhScGIyNUpibVp2S0dWc0xDQmxlSEJsWTNSbFpGUjVjR1VwTzF4dUlDQjJZWElnZEhsd1pTQTlJSEpsWmk1MGVYQmxPMXh1SUNCMllYSWdkR2x0Wlc5MWRDQTlJSEpsWmk1MGFXMWxiM1YwTzF4dUlDQjJZWElnY0hKdmNFTnZkVzUwSUQwZ2NtVm1MbkJ5YjNCRGIzVnVkRHRjYmlBZ2FXWWdLQ0YwZVhCbEtTQjdJSEpsZEhWeWJpQmpZaWdwSUgxY2JpQWdkbUZ5SUdWMlpXNTBJRDBnZEhsd1pTQTlQVDBnVkZKQlRsTkpWRWxQVGlBL0lIUnlZVzV6YVhScGIyNUZibVJGZG1WdWRDQTZJR0Z1YVcxaGRHbHZia1Z1WkVWMlpXNTBPMXh1SUNCMllYSWdaVzVrWldRZ1BTQXdPMXh1SUNCMllYSWdaVzVrSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lHVnNMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvWlhabGJuUXNJRzl1Ulc1a0tUdGNiaUFnSUNCallpZ3BPMXh1SUNCOU8xeHVJQ0IyWVhJZ2IyNUZibVFnUFNCbWRXNWpkR2x2YmlBb1pTa2dlMXh1SUNBZ0lHbG1JQ2hsTG5SaGNtZGxkQ0E5UFQwZ1pXd3BJSHRjYmlBZ0lDQWdJR2xtSUNncksyVnVaR1ZrSUQ0OUlIQnliM0JEYjNWdWRDa2dlMXh1SUNBZ0lDQWdJQ0JsYm1Rb0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDA3WEc0Z0lITmxkRlJwYldWdmRYUW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJR2xtSUNobGJtUmxaQ0E4SUhCeWIzQkRiM1Z1ZENrZ2UxeHVJQ0FnSUNBZ1pXNWtLQ2s3WEc0Z0lDQWdmVnh1SUNCOUxDQjBhVzFsYjNWMElDc2dNU2s3WEc0Z0lHVnNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9aWFpsYm5Rc0lHOXVSVzVrS1R0Y2JuMWNibHh1ZG1GeUlIUnlZVzV6Wm05eWJWSkZJRDBnTDF4Y1lpaDBjbUZ1YzJadmNtMThZV3hzS1Nnc2ZDUXBMenRjYmx4dVpuVnVZM1JwYjI0Z1oyVjBWSEpoYm5OcGRHbHZia2x1Wm04Z0tHVnNMQ0JsZUhCbFkzUmxaRlI1Y0dVcElIdGNiaUFnZG1GeUlITjBlV3hsY3lBOUlIZHBibVJ2ZHk1blpYUkRiMjF3ZFhSbFpGTjBlV3hsS0dWc0tUdGNiaUFnZG1GeUlIUnlZVzV6YVhScGIyNUVaV3hoZVhNZ1BTQnpkSGxzWlhOYmRISmhibk5wZEdsdmJsQnliM0FnS3lBblJHVnNZWGtuWFM1emNHeHBkQ2duTENBbktUdGNiaUFnZG1GeUlIUnlZVzV6YVhScGIyNUVkWEpoZEdsdmJuTWdQU0J6ZEhsc1pYTmJkSEpoYm5OcGRHbHZibEJ5YjNBZ0t5QW5SSFZ5WVhScGIyNG5YUzV6Y0d4cGRDZ25MQ0FuS1R0Y2JpQWdkbUZ5SUhSeVlXNXphWFJwYjI1VWFXMWxiM1YwSUQwZ1oyVjBWR2x0Wlc5MWRDaDBjbUZ1YzJsMGFXOXVSR1ZzWVhsekxDQjBjbUZ1YzJsMGFXOXVSSFZ5WVhScGIyNXpLVHRjYmlBZ2RtRnlJR0Z1YVcxaGRHbHZia1JsYkdGNWN5QTlJSE4wZVd4bGMxdGhibWx0WVhScGIyNVFjbTl3SUNzZ0owUmxiR0Y1SjEwdWMzQnNhWFFvSnl3Z0p5azdYRzRnSUhaaGNpQmhibWx0WVhScGIyNUVkWEpoZEdsdmJuTWdQU0J6ZEhsc1pYTmJZVzVwYldGMGFXOXVVSEp2Y0NBcklDZEVkWEpoZEdsdmJpZGRMbk53YkdsMEtDY3NJQ2NwTzF4dUlDQjJZWElnWVc1cGJXRjBhVzl1VkdsdFpXOTFkQ0E5SUdkbGRGUnBiV1Z2ZFhRb1lXNXBiV0YwYVc5dVJHVnNZWGx6TENCaGJtbHRZWFJwYjI1RWRYSmhkR2x2Ym5NcE8xeHVYRzRnSUhaaGNpQjBlWEJsTzF4dUlDQjJZWElnZEdsdFpXOTFkQ0E5SURBN1hHNGdJSFpoY2lCd2NtOXdRMjkxYm5RZ1BTQXdPMXh1SUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2FXWWdLaTljYmlBZ2FXWWdLR1Y0Y0dWamRHVmtWSGx3WlNBOVBUMGdWRkpCVGxOSlZFbFBUaWtnZTF4dUlDQWdJR2xtSUNoMGNtRnVjMmwwYVc5dVZHbHRaVzkxZENBK0lEQXBJSHRjYmlBZ0lDQWdJSFI1Y0dVZ1BTQlVVa0ZPVTBsVVNVOU9PMXh1SUNBZ0lDQWdkR2x0Wlc5MWRDQTlJSFJ5WVc1emFYUnBiMjVVYVcxbGIzVjBPMXh1SUNBZ0lDQWdjSEp2Y0VOdmRXNTBJRDBnZEhKaGJuTnBkR2x2YmtSMWNtRjBhVzl1Y3k1c1pXNW5kR2c3WEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnYVdZZ0tHVjRjR1ZqZEdWa1ZIbHdaU0E5UFQwZ1FVNUpUVUZVU1U5T0tTQjdYRzRnSUNBZ2FXWWdLR0Z1YVcxaGRHbHZibFJwYldWdmRYUWdQaUF3S1NCN1hHNGdJQ0FnSUNCMGVYQmxJRDBnUVU1SlRVRlVTVTlPTzF4dUlDQWdJQ0FnZEdsdFpXOTFkQ0E5SUdGdWFXMWhkR2x2YmxScGJXVnZkWFE3WEc0Z0lDQWdJQ0J3Y205d1EyOTFiblFnUFNCaGJtbHRZWFJwYjI1RWRYSmhkR2x2Ym5NdWJHVnVaM1JvTzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IwYVcxbGIzVjBJRDBnVFdGMGFDNXRZWGdvZEhKaGJuTnBkR2x2YmxScGJXVnZkWFFzSUdGdWFXMWhkR2x2YmxScGJXVnZkWFFwTzF4dUlDQWdJSFI1Y0dVZ1BTQjBhVzFsYjNWMElENGdNRnh1SUNBZ0lDQWdQeUIwY21GdWMybDBhVzl1VkdsdFpXOTFkQ0ErSUdGdWFXMWhkR2x2YmxScGJXVnZkWFJjYmlBZ0lDQWdJQ0FnUHlCVVVrRk9VMGxVU1U5T1hHNGdJQ0FnSUNBZ0lEb2dRVTVKVFVGVVNVOU9YRzRnSUNBZ0lDQTZJRzUxYkd3N1hHNGdJQ0FnY0hKdmNFTnZkVzUwSUQwZ2RIbHdaVnh1SUNBZ0lDQWdQeUIwZVhCbElEMDlQU0JVVWtGT1UwbFVTVTlPWEc0Z0lDQWdJQ0FnSUQ4Z2RISmhibk5wZEdsdmJrUjFjbUYwYVc5dWN5NXNaVzVuZEdoY2JpQWdJQ0FnSUNBZ09pQmhibWx0WVhScGIyNUVkWEpoZEdsdmJuTXViR1Z1WjNSb1hHNGdJQ0FnSUNBNklEQTdYRzRnSUgxY2JpQWdkbUZ5SUdoaGMxUnlZVzV6Wm05eWJTQTlYRzRnSUNBZ2RIbHdaU0E5UFQwZ1ZGSkJUbE5KVkVsUFRpQW1KbHh1SUNBZ0lIUnlZVzV6Wm05eWJWSkZMblJsYzNRb2MzUjViR1Z6VzNSeVlXNXphWFJwYjI1UWNtOXdJQ3NnSjFCeWIzQmxjblI1SjEwcE8xeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lIUjVjR1U2SUhSNWNHVXNYRzRnSUNBZ2RHbHRaVzkxZERvZ2RHbHRaVzkxZEN4Y2JpQWdJQ0J3Y205d1EyOTFiblE2SUhCeWIzQkRiM1Z1ZEN4Y2JpQWdJQ0JvWVhOVWNtRnVjMlp2Y20wNklHaGhjMVJ5WVc1elptOXliVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGRGUnBiV1Z2ZFhRZ0tHUmxiR0Y1Y3l3Z1pIVnlZWFJwYjI1ektTQjdYRzRnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCdVpYaDBJQ292WEc0Z0lIZG9hV3hsSUNoa1pXeGhlWE11YkdWdVozUm9JRHdnWkhWeVlYUnBiMjV6TG14bGJtZDBhQ2tnZTF4dUlDQWdJR1JsYkdGNWN5QTlJR1JsYkdGNWN5NWpiMjVqWVhRb1pHVnNZWGx6S1R0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCTllYUm9MbTFoZUM1aGNIQnNlU2h1ZFd4c0xDQmtkWEpoZEdsdmJuTXViV0Z3S0daMWJtTjBhVzl1SUNoa0xDQnBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUnZUWE1vWkNrZ0t5QjBiMDF6S0dSbGJHRjVjMXRwWFNsY2JpQWdmU2twWEc1OVhHNWNibVoxYm1OMGFXOXVJSFJ2VFhNZ0tITXBJSHRjYmlBZ2NtVjBkWEp1SUU1MWJXSmxjaWh6TG5Oc2FXTmxLREFzSUMweEtTa2dLaUF4TURBd1hHNTlYRzVjYmk4cUlDQXFMMXh1WEc1bWRXNWpkR2x2YmlCbGJuUmxjaUFvZG01dlpHVXNJSFJ2WjJkc1pVUnBjM0JzWVhrcElIdGNiaUFnZG1GeUlHVnNJRDBnZG01dlpHVXVaV3h0TzF4dVhHNGdJQzh2SUdOaGJHd2diR1ZoZG1VZ1kyRnNiR0poWTJzZ2JtOTNYRzRnSUdsbUlDaHBjMFJsWmlobGJDNWZiR1ZoZG1WRFlpa3BJSHRjYmlBZ0lDQmxiQzVmYkdWaGRtVkRZaTVqWVc1alpXeHNaV1FnUFNCMGNuVmxPMXh1SUNBZ0lHVnNMbDlzWldGMlpVTmlLQ2s3WEc0Z0lIMWNibHh1SUNCMllYSWdaR0YwWVNBOUlISmxjMjlzZG1WVWNtRnVjMmwwYVc5dUtIWnViMlJsTG1SaGRHRXVkSEpoYm5OcGRHbHZiaWs3WEc0Z0lHbG1JQ2hwYzFWdVpHVm1LR1JoZEdFcEtTQjdYRzRnSUNBZ2NtVjBkWEp1WEc0Z0lIMWNibHh1SUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2FXWWdLaTljYmlBZ2FXWWdLR2x6UkdWbUtHVnNMbDlsYm5SbGNrTmlLU0I4ZkNCbGJDNXViMlJsVkhsd1pTQWhQVDBnTVNrZ2UxeHVJQ0FnSUhKbGRIVnlibHh1SUNCOVhHNWNiaUFnZG1GeUlHTnpjeUE5SUdSaGRHRXVZM056TzF4dUlDQjJZWElnZEhsd1pTQTlJR1JoZEdFdWRIbHdaVHRjYmlBZ2RtRnlJR1Z1ZEdWeVEyeGhjM01nUFNCa1lYUmhMbVZ1ZEdWeVEyeGhjM003WEc0Z0lIWmhjaUJsYm5SbGNsUnZRMnhoYzNNZ1BTQmtZWFJoTG1WdWRHVnlWRzlEYkdGemN6dGNiaUFnZG1GeUlHVnVkR1Z5UVdOMGFYWmxRMnhoYzNNZ1BTQmtZWFJoTG1WdWRHVnlRV04wYVhabFEyeGhjM003WEc0Z0lIWmhjaUJoY0hCbFlYSkRiR0Z6Y3lBOUlHUmhkR0V1WVhCd1pXRnlRMnhoYzNNN1hHNGdJSFpoY2lCaGNIQmxZWEpVYjBOc1lYTnpJRDBnWkdGMFlTNWhjSEJsWVhKVWIwTnNZWE56TzF4dUlDQjJZWElnWVhCd1pXRnlRV04wYVhabFEyeGhjM01nUFNCa1lYUmhMbUZ3Y0dWaGNrRmpkR2wyWlVOc1lYTnpPMXh1SUNCMllYSWdZbVZtYjNKbFJXNTBaWElnUFNCa1lYUmhMbUpsWm05eVpVVnVkR1Z5TzF4dUlDQjJZWElnWlc1MFpYSWdQU0JrWVhSaExtVnVkR1Z5TzF4dUlDQjJZWElnWVdaMFpYSkZiblJsY2lBOUlHUmhkR0V1WVdaMFpYSkZiblJsY2p0Y2JpQWdkbUZ5SUdWdWRHVnlRMkZ1WTJWc2JHVmtJRDBnWkdGMFlTNWxiblJsY2tOaGJtTmxiR3hsWkR0Y2JpQWdkbUZ5SUdKbFptOXlaVUZ3Y0dWaGNpQTlJR1JoZEdFdVltVm1iM0psUVhCd1pXRnlPMXh1SUNCMllYSWdZWEJ3WldGeUlEMGdaR0YwWVM1aGNIQmxZWEk3WEc0Z0lIWmhjaUJoWm5SbGNrRndjR1ZoY2lBOUlHUmhkR0V1WVdaMFpYSkJjSEJsWVhJN1hHNGdJSFpoY2lCaGNIQmxZWEpEWVc1alpXeHNaV1FnUFNCa1lYUmhMbUZ3Y0dWaGNrTmhibU5sYkd4bFpEdGNiaUFnZG1GeUlHUjFjbUYwYVc5dUlEMGdaR0YwWVM1a2RYSmhkR2x2Ymp0Y2JseHVJQ0F2THlCaFkzUnBkbVZKYm5OMFlXNWpaU0IzYVd4c0lHRnNkMkY1Y3lCaVpTQjBhR1VnUEhSeVlXNXphWFJwYjI0K0lHTnZiWEJ2Ym1WdWRDQnRZVzVoWjJsdVp5QjBhR2x6WEc0Z0lDOHZJSFJ5WVc1emFYUnBiMjR1SUU5dVpTQmxaR2RsSUdOaGMyVWdkRzhnWTJobFkyc2dhWE1nZDJobGJpQjBhR1VnUEhSeVlXNXphWFJwYjI0K0lHbHpJSEJzWVdObFpGeHVJQ0F2THlCaGN5QjBhR1VnY205dmRDQnViMlJsSUc5bUlHRWdZMmhwYkdRZ1kyOXRjRzl1Wlc1MExpQkpiaUIwYUdGMElHTmhjMlVnZDJVZ2JtVmxaQ0IwYnlCamFHVmphMXh1SUNBdkx5QThkSEpoYm5OcGRHbHZiajRuY3lCd1lYSmxiblFnWm05eUlHRndjR1ZoY2lCamFHVmpheTVjYmlBZ2RtRnlJR052Ym5SbGVIUWdQU0JoWTNScGRtVkpibk4wWVc1alpUdGNiaUFnZG1GeUlIUnlZVzV6YVhScGIyNU9iMlJsSUQwZ1lXTjBhWFpsU1c1emRHRnVZMlV1SkhadWIyUmxPMXh1SUNCM2FHbHNaU0FvZEhKaGJuTnBkR2x2Yms1dlpHVWdKaVlnZEhKaGJuTnBkR2x2Yms1dlpHVXVjR0Z5Wlc1MEtTQjdYRzRnSUNBZ2RISmhibk5wZEdsdmJrNXZaR1VnUFNCMGNtRnVjMmwwYVc5dVRtOWtaUzV3WVhKbGJuUTdYRzRnSUNBZ1kyOXVkR1Y0ZENBOUlIUnlZVzV6YVhScGIyNU9iMlJsTG1OdmJuUmxlSFE3WEc0Z0lIMWNibHh1SUNCMllYSWdhWE5CY0hCbFlYSWdQU0FoWTI5dWRHVjRkQzVmYVhOTmIzVnVkR1ZrSUh4OElDRjJibTlrWlM1cGMxSnZiM1JKYm5ObGNuUTdYRzVjYmlBZ2FXWWdLR2x6UVhCd1pXRnlJQ1ltSUNGaGNIQmxZWElnSmlZZ1lYQndaV0Z5SUNFOVBTQW5KeWtnZTF4dUlDQWdJSEpsZEhWeWJseHVJQ0I5WEc1Y2JpQWdkbUZ5SUhOMFlYSjBRMnhoYzNNZ1BTQnBjMEZ3Y0dWaGNpQW1KaUJoY0hCbFlYSkRiR0Z6YzF4dUlDQWdJRDhnWVhCd1pXRnlRMnhoYzNOY2JpQWdJQ0E2SUdWdWRHVnlRMnhoYzNNN1hHNGdJSFpoY2lCaFkzUnBkbVZEYkdGemN5QTlJR2x6UVhCd1pXRnlJQ1ltSUdGd2NHVmhja0ZqZEdsMlpVTnNZWE56WEc0Z0lDQWdQeUJoY0hCbFlYSkJZM1JwZG1WRGJHRnpjMXh1SUNBZ0lEb2daVzUwWlhKQlkzUnBkbVZEYkdGemN6dGNiaUFnZG1GeUlIUnZRMnhoYzNNZ1BTQnBjMEZ3Y0dWaGNpQW1KaUJoY0hCbFlYSlViME5zWVhOelhHNGdJQ0FnUHlCaGNIQmxZWEpVYjBOc1lYTnpYRzRnSUNBZ09pQmxiblJsY2xSdlEyeGhjM003WEc1Y2JpQWdkbUZ5SUdKbFptOXlaVVZ1ZEdWeVNHOXZheUE5SUdselFYQndaV0Z5WEc0Z0lDQWdQeUFvWW1WbWIzSmxRWEJ3WldGeUlIeDhJR0psWm05eVpVVnVkR1Z5S1Z4dUlDQWdJRG9nWW1WbWIzSmxSVzUwWlhJN1hHNGdJSFpoY2lCbGJuUmxja2h2YjJzZ1BTQnBjMEZ3Y0dWaGNseHVJQ0FnSUQ4Z0tIUjVjR1Z2WmlCaGNIQmxZWElnUFQwOUlDZG1kVzVqZEdsdmJpY2dQeUJoY0hCbFlYSWdPaUJsYm5SbGNpbGNiaUFnSUNBNklHVnVkR1Z5TzF4dUlDQjJZWElnWVdaMFpYSkZiblJsY2todmIyc2dQU0JwYzBGd2NHVmhjbHh1SUNBZ0lEOGdLR0ZtZEdWeVFYQndaV0Z5SUh4OElHRm1kR1Z5Ulc1MFpYSXBYRzRnSUNBZ09pQmhablJsY2tWdWRHVnlPMXh1SUNCMllYSWdaVzUwWlhKRFlXNWpaV3hzWldSSWIyOXJJRDBnYVhOQmNIQmxZWEpjYmlBZ0lDQS9JQ2hoY0hCbFlYSkRZVzVqWld4c1pXUWdmSHdnWlc1MFpYSkRZVzVqWld4c1pXUXBYRzRnSUNBZ09pQmxiblJsY2tOaGJtTmxiR3hsWkR0Y2JseHVJQ0IyWVhJZ1pYaHdiR2xqYVhSRmJuUmxja1IxY21GMGFXOXVJRDBnZEc5T2RXMWlaWElvWEc0Z0lDQWdhWE5QWW1wbFkzUW9aSFZ5WVhScGIyNHBYRzRnSUNBZ0lDQS9JR1IxY21GMGFXOXVMbVZ1ZEdWeVhHNGdJQ0FnSUNBNklHUjFjbUYwYVc5dVhHNGdJQ2s3WEc1Y2JpQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ0ppWWdaWGh3YkdsamFYUkZiblJsY2tSMWNtRjBhVzl1SUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0JqYUdWamEwUjFjbUYwYVc5dUtHVjRjR3hwWTJsMFJXNTBaWEpFZFhKaGRHbHZiaXdnSjJWdWRHVnlKeXdnZG01dlpHVXBPMXh1SUNCOVhHNWNiaUFnZG1GeUlHVjRjR1ZqZEhORFUxTWdQU0JqYzNNZ0lUMDlJR1poYkhObElDWW1JQ0ZwYzBsRk9UdGNiaUFnZG1GeUlIVnpaWEpYWVc1MGMwTnZiblJ5YjJ3Z1BTQm5aWFJJYjI5clFYSm5kVzFsYm5SelRHVnVaM1JvS0dWdWRHVnlTRzl2YXlrN1hHNWNiaUFnZG1GeUlHTmlJRDBnWld3dVgyVnVkR1Z5UTJJZ1BTQnZibU5sS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCcFppQW9aWGh3WldOMGMwTlRVeWtnZTF4dUlDQWdJQ0FnY21WdGIzWmxWSEpoYm5OcGRHbHZia05zWVhOektHVnNMQ0IwYjBOc1lYTnpLVHRjYmlBZ0lDQWdJSEpsYlc5MlpWUnlZVzV6YVhScGIyNURiR0Z6Y3lobGJDd2dZV04wYVhabFEyeGhjM01wTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvWTJJdVkyRnVZMlZzYkdWa0tTQjdYRzRnSUNBZ0lDQnBaaUFvWlhod1pXTjBjME5UVXlrZ2UxeHVJQ0FnSUNBZ0lDQnlaVzF2ZG1WVWNtRnVjMmwwYVc5dVEyeGhjM01vWld3c0lITjBZWEowUTJ4aGMzTXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdaVzUwWlhKRFlXNWpaV3hzWldSSWIyOXJJQ1ltSUdWdWRHVnlRMkZ1WTJWc2JHVmtTRzl2YXlobGJDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdGbWRHVnlSVzUwWlhKSWIyOXJJQ1ltSUdGbWRHVnlSVzUwWlhKSWIyOXJLR1ZzS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdaV3d1WDJWdWRHVnlRMklnUFNCdWRXeHNPMXh1SUNCOUtUdGNibHh1SUNCcFppQW9JWFp1YjJSbExtUmhkR0V1YzJodmR5a2dlMXh1SUNBZ0lDOHZJSEpsYlc5MlpTQndaVzVrYVc1bklHeGxZWFpsSUdWc1pXMWxiblFnYjI0Z1pXNTBaWElnWW5rZ2FXNXFaV04wYVc1bklHRnVJR2x1YzJWeWRDQm9iMjlyWEc0Z0lDQWdiV1Z5WjJWV1RtOWtaVWh2YjJzb2RtNXZaR1VzSUNkcGJuTmxjblFuTENCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQjJZWElnY0dGeVpXNTBJRDBnWld3dWNHRnlaVzUwVG05a1pUdGNiaUFnSUNBZ0lIWmhjaUJ3Wlc1a2FXNW5UbTlrWlNBOUlIQmhjbVZ1ZENBbUppQndZWEpsYm5RdVgzQmxibVJwYm1jZ0ppWWdjR0Z5Wlc1MExsOXdaVzVrYVc1blczWnViMlJsTG10bGVWMDdYRzRnSUNBZ0lDQnBaaUFvY0dWdVpHbHVaMDV2WkdVZ0ppWmNiaUFnSUNBZ0lDQWdjR1Z1WkdsdVowNXZaR1V1ZEdGbklEMDlQU0IyYm05a1pTNTBZV2NnSmlaY2JpQWdJQ0FnSUNBZ2NHVnVaR2x1WjA1dlpHVXVaV3h0TGw5c1pXRjJaVU5pWEc0Z0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ2NHVnVaR2x1WjA1dlpHVXVaV3h0TGw5c1pXRjJaVU5pS0NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCbGJuUmxja2h2YjJzZ0ppWWdaVzUwWlhKSWIyOXJLR1ZzTENCallpazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2THlCemRHRnlkQ0JsYm5SbGNpQjBjbUZ1YzJsMGFXOXVYRzRnSUdKbFptOXlaVVZ1ZEdWeVNHOXZheUFtSmlCaVpXWnZjbVZGYm5SbGNraHZiMnNvWld3cE8xeHVJQ0JwWmlBb1pYaHdaV04wYzBOVFV5a2dlMXh1SUNBZ0lHRmtaRlJ5WVc1emFYUnBiMjVEYkdGemN5aGxiQ3dnYzNSaGNuUkRiR0Z6Y3lrN1hHNGdJQ0FnWVdSa1ZISmhibk5wZEdsdmJrTnNZWE56S0dWc0xDQmhZM1JwZG1WRGJHRnpjeWs3WEc0Z0lDQWdibVY0ZEVaeVlXMWxLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUdGa1pGUnlZVzV6YVhScGIyNURiR0Z6Y3lobGJDd2dkRzlEYkdGemN5azdYRzRnSUNBZ0lDQnlaVzF2ZG1WVWNtRnVjMmwwYVc5dVEyeGhjM01vWld3c0lITjBZWEowUTJ4aGMzTXBPMXh1SUNBZ0lDQWdhV1lnS0NGallpNWpZVzVqWld4c1pXUWdKaVlnSVhWelpYSlhZVzUwYzBOdmJuUnliMndwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x6Vm1Gc2FXUkVkWEpoZEdsdmJpaGxlSEJzYVdOcGRFVnVkR1Z5UkhWeVlYUnBiMjRwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjMlYwVkdsdFpXOTFkQ2hqWWl3Z1pYaHdiR2xqYVhSRmJuUmxja1IxY21GMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCM2FHVnVWSEpoYm5OcGRHbHZia1Z1WkhNb1pXd3NJSFI1Y0dVc0lHTmlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ2FXWWdLSFp1YjJSbExtUmhkR0V1YzJodmR5a2dlMXh1SUNBZ0lIUnZaMmRzWlVScGMzQnNZWGtnSmlZZ2RHOW5aMnhsUkdsemNHeGhlU2dwTzF4dUlDQWdJR1Z1ZEdWeVNHOXZheUFtSmlCbGJuUmxja2h2YjJzb1pXd3NJR05pS1R0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2doWlhod1pXTjBjME5UVXlBbUppQWhkWE5sY2xkaGJuUnpRMjl1ZEhKdmJDa2dlMXh1SUNBZ0lHTmlLQ2s3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2JHVmhkbVVnS0hadWIyUmxMQ0J5YlNrZ2UxeHVJQ0IyWVhJZ1pXd2dQU0IyYm05a1pTNWxiRzA3WEc1Y2JpQWdMeThnWTJGc2JDQmxiblJsY2lCallXeHNZbUZqYXlCdWIzZGNiaUFnYVdZZ0tHbHpSR1ZtS0dWc0xsOWxiblJsY2tOaUtTa2dlMXh1SUNBZ0lHVnNMbDlsYm5SbGNrTmlMbU5oYm1ObGJHeGxaQ0E5SUhSeWRXVTdYRzRnSUNBZ1pXd3VYMlZ1ZEdWeVEySW9LVHRjYmlBZ2ZWeHVYRzRnSUhaaGNpQmtZWFJoSUQwZ2NtVnpiMngyWlZSeVlXNXphWFJwYjI0b2RtNXZaR1V1WkdGMFlTNTBjbUZ1YzJsMGFXOXVLVHRjYmlBZ2FXWWdLR2x6Vlc1a1pXWW9aR0YwWVNrZ2ZId2daV3d1Ym05a1pWUjVjR1VnSVQwOUlERXBJSHRjYmlBZ0lDQnlaWFIxY200Z2NtMG9LVnh1SUNCOVhHNWNiaUFnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdsbUlDb3ZYRzRnSUdsbUlDaHBjMFJsWmlobGJDNWZiR1ZoZG1WRFlpa3BJSHRjYmlBZ0lDQnlaWFIxY201Y2JpQWdmVnh1WEc0Z0lIWmhjaUJqYzNNZ1BTQmtZWFJoTG1OemN6dGNiaUFnZG1GeUlIUjVjR1VnUFNCa1lYUmhMblI1Y0dVN1hHNGdJSFpoY2lCc1pXRjJaVU5zWVhOeklEMGdaR0YwWVM1c1pXRjJaVU5zWVhOek8xeHVJQ0IyWVhJZ2JHVmhkbVZVYjBOc1lYTnpJRDBnWkdGMFlTNXNaV0YyWlZSdlEyeGhjM003WEc0Z0lIWmhjaUJzWldGMlpVRmpkR2wyWlVOc1lYTnpJRDBnWkdGMFlTNXNaV0YyWlVGamRHbDJaVU5zWVhOek8xeHVJQ0IyWVhJZ1ltVm1iM0psVEdWaGRtVWdQU0JrWVhSaExtSmxabTl5WlV4bFlYWmxPMXh1SUNCMllYSWdiR1ZoZG1VZ1BTQmtZWFJoTG14bFlYWmxPMXh1SUNCMllYSWdZV1owWlhKTVpXRjJaU0E5SUdSaGRHRXVZV1owWlhKTVpXRjJaVHRjYmlBZ2RtRnlJR3hsWVhabFEyRnVZMlZzYkdWa0lEMGdaR0YwWVM1c1pXRjJaVU5oYm1ObGJHeGxaRHRjYmlBZ2RtRnlJR1JsYkdGNVRHVmhkbVVnUFNCa1lYUmhMbVJsYkdGNVRHVmhkbVU3WEc0Z0lIWmhjaUJrZFhKaGRHbHZiaUE5SUdSaGRHRXVaSFZ5WVhScGIyNDdYRzVjYmlBZ2RtRnlJR1Y0Y0dWamRITkRVMU1nUFNCamMzTWdJVDA5SUdaaGJITmxJQ1ltSUNGcGMwbEZPVHRjYmlBZ2RtRnlJSFZ6WlhKWFlXNTBjME52Ym5SeWIyd2dQU0JuWlhSSWIyOXJRWEpuZFcxbGJuUnpUR1Z1WjNSb0tHeGxZWFpsS1R0Y2JseHVJQ0IyWVhJZ1pYaHdiR2xqYVhSTVpXRjJaVVIxY21GMGFXOXVJRDBnZEc5T2RXMWlaWElvWEc0Z0lDQWdhWE5QWW1wbFkzUW9aSFZ5WVhScGIyNHBYRzRnSUNBZ0lDQS9JR1IxY21GMGFXOXVMbXhsWVhabFhHNGdJQ0FnSUNBNklHUjFjbUYwYVc5dVhHNGdJQ2s3WEc1Y2JpQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ0ppWWdhWE5FWldZb1pYaHdiR2xqYVhSTVpXRjJaVVIxY21GMGFXOXVLU2tnZTF4dUlDQWdJR05vWldOclJIVnlZWFJwYjI0b1pYaHdiR2xqYVhSTVpXRjJaVVIxY21GMGFXOXVMQ0FuYkdWaGRtVW5MQ0IyYm05a1pTazdYRzRnSUgxY2JseHVJQ0IyWVhJZ1kySWdQU0JsYkM1ZmJHVmhkbVZEWWlBOUlHOXVZMlVvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUdsbUlDaGxiQzV3WVhKbGJuUk9iMlJsSUNZbUlHVnNMbkJoY21WdWRFNXZaR1V1WDNCbGJtUnBibWNwSUh0Y2JpQWdJQ0FnSUdWc0xuQmhjbVZ1ZEU1dlpHVXVYM0JsYm1ScGJtZGJkbTV2WkdVdWEyVjVYU0E5SUc1MWJHdzdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaGxlSEJsWTNSelExTlRLU0I3WEc0Z0lDQWdJQ0J5WlcxdmRtVlVjbUZ1YzJsMGFXOXVRMnhoYzNNb1pXd3NJR3hsWVhabFZHOURiR0Z6Y3lrN1hHNGdJQ0FnSUNCeVpXMXZkbVZVY21GdWMybDBhVzl1UTJ4aGMzTW9aV3dzSUd4bFlYWmxRV04wYVhabFEyeGhjM01wTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvWTJJdVkyRnVZMlZzYkdWa0tTQjdYRzRnSUNBZ0lDQnBaaUFvWlhod1pXTjBjME5UVXlrZ2UxeHVJQ0FnSUNBZ0lDQnlaVzF2ZG1WVWNtRnVjMmwwYVc5dVEyeGhjM01vWld3c0lHeGxZWFpsUTJ4aGMzTXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdiR1ZoZG1WRFlXNWpaV3hzWldRZ0ppWWdiR1ZoZG1WRFlXNWpaV3hzWldRb1pXd3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCeWJTZ3BPMXh1SUNBZ0lDQWdZV1owWlhKTVpXRjJaU0FtSmlCaFpuUmxja3hsWVhabEtHVnNLVHRjYmlBZ0lDQjlYRzRnSUNBZ1pXd3VYMnhsWVhabFEySWdQU0J1ZFd4c08xeHVJQ0I5S1R0Y2JseHVJQ0JwWmlBb1pHVnNZWGxNWldGMlpTa2dlMXh1SUNBZ0lHUmxiR0Y1VEdWaGRtVW9jR1Z5Wm05eWJVeGxZWFpsS1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCd1pYSm1iM0p0VEdWaGRtVW9LVHRjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUhCbGNtWnZjbTFNWldGMlpTQW9LU0I3WEc0Z0lDQWdMeThnZEdobElHUmxiR0Y1WldRZ2JHVmhkbVVnYldGNUlHaGhkbVVnWVd4eVpXRmtlU0JpWldWdUlHTmhibU5sYkd4bFpGeHVJQ0FnSUdsbUlDaGpZaTVqWVc1alpXeHNaV1FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlibHh1SUNBZ0lIMWNiaUFnSUNBdkx5QnlaV052Y21RZ2JHVmhkbWx1WnlCbGJHVnRaVzUwWEc0Z0lDQWdhV1lnS0NGMmJtOWtaUzVrWVhSaExuTm9iM2NwSUh0Y2JpQWdJQ0FnSUNobGJDNXdZWEpsYm5ST2IyUmxMbDl3Wlc1a2FXNW5JSHg4SUNobGJDNXdZWEpsYm5ST2IyUmxMbDl3Wlc1a2FXNW5JRDBnZTMwcEtWc29kbTV2WkdVdWEyVjVLVjBnUFNCMmJtOWtaVHRjYmlBZ0lDQjlYRzRnSUNBZ1ltVm1iM0psVEdWaGRtVWdKaVlnWW1WbWIzSmxUR1ZoZG1Vb1pXd3BPMXh1SUNBZ0lHbG1JQ2hsZUhCbFkzUnpRMU5US1NCN1hHNGdJQ0FnSUNCaFpHUlVjbUZ1YzJsMGFXOXVRMnhoYzNNb1pXd3NJR3hsWVhabFEyeGhjM01wTzF4dUlDQWdJQ0FnWVdSa1ZISmhibk5wZEdsdmJrTnNZWE56S0dWc0xDQnNaV0YyWlVGamRHbDJaVU5zWVhOektUdGNiaUFnSUNBZ0lHNWxlSFJHY21GdFpTaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUdGa1pGUnlZVzV6YVhScGIyNURiR0Z6Y3lobGJDd2diR1ZoZG1WVWIwTnNZWE56S1R0Y2JpQWdJQ0FnSUNBZ2NtVnRiM1psVkhKaGJuTnBkR2x2YmtOc1lYTnpLR1ZzTENCc1pXRjJaVU5zWVhOektUdGNiaUFnSUNBZ0lDQWdhV1lnS0NGallpNWpZVzVqWld4c1pXUWdKaVlnSVhWelpYSlhZVzUwYzBOdmJuUnliMndwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYVhOV1lXeHBaRVIxY21GMGFXOXVLR1Y0Y0d4cFkybDBUR1ZoZG1WRWRYSmhkR2x2YmlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb1kySXNJR1Y0Y0d4cFkybDBUR1ZoZG1WRWRYSmhkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhkb1pXNVVjbUZ1YzJsMGFXOXVSVzVrY3lobGJDd2dkSGx3WlN3Z1kySXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVJQ0FnSUd4bFlYWmxJQ1ltSUd4bFlYWmxLR1ZzTENCallpazdYRzRnSUNBZ2FXWWdLQ0ZsZUhCbFkzUnpRMU5USUNZbUlDRjFjMlZ5VjJGdWRITkRiMjUwY205c0tTQjdYRzRnSUNBZ0lDQmpZaWdwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc0dkx5QnZibXg1SUhWelpXUWdhVzRnWkdWMklHMXZaR1ZjYm1aMWJtTjBhVzl1SUdOb1pXTnJSSFZ5WVhScGIyNGdLSFpoYkN3Z2JtRnRaU3dnZG01dlpHVXBJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQjJZV3dnSVQwOUlDZHVkVzFpWlhJbktTQjdYRzRnSUNBZ2QyRnliaWhjYmlBZ0lDQWdJRndpUEhSeVlXNXphWFJwYjI0K0lHVjRjR3hwWTJsMElGd2lJQ3NnYm1GdFpTQXJJRndpSUdSMWNtRjBhVzl1SUdseklHNXZkQ0JoSUhaaGJHbGtJRzUxYldKbGNpQXRJRndpSUN0Y2JpQWdJQ0FnSUZ3aVoyOTBJRndpSUNzZ0tFcFRUMDR1YzNSeWFXNW5hV1o1S0haaGJDa3BJQ3NnWENJdVhDSXNYRzRnSUNBZ0lDQjJibTlrWlM1amIyNTBaWGgwWEc0Z0lDQWdLVHRjYmlBZ2ZTQmxiSE5sSUdsbUlDaHBjMDVoVGloMllXd3BLU0I3WEc0Z0lDQWdkMkZ5YmloY2JpQWdJQ0FnSUZ3aVBIUnlZVzV6YVhScGIyNCtJR1Y0Y0d4cFkybDBJRndpSUNzZ2JtRnRaU0FySUZ3aUlHUjFjbUYwYVc5dUlHbHpJRTVoVGlBdElGd2lJQ3RjYmlBZ0lDQWdJQ2QwYUdVZ1pIVnlZWFJwYjI0Z1pYaHdjbVZ6YzJsdmJpQnRhV2RvZENCaVpTQnBibU52Y25KbFkzUXVKeXhjYmlBZ0lDQWdJSFp1YjJSbExtTnZiblJsZUhSY2JpQWdJQ0FwTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHbHpWbUZzYVdSRWRYSmhkR2x2YmlBb2RtRnNLU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnZG1Gc0lEMDlQU0FuYm5WdFltVnlKeUFtSmlBaGFYTk9ZVTRvZG1Gc0tWeHVmVnh1WEc0dktpcGNiaUFxSUU1dmNtMWhiR2w2WlNCaElIUnlZVzV6YVhScGIyNGdhRzl2YXlkeklHRnlaM1Z0Wlc1MElHeGxibWQwYUM0Z1ZHaGxJR2h2YjJzZ2JXRjVJR0psT2x4dUlDb2dMU0JoSUcxbGNtZGxaQ0JvYjI5cklDaHBiblp2YTJWeUtTQjNhWFJvSUhSb1pTQnZjbWxuYVc1aGJDQnBiaUF1Wm01elhHNGdLaUF0SUdFZ2QzSmhjSEJsWkNCamIyMXdiMjVsYm5RZ2JXVjBhRzlrSUNoamFHVmpheUF1WDJ4bGJtZDBhQ2xjYmlBcUlDMGdZU0J3YkdGcGJpQm1kVzVqZEdsdmJpQW9MbXhsYm1kMGFDbGNiaUFxTDF4dVpuVnVZM1JwYjI0Z1oyVjBTRzl2YTBGeVozVnRaVzUwYzB4bGJtZDBhQ0FvWm00cElIdGNiaUFnYVdZZ0tHbHpWVzVrWldZb1ptNHBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sWEc0Z0lIMWNiaUFnZG1GeUlHbHVkbTlyWlhKR2JuTWdQU0JtYmk1bWJuTTdYRzRnSUdsbUlDaHBjMFJsWmlocGJuWnZhMlZ5Um01ektTa2dlMXh1SUNBZ0lDOHZJR2x1ZG05clpYSmNiaUFnSUNCeVpYUjFjbTRnWjJWMFNHOXZhMEZ5WjNWdFpXNTBjMHhsYm1kMGFDaGNiaUFnSUNBZ0lFRnljbUY1TG1selFYSnlZWGtvYVc1MmIydGxja1p1Y3lsY2JpQWdJQ0FnSUNBZ1B5QnBiblp2YTJWeVJtNXpXekJkWEc0Z0lDQWdJQ0FnSURvZ2FXNTJiMnRsY2tadWMxeHVJQ0FnSUNsY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCeVpYUjFjbTRnS0dadUxsOXNaVzVuZEdnZ2ZId2dabTR1YkdWdVozUm9LU0ErSURGY2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmZaVzUwWlhJZ0tGOHNJSFp1YjJSbEtTQjdYRzRnSUdsbUlDaDJibTlrWlM1a1lYUmhMbk5vYjNjZ0lUMDlJSFJ5ZFdVcElIdGNiaUFnSUNCbGJuUmxjaWgyYm05a1pTazdYRzRnSUgxY2JuMWNibHh1ZG1GeUlIUnlZVzV6YVhScGIyNGdQU0JwYmtKeWIzZHpaWElnUHlCN1hHNGdJR055WldGMFpUb2dYMlZ1ZEdWeUxGeHVJQ0JoWTNScGRtRjBaVG9nWDJWdWRHVnlMRnh1SUNCeVpXMXZkbVU2SUdaMWJtTjBhVzl1SUhKbGJXOTJaU1FrTVNBb2RtNXZaR1VzSUhKdEtTQjdYRzRnSUNBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHVnNjMlVnS2k5Y2JpQWdJQ0JwWmlBb2RtNXZaR1V1WkdGMFlTNXphRzkzSUNFOVBTQjBjblZsS1NCN1hHNGdJQ0FnSUNCc1pXRjJaU2gyYm05a1pTd2djbTBwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnliU2dwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmU0E2SUh0OU8xeHVYRzUyWVhJZ2NHeGhkR1p2Y20xTmIyUjFiR1Z6SUQwZ1cxeHVJQ0JoZEhSeWN5eGNiaUFnYTJ4aGMzTXNYRzRnSUdWMlpXNTBjeXhjYmlBZ1pHOXRVSEp2Y0hNc1hHNGdJSE4wZVd4bExGeHVJQ0IwY21GdWMybDBhVzl1WEc1ZE8xeHVYRzR2S2lBZ0tpOWNibHh1THk4Z2RHaGxJR1JwY21WamRHbDJaU0J0YjJSMWJHVWdjMmh2ZFd4a0lHSmxJR0Z3Y0d4cFpXUWdiR0Z6ZEN3Z1lXWjBaWElnWVd4c1hHNHZMeUJpZFdsc2RDMXBiaUJ0YjJSMWJHVnpJR2hoZG1VZ1ltVmxiaUJoY0hCc2FXVmtMbHh1ZG1GeUlHMXZaSFZzWlhNZ1BTQndiR0YwWm05eWJVMXZaSFZzWlhNdVkyOXVZMkYwS0dKaGMyVk5iMlIxYkdWektUdGNibHh1ZG1GeUlIQmhkR05vSUQwZ1kzSmxZWFJsVUdGMFkyaEdkVzVqZEdsdmJpaDdJRzV2WkdWUGNITTZJRzV2WkdWUGNITXNJRzF2WkhWc1pYTTZJRzF2WkhWc1pYTWdmU2s3WEc1Y2JpOHFLbHh1SUNvZ1RtOTBJSFI1Y0dVZ1kyaGxZMnRwYm1jZ2RHaHBjeUJtYVd4bElHSmxZMkYxYzJVZ1pteHZkeUJrYjJWemJpZDBJR3hwYTJVZ1lYUjBZV05vYVc1blhHNGdLaUJ3Y205d1pYSjBhV1Z6SUhSdklFVnNaVzFsYm5SekxseHVJQ292WEc1Y2JpOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dWFXWWdLR2x6U1VVNUtTQjdYRzRnSUM4dklHaDBkSEE2THk5M2QzY3ViV0YwZEhNME1URXVZMjl0TDNCdmMzUXZhVzUwWlhKdVpYUXRaWGh3Ykc5eVpYSXRPUzF2Ym1sdWNIVjBMMXh1SUNCa2IyTjFiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkelpXeGxZM1JwYjI1amFHRnVaMlVuTENCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2RtRnlJR1ZzSUQwZ1pHOWpkVzFsYm5RdVlXTjBhWFpsUld4bGJXVnVkRHRjYmlBZ0lDQnBaaUFvWld3Z0ppWWdaV3d1ZG0xdlpHVnNLU0I3WEc0Z0lDQWdJQ0IwY21sbloyVnlLR1ZzTENBbmFXNXdkWFFuS1R0Y2JpQWdJQ0I5WEc0Z0lIMHBPMXh1ZlZ4dVhHNTJZWElnWkdseVpXTjBhWFpsSUQwZ2UxeHVJQ0JwYm5ObGNuUmxaRG9nWm5WdVkzUnBiMjRnYVc1elpYSjBaV1FnS0dWc0xDQmlhVzVrYVc1bkxDQjJibTlrWlN3Z2IyeGtWbTV2WkdVcElIdGNiaUFnSUNCcFppQW9kbTV2WkdVdWRHRm5JRDA5UFNBbmMyVnNaV04wSnlrZ2UxeHVJQ0FnSUNBZ0x5OGdJelk1TUROY2JpQWdJQ0FnSUdsbUlDaHZiR1JXYm05a1pTNWxiRzBnSmlZZ0lXOXNaRlp1YjJSbExtVnNiUzVmZGs5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ2JXVnlaMlZXVG05a1pVaHZiMnNvZG01dlpHVXNJQ2R3YjNOMGNHRjBZMmduTENCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWkdseVpXTjBhWFpsTG1OdmJYQnZibVZ1ZEZWd1pHRjBaV1FvWld3c0lHSnBibVJwYm1jc0lIWnViMlJsS1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnpaWFJUWld4bFkzUmxaQ2hsYkN3Z1ltbHVaR2x1Wnl3Z2RtNXZaR1V1WTI5dWRHVjRkQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JsYkM1ZmRrOXdkR2x2Ym5NZ1BTQmJYUzV0WVhBdVkyRnNiQ2hsYkM1dmNIUnBiMjV6TENCblpYUldZV3gxWlNrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMmJtOWtaUzUwWVdjZ1BUMDlJQ2QwWlhoMFlYSmxZU2NnZkh3Z2FYTlVaWGgwU1c1d2RYUlVlWEJsS0dWc0xuUjVjR1VwS1NCN1hHNGdJQ0FnSUNCbGJDNWZkazF2WkdsbWFXVnljeUE5SUdKcGJtUnBibWN1Ylc5a2FXWnBaWEp6TzF4dUlDQWdJQ0FnYVdZZ0tDRmlhVzVrYVc1bkxtMXZaR2xtYVdWeWN5NXNZWHA1S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRk5oWm1GeWFTQThJREV3TGpJZ0ppQlZTVmRsWWxacFpYY2daRzlsYzI0bmRDQm1hWEpsSUdOdmJYQnZjMmwwYVc5dVpXNWtJSGRvWlc1Y2JpQWdJQ0FnSUNBZ0x5OGdjM2RwZEdOb2FXNW5JR1p2WTNWeklHSmxabTl5WlNCamIyNW1hWEp0YVc1bklHTnZiWEJ2YzJsMGFXOXVJR05vYjJsalpWeHVJQ0FnSUNBZ0lDQXZMeUIwYUdseklHRnNjMjhnWm1sNFpYTWdkR2hsSUdsemMzVmxJSGRvWlhKbElITnZiV1VnWW5KdmQzTmxjbk1nWlM1bkxpQnBUMU1nUTJoeWIyMWxYRzRnSUNBZ0lDQWdJQzh2SUdacGNtVnpJRndpWTJoaGJtZGxYQ0lnYVc1emRHVmhaQ0J2WmlCY0ltbHVjSFYwWENJZ2IyNGdZWFYwYjJOdmJYQnNaWFJsTGx4dUlDQWdJQ0FnSUNCbGJDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGphR0Z1WjJVbkxDQnZia052YlhCdmMybDBhVzl1Ulc1a0tUdGNiaUFnSUNBZ0lDQWdhV1lnS0NGcGMwRnVaSEp2YVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0JsYkM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamIyMXdiM05wZEdsdmJuTjBZWEowSnl3Z2IyNURiMjF3YjNOcGRHbHZibE4wWVhKMEtUdGNiaUFnSUNBZ0lDQWdJQ0JsYkM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamIyMXdiM05wZEdsdmJtVnVaQ2NzSUc5dVEyOXRjRzl6YVhScGIyNUZibVFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dUlDQWdJQ0FnSUNCcFppQW9hWE5KUlRrcElIdGNiaUFnSUNBZ0lDQWdJQ0JsYkM1MmJXOWtaV3dnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOUxGeHVYRzRnSUdOdmJYQnZibVZ1ZEZWd1pHRjBaV1E2SUdaMWJtTjBhVzl1SUdOdmJYQnZibVZ1ZEZWd1pHRjBaV1FnS0dWc0xDQmlhVzVrYVc1bkxDQjJibTlrWlNrZ2UxeHVJQ0FnSUdsbUlDaDJibTlrWlM1MFlXY2dQVDA5SUNkelpXeGxZM1FuS1NCN1hHNGdJQ0FnSUNCelpYUlRaV3hsWTNSbFpDaGxiQ3dnWW1sdVpHbHVaeXdnZG01dlpHVXVZMjl1ZEdWNGRDazdYRzRnSUNBZ0lDQXZMeUJwYmlCallYTmxJSFJvWlNCdmNIUnBiMjV6SUhKbGJtUmxjbVZrSUdKNUlIWXRabTl5SUdoaGRtVWdZMmhoYm1kbFpDeGNiaUFnSUNBZ0lDOHZJR2wwSjNNZ2NHOXpjMmxpYkdVZ2RHaGhkQ0IwYUdVZ2RtRnNkV1VnYVhNZ2IzVjBMVzltTFhONWJtTWdkMmwwYUNCMGFHVWdjbVZ1WkdWeVpXUWdiM0IwYVc5dWN5NWNiaUFnSUNBZ0lDOHZJR1JsZEdWamRDQnpkV05vSUdOaGMyVnpJR0Z1WkNCbWFXeDBaWElnYjNWMElIWmhiSFZsY3lCMGFHRjBJRzV2SUd4dmJtZGxjaUJvWVhNZ1lTQnRZWFJqYUdsdVoxeHVJQ0FnSUNBZ0x5OGdiM0IwYVc5dUlHbHVJSFJvWlNCRVQwMHVYRzRnSUNBZ0lDQjJZWElnY0hKbGRrOXdkR2x2Ym5NZ1BTQmxiQzVmZGs5d2RHbHZibk03WEc0Z0lDQWdJQ0IyWVhJZ1kzVnlUM0IwYVc5dWN5QTlJR1ZzTGw5MlQzQjBhVzl1Y3lBOUlGdGRMbTFoY0M1allXeHNLR1ZzTG05d2RHbHZibk1zSUdkbGRGWmhiSFZsS1R0Y2JpQWdJQ0FnSUdsbUlDaGpkWEpQY0hScGIyNXpMbk52YldVb1puVnVZM1JwYjI0Z0tHOHNJR2twSUhzZ2NtVjBkWEp1SUNGc2IyOXpaVVZ4ZFdGc0tHOHNJSEJ5WlhaUGNIUnBiMjV6VzJsZEtUc2dmU2twSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdkSEpwWjJkbGNpQmphR0Z1WjJVZ1pYWmxiblFnYVdaY2JpQWdJQ0FnSUNBZ0x5OGdibThnYldGMFkyaHBibWNnYjNCMGFXOXVJR1p2ZFc1a0lHWnZjaUJoZENCc1pXRnpkQ0J2Ym1VZ2RtRnNkV1ZjYmlBZ0lDQWdJQ0FnZG1GeUlHNWxaV1JTWlhObGRDQTlJR1ZzTG0xMWJIUnBjR3hsWEc0Z0lDQWdJQ0FnSUNBZ1B5QmlhVzVrYVc1bkxuWmhiSFZsTG5OdmJXVW9ablZ1WTNScGIyNGdLSFlwSUhzZ2NtVjBkWEp1SUdoaGMwNXZUV0YwWTJocGJtZFBjSFJwYjI0b2Rpd2dZM1Z5VDNCMGFXOXVjeWs3SUgwcFhHNGdJQ0FnSUNBZ0lDQWdPaUJpYVc1a2FXNW5MblpoYkhWbElDRTlQU0JpYVc1a2FXNW5MbTlzWkZaaGJIVmxJQ1ltSUdoaGMwNXZUV0YwWTJocGJtZFBjSFJwYjI0b1ltbHVaR2x1Wnk1MllXeDFaU3dnWTNWeVQzQjBhVzl1Y3lrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h1WldWa1VtVnpaWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBjbWxuWjJWeUtHVnNMQ0FuWTJoaGJtZGxKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc1Y2JtWjFibU4wYVc5dUlITmxkRk5sYkdWamRHVmtJQ2hsYkN3Z1ltbHVaR2x1Wnl3Z2RtMHBJSHRjYmlBZ1lXTjBkV0ZzYkhsVFpYUlRaV3hsWTNSbFpDaGxiQ3dnWW1sdVpHbHVaeXdnZG0wcE8xeHVJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYVdZZ0tpOWNiaUFnYVdZZ0tHbHpTVVVnZkh3Z2FYTkZaR2RsS1NCN1hHNGdJQ0FnYzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQmhZM1IxWVd4c2VWTmxkRk5sYkdWamRHVmtLR1ZzTENCaWFXNWthVzVuTENCMmJTazdYRzRnSUNBZ2ZTd2dNQ2s3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1lXTjBkV0ZzYkhsVFpYUlRaV3hsWTNSbFpDQW9aV3dzSUdKcGJtUnBibWNzSUhadEtTQjdYRzRnSUhaaGNpQjJZV3gxWlNBOUlHSnBibVJwYm1jdWRtRnNkV1U3WEc0Z0lIWmhjaUJwYzAxMWJIUnBjR3hsSUQwZ1pXd3ViWFZzZEdsd2JHVTdYRzRnSUdsbUlDaHBjMDExYkhScGNHeGxJQ1ltSUNGQmNuSmhlUzVwYzBGeWNtRjVLSFpoYkhWbEtTa2dlMXh1SUNBZ0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dKaVlnZDJGeWJpaGNiaUFnSUNBZ0lGd2lQSE5sYkdWamRDQnRkV3gwYVhCc1pTQjJMVzF2WkdWc1BWeGNYQ0pjSWlBcklDaGlhVzVrYVc1bkxtVjRjSEpsYzNOcGIyNHBJQ3NnWENKY1hGd2lQaUJjSWlBclhHNGdJQ0FnSUNCY0ltVjRjR1ZqZEhNZ1lXNGdRWEp5WVhrZ2RtRnNkV1VnWm05eUlHbDBjeUJpYVc1a2FXNW5MQ0JpZFhRZ1oyOTBJRndpSUNzZ0tFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2gyWVd4MVpTa3VjMnhwWTJVb09Dd2dMVEVwS1N4Y2JpQWdJQ0FnSUhadFhHNGdJQ0FnS1R0Y2JpQWdJQ0J5WlhSMWNtNWNiaUFnZlZ4dUlDQjJZWElnYzJWc1pXTjBaV1FzSUc5d2RHbHZianRjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUd3Z1BTQmxiQzV2Y0hScGIyNXpMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeWtnZTF4dUlDQWdJRzl3ZEdsdmJpQTlJR1ZzTG05d2RHbHZibk5iYVYwN1hHNGdJQ0FnYVdZZ0tHbHpUWFZzZEdsd2JHVXBJSHRjYmlBZ0lDQWdJSE5sYkdWamRHVmtJRDBnYkc5dmMyVkpibVJsZUU5bUtIWmhiSFZsTENCblpYUldZV3gxWlNodmNIUnBiMjRwS1NBK0lDMHhPMXh1SUNBZ0lDQWdhV1lnS0c5d2RHbHZiaTV6Wld4bFkzUmxaQ0FoUFQwZ2MyVnNaV04wWldRcElIdGNiaUFnSUNBZ0lDQWdiM0IwYVc5dUxuTmxiR1ZqZEdWa0lEMGdjMlZzWldOMFpXUTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdsbUlDaHNiMjl6WlVWeGRXRnNLR2RsZEZaaGJIVmxLRzl3ZEdsdmJpa3NJSFpoYkhWbEtTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1pXd3VjMlZzWldOMFpXUkpibVJsZUNBaFBUMGdhU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHVnNMbk5sYkdWamRHVmtTVzVrWlhnZ1BTQnBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnlibHh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnBaaUFvSVdselRYVnNkR2x3YkdVcElIdGNiaUFnSUNCbGJDNXpaV3hsWTNSbFpFbHVaR1Y0SUQwZ0xURTdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnYUdGelRtOU5ZWFJqYUdsdVowOXdkR2x2YmlBb2RtRnNkV1VzSUc5d2RHbHZibk1wSUh0Y2JpQWdjbVYwZFhKdUlHOXdkR2x2Ym5NdVpYWmxjbmtvWm5WdVkzUnBiMjRnS0c4cElIc2djbVYwZFhKdUlDRnNiMjl6WlVWeGRXRnNLRzhzSUhaaGJIVmxLVHNnZlNsY2JuMWNibHh1Wm5WdVkzUnBiMjRnWjJWMFZtRnNkV1VnS0c5d2RHbHZiaWtnZTF4dUlDQnlaWFIxY200Z0oxOTJZV3gxWlNjZ2FXNGdiM0IwYVc5dVhHNGdJQ0FnUHlCdmNIUnBiMjR1WDNaaGJIVmxYRzRnSUNBZ09pQnZjSFJwYjI0dWRtRnNkV1ZjYm4xY2JseHVablZ1WTNScGIyNGdiMjVEYjIxd2IzTnBkR2x2YmxOMFlYSjBJQ2hsS1NCN1hHNGdJR1V1ZEdGeVoyVjBMbU52YlhCdmMybHVaeUE5SUhSeWRXVTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHOXVRMjl0Y0c5emFYUnBiMjVGYm1RZ0tHVXBJSHRjYmlBZ0x5OGdjSEpsZG1WdWRDQjBjbWxuWjJWeWFXNW5JR0Z1SUdsdWNIVjBJR1YyWlc1MElHWnZjaUJ1YnlCeVpXRnpiMjVjYmlBZ2FXWWdLQ0ZsTG5SaGNtZGxkQzVqYjIxd2IzTnBibWNwSUhzZ2NtVjBkWEp1SUgxY2JpQWdaUzUwWVhKblpYUXVZMjl0Y0c5emFXNW5JRDBnWm1Gc2MyVTdYRzRnSUhSeWFXZG5aWElvWlM1MFlYSm5aWFFzSUNkcGJuQjFkQ2NwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUIwY21sbloyVnlJQ2hsYkN3Z2RIbHdaU2tnZTF4dUlDQjJZWElnWlNBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWMlpXNTBLQ2RJVkUxTVJYWmxiblJ6SnlrN1hHNGdJR1V1YVc1cGRFVjJaVzUwS0hSNWNHVXNJSFJ5ZFdVc0lIUnlkV1VwTzF4dUlDQmxiQzVrYVhOd1lYUmphRVYyWlc1MEtHVXBPMXh1ZlZ4dVhHNHZLaUFnS2k5Y2JseHVMeThnY21WamRYSnphWFpsYkhrZ2MyVmhjbU5vSUdadmNpQndiM056YVdKc1pTQjBjbUZ1YzJsMGFXOXVJR1JsWm1sdVpXUWdhVzV6YVdSbElIUm9aU0JqYjIxd2IyNWxiblFnY205dmRGeHVablZ1WTNScGIyNGdiRzlqWVhSbFRtOWtaU0FvZG01dlpHVXBJSHRjYmlBZ2NtVjBkWEp1SUhadWIyUmxMbU52YlhCdmJtVnVkRWx1YzNSaGJtTmxJQ1ltSUNnaGRtNXZaR1V1WkdGMFlTQjhmQ0FoZG01dlpHVXVaR0YwWVM1MGNtRnVjMmwwYVc5dUtWeHVJQ0FnSUQ4Z2JHOWpZWFJsVG05a1pTaDJibTlrWlM1amIyMXdiMjVsYm5SSmJuTjBZVzVqWlM1ZmRtNXZaR1VwWEc0Z0lDQWdPaUIyYm05a1pWeHVmVnh1WEc1MllYSWdjMmh2ZHlBOUlIdGNiaUFnWW1sdVpEb2dablZ1WTNScGIyNGdZbWx1WkNBb1pXd3NJSEpsWml3Z2RtNXZaR1VwSUh0Y2JpQWdJQ0IyWVhJZ2RtRnNkV1VnUFNCeVpXWXVkbUZzZFdVN1hHNWNiaUFnSUNCMmJtOWtaU0E5SUd4dlkyRjBaVTV2WkdVb2RtNXZaR1VwTzF4dUlDQWdJSFpoY2lCMGNtRnVjMmwwYVc5dUpDUXhJRDBnZG01dlpHVXVaR0YwWVNBbUppQjJibTlrWlM1a1lYUmhMblJ5WVc1emFYUnBiMjQ3WEc0Z0lDQWdkbUZ5SUc5eWFXZHBibUZzUkdsemNHeGhlU0E5SUdWc0xsOWZkazl5YVdkcGJtRnNSR2x6Y0d4aGVTQTlYRzRnSUNBZ0lDQmxiQzV6ZEhsc1pTNWthWE53YkdGNUlEMDlQU0FuYm05dVpTY2dQeUFuSnlBNklHVnNMbk4wZVd4bExtUnBjM0JzWVhrN1hHNGdJQ0FnYVdZZ0tIWmhiSFZsSUNZbUlIUnlZVzV6YVhScGIyNGtKREVwSUh0Y2JpQWdJQ0FnSUhadWIyUmxMbVJoZEdFdWMyaHZkeUE5SUhSeWRXVTdYRzRnSUNBZ0lDQmxiblJsY2loMmJtOWtaU3dnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQmxiQzV6ZEhsc1pTNWthWE53YkdGNUlEMGdiM0pwWjJsdVlXeEVhWE53YkdGNU8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdWc0xuTjBlV3hsTG1ScGMzQnNZWGtnUFNCMllXeDFaU0EvSUc5eWFXZHBibUZzUkdsemNHeGhlU0E2SUNkdWIyNWxKenRjYmlBZ0lDQjlYRzRnSUgwc1hHNWNiaUFnZFhCa1lYUmxPaUJtZFc1amRHbHZiaUIxY0dSaGRHVWdLR1ZzTENCeVpXWXNJSFp1YjJSbEtTQjdYRzRnSUNBZ2RtRnlJSFpoYkhWbElEMGdjbVZtTG5aaGJIVmxPMXh1SUNBZ0lIWmhjaUJ2YkdSV1lXeDFaU0E5SUhKbFppNXZiR1JXWVd4MVpUdGNibHh1SUNBZ0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dUlDQWdJR2xtSUNoMllXeDFaU0E5UFQwZ2IyeGtWbUZzZFdVcElIc2djbVYwZFhKdUlIMWNiaUFnSUNCMmJtOWtaU0E5SUd4dlkyRjBaVTV2WkdVb2RtNXZaR1VwTzF4dUlDQWdJSFpoY2lCMGNtRnVjMmwwYVc5dUpDUXhJRDBnZG01dlpHVXVaR0YwWVNBbUppQjJibTlrWlM1a1lYUmhMblJ5WVc1emFYUnBiMjQ3WEc0Z0lDQWdhV1lnS0hSeVlXNXphWFJwYjI0a0pERXBJSHRjYmlBZ0lDQWdJSFp1YjJSbExtUmhkR0V1YzJodmR5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCcFppQW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdaVzUwWlhJb2RtNXZaR1VzSUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0JsYkM1emRIbHNaUzVrYVhOd2JHRjVJRDBnWld3dVgxOTJUM0pwWjJsdVlXeEVhWE53YkdGNU8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR3hsWVhabEtIWnViMlJsTENCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWld3dWMzUjViR1V1WkdsemNHeGhlU0E5SUNkdWIyNWxKenRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR1ZzTG5OMGVXeGxMbVJwYzNCc1lYa2dQU0IyWVd4MVpTQS9JR1ZzTGw5ZmRrOXlhV2RwYm1Gc1JHbHpjR3hoZVNBNklDZHViMjVsSnp0Y2JpQWdJQ0I5WEc0Z0lIMHNYRzVjYmlBZ2RXNWlhVzVrT2lCbWRXNWpkR2x2YmlCMWJtSnBibVFnS0Z4dUlDQWdJR1ZzTEZ4dUlDQWdJR0pwYm1ScGJtY3NYRzRnSUNBZ2RtNXZaR1VzWEc0Z0lDQWdiMnhrVm01dlpHVXNYRzRnSUNBZ2FYTkVaWE4wY205NVhHNGdJQ2tnZTF4dUlDQWdJR2xtSUNnaGFYTkVaWE4wY205NUtTQjdYRzRnSUNBZ0lDQmxiQzV6ZEhsc1pTNWthWE53YkdGNUlEMGdaV3d1WDE5MlQzSnBaMmx1WVd4RWFYTndiR0Y1TzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVHRjYmx4dWRtRnlJSEJzWVhSbWIzSnRSR2x5WldOMGFYWmxjeUE5SUh0Y2JpQWdiVzlrWld3NklHUnBjbVZqZEdsMlpTeGNiaUFnYzJodmR6b2djMmh2ZDF4dWZUdGNibHh1THlvZ0lDb3ZYRzVjYmk4dklGQnliM1pwWkdWeklIUnlZVzV6YVhScGIyNGdjM1Z3Y0c5eWRDQm1iM0lnWVNCemFXNW5iR1VnWld4bGJXVnVkQzlqYjIxd2IyNWxiblF1WEc0dkx5QnpkWEJ3YjNKMGN5QjBjbUZ1YzJsMGFXOXVJRzF2WkdVZ0tHOTFkQzFwYmlBdklHbHVMVzkxZENsY2JseHVkbUZ5SUhSeVlXNXphWFJwYjI1UWNtOXdjeUE5SUh0Y2JpQWdibUZ0WlRvZ1UzUnlhVzVuTEZ4dUlDQmhjSEJsWVhJNklFSnZiMnhsWVc0c1hHNGdJR056Y3pvZ1FtOXZiR1ZoYml4Y2JpQWdiVzlrWlRvZ1UzUnlhVzVuTEZ4dUlDQjBlWEJsT2lCVGRISnBibWNzWEc0Z0lHVnVkR1Z5UTJ4aGMzTTZJRk4wY21sdVp5eGNiaUFnYkdWaGRtVkRiR0Z6Y3pvZ1UzUnlhVzVuTEZ4dUlDQmxiblJsY2xSdlEyeGhjM002SUZOMGNtbHVaeXhjYmlBZ2JHVmhkbVZVYjBOc1lYTnpPaUJUZEhKcGJtY3NYRzRnSUdWdWRHVnlRV04wYVhabFEyeGhjM002SUZOMGNtbHVaeXhjYmlBZ2JHVmhkbVZCWTNScGRtVkRiR0Z6Y3pvZ1UzUnlhVzVuTEZ4dUlDQmhjSEJsWVhKRGJHRnpjem9nVTNSeWFXNW5MRnh1SUNCaGNIQmxZWEpCWTNScGRtVkRiR0Z6Y3pvZ1UzUnlhVzVuTEZ4dUlDQmhjSEJsWVhKVWIwTnNZWE56T2lCVGRISnBibWNzWEc0Z0lHUjFjbUYwYVc5dU9pQmJUblZ0WW1WeUxDQlRkSEpwYm1jc0lFOWlhbVZqZEYxY2JuMDdYRzVjYmk4dklHbHVJR05oYzJVZ2RHaGxJR05vYVd4a0lHbHpJR0ZzYzI4Z1lXNGdZV0p6ZEhKaFkzUWdZMjl0Y0c5dVpXNTBMQ0JsTG1jdUlEeHJaV1Z3TFdGc2FYWmxQbHh1THk4Z2QyVWdkMkZ1ZENCMGJ5QnlaV04xY25OcGRtVnNlU0J5WlhSeWFXVjJaU0IwYUdVZ2NtVmhiQ0JqYjIxd2IyNWxiblFnZEc4Z1ltVWdjbVZ1WkdWeVpXUmNibVoxYm1OMGFXOXVJR2RsZEZKbFlXeERhR2xzWkNBb2RtNXZaR1VwSUh0Y2JpQWdkbUZ5SUdOdmJYQlBjSFJwYjI1eklEMGdkbTV2WkdVZ0ppWWdkbTV2WkdVdVkyOXRjRzl1Wlc1MFQzQjBhVzl1Y3p0Y2JpQWdhV1lnS0dOdmJYQlBjSFJwYjI1eklDWW1JR052YlhCUGNIUnBiMjV6TGtOMGIzSXViM0IwYVc5dWN5NWhZbk4wY21GamRDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCblpYUlNaV0ZzUTJocGJHUW9aMlYwUm1seWMzUkRiMjF3YjI1bGJuUkRhR2xzWkNoamIyMXdUM0IwYVc5dWN5NWphR2xzWkhKbGJpa3BYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlIWnViMlJsWEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1pYaDBjbUZqZEZSeVlXNXphWFJwYjI1RVlYUmhJQ2hqYjIxd0tTQjdYRzRnSUhaaGNpQmtZWFJoSUQwZ2UzMDdYRzRnSUhaaGNpQnZjSFJwYjI1eklEMGdZMjl0Y0M0a2IzQjBhVzl1Y3p0Y2JpQWdMeThnY0hKdmNITmNiaUFnWm05eUlDaDJZWElnYTJWNUlHbHVJRzl3ZEdsdmJuTXVjSEp2Y0hORVlYUmhLU0I3WEc0Z0lDQWdaR0YwWVZ0clpYbGRJRDBnWTI5dGNGdHJaWGxkTzF4dUlDQjlYRzRnSUM4dklHVjJaVzUwY3k1Y2JpQWdMeThnWlhoMGNtRmpkQ0JzYVhOMFpXNWxjbk1nWVc1a0lIQmhjM01nZEdobGJTQmthWEpsWTNSc2VTQjBieUIwYUdVZ2RISmhibk5wZEdsdmJpQnRaWFJvYjJSelhHNGdJSFpoY2lCc2FYTjBaVzVsY25NZ1BTQnZjSFJwYjI1ekxsOXdZWEpsYm5STWFYTjBaVzVsY25NN1hHNGdJR1p2Y2lBb2RtRnlJR3RsZVNReElHbHVJR3hwYzNSbGJtVnljeWtnZTF4dUlDQWdJR1JoZEdGYlkyRnRaV3hwZW1Vb2EyVjVKREVwWFNBOUlHeHBjM1JsYm1WeWMxdHJaWGtrTVYwN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUdSaGRHRmNibjFjYmx4dVpuVnVZM1JwYjI0Z2NHeGhZMlZvYjJ4a1pYSWdLR2dzSUhKaGQwTm9hV3hrS1NCN1hHNGdJR2xtSUNndlhGeGtMV3RsWlhBdFlXeHBkbVVrTHk1MFpYTjBLSEpoZDBOb2FXeGtMblJoWnlrcElIdGNiaUFnSUNCeVpYUjFjbTRnYUNnbmEyVmxjQzFoYkdsMlpTY3NJSHRjYmlBZ0lDQWdJSEJ5YjNCek9pQnlZWGREYUdsc1pDNWpiMjF3YjI1bGJuUlBjSFJwYjI1ekxuQnliM0J6UkdGMFlWeHVJQ0FnSUgwcFhHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdhR0Z6VUdGeVpXNTBWSEpoYm5OcGRHbHZiaUFvZG01dlpHVXBJSHRjYmlBZ2QyaHBiR1VnS0NoMmJtOWtaU0E5SUhadWIyUmxMbkJoY21WdWRDa3BJSHRjYmlBZ0lDQnBaaUFvZG01dlpHVXVaR0YwWVM1MGNtRnVjMmwwYVc5dUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RISjFaVnh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJwYzFOaGJXVkRhR2xzWkNBb1kyaHBiR1FzSUc5c1pFTm9hV3hrS1NCN1hHNGdJSEpsZEhWeWJpQnZiR1JEYUdsc1pDNXJaWGtnUFQwOUlHTm9hV3hrTG10bGVTQW1KaUJ2YkdSRGFHbHNaQzUwWVdjZ1BUMDlJR05vYVd4a0xuUmhaMXh1ZlZ4dVhHNTJZWElnVkhKaGJuTnBkR2x2YmlBOUlIdGNiaUFnYm1GdFpUb2dKM1J5WVc1emFYUnBiMjRuTEZ4dUlDQndjbTl3Y3pvZ2RISmhibk5wZEdsdmJsQnliM0J6TEZ4dUlDQmhZbk4wY21GamREb2dkSEoxWlN4Y2JseHVJQ0J5Wlc1a1pYSTZJR1oxYm1OMGFXOXVJSEpsYm1SbGNpQW9hQ2tnZTF4dUlDQWdJSFpoY2lCMGFHbHpKREVnUFNCMGFHbHpPMXh1WEc0Z0lDQWdkbUZ5SUdOb2FXeGtjbVZ1SUQwZ2RHaHBjeTRrYzJ4dmRITXVaR1ZtWVhWc2REdGNiaUFnSUNCcFppQW9JV05vYVd4a2NtVnVLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5Qm1hV3gwWlhJZ2IzVjBJSFJsZUhRZ2JtOWtaWE1nS0hCdmMzTnBZbXhsSUhkb2FYUmxjM0JoWTJWektWeHVJQ0FnSUdOb2FXeGtjbVZ1SUQwZ1kyaHBiR1J5Wlc0dVptbHNkR1Z5S0daMWJtTjBhVzl1SUNoaktTQjdJSEpsZEhWeWJpQmpMblJoWnlCOGZDQnBjMEZ6ZVc1alVHeGhZMlZvYjJ4a1pYSW9ZeWs3SUgwcE8xeHVJQ0FnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNBZ0lHbG1JQ2doWTJocGJHUnlaVzR1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QjNZWEp1SUcxMWJIUnBjR3hsSUdWc1pXMWxiblJ6WEc0Z0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ0ppWWdZMmhwYkdSeVpXNHViR1Z1WjNSb0lENGdNU2tnZTF4dUlDQWdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDQWdKengwY21GdWMybDBhVzl1UGlCallXNGdiMjVzZVNCaVpTQjFjMlZrSUc5dUlHRWdjMmx1WjJ4bElHVnNaVzFsYm5RdUlGVnpaU0FuSUN0Y2JpQWdJQ0FnSUNBZ0p6eDBjbUZ1YzJsMGFXOXVMV2R5YjNWd1BpQm1iM0lnYkdsemRITXVKeXhjYmlBZ0lDQWdJQ0FnZEdocGN5NGtjR0Z5Wlc1MFhHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhaaGNpQnRiMlJsSUQwZ2RHaHBjeTV0YjJSbE8xeHVYRzRnSUNBZ0x5OGdkMkZ5YmlCcGJuWmhiR2xrSUcxdlpHVmNiaUFnSUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUFtSmx4dUlDQWdJQ0FnYlc5a1pTQW1KaUJ0YjJSbElDRTlQU0FuYVc0dGIzVjBKeUFtSmlCdGIyUmxJQ0U5UFNBbmIzVjBMV2x1SjF4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDQWdKMmx1ZG1Gc2FXUWdQSFJ5WVc1emFYUnBiMjQrSUcxdlpHVTZJQ2NnS3lCdGIyUmxMRnh1SUNBZ0lDQWdJQ0IwYUdsekxpUndZWEpsYm5SY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlISmhkME5vYVd4a0lEMGdZMmhwYkdSeVpXNWJNRjA3WEc1Y2JpQWdJQ0F2THlCcFppQjBhR2x6SUdseklHRWdZMjl0Y0c5dVpXNTBJSEp2YjNRZ2JtOWtaU0JoYm1RZ2RHaGxJR052YlhCdmJtVnVkQ2R6WEc0Z0lDQWdMeThnY0dGeVpXNTBJR052Ym5SaGFXNWxjaUJ1YjJSbElHRnNjMjhnYUdGeklIUnlZVzV6YVhScGIyNHNJSE5yYVhBdVhHNGdJQ0FnYVdZZ0tHaGhjMUJoY21WdWRGUnlZVzV6YVhScGIyNG9kR2hwY3k0a2RtNXZaR1VwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnY21GM1EyaHBiR1JjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJoY0hCc2VTQjBjbUZ1YzJsMGFXOXVJR1JoZEdFZ2RHOGdZMmhwYkdSY2JpQWdJQ0F2THlCMWMyVWdaMlYwVW1WaGJFTm9hV3hrS0NrZ2RHOGdhV2R1YjNKbElHRmljM1J5WVdOMElHTnZiWEJ2Ym1WdWRITWdaUzVuTGlCclpXVndMV0ZzYVhabFhHNGdJQ0FnZG1GeUlHTm9hV3hrSUQwZ1oyVjBVbVZoYkVOb2FXeGtLSEpoZDBOb2FXeGtLVHRjYmlBZ0lDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdhV1lnS2k5Y2JpQWdJQ0JwWmlBb0lXTm9hV3hrS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnY21GM1EyaHBiR1JjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NWZiR1ZoZG1sdVp5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIQnNZV05sYUc5c1pHVnlLR2dzSUhKaGQwTm9hV3hrS1Z4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUdWdWMzVnlaU0JoSUd0bGVTQjBhR0YwSUdseklIVnVhWEYxWlNCMGJ5QjBhR1VnZG01dlpHVWdkSGx3WlNCaGJtUWdkRzhnZEdocGN5QjBjbUZ1YzJsMGFXOXVYRzRnSUNBZ0x5OGdZMjl0Y0c5dVpXNTBJR2x1YzNSaGJtTmxMaUJVYUdseklHdGxlU0IzYVd4c0lHSmxJSFZ6WldRZ2RHOGdjbVZ0YjNabElIQmxibVJwYm1jZ2JHVmhkbWx1WnlCdWIyUmxjMXh1SUNBZ0lDOHZJR1IxY21sdVp5QmxiblJsY21sdVp5NWNiaUFnSUNCMllYSWdhV1FnUFNCY0lsOWZkSEpoYm5OcGRHbHZiaTFjSWlBcklDaDBhR2x6TGw5MWFXUXBJQ3NnWENJdFhDSTdYRzRnSUNBZ1kyaHBiR1F1YTJWNUlEMGdZMmhwYkdRdWEyVjVJRDA5SUc1MWJHeGNiaUFnSUNBZ0lEOGdZMmhwYkdRdWFYTkRiMjF0Wlc1MFhHNGdJQ0FnSUNBZ0lEOGdhV1FnS3lBblkyOXRiV1Z1ZENkY2JpQWdJQ0FnSUNBZ09pQnBaQ0FySUdOb2FXeGtMblJoWjF4dUlDQWdJQ0FnT2lCcGMxQnlhVzFwZEdsMlpTaGphR2xzWkM1clpYa3BYRzRnSUNBZ0lDQWdJRDhnS0ZOMGNtbHVaeWhqYUdsc1pDNXJaWGtwTG1sdVpHVjRUMllvYVdRcElEMDlQU0F3SUQ4Z1kyaHBiR1F1YTJWNUlEb2dhV1FnS3lCamFHbHNaQzVyWlhrcFhHNGdJQ0FnSUNBZ0lEb2dZMmhwYkdRdWEyVjVPMXh1WEc0Z0lDQWdkbUZ5SUdSaGRHRWdQU0FvWTJocGJHUXVaR0YwWVNCOGZDQW9ZMmhwYkdRdVpHRjBZU0E5SUh0OUtTa3VkSEpoYm5OcGRHbHZiaUE5SUdWNGRISmhZM1JVY21GdWMybDBhVzl1UkdGMFlTaDBhR2x6S1R0Y2JpQWdJQ0IyWVhJZ2IyeGtVbUYzUTJocGJHUWdQU0IwYUdsekxsOTJibTlrWlR0Y2JpQWdJQ0IyWVhJZ2IyeGtRMmhwYkdRZ1BTQm5aWFJTWldGc1EyaHBiR1FvYjJ4a1VtRjNRMmhwYkdRcE8xeHVYRzRnSUNBZ0x5OGdiV0Z5YXlCMkxYTm9iM2RjYmlBZ0lDQXZMeUJ6YnlCMGFHRjBJSFJvWlNCMGNtRnVjMmwwYVc5dUlHMXZaSFZzWlNCallXNGdhR0Z1WkNCdmRtVnlJSFJvWlNCamIyNTBjbTlzSUhSdklIUm9aU0JrYVhKbFkzUnBkbVZjYmlBZ0lDQnBaaUFvWTJocGJHUXVaR0YwWVM1a2FYSmxZM1JwZG1WeklDWW1JR05vYVd4a0xtUmhkR0V1WkdseVpXTjBhWFpsY3k1emIyMWxLR1oxYm1OMGFXOXVJQ2hrS1NCN0lISmxkSFZ5YmlCa0xtNWhiV1VnUFQwOUlDZHphRzkzSnpzZ2ZTa3BJSHRjYmlBZ0lDQWdJR05vYVd4a0xtUmhkR0V1YzJodmR5QTlJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ2IyeGtRMmhwYkdRZ0ppWmNiaUFnSUNBZ0lHOXNaRU5vYVd4a0xtUmhkR0VnSmlaY2JpQWdJQ0FnSUNGcGMxTmhiV1ZEYUdsc1pDaGphR2xzWkN3Z2IyeGtRMmhwYkdRcElDWW1YRzRnSUNBZ0lDQWhhWE5CYzNsdVkxQnNZV05sYUc5c1pHVnlLRzlzWkVOb2FXeGtLU0FtSmx4dUlDQWdJQ0FnTHk4Z0l6WTJPRGNnWTI5dGNHOXVaVzUwSUhKdmIzUWdhWE1nWVNCamIyMXRaVzUwSUc1dlpHVmNiaUFnSUNBZ0lDRW9iMnhrUTJocGJHUXVZMjl0Y0c5dVpXNTBTVzV6ZEdGdVkyVWdKaVlnYjJ4a1EyaHBiR1F1WTI5dGNHOXVaVzUwU1c1emRHRnVZMlV1WDNadWIyUmxMbWx6UTI5dGJXVnVkQ2xjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJQzh2SUhKbGNHeGhZMlVnYjJ4a0lHTm9hV3hrSUhSeVlXNXphWFJwYjI0Z1pHRjBZU0IzYVhSb0lHWnlaWE5vSUc5dVpWeHVJQ0FnSUNBZ0x5OGdhVzF3YjNKMFlXNTBJR1p2Y2lCa2VXNWhiV2xqSUhSeVlXNXphWFJwYjI1eklWeHVJQ0FnSUNBZ2RtRnlJRzlzWkVSaGRHRWdQU0J2YkdSRGFHbHNaQzVrWVhSaExuUnlZVzV6YVhScGIyNGdQU0JsZUhSbGJtUW9lMzBzSUdSaGRHRXBPMXh1SUNBZ0lDQWdMeThnYUdGdVpHeGxJSFJ5WVc1emFYUnBiMjRnYlc5a1pWeHVJQ0FnSUNBZ2FXWWdLRzF2WkdVZ1BUMDlJQ2R2ZFhRdGFXNG5LU0I3WEc0Z0lDQWdJQ0FnSUM4dklISmxkSFZ5YmlCd2JHRmpaV2h2YkdSbGNpQnViMlJsSUdGdVpDQnhkV1YxWlNCMWNHUmhkR1VnZDJobGJpQnNaV0YyWlNCbWFXNXBjMmhsYzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlzWldGMmFXNW5JRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdiV1Z5WjJWV1RtOWtaVWh2YjJzb2IyeGtSR0YwWVN3Z0oyRm1kR1Z5VEdWaGRtVW5MQ0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3lReExsOXNaV0YyYVc1bklEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3lReExpUm1iM0pqWlZWd1pHRjBaU2dwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIQnNZV05sYUc5c1pHVnlLR2dzSUhKaGQwTm9hV3hrS1Z4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNodGIyUmxJRDA5UFNBbmFXNHRiM1YwSnlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYVhOQmMzbHVZMUJzWVdObGFHOXNaR1Z5S0dOb2FXeGtLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdmJHUlNZWGREYUdsc1pGeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFpoY2lCa1pXeGhlV1ZrVEdWaGRtVTdYRzRnSUNBZ0lDQWdJSFpoY2lCd1pYSm1iM0p0VEdWaGRtVWdQU0JtZFc1amRHbHZiaUFvS1NCN0lHUmxiR0Y1WldSTVpXRjJaU2dwT3lCOU8xeHVJQ0FnSUNBZ0lDQnRaWEpuWlZaT2IyUmxTRzl2YXloa1lYUmhMQ0FuWVdaMFpYSkZiblJsY2ljc0lIQmxjbVp2Y20xTVpXRjJaU2s3WEc0Z0lDQWdJQ0FnSUcxbGNtZGxWazV2WkdWSWIyOXJLR1JoZEdFc0lDZGxiblJsY2tOaGJtTmxiR3hsWkNjc0lIQmxjbVp2Y20xTVpXRjJaU2s3WEc0Z0lDQWdJQ0FnSUcxbGNtZGxWazV2WkdWSWIyOXJLRzlzWkVSaGRHRXNJQ2RrWld4aGVVeGxZWFpsSnl3Z1puVnVZM1JwYjI0Z0tHeGxZWFpsS1NCN0lHUmxiR0Y1WldSTVpXRjJaU0E5SUd4bFlYWmxPeUI5S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdjbUYzUTJocGJHUmNiaUFnZlZ4dWZUdGNibHh1THlvZ0lDb3ZYRzVjYmk4dklGQnliM1pwWkdWeklIUnlZVzV6YVhScGIyNGdjM1Z3Y0c5eWRDQm1iM0lnYkdsemRDQnBkR1Z0Y3k1Y2JpOHZJSE4xY0hCdmNuUnpJRzF2ZG1VZ2RISmhibk5wZEdsdmJuTWdkWE5wYm1jZ2RHaGxJRVpNU1ZBZ2RHVmphRzVwY1hWbExseHVYRzR2THlCQ1pXTmhkWE5sSUhSb1pTQjJaRzl0SjNNZ1kyaHBiR1J5Wlc0Z2RYQmtZWFJsSUdGc1oyOXlhWFJvYlNCcGN5QmNJblZ1YzNSaFlteGxYQ0lnTFNCcExtVXVYRzR2THlCcGRDQmtiMlZ6YmlkMElHZDFZWEpoYm5SbFpTQjBhR1VnY21Wc1lYUnBkbVVnY0c5emFYUnBiMjVwYm1jZ2IyWWdjbVZ0YjNabFpDQmxiR1Z0Wlc1MGN5eGNiaTh2SUhkbElHWnZjbU5sSUhSeVlXNXphWFJwYjI0dFozSnZkWEFnZEc4Z2RYQmtZWFJsSUdsMGN5QmphR2xzWkhKbGJpQnBiblJ2SUhSM2J5QndZWE56WlhNNlhHNHZMeUJwYmlCMGFHVWdabWx5YzNRZ2NHRnpjeXdnZDJVZ2NtVnRiM1psSUdGc2JDQnViMlJsY3lCMGFHRjBJRzVsWldRZ2RHOGdZbVVnY21WdGIzWmxaQ3hjYmk4dklIUnlhV2RuWlhKcGJtY2dkR2hsYVhJZ2JHVmhkbWx1WnlCMGNtRnVjMmwwYVc5dU95QnBiaUIwYUdVZ2MyVmpiMjVrSUhCaGMzTXNJSGRsSUdsdWMyVnlkQzl0YjNabFhHNHZMeUJwYm5SdklIUm9aU0JtYVc1aGJDQmtaWE5wY21Wa0lITjBZWFJsTGlCVWFHbHpJSGRoZVNCcGJpQjBhR1VnYzJWamIyNWtJSEJoYzNNZ2NtVnRiM1psWkZ4dUx5OGdibTlrWlhNZ2QybHNiQ0J5WlcxaGFXNGdkMmhsY21VZ2RHaGxlU0J6YUc5MWJHUWdZbVV1WEc1Y2JuWmhjaUJ3Y205d2N5QTlJR1Y0ZEdWdVpDaDdYRzRnSUhSaFp6b2dVM1J5YVc1bkxGeHVJQ0J0YjNabFEyeGhjM002SUZOMGNtbHVaMXh1ZlN3Z2RISmhibk5wZEdsdmJsQnliM0J6S1R0Y2JseHVaR1ZzWlhSbElIQnliM0J6TG0xdlpHVTdYRzVjYm5aaGNpQlVjbUZ1YzJsMGFXOXVSM0p2ZFhBZ1BTQjdYRzRnSUhCeWIzQnpPaUJ3Y205d2N5eGNibHh1SUNCeVpXNWtaWEk2SUdaMWJtTjBhVzl1SUhKbGJtUmxjaUFvYUNrZ2UxeHVJQ0FnSUhaaGNpQjBZV2NnUFNCMGFHbHpMblJoWnlCOGZDQjBhR2x6TGlSMmJtOWtaUzVrWVhSaExuUmhaeUI4ZkNBbmMzQmhiaWM3WEc0Z0lDQWdkbUZ5SUcxaGNDQTlJRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2s3WEc0Z0lDQWdkbUZ5SUhCeVpYWkRhR2xzWkhKbGJpQTlJSFJvYVhNdWNISmxka05vYVd4a2NtVnVJRDBnZEdocGN5NWphR2xzWkhKbGJqdGNiaUFnSUNCMllYSWdjbUYzUTJocGJHUnlaVzRnUFNCMGFHbHpMaVJ6Ykc5MGN5NWtaV1poZFd4MElIeDhJRnRkTzF4dUlDQWdJSFpoY2lCamFHbHNaSEpsYmlBOUlIUm9hWE11WTJocGJHUnlaVzRnUFNCYlhUdGNiaUFnSUNCMllYSWdkSEpoYm5OcGRHbHZia1JoZEdFZ1BTQmxlSFJ5WVdOMFZISmhibk5wZEdsdmJrUmhkR0VvZEdocGN5azdYRzVjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSEpoZDBOb2FXeGtjbVZ1TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQjJZWElnWXlBOUlISmhkME5vYVd4a2NtVnVXMmxkTzF4dUlDQWdJQ0FnYVdZZ0tHTXVkR0ZuS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqTG10bGVTQWhQU0J1ZFd4c0lDWW1JRk4wY21sdVp5aGpMbXRsZVNrdWFXNWtaWGhQWmlnblgxOTJiR2x6ZENjcElDRTlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMmhwYkdSeVpXNHVjSFZ6YUNoaktUdGNiaUFnSUNBZ0lDQWdJQ0J0WVhCYll5NXJaWGxkSUQwZ1kxeHVJQ0FnSUNBZ0lDQWdJRHNvWXk1a1lYUmhJSHg4SUNoakxtUmhkR0VnUFNCN2ZTa3BMblJ5WVc1emFYUnBiMjRnUFNCMGNtRnVjMmwwYVc5dVJHRjBZVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHOXdkSE1nUFNCakxtTnZiWEJ2Ym1WdWRFOXdkR2x2Ym5NN1hHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUc1aGJXVWdQU0J2Y0hSeklEOGdLRzl3ZEhNdVEzUnZjaTV2Y0hScGIyNXpMbTVoYldVZ2ZId2diM0IwY3k1MFlXY2dmSHdnSnljcElEb2dZeTUwWVdjN1hHNGdJQ0FnSUNBZ0lDQWdkMkZ5Ymlnb1hDSThkSEpoYm5OcGRHbHZiaTFuY205MWNENGdZMmhwYkdSeVpXNGdiWFZ6ZENCaVpTQnJaWGxsWkRvZ1BGd2lJQ3NnYm1GdFpTQXJJRndpUGx3aUtTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvY0hKbGRrTm9hV3hrY21WdUtTQjdYRzRnSUNBZ0lDQjJZWElnYTJWd2RDQTlJRnRkTzF4dUlDQWdJQ0FnZG1GeUlISmxiVzkyWldRZ1BTQmJYVHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2trTVNBOUlEQTdJR2trTVNBOElIQnlaWFpEYUdsc1pISmxiaTVzWlc1bmRHZzdJR2trTVNzcktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCakpERWdQU0J3Y21WMlEyaHBiR1J5Wlc1YmFTUXhYVHRjYmlBZ0lDQWdJQ0FnWXlReExtUmhkR0V1ZEhKaGJuTnBkR2x2YmlBOUlIUnlZVzV6YVhScGIyNUVZWFJoTzF4dUlDQWdJQ0FnSUNCakpERXVaR0YwWVM1d2IzTWdQU0JqSkRFdVpXeHRMbWRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENncE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYldGd1cyTWtNUzVyWlhsZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYTJWd2RDNXdkWE5vS0dNa01TazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WdGIzWmxaQzV3ZFhOb0tHTWtNU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhSb2FYTXVhMlZ3ZENBOUlHZ29kR0ZuTENCdWRXeHNMQ0JyWlhCMEtUdGNiaUFnSUNBZ0lIUm9hWE11Y21WdGIzWmxaQ0E5SUhKbGJXOTJaV1E3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHZ29kR0ZuTENCdWRXeHNMQ0JqYUdsc1pISmxiaWxjYmlBZ2ZTeGNibHh1SUNCaVpXWnZjbVZWY0dSaGRHVTZJR1oxYm1OMGFXOXVJR0psWm05eVpWVndaR0YwWlNBb0tTQjdYRzRnSUNBZ0x5OGdabTl5WTJVZ2NtVnRiM1pwYm1jZ2NHRnpjMXh1SUNBZ0lIUm9hWE11WDE5d1lYUmphRjlmS0Z4dUlDQWdJQ0FnZEdocGN5NWZkbTV2WkdVc1hHNGdJQ0FnSUNCMGFHbHpMbXRsY0hRc1hHNGdJQ0FnSUNCbVlXeHpaU3dnTHk4Z2FIbGtjbUYwYVc1blhHNGdJQ0FnSUNCMGNuVmxJQzh2SUhKbGJXOTJaVTl1YkhrZ0tDRnBiWEJ2Y25SaGJuUWdZWFp2YVdSeklIVnVibVZqWlhOellYSjVJRzF2ZG1WektWeHVJQ0FnSUNrN1hHNGdJQ0FnZEdocGN5NWZkbTV2WkdVZ1BTQjBhR2x6TG10bGNIUTdYRzRnSUgwc1hHNWNiaUFnZFhCa1lYUmxaRG9nWm5WdVkzUnBiMjRnZFhCa1lYUmxaQ0FvS1NCN1hHNGdJQ0FnZG1GeUlHTm9hV3hrY21WdUlEMGdkR2hwY3k1d2NtVjJRMmhwYkdSeVpXNDdYRzRnSUNBZ2RtRnlJRzF2ZG1WRGJHRnpjeUE5SUhSb2FYTXViVzkyWlVOc1lYTnpJSHg4SUNnb2RHaHBjeTV1WVcxbElIeDhJQ2QySnlrZ0t5QW5MVzF2ZG1VbktUdGNiaUFnSUNCcFppQW9JV05vYVd4a2NtVnVMbXhsYm1kMGFDQjhmQ0FoZEdocGN5NW9ZWE5OYjNabEtHTm9hV3hrY21WdVd6QmRMbVZzYlN3Z2JXOTJaVU5zWVhOektTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z2QyVWdaR2wyYVdSbElIUm9aU0IzYjNKcklHbHVkRzhnZEdoeVpXVWdiRzl2Y0hNZ2RHOGdZWFp2YVdRZ2JXbDRhVzVuSUVSUFRTQnlaV0ZrY3lCaGJtUWdkM0pwZEdWelhHNGdJQ0FnTHk4Z2FXNGdaV0ZqYUNCcGRHVnlZWFJwYjI0Z0xTQjNhR2xqYUNCb1pXeHdjeUJ3Y21WMlpXNTBJR3hoZVc5MWRDQjBhSEpoYzJocGJtY3VYRzRnSUNBZ1kyaHBiR1J5Wlc0dVptOXlSV0ZqYUNoallXeHNVR1Z1WkdsdVowTmljeWs3WEc0Z0lDQWdZMmhwYkdSeVpXNHVabTl5UldGamFDaHlaV052Y21SUWIzTnBkR2x2YmlrN1hHNGdJQ0FnWTJocGJHUnlaVzR1Wm05eVJXRmphQ2hoY0hCc2VWUnlZVzV6YkdGMGFXOXVLVHRjYmx4dUlDQWdJQzh2SUdadmNtTmxJSEpsWm14dmR5QjBieUJ3ZFhRZ1pYWmxjbmwwYUdsdVp5QnBiaUJ3YjNOcGRHbHZibHh1SUNBZ0lDOHZJR0Z6YzJsbmJpQjBieUIwYUdseklIUnZJR0YyYjJsa0lHSmxhVzVuSUhKbGJXOTJaV1FnYVc0Z2RISmxaUzF6YUdGcmFXNW5YRzRnSUNBZ0x5OGdKR1pzYjNjdFpHbHpZV0pzWlMxc2FXNWxYRzRnSUNBZ2RHaHBjeTVmY21WbWJHOTNJRDBnWkc5amRXMWxiblF1WW05a2VTNXZabVp6WlhSSVpXbG5hSFE3WEc1Y2JpQWdJQ0JqYUdsc1pISmxiaTVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2hqS1NCN1hHNGdJQ0FnSUNCcFppQW9ZeTVrWVhSaExtMXZkbVZrS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJsYkNBOUlHTXVaV3h0TzF4dUlDQWdJQ0FnSUNCMllYSWdjeUE5SUdWc0xuTjBlV3hsTzF4dUlDQWdJQ0FnSUNCaFpHUlVjbUZ1YzJsMGFXOXVRMnhoYzNNb1pXd3NJRzF2ZG1WRGJHRnpjeWs3WEc0Z0lDQWdJQ0FnSUhNdWRISmhibk5tYjNKdElEMGdjeTVYWldKcmFYUlVjbUZ1YzJadmNtMGdQU0J6TG5SeVlXNXphWFJwYjI1RWRYSmhkR2x2YmlBOUlDY25PMXh1SUNBZ0lDQWdJQ0JsYkM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0hSeVlXNXphWFJwYjI1RmJtUkZkbVZ1ZEN3Z1pXd3VYMjF2ZG1WRFlpQTlJR1oxYm1OMGFXOXVJR05pSUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmxJSHg4SUM5MGNtRnVjMlp2Y20wa0x5NTBaWE4wS0dVdWNISnZjR1Z5ZEhsT1lXMWxLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaV3d1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2loMGNtRnVjMmwwYVc5dVJXNWtSWFpsYm5Rc0lHTmlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNMbDl0YjNabFEySWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WdGIzWmxWSEpoYm5OcGRHbHZia05zWVhOektHVnNMQ0J0YjNabFEyeGhjM01wTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lIMHNYRzVjYmlBZ2JXVjBhRzlrY3pvZ2UxeHVJQ0FnSUdoaGMwMXZkbVU2SUdaMWJtTjBhVzl1SUdoaGMwMXZkbVVnS0dWc0xDQnRiM1psUTJ4aGMzTXBJSHRjYmlBZ0lDQWdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0JwWmlBcUwxeHVJQ0FnSUNBZ2FXWWdLQ0ZvWVhOVWNtRnVjMmwwYVc5dUtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdsbUlDb3ZYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWZhR0Z6VFc5MlpTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmFHRnpUVzkyWlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnTHk4Z1JHVjBaV04wSUhkb1pYUm9aWElnWVc0Z1pXeGxiV1Z1ZENCM2FYUm9JSFJvWlNCdGIzWmxJR05zWVhOeklHRndjR3hwWldRZ2FHRnpYRzRnSUNBZ0lDQXZMeUJEVTFNZ2RISmhibk5wZEdsdmJuTXVJRk5wYm1ObElIUm9aU0JsYkdWdFpXNTBJRzFoZVNCaVpTQnBibk5wWkdVZ1lXNGdaVzUwWlhKcGJtZGNiaUFnSUNBZ0lDOHZJSFJ5WVc1emFYUnBiMjRnWVhRZ2RHaHBjeUIyWlhKNUlHMXZiV1Z1ZEN3Z2QyVWdiV0ZyWlNCaElHTnNiMjVsSUc5bUlHbDBJR0Z1WkNCeVpXMXZkbVZjYmlBZ0lDQWdJQzh2SUdGc2JDQnZkR2hsY2lCMGNtRnVjMmwwYVc5dUlHTnNZWE56WlhNZ1lYQndiR2xsWkNCMGJ5Qmxibk4xY21VZ2IyNXNlU0IwYUdVZ2JXOTJaU0JqYkdGemMxeHVJQ0FnSUNBZ0x5OGdhWE1nWVhCd2JHbGxaQzVjYmlBZ0lDQWdJSFpoY2lCamJHOXVaU0E5SUdWc0xtTnNiMjVsVG05a1pTZ3BPMXh1SUNBZ0lDQWdhV1lnS0dWc0xsOTBjbUZ1YzJsMGFXOXVRMnhoYzNObGN5a2dlMXh1SUNBZ0lDQWdJQ0JsYkM1ZmRISmhibk5wZEdsdmJrTnNZWE56WlhNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb1kyeHpLU0I3SUhKbGJXOTJaVU5zWVhOektHTnNiMjVsTENCamJITXBPeUI5S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdGa1pFTnNZWE56S0dOc2IyNWxMQ0J0YjNabFEyeGhjM01wTzF4dUlDQWdJQ0FnWTJ4dmJtVXVjM1I1YkdVdVpHbHpjR3hoZVNBOUlDZHViMjVsSnp0Y2JpQWdJQ0FnSUhSb2FYTXVKR1ZzTG1Gd2NHVnVaRU5vYVd4a0tHTnNiMjVsS1R0Y2JpQWdJQ0FnSUhaaGNpQnBibVp2SUQwZ1oyVjBWSEpoYm5OcGRHbHZia2x1Wm04b1kyeHZibVVwTzF4dUlDQWdJQ0FnZEdocGN5NGtaV3d1Y21WdGIzWmxRMmhwYkdRb1kyeHZibVVwTzF4dUlDQWdJQ0FnY21WMGRYSnVJQ2gwYUdsekxsOW9ZWE5OYjNabElEMGdhVzVtYnk1b1lYTlVjbUZ1YzJadmNtMHBYRzRnSUNBZ2ZWeHVJQ0I5WEc1OU8xeHVYRzVtZFc1amRHbHZiaUJqWVd4c1VHVnVaR2x1WjBOaWN5QW9ZeWtnZTF4dUlDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdhV1lnS2k5Y2JpQWdhV1lnS0dNdVpXeHRMbDl0YjNabFEySXBJSHRjYmlBZ0lDQmpMbVZzYlM1ZmJXOTJaVU5pS0NrN1hHNGdJSDFjYmlBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHbG1JQ292WEc0Z0lHbG1JQ2hqTG1Wc2JTNWZaVzUwWlhKRFlpa2dlMXh1SUNBZ0lHTXVaV3h0TGw5bGJuUmxja05pS0NrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdjbVZqYjNKa1VHOXphWFJwYjI0Z0tHTXBJSHRjYmlBZ1l5NWtZWFJoTG01bGQxQnZjeUE5SUdNdVpXeHRMbWRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENncE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCaGNIQnNlVlJ5WVc1emJHRjBhVzl1SUNoaktTQjdYRzRnSUhaaGNpQnZiR1JRYjNNZ1BTQmpMbVJoZEdFdWNHOXpPMXh1SUNCMllYSWdibVYzVUc5eklEMGdZeTVrWVhSaExtNWxkMUJ2Y3p0Y2JpQWdkbUZ5SUdSNElEMGdiMnhrVUc5ekxteGxablFnTFNCdVpYZFFiM011YkdWbWREdGNiaUFnZG1GeUlHUjVJRDBnYjJ4a1VHOXpMblJ2Y0NBdElHNWxkMUJ2Y3k1MGIzQTdYRzRnSUdsbUlDaGtlQ0I4ZkNCa2VTa2dlMXh1SUNBZ0lHTXVaR0YwWVM1dGIzWmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ2RtRnlJSE1nUFNCakxtVnNiUzV6ZEhsc1pUdGNiaUFnSUNCekxuUnlZVzV6Wm05eWJTQTlJSE11VjJWaWEybDBWSEpoYm5ObWIzSnRJRDBnWENKMGNtRnVjMnhoZEdVb1hDSWdLeUJrZUNBcklGd2ljSGdzWENJZ0t5QmtlU0FySUZ3aWNIZ3BYQ0k3WEc0Z0lDQWdjeTUwY21GdWMybDBhVzl1UkhWeVlYUnBiMjRnUFNBbk1ITW5PMXh1SUNCOVhHNTlYRzVjYm5aaGNpQndiR0YwWm05eWJVTnZiWEJ2Ym1WdWRITWdQU0I3WEc0Z0lGUnlZVzV6YVhScGIyNDZJRlJ5WVc1emFYUnBiMjRzWEc0Z0lGUnlZVzV6YVhScGIyNUhjbTkxY0RvZ1ZISmhibk5wZEdsdmJrZHliM1Z3WEc1OU8xeHVYRzR2S2lBZ0tpOWNibHh1THk4Z2FXNXpkR0ZzYkNCd2JHRjBabTl5YlNCemNHVmphV1pwWXlCMWRHbHNjMXh1Vm5WbEpETXVZMjl1Wm1sbkxtMTFjM1JWYzJWUWNtOXdJRDBnYlhWemRGVnpaVkJ5YjNBN1hHNVdkV1VrTXk1amIyNW1hV2N1YVhOU1pYTmxjblpsWkZSaFp5QTlJR2x6VW1WelpYSjJaV1JVWVdjN1hHNVdkV1VrTXk1amIyNW1hV2N1YVhOU1pYTmxjblpsWkVGMGRISWdQU0JwYzFKbGMyVnlkbVZrUVhSMGNqdGNibFoxWlNRekxtTnZibVpwWnk1blpYUlVZV2RPWVcxbGMzQmhZMlVnUFNCblpYUlVZV2RPWVcxbGMzQmhZMlU3WEc1V2RXVWtNeTVqYjI1bWFXY3VhWE5WYm10dWIzZHVSV3hsYldWdWRDQTlJR2x6Vlc1cmJtOTNia1ZzWlcxbGJuUTdYRzVjYmk4dklHbHVjM1JoYkd3Z2NHeGhkR1p2Y20wZ2NuVnVkR2x0WlNCa2FYSmxZM1JwZG1WeklDWWdZMjl0Y0c5dVpXNTBjMXh1WlhoMFpXNWtLRloxWlNRekxtOXdkR2x2Ym5NdVpHbHlaV04wYVhabGN5d2djR3hoZEdadmNtMUVhWEpsWTNScGRtVnpLVHRjYm1WNGRHVnVaQ2hXZFdVa015NXZjSFJwYjI1ekxtTnZiWEJ2Ym1WdWRITXNJSEJzWVhSbWIzSnRRMjl0Y0c5dVpXNTBjeWs3WEc1Y2JpOHZJR2x1YzNSaGJHd2djR3hoZEdadmNtMGdjR0YwWTJnZ1puVnVZM1JwYjI1Y2JsWjFaU1F6TG5CeWIzUnZkSGx3WlM1ZlgzQmhkR05vWDE4Z1BTQnBia0p5YjNkelpYSWdQeUJ3WVhSamFDQTZJRzV2YjNBN1hHNWNiaTh2SUhCMVlteHBZeUJ0YjNWdWRDQnRaWFJvYjJSY2JsWjFaU1F6TG5CeWIzUnZkSGx3WlM0a2JXOTFiblFnUFNCbWRXNWpkR2x2YmlBb1hHNGdJR1ZzTEZ4dUlDQm9lV1J5WVhScGJtZGNiaWtnZTF4dUlDQmxiQ0E5SUdWc0lDWW1JR2x1UW5KdmQzTmxjaUEvSUhGMVpYSjVLR1ZzS1NBNklIVnVaR1ZtYVc1bFpEdGNiaUFnY21WMGRYSnVJRzF2ZFc1MFEyOXRjRzl1Wlc1MEtIUm9hWE1zSUdWc0xDQm9lV1J5WVhScGJtY3BYRzU5TzF4dVhHNHZMeUJrWlhaMGIyOXNjeUJuYkc5aVlXd2dhRzl2YTF4dUx5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHNWxlSFFnS2k5Y2JsWjFaU1F6TG01bGVIUlVhV05yS0daMWJtTjBhVzl1SUNncElIdGNiaUFnYVdZZ0tHTnZibVpwWnk1a1pYWjBiMjlzY3lrZ2UxeHVJQ0FnSUdsbUlDaGtaWFowYjI5c2N5a2dlMXh1SUNBZ0lDQWdaR1YyZEc5dmJITXVaVzFwZENnbmFXNXBkQ2NzSUZaMVpTUXpLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnSmlZZ2FYTkRhSEp2YldVcElIdGNiaUFnSUNBZ0lHTnZibk52YkdWYlkyOXVjMjlzWlM1cGJtWnZJRDhnSjJsdVptOG5JRG9nSjJ4dlp5ZGRLRnh1SUNBZ0lDQWdJQ0FuUkc5M2JteHZZV1FnZEdobElGWjFaU0JFWlhaMGIyOXNjeUJsZUhSbGJuTnBiMjRnWm05eUlHRWdZbVYwZEdWeUlHUmxkbVZzYjNCdFpXNTBJR1Y0Y0dWeWFXVnVZMlU2WEZ4dUp5QXJYRzRnSUNBZ0lDQWdJQ2RvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2ZG5WbGFuTXZkblZsTFdSbGRuUnZiMnh6SjF4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dKaVpjYmlBZ0lDQmpiMjVtYVdjdWNISnZaSFZqZEdsdmJsUnBjQ0FoUFQwZ1ptRnNjMlVnSmlaY2JpQWdJQ0JwYmtKeWIzZHpaWElnSmlZZ2RIbHdaVzltSUdOdmJuTnZiR1VnSVQwOUlDZDFibVJsWm1sdVpXUW5YRzRnSUNrZ2UxeHVJQ0FnSUdOdmJuTnZiR1ZiWTI5dWMyOXNaUzVwYm1adklEOGdKMmx1Wm04bklEb2dKMnh2WnlkZEtGeHVJQ0FnSUNBZ1hDSlpiM1VnWVhKbElISjFibTVwYm1jZ1ZuVmxJR2x1SUdSbGRtVnNiM0J0Wlc1MElHMXZaR1V1WEZ4dVhDSWdLMXh1SUNBZ0lDQWdYQ0pOWVd0bElITjFjbVVnZEc4Z2RIVnliaUJ2YmlCd2NtOWtkV04wYVc5dUlHMXZaR1VnZDJobGJpQmtaWEJzYjNscGJtY2dabTl5SUhCeWIyUjFZM1JwYjI0dVhGeHVYQ0lnSzF4dUlDQWdJQ0FnWENKVFpXVWdiVzl5WlNCMGFYQnpJR0YwSUdoMGRIQnpPaTh2ZG5WbGFuTXViM0puTDJkMWFXUmxMMlJsY0d4dmVXMWxiblF1YUhSdGJGd2lYRzRnSUNBZ0tUdGNiaUFnZlZ4dWZTd2dNQ2s3WEc1Y2JpOHFJQ0FxTDF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGWjFaU1F6TzF4dUlpd2lkbUZ5SUdsdWMyVnlkR1ZrSUQwZ1pYaHdiM0owY3k1allXTm9aU0E5SUh0OVhHNWNibVoxYm1OMGFXOXVJRzV2YjNBZ0tDa2dlMzFjYmx4dVpYaHdiM0owY3k1cGJuTmxjblFnUFNCbWRXNWpkR2x2YmlBb1kzTnpLU0I3WEc0Z0lHbG1JQ2hwYm5ObGNuUmxaRnRqYzNOZEtTQnlaWFIxY200Z2JtOXZjRnh1SUNCcGJuTmxjblJsWkZ0amMzTmRJRDBnZEhKMVpWeHVYRzRnSUhaaGNpQmxiR1Z0SUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duYzNSNWJHVW5LVnh1SUNCbGJHVnRMbk5sZEVGMGRISnBZblYwWlNnbmRIbHdaU2NzSUNkMFpYaDBMMk56Y3ljcFhHNWNiaUFnYVdZZ0tDZDBaWGgwUTI5dWRHVnVkQ2NnYVc0Z1pXeGxiU2tnZTF4dUlDQWdJR1ZzWlcwdWRHVjRkRU52Ym5SbGJuUWdQU0JqYzNOY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCbGJHVnRMbk4wZVd4bFUyaGxaWFF1WTNOelZHVjRkQ0E5SUdOemMxeHVJQ0I5WEc1Y2JpQWdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkSE5DZVZSaFowNWhiV1VvSjJobFlXUW5LVnN3WFM1aGNIQmxibVJEYUdsc1pDaGxiR1Z0S1Z4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUnpRbmxVWVdkT1lXMWxLQ2RvWldGa0p5bGJNRjB1Y21WdGIzWmxRMmhwYkdRb1pXeGxiU2xjYmlBZ0lDQnBibk5sY25SbFpGdGpjM05kSUQwZ1ptRnNjMlZjYmlBZ2ZWeHVmVnh1SWl3aWRtRnlJRloxWlNBdkx5QnNZWFJsSUdKcGJtUmNiblpoY2lCMlpYSnphVzl1WEc1MllYSWdiV0Z3SUQwZ0tIZHBibVJ2ZHk1ZlgxWlZSVjlJVDFSZlRVRlFYMThnUFNCUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cEtWeHVkbUZ5SUdsdWMzUmhiR3hsWkNBOUlHWmhiSE5sWEc1MllYSWdhWE5DY205M2MyVnlhV1o1SUQwZ1ptRnNjMlZjYm5aaGNpQnBibWwwU0c5dmEwNWhiV1VnUFNBblltVm1iM0psUTNKbFlYUmxKMXh1WEc1bGVIQnZjblJ6TG1sdWMzUmhiR3dnUFNCbWRXNWpkR2x2YmlBb2RuVmxMQ0JpY205M2MyVnlhV1o1S1NCN1hHNGdJR2xtSUNocGJuTjBZV3hzWldRcElIc2djbVYwZFhKdUlIMWNiaUFnYVc1emRHRnNiR1ZrSUQwZ2RISjFaVnh1WEc0Z0lGWjFaU0E5SUhaMVpTNWZYMlZ6VFc5a2RXeGxJRDhnZG5WbExtUmxabUYxYkhRZ09pQjJkV1ZjYmlBZ2RtVnljMmx2YmlBOUlGWjFaUzUyWlhKemFXOXVMbk53YkdsMEtDY3VKeWt1YldGd0tFNTFiV0psY2lsY2JpQWdhWE5DY205M2MyVnlhV1o1SUQwZ1luSnZkM05sY21sbWVWeHVYRzRnSUM4dklHTnZiWEJoZENCM2FYUm9JRHdnTWk0d0xqQXRZV3h3YUdFdU4xeHVJQ0JwWmlBb1ZuVmxMbU52Ym1acFp5NWZiR2xtWldONVkyeGxTRzl2YTNNdWFXNWtaWGhQWmlnbmFXNXBkQ2NwSUQ0Z0xURXBJSHRjYmlBZ0lDQnBibWwwU0c5dmEwNWhiV1VnUFNBbmFXNXBkQ2RjYmlBZ2ZWeHVYRzRnSUdWNGNHOXlkSE11WTI5dGNHRjBhV0pzWlNBOUlIWmxjbk5wYjI1Yk1GMGdQajBnTWx4dUlDQnBaaUFvSVdWNGNHOXlkSE11WTI5dGNHRjBhV0pzWlNrZ2UxeHVJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGNiaUFnSUNBZ0lDZGJTRTFTWFNCWmIzVWdZWEpsSUhWemFXNW5JR0VnZG1WeWMybHZiaUJ2WmlCMmRXVXRhRzkwTFhKbGJHOWhaQzFoY0drZ2RHaGhkQ0JwY3lBbklDdGNiaUFnSUNBZ0lDQWdKMjl1YkhrZ1kyOXRjR0YwYVdKc1pTQjNhWFJvSUZaMVpTNXFjeUJqYjNKbElGNHlMakF1TUM0blhHNGdJQ0FnS1Z4dUlDQWdJSEpsZEhWeWJseHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dRM0psWVhSbElHRWdjbVZqYjNKa0lHWnZjaUJoSUdodmRDQnRiMlIxYkdVc0lIZG9hV05vSUd0bFpYQnpJSFJ5WVdOcklHOW1JR2wwY3lCamIyNXpkSEoxWTNSdmNseHVJQ29nWVc1a0lHbHVjM1JoYm1ObGMxeHVJQ3BjYmlBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCcFpGeHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTmNiaUFxTDF4dVhHNWxlSEJ2Y25SekxtTnlaV0YwWlZKbFkyOXlaQ0E5SUdaMWJtTjBhVzl1SUNocFpDd2diM0IwYVc5dWN5a2dlMXh1SUNCMllYSWdRM1J2Y2lBOUlHNTFiR3hjYmlBZ2FXWWdLSFI1Y0dWdlppQnZjSFJwYjI1eklEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnUTNSdmNpQTlJRzl3ZEdsdmJuTmNiaUFnSUNCdmNIUnBiMjV6SUQwZ1EzUnZjaTV2Y0hScGIyNXpYRzRnSUgxY2JpQWdiV0ZyWlU5d2RHbHZibk5JYjNRb2FXUXNJRzl3ZEdsdmJuTXBYRzRnSUcxaGNGdHBaRjBnUFNCN1hHNGdJQ0FnUTNSdmNqb2dRM1J2Y2l4Y2JpQWdJQ0J2Y0hScGIyNXpPaUJ2Y0hScGIyNXpMRnh1SUNBZ0lHbHVjM1JoYm1ObGN6b2dXMTFjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUUxaGEyVWdZU0JEYjIxd2IyNWxiblFnYjNCMGFXOXVjeUJ2WW1wbFkzUWdhRzkwTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0JwWkZ4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkR2x2Ym5OY2JpQXFMMXh1WEc1bWRXNWpkR2x2YmlCdFlXdGxUM0IwYVc5dWMwaHZkQ2hwWkN3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0JwWmlBb2IzQjBhVzl1Y3k1bWRXNWpkR2x2Ym1Gc0tTQjdYRzRnSUNBZ2RtRnlJSEpsYm1SbGNpQTlJRzl3ZEdsdmJuTXVjbVZ1WkdWeVhHNGdJQ0FnYjNCMGFXOXVjeTV5Wlc1a1pYSWdQU0JtZFc1amRHbHZiaUFvYUN3Z1kzUjRLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2FXNXpkR0Z1WTJWeklEMGdiV0Z3VzJsa1hTNXBibk4wWVc1alpYTmNiaUFnSUNBZ0lHbG1JQ2hqZEhnZ0ppWWdhVzV6ZEdGdVkyVnpMbWx1WkdWNFQyWW9ZM1I0TG5CaGNtVnVkQ2tnUENBd0tTQjdYRzRnSUNBZ0lDQWdJR2x1YzNSaGJtTmxjeTV3ZFhOb0tHTjBlQzV3WVhKbGJuUXBYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z2NtVnVaR1Z5S0dnc0lHTjBlQ2xjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdhVzVxWldOMFNHOXZheWh2Y0hScGIyNXpMQ0JwYm1sMFNHOXZhMDVoYldVc0lHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdkbUZ5SUhKbFkyOXlaQ0E5SUcxaGNGdHBaRjFjYmlBZ0lDQWdJR2xtSUNnaGNtVmpiM0prTGtOMGIzSXBJSHRjYmlBZ0lDQWdJQ0FnY21WamIzSmtMa04wYjNJZ1BTQjBhR2x6TG1OdmJuTjBjblZqZEc5eVhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpXTnZjbVF1YVc1emRHRnVZMlZ6TG5CMWMyZ29kR2hwY3lsY2JpQWdJQ0I5S1Z4dUlDQWdJR2x1YW1WamRFaHZiMnNvYjNCMGFXOXVjeXdnSjJKbFptOXlaVVJsYzNSeWIza25MQ0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhaaGNpQnBibk4wWVc1alpYTWdQU0J0WVhCYmFXUmRMbWx1YzNSaGJtTmxjMXh1SUNBZ0lDQWdhVzV6ZEdGdVkyVnpMbk53YkdsalpTaHBibk4wWVc1alpYTXVhVzVrWlhoUFppaDBhR2x6S1N3Z01TbGNiaUFnSUNCOUtWeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dTVzVxWldOMElHRWdhRzl2YXlCMGJ5QmhJR2h2ZENCeVpXeHZZV1JoWW14bElHTnZiWEJ2Ym1WdWRDQnpieUIwYUdGMFhHNGdLaUIzWlNCallXNGdhMlZsY0NCMGNtRmpheUJ2WmlCcGRDNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1YzF4dUlDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHNWhiV1ZjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHaHZiMnRjYmlBcUwxeHVYRzVtZFc1amRHbHZiaUJwYm1wbFkzUkliMjlyS0c5d2RHbHZibk1zSUc1aGJXVXNJR2h2YjJzcElIdGNiaUFnZG1GeUlHVjRhWE4wYVc1bklEMGdiM0IwYVc5dWMxdHVZVzFsWFZ4dUlDQnZjSFJwYjI1elcyNWhiV1ZkSUQwZ1pYaHBjM1JwYm1kY2JpQWdJQ0EvSUVGeWNtRjVMbWx6UVhKeVlYa29aWGhwYzNScGJtY3BJRDhnWlhocGMzUnBibWN1WTI5dVkyRjBLR2h2YjJzcElEb2dXMlY0YVhOMGFXNW5MQ0JvYjI5clhWeHVJQ0FnSURvZ1cyaHZiMnRkWEc1OVhHNWNibVoxYm1OMGFXOXVJSFJ5ZVZkeVlYQW9abTRwSUh0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDaHBaQ3dnWVhKbktTQjdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJR1p1S0dsa0xDQmhjbWNwWEc0Z0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaGxLVnh1SUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0Z4dUlDQWdJQ0FnSUNBblUyOXRaWFJvYVc1bklIZGxiblFnZDNKdmJtY2daSFZ5YVc1bklGWjFaU0JqYjIxd2IyNWxiblFnYUc5MExYSmxiRzloWkM0Z1JuVnNiQ0J5Wld4dllXUWdjbVZ4ZFdseVpXUXVKMXh1SUNBZ0lDQWdLVnh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUIxY0dSaGRHVlBjSFJwYjI1eklDaHZiR1JQY0hScGIyNXpMQ0J1WlhkUGNIUnBiMjV6S1NCN1hHNGdJR1p2Y2lBb2RtRnlJR3RsZVNCcGJpQnZiR1JQY0hScGIyNXpLU0I3WEc0Z0lDQWdhV1lnS0NFb2EyVjVJR2x1SUc1bGQwOXdkR2x2Ym5NcEtTQjdYRzRnSUNBZ0lDQmtaV3hsZEdVZ2IyeGtUM0IwYVc5dWMxdHJaWGxkWEc0Z0lDQWdmVnh1SUNCOVhHNGdJR1p2Y2lBb2RtRnlJR3RsZVNReElHbHVJRzVsZDA5d2RHbHZibk1wSUh0Y2JpQWdJQ0J2YkdSUGNIUnBiMjV6VzJ0bGVTUXhYU0E5SUc1bGQwOXdkR2x2Ym5OYmEyVjVKREZkWEc0Z0lIMWNibjFjYmx4dVpYaHdiM0owY3k1eVpYSmxibVJsY2lBOUlIUnllVmR5WVhBb1puVnVZM1JwYjI0Z0tHbGtMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lIWmhjaUJ5WldOdmNtUWdQU0J0WVhCYmFXUmRYRzRnSUdsbUlDZ2hiM0IwYVc5dWN5a2dlMXh1SUNBZ0lISmxZMjl5WkM1cGJuTjBZVzVqWlhNdWMyeHBZMlVvS1M1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNocGJuTjBZVzVqWlNrZ2UxeHVJQ0FnSUNBZ2FXNXpkR0Z1WTJVdUpHWnZjbU5sVlhCa1lYUmxLQ2xjYmlBZ0lDQjlLVnh1SUNBZ0lISmxkSFZ5Ymx4dUlDQjlYRzRnSUdsbUlDaDBlWEJsYjJZZ2IzQjBhVzl1Y3lBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJRzl3ZEdsdmJuTWdQU0J2Y0hScGIyNXpMbTl3ZEdsdmJuTmNiaUFnZlZ4dUlDQnBaaUFvY21WamIzSmtMa04wYjNJcElIdGNiaUFnSUNCeVpXTnZjbVF1UTNSdmNpNXZjSFJwYjI1ekxuSmxibVJsY2lBOUlHOXdkR2x2Ym5NdWNtVnVaR1Z5WEc0Z0lDQWdjbVZqYjNKa0xrTjBiM0l1YjNCMGFXOXVjeTV6ZEdGMGFXTlNaVzVrWlhKR2JuTWdQU0J2Y0hScGIyNXpMbk4wWVhScFkxSmxibVJsY2tadWMxeHVJQ0FnSUhKbFkyOXlaQzVwYm5OMFlXNWpaWE11YzJ4cFkyVW9LUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2hwYm5OMFlXNWpaU2tnZTF4dUlDQWdJQ0FnYVc1emRHRnVZMlV1Skc5d2RHbHZibk11Y21WdVpHVnlJRDBnYjNCMGFXOXVjeTV5Wlc1a1pYSmNiaUFnSUNBZ0lHbHVjM1JoYm1ObExpUnZjSFJwYjI1ekxuTjBZWFJwWTFKbGJtUmxja1p1Y3lBOUlHOXdkR2x2Ym5NdWMzUmhkR2xqVW1WdVpHVnlSbTV6WEc0Z0lDQWdJQ0F2THlCeVpYTmxkQ0J6ZEdGMGFXTWdkSEpsWlhOY2JpQWdJQ0FnSUM4dklIQnlaU0F5TGpVc0lHRnNiQ0J6ZEdGMGFXTWdkSEpsWlhNZ1lYSmxJR05oYUdObFpDQjBiMmRsZEdobGNpQnZiaUIwYUdVZ2FXNXpkR0Z1WTJWY2JpQWdJQ0FnSUdsbUlDaHBibk4wWVc1alpTNWZjM1JoZEdsalZISmxaWE1wSUh0Y2JpQWdJQ0FnSUNBZ2FXNXpkR0Z1WTJVdVgzTjBZWFJwWTFSeVpXVnpJRDBnVzExY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUM4dklESXVOUzR3WEc0Z0lDQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2h5WldOdmNtUXVRM1J2Y2k1dmNIUnBiMjV6TG1OaFkyaGxaQ2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVmpiM0prTGtOMGIzSXViM0IwYVc5dWN5NWpZV05vWldRZ1BTQmJYVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdMeThnTWk0MUxqTmNiaUFnSUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHbHVjM1JoYm1ObExpUnZjSFJwYjI1ekxtTmhZMmhsWkNrcElIdGNiaUFnSUNBZ0lDQWdhVzV6ZEdGdVkyVXVKRzl3ZEdsdmJuTXVZMkZqYUdWa0lEMGdXMTFjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJQzh2SUhCdmMzUWdNaTQxTGpRNklIWXRiMjVqWlNCMGNtVmxjeUJoY21VZ1kyRmphR1ZrSUc5dUlHbHVjM1JoYm1ObExsOXpkR0YwYVdOVWNtVmxjeTVjYmlBZ0lDQWdJQzh2SUZCMWNtVWdjM1JoZEdsaklIUnlaV1Z6SUdGeVpTQmpZV05vWldRZ2IyNGdkR2hsSUhOMFlYUnBZMUpsYm1SbGNrWnVjeUJoY25KaGVWeHVJQ0FnSUNBZ0x5OGdLR0p2ZEdnZ1lXeHlaV0ZrZVNCeVpYTmxkQ0JoWW05MlpTbGNiaUFnSUNBZ0lHbHVjM1JoYm1ObExpUm1iM0pqWlZWd1pHRjBaU2dwWEc0Z0lDQWdmU2xjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0F2THlCbWRXNWpkR2x2Ym1Gc0lHOXlJRzV2SUdsdWMzUmhibU5sSUdOeVpXRjBaV1FnZVdWMFhHNGdJQ0FnY21WamIzSmtMbTl3ZEdsdmJuTXVjbVZ1WkdWeUlEMGdiM0IwYVc5dWN5NXlaVzVrWlhKY2JpQWdJQ0J5WldOdmNtUXViM0IwYVc5dWN5NXpkR0YwYVdOU1pXNWtaWEpHYm5NZ1BTQnZjSFJwYjI1ekxuTjBZWFJwWTFKbGJtUmxja1p1YzF4dVhHNGdJQ0FnTHk4Z2FHRnVaR3hsSUdaMWJtTjBhVzl1WVd3Z1kyOXRjRzl1Wlc1MElISmxMWEpsYm1SbGNseHVJQ0FnSUdsbUlDaHlaV052Y21RdWIzQjBhVzl1Y3k1bWRXNWpkR2x2Ym1Gc0tTQjdYRzRnSUNBZ0lDQXZMeUJ5WlhKbGJtUmxjaUIzYVhSb0lHWjFiR3dnYjNCMGFXOXVjMXh1SUNBZ0lDQWdhV1lnS0U5aWFtVmpkQzVyWlhsektHOXdkR2x2Ym5NcExteGxibWQwYUNBK0lESXBJSHRjYmlBZ0lDQWdJQ0FnZFhCa1lYUmxUM0IwYVc5dWN5aHlaV052Y21RdWIzQjBhVzl1Y3l3Z2IzQjBhVzl1Y3lsY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUM4dklIUmxiWEJzWVhSbExXOXViSGtnY21WeVpXNWtaWEl1WEc0Z0lDQWdJQ0FnSUM4dklHNWxaV1FnZEc4Z2FXNXFaV04wSUhSb1pTQnpkSGxzWlNCcGJtcGxZM1JwYjI0Z1kyOWtaU0JtYjNJZ1ExTlRJRzF2WkhWc1pYTmNiaUFnSUNBZ0lDQWdMeThnZEc4Z2QyOXlheUJ3Y205d1pYSnNlUzVjYmlBZ0lDQWdJQ0FnZG1GeUlHbHVhbVZqZEZOMGVXeGxjeUE5SUhKbFkyOXlaQzV2Y0hScGIyNXpMbDlwYm1wbFkzUlRkSGxzWlhOY2JpQWdJQ0FnSUNBZ2FXWWdLR2x1YW1WamRGTjBlV3hsY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFpoY2lCeVpXNWtaWElnUFNCdmNIUnBiMjV6TG5KbGJtUmxjbHh1SUNBZ0lDQWdJQ0FnSUhKbFkyOXlaQzV2Y0hScGIyNXpMbkpsYm1SbGNpQTlJR1oxYm1OMGFXOXVJQ2hvTENCamRIZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVhbVZqZEZOMGVXeGxjeTVqWVd4c0tHTjBlQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpXNWtaWElvYUN3Z1kzUjRLVnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVmpiM0prTG05d2RHbHZibk11WDBOMGIzSWdQU0J1ZFd4c1hHNGdJQ0FnSUNBdkx5QXlMalV1TTF4dUlDQWdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvY21WamIzSmtMbTl3ZEdsdmJuTXVZMkZqYUdWa0tTa2dlMXh1SUNBZ0lDQWdJQ0J5WldOdmNtUXViM0IwYVc5dWN5NWpZV05vWldRZ1BTQmJYVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVZqYjNKa0xtbHVjM1JoYm1ObGN5NXpiR2xqWlNncExtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHbHVjM1JoYm1ObEtTQjdYRzRnSUNBZ0lDQWdJR2x1YzNSaGJtTmxMaVJtYjNKalpWVndaR0YwWlNncFhHNGdJQ0FnSUNCOUtWeHVJQ0FnSUgxY2JpQWdmVnh1ZlNsY2JseHVaWGh3YjNKMGN5NXlaV3h2WVdRZ1BTQjBjbmxYY21Gd0tHWjFibU4wYVc5dUlDaHBaQ3dnYjNCMGFXOXVjeWtnZTF4dUlDQjJZWElnY21WamIzSmtJRDBnYldGd1cybGtYVnh1SUNCcFppQW9iM0IwYVc5dWN5a2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdiM0IwYVc5dWN5QTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ2IzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5NdWIzQjBhVzl1YzF4dUlDQWdJSDFjYmlBZ0lDQnRZV3RsVDNCMGFXOXVjMGh2ZENocFpDd2diM0IwYVc5dWN5bGNiaUFnSUNCcFppQW9jbVZqYjNKa0xrTjBiM0lwSUh0Y2JpQWdJQ0FnSUdsbUlDaDJaWEp6YVc5dVd6RmRJRHdnTWlrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJ3Y21WelpYSjJaU0J3Y21VZ01pNHlJR0psYUdGMmFXOXlJR1p2Y2lCbmJHOWlZV3dnYldsNGFXNGdhR0Z1Wkd4cGJtZGNiaUFnSUNBZ0lDQWdjbVZqYjNKa0xrTjBiM0l1WlhoMFpXNWtUM0IwYVc5dWN5QTlJRzl3ZEdsdmJuTmNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIWmhjaUJ1WlhkRGRHOXlJRDBnY21WamIzSmtMa04wYjNJdWMzVndaWEl1WlhoMFpXNWtLRzl3ZEdsdmJuTXBYRzRnSUNBZ0lDQnlaV052Y21RdVEzUnZjaTV2Y0hScGIyNXpJRDBnYm1WM1EzUnZjaTV2Y0hScGIyNXpYRzRnSUNBZ0lDQnlaV052Y21RdVEzUnZjaTVqYVdRZ1BTQnVaWGREZEc5eUxtTnBaRnh1SUNBZ0lDQWdjbVZqYjNKa0xrTjBiM0l1Y0hKdmRHOTBlWEJsSUQwZ2JtVjNRM1J2Y2k1d2NtOTBiM1I1Y0dWY2JpQWdJQ0FnSUdsbUlDaHVaWGREZEc5eUxuSmxiR1ZoYzJVcElIdGNiaUFnSUNBZ0lDQWdMeThnZEdWdGNHOXlZWEo1SUdkc2IySmhiQ0J0YVhocGJpQnpkSEpoZEdWbmVTQjFjMlZrSUdsdUlEd2dNaTR3TGpBdFlXeHdhR0V1Tmx4dUlDQWdJQ0FnSUNCdVpYZERkRzl5TG5KbGJHVmhjMlVvS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjFjR1JoZEdWUGNIUnBiMjV6S0hKbFkyOXlaQzV2Y0hScGIyNXpMQ0J2Y0hScGIyNXpLVnh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnlaV052Y21RdWFXNXpkR0Z1WTJWekxuTnNhV05sS0NrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2FXNXpkR0Z1WTJVcElIdGNiaUFnSUNCcFppQW9hVzV6ZEdGdVkyVXVKSFp1YjJSbElDWW1JR2x1YzNSaGJtTmxMaVIyYm05a1pTNWpiMjUwWlhoMEtTQjdYRzRnSUNBZ0lDQnBibk4wWVc1alpTNGtkbTV2WkdVdVkyOXVkR1Y0ZEM0a1ptOXlZMlZWY0dSaGRHVW9LVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9YRzRnSUNBZ0lDQWdJQ2RTYjI5MElHOXlJRzFoYm5WaGJHeDVJRzF2ZFc1MFpXUWdhVzV6ZEdGdVkyVWdiVzlrYVdacFpXUXVJRVoxYkd3Z2NtVnNiMkZrSUhKbGNYVnBjbVZrTGlkY2JpQWdJQ0FnSUNsY2JpQWdJQ0I5WEc0Z0lIMHBYRzU5S1Z4dUlpd2lWblZsTG1OdmJtWnBaeTVrWlhaMGIyOXNjeUE5SUhSeWRXVTdYSEpjYmx4eVhHNXBiWEJ2Y25RZ2JVRndjR3hwWTJGMGFXOXVJR1p5YjIwZ0p5NHVMM1oxWlM5dExXRndjR3hwWTJGMGFXOXVMbloxWlNjN1hISmNibWx0Y0c5eWRDQk1ZVzVuSUdaeWIyMGdKeTR2YkdGdVp5YzdYSEpjYmx4eVhHNXNaWFFnYkdGdVp5QTlJRzVsZHlCTVlXNW5LQ2s3WEhKY2JseHlYRzUzYVc1a2IzY3VaRzlqZFcxbGJuUXVkR2wwYkdVZ1BTQnNZVzVuTG5SeVlXNXpiR0YwWlNnbmRHbDBiR1VuS1R0Y2NseHVYSEpjYmxaMVpTNWthWEpsWTNScGRtVW9KMnhoYm1jbkxDQjdYSEpjYmlBZ0lDQnBibk5sY25SbFpEb2dablZ1WTNScGIyNGdLR1ZzTENCaWFXNWthVzVuS1NCN1hISmNiaUFnSUNBZ0lDQWdaV3d1YVc1dVpYSklWRTFNSUQwZ2JHRnVaeTUwY21GdWMyeGhkR1VvWW1sdVpHbHVaeTUyWVd4MVpTazdYSEpjYmlBZ0lDQjlYSEpjYm4wcE8xeHlYRzVXZFdVdVpHbHlaV04wYVhabEtDZHNZVzVuTFdOb2FXeGtjbVZ1Snl3Z2UxeHlYRzRnSUNBZ2FXNXpaWEowWldRNklHWjFibU4wYVc5dUlDaGxiQ3dnWW1sdVpHbHVaeWtnZTF4eVhHNGdJQ0FnSUNBZ0lHVnNMbU5vYVd4a2NtVnVXekJkTG1sdWJtVnlTRlJOVENBOUlHeGhibWN1ZEhKaGJuTnNZWFJsS0dKcGJtUnBibWN1ZG1Gc2RXVXBPMXh5WEc0Z0lDQWdmVnh5WEc1OUtUdGNjbHh1WEhKY2JtNWxkeUJXZFdVb2UxeHlYRzRnSUNBZ1pXdzZJQ2NqWVhCd0p5eGNjbHh1SUNBZ0lHTnZiWEJ2Ym1WdWRITTZJSHR0UVhCd2JHbGpZWFJwYjI1OUxGeHlYRzRnSUNBZ1pHRjBZU2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCamRYSnlaVzUwT2lBbmFHOXRaU2RjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNibjBwT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRXhoYm1jZ2UxeHlYRzVjY2x4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpHVjBaV04wWldRZ1BTQW9ibUYyYVdkaGRHOXlMbXhoYm1kMVlXZGxJSHg4SUc1aGRtbG5ZWFJ2Y2k1MWMyVnlUR0Z1WjNWaFoyVXBMbk53YkdsMEtDY3RKeWxiTUYwN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1amRYSnlaVzUwSUQwZ0p5YzdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWthV04wYVc5dVlYSjVJRDBnVEdGdVp5NXNiMkZrS0hSb2FYTXVZM1Z5Y21WdWRDQjhmQ0IwYUdsekxtUmxkR1ZqZEdWa0tUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0IwY21GdWMyeGhkR1VvYTJWNUtTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRjh1WjJWMEtIUm9hWE11WkdsamRHbHZibUZ5ZVN3Z2EyVjVMQ0FuSTJacGVDQjBhR2x6SXljcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSE4wWVhScFl5QnNiMkZrS0d4aGJtY3NJSE4wYjNBcElIdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ1pHbGpkR2x2Ym1GeWVTQTlJRzUxYkd3N1hISmNiaUFnSUNBZ0lDQWdKQzVoYW1GNEtIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RYSnNPaUFuTDJ4aGJtY3ZKeUFySUd4aGJtY2dLeUFuTG1wemIyNG5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoVkhsd1pUb2dKMnB6YjI0bkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGMzbHVZem9nWm1Gc2MyVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lITjFZMk5sYzNNNklHWjFibU4wYVc5dUlDaGtZWFJoS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthV04wYVc5dVlYSjVJRDBnWkdGMFlUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pYSnliM0k2SUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBb1pHbGpkR2x2Ym1GeWVTQTlQU0J1ZFd4c0lDWW1JQ0Z6ZEc5d0tTQS9JRXhoYm1jdWJHOWhaQ2duWlc0bktTQTZJR1JwWTNScGIyNWhjbms3WEhKY2JpQWdJQ0I5WEhKY2JuMGlMQ0k4ZEdWdGNHeGhkR1UrWEhKY2JpQWdJQ0E4WkdsMklHTnNZWE56UFZ3aVkyOXVkR1Z1ZEZ3aVBseHlYRzRnSUNBZ0lDQWdJRHh0TFc1aGRtbG5ZWFJwYjI0Z2RpMWlhVzVrT21OMWNuSmxiblE5WENKamRYSnlaVzUwWENJK1BDOXRMVzVoZG1sbllYUnBiMjQrWEhKY2JpQWdJQ0FnSUNBZ1BHMHRZMjl1ZEdWdWRENDhMMjB0WTI5dWRHVnVkRDVjY2x4dUlDQWdJRHd2WkdsMlBseHlYRzQ4TDNSbGJYQnNZWFJsUGx4eVhHNWNjbHh1UEhOamNtbHdkRDVjY2x4dUlDQWdJR2x0Y0c5eWRDQk5UbUYyYVdkaGRHbHZiaUJtY205dElGd2lMaTl0TFc1aGRtbG5ZWFJwYjI0dWRuVmxYQ0k3WEhKY2JpQWdJQ0JwYlhCdmNuUWdUVU52Ym5SbGJuUWdabkp2YlNCY0lpNHZiUzFqYjI1MFpXNTBMbloxWlZ3aU8xeHlYRzVjY2x4dUlDQWdJR1Y0Y0c5eWRDQmtaV1poZFd4MElIdGNjbHh1SUNBZ0lDQWdJQ0J3Y205d2N6b2dXeWRqZFhKeVpXNTBKMTBzWEhKY2JpQWdJQ0FnSUNBZ1kyOXRjRzl1Wlc1MGN6b2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQk5RMjl1ZEdWdWRDeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1RVNWhkbWxuWVhScGIyNWNjbHh1SUNBZ0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNBZ0lHNWhiV1U2SUZ3aWJTMWhjSEJzYVdOaGRHbHZibHdpWEhKY2JpQWdJQ0I5WEhKY2Jqd3ZjMk55YVhCMFBseHlYRzVjY2x4dVBITjBlV3hsSUhOamIzQmxaRDVjY2x4dVhISmNiand2YzNSNWJHVStJaXdpUEhSbGJYQnNZWFJsUGx4eVhHNGdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0luTmxZM1JwYjI1elhDSStYSEpjYmlBZ0lDQWdJQ0FnUEcwdGMyVmpkR2x2Ymkxb2IyMWxQand2YlMxelpXTjBhVzl1TFdodmJXVStYSEpjYmlBZ0lDQWdJQ0FnUEcwdGMyVmpkR2x2YmkxaFltOTFkRDQ4TDIwdGMyVmpkR2x2YmkxaFltOTFkRDVjY2x4dUlDQWdJQ0FnSUNBOGJTMXpaV04wYVc5dUxXVjRjR1Z5YVdWdVkyVStQQzl0TFhObFkzUnBiMjR0Wlhod1pYSnBaVzVqWlQ1Y2NseHVJQ0FnSUNBZ0lDQThjMlZqZEdsdmJpQnBaRDFjSW14dloyOHlYQ0krUEM5elpXTjBhVzl1UGx4eVhHNGdJQ0FnSUNBZ0lEeHRMWE5sWTNScGIyNHRaV1IxWTJGMGFXOXVQand2YlMxelpXTjBhVzl1TFdWa2RXTmhkR2x2Ymo1Y2NseHVJQ0FnSUNBZ0lDQThiUzF6WldOMGFXOXVMV052Ym5SaFkzUStQQzl0TFhObFkzUnBiMjR0WTI5dWRHRmpkRDVjY2x4dUlDQWdJQ0FnSUNBOGMyVmpkR2x2YmlCcFpEMWNJbXh2WjI4elhDSStQQzl6WldOMGFXOXVQbHh5WEc0Z0lDQWdQQzlrYVhZK1hISmNiand2ZEdWdGNHeGhkR1UrWEhKY2JseHlYRzQ4YzJOeWFYQjBQbHh5WEc0Z0lDQWdhVzF3YjNKMElFMVRaV04wYVc5dVNHOXRaU0JtY205dElGd2lMaTl0TFhObFkzUnBiMjR0YUc5dFpTNTJkV1ZjSWp0Y2NseHVJQ0FnSUdsdGNHOXlkQ0JOVTJWamRHbHZia0ZpYjNWMElHWnliMjBnWENJdUwyMHRjMlZqZEdsdmJpMWhZbTkxZEM1MmRXVmNJanRjY2x4dUlDQWdJR2x0Y0c5eWRDQk5VMlZqZEdsdmJrTnZiblJoWTNRZ1puSnZiU0JjSWk0dmJTMXpaV04wYVc5dUxXTnZiblJoWTNRdWRuVmxYQ0k3WEhKY2JpQWdJQ0JwYlhCdmNuUWdUVk5sWTNScGIyNUZaSFZqWVhScGIyNGdabkp2YlNCY0lpNHZiUzF6WldOMGFXOXVMV1ZrZFdOaGRHbHZiaTUyZFdWY0lqdGNjbHh1SUNBZ0lHbHRjRzl5ZENCTlUyVmpkR2x2YmtWNGNHVnlhV1Z1WTJVZ1puSnZiU0JjSWk0dmJTMXpaV04wYVc5dUxXVjRjR1Z5YVdWdVkyVXVkblZsWENJN1hISmNibHh5WEc0Z0lDQWdaWGh3YjNKMElHUmxabUYxYkhRZ2UxeHlYRzRnSUNBZ0lDQWdJR052YlhCdmJtVnVkSE02SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnVFZObFkzUnBiMjVGZUhCbGNtbGxibU5sTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JOVTJWamRHbHZia1ZrZFdOaGRHbHZiaXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdUVk5sWTNScGIyNURiMjUwWVdOMExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCTlUyVmpkR2x2YmtGaWIzVjBMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQk5VMlZqZEdsdmJraHZiV1ZjY2x4dUlDQWdJQ0FnSUNCOUxGeHlYRzRnSUNBZ0lDQWdJRzVoYldVNklGd2liUzFqYjI1MFpXNTBYQ0pjY2x4dUlDQWdJSDFjY2x4dVBDOXpZM0pwY0hRK1hISmNibHh5WEc0OGMzUjViR1VnYkdGdVp6MWNJbk5qYzNOY0lpQnpZMjl3WldRK1hISmNiaUFnSUNCelpXTjBhVzl1SUh0Y2NseHVJQ0FnSUNBZ0lDQnRhVzR0YUdWcFoyaDBPaUF4TURCMmFEdGNjbHh1SUNBZ0lDQWdJQ0FtSTJodmJXVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmlZV05yWjNKdmRXNWtMV2x0WVdkbE9pQjFjbXdvWENJdmFXMWhaMlZ6TDNNeExuQnVaMXdpS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSmlOc2IyZHZNaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR0poWTJ0bmNtOTFibVF0YVcxaFoyVTZJSFZ5YkNoY0lpOXBiV0ZuWlhNdmN6SXVjRzVuWENJcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBbUkyeHZaMjh6SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWW1GamEyZHliM1Z1WkMxcGJXRm5aVG9nZFhKc0tGd2lMMmx0WVdkbGN5OXpNeTV3Ym1kY0lpazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlZ4eVhHNDhMM04wZVd4bFBpSXNJangwWlcxd2JHRjBaVDVjY2x4dUlDQWdJRHhpTFc1aGRtSmhjaUJtYVhobFpEMWNJblJ2Y0Z3aUlIUnZaMmRzWldGaWJHVTlYQ0p0WkZ3aUlIUjVjR1U5WENKa1lYSnJYQ0lnZG1GeWFXRnVkRDFjSW1sdVptOWNJaUIyTFdJdGMyTnliMnhzYzNCNU9uTndlVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFl0WW1sdVpEcGpiR0Z6Y3oxY0lsc25iR1ZtZENjc0oyMTVMVzVoZGlkZFhDSStYSEpjYmlBZ0lDQWdJQ0FnUEdJdGJtRjJZbUZ5TFdKeVlXNWtJR2h5WldZOVhDSWpYQ0lnWTJ4aGMzTTlYQ0p0ZEMxc1p5MDFJRzF5TFRCY0lqNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BITndZVzRnWTJ4aGMzTTlYQ0prTFdKc2IyTnJJR1F0YkdjdGJtOXVaVndpSUhZdGJHRnVaejFjSWlkdFpXNTFMbkJ2Y25SbWIyeHBieWRjSWo0OEwzTndZVzQrWEhKY2JpQWdJQ0FnSUNBZ1BDOWlMVzVoZG1KaGNpMWljbUZ1WkQ1Y2NseHVJQ0FnSUNBZ0lDQThZaTF1WVhaaVlYSXRkRzluWjJ4bElIUmhjbWRsZEQxY0ltNWhkbDlqYjJ4c1lYQnpaVndpUGp3dllpMXVZWFppWVhJdGRHOW5aMnhsUGx4eVhHNGdJQ0FnSUNBZ0lEeGlMV052Ykd4aGNITmxJR2x6TFc1aGRpQnBaRDFjSW01aGRsOWpiMnhzWVhCelpWd2lQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThZaTF1WVhZZ2RpMWlhVzVrT25abGNuUnBZMkZzUFZ3aWRISjFaVndpUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHSXRibUYyTFdsMFpXMGdhSEpsWmoxY0lpTm9iMjFsWENJK1BITndZVzRnWTJ4aGMzTTlYQ0pwWTI5dUxXTnBjbU5zWlMxMWNGd2lQand2YzNCaGJqNDhMMkl0Ym1GMkxXbDBaVzArWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFlpMXVZWFl0YVhSbGJTQm9jbVZtUFZ3aUkyRmliM1YwWENJZ2RpMXNZVzVuTFdOb2FXeGtjbVZ1UFZ3aUoyMWxiblV1WVdKdmRYUW5YQ0krUEM5aUxXNWhkaTFwZEdWdFBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR0l0Ym1GMkxXbDBaVzBnYUhKbFpqMWNJaU5sZUhCbGNtbGxibU5sWENJZ2RpMXNZVzVuTFdOb2FXeGtjbVZ1UFZ3aUoyMWxiblV1Wlhod1pYSnBaVzVqWlNkY0lqNDhMMkl0Ym1GMkxXbDBaVzArWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFlpMXVZWFl0YVhSbGJTQm9jbVZtUFZ3aUkyVmtkV05oZEdsdmJsd2lJSFl0YkdGdVp5MWphR2xzWkhKbGJqMWNJaWR0Wlc1MUxtVmtkV05oZEdsdmJpZGNJajQ4TDJJdGJtRjJMV2wwWlcwK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThZaTF1WVhZdGFYUmxiU0JvY21WbVBWd2lJMk52Ym5SaFkzUmNJaUIyTFd4aGJtY3RZMmhwYkdSeVpXNDlYQ0luYldWdWRTNWpiMjUwWVdOMEoxd2lQand2WWkxdVlYWXRhWFJsYlQ1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5aUxXNWhkajVjY2x4dUlDQWdJQ0FnSUNBOEwySXRZMjlzYkdGd2MyVStYSEpjYmlBZ0lDQThMMkl0Ym1GMlltRnlQbHh5WEc0OEwzUmxiWEJzWVhSbFBseHlYRzVjY2x4dVBITmpjbWx3ZEQ1Y2NseHVJQ0FnSUdWNGNHOXlkQ0JrWldaaGRXeDBJSHRjY2x4dUlDQWdJQ0FnSUNCdVlXMWxPaUJjSW0wdGJtRjJhV2RoZEdsdmJsd2lMRnh5WEc0Z0lDQWdJQ0FnSUhCeWIzQnpPaUJiSjJOMWNuSmxiblFuWFZ4eVhHNGdJQ0FnZlZ4eVhHNDhMM05qY21sd2RENWNjbHh1WEhKY2JqeHpkSGxzWlNCc1lXNW5QVndpYzJOemMxd2lJSE5qYjNCbFpENWNjbHh1SUNBZ0lHSnZaSGtnZTF4eVhHNGdJQ0FnSUNBZ0lIQmhaR1JwYm1jdGRHOXdPaUF3TzF4eVhHNGdJQ0FnSUNBZ0lIQmhaR1JwYm1jdGJHVm1kRG9nTWpCeVpXMDdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTG01aGRpMXBkR1Z0SUh0Y2NseHVJQ0FnSUNBZ0lDQW1MbUZqZEdsMlpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklIUnlZVzV6Y0dGeVpXNTBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXVibUYyTFd4cGJtc2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2IzSTZJQ05tWm1abVptWTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzV1WVhZdGJHbHVheUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eU9pQWpPVGs1T1RrNU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBMWFJ5WVc1elptOXliVG9nZFhCd1pYSmpZWE5sTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjI1MExYTnBlbVU2SURFdU5YSmxiVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiand2YzNSNWJHVStJaXdpUEhSbGJYQnNZWFJsUGx4eVhHNGdJQ0FnUEhObFkzUnBiMjRnYVdROVhDSmhZbTkxZEZ3aUlHTnNZWE56UFZ3aVpDMW1iR1Y0WENJK1hISmNiaUFnSUNBZ0lDQWdQR1JwZGlCamJHRnpjejFjSW0xNUxXRjFkRzhnY0MwMVhDSStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTTlYQ0prTFdac1pYZ2dabXhsZUMxamIyeDFiVzRnWm14bGVDMXRaQzF5YjNjZ2JXSXROU0JxZFhOMGFXWjVMV052Ym5SbGJuUXRZbVYwZDJWbGJsd2lQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0ltMTVMV2x1Wm05Y0lqNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGFERWdZMnhoYzNNOVhDSnRlUzFoWW05MWRDMXVZVzFsSUcxaUxUQmNJajVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhOd1lXNGdkaTFzWVc1blBWd2lKMkZpYjNWMExtNWhiV1VuWENJK1BDOXpjR0Z1UGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGMzQmhiaUIyTFd4aGJtYzlYQ0luWVdKdmRYUXVjM1Z5Ym1GdFpTZGNJaUJqYkdGemN6MWNJaTB0YlhrdFkyOXNiM0pjSWo0OEwzTndZVzQrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlvTVQ1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56UFZ3aWMzVmlhR1ZoWkdsdVp5QnRZaTAxSUhWd2NHVnlZMkZ6WlZ3aVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThZU0JqYkdGemN6MWNJbTE1TFdOdmJuUmhZM1JjSWlCb2NtVm1QVndpYldGcGJIUnZPbTVoYldWQVpXMWhhV3d1WTI5dFhDSWdkaTFzWVc1blBWd2lKMkZpYjNWMExtMWhhV3duWENJK1BDOWhQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YzNCaGJqNGd3cmNnUEM5emNHRnVQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YzNCaGJpQjJMV3hoYm1jOVhDSW5ZV0p2ZFhRdWJHOWpZWFJwYjI0blhDSStQQzl6Y0dGdVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjM0JoYmo0Z3dyY2dQQzl6Y0dGdVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThZU0JqYkdGemN6MWNJbTE1TFdOdmJuUmhZM1JjSWlCb2NtVm1QVndpZEdWc09pc3pPQ0FvTURrNUtTQXhORGN0TnpRdE5UVmNJajRyTXpnZ0tEQTVPU2tnTVRRM0xUYzBMVFUxUEM5aFBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56UFZ3aWMzVmlhR1ZoWkdsdVp5QnRZaTAxWENJK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjM0JoYmlCMkxXeGhibWM5WENJbllXSnZkWFF1YVc1bWIzSnRZWFJwYjI0blhDSStQQzl6Y0dGdVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNNOVhDSnpkV0pvWldGa2FXNW5JRzFpTFRWY0lqNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhoSUdoeVpXWTlYQ0pvZEhSd2N6b3ZMM1pyTG1OdmJTOXFkV3hwWVc1aFgyZGNJaUIwWVhKblpYUTlYQ0pmWW14aGJtdGNJaUJqYkdGemN6MWNJbTE1TFd4cGJtdGNJaUIyTFdJdGRHOXZiSFJwY0M1b2IzWmxjbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHbDBiR1U5WENKV2EyOXVkR0ZyZEdWY0lqNDhjM0JoYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjejFjSW1samIyNHRkbXNnY0MweVhDSStQQzl6Y0dGdVBqd3ZZVDVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4aElHaHlaV1k5WENKb2RIUndjem92TDNRdWJXVXZSSEpsWVcxbGNrVnNlVndpSUhSaGNtZGxkRDFjSWw5aWJHRnVhMXdpSUdOc1lYTnpQVndpYlhrdGJHbHVhMXdpSUhZdFlpMTBiMjlzZEdsd0xtaHZkbVZ5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhWFJzWlQxY0lsUmxiR1ZuY21GdFhDSStQSE53WVc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM005WENKcFkyOXVMWFJsYkdWbmNtRnRJSEF0TWx3aVBqd3ZjM0JoYmo0OEwyRStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WVNCb2NtVm1QVndpZG1saVpYSTZMeTlqYUdGMFAyNTFiV0psY2owck16Z3dPVGt3TnpVM05qRTVYQ0lnZEdGeVoyVjBQVndpWDJKc1lXNXJYQ0lnWTJ4aGMzTTlYQ0p0ZVMxc2FXNXJYQ0lnZGkxaUxYUnZiMngwYVhBdWFHOTJaWEpjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnBkR3hsUFZ3aVZtbGlaWEpjSWo0OGMzQmhibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemN6MWNJbWxqYjI0dGRtbGlaWElnY0MweVhDSStQQzl6Y0dGdVBqd3ZZVDVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4aElHaHlaV1k5WENKemEzbHdaVHBuWDJwMWJHbGhibUZmUDJOaGJHeGNJaUIwWVhKblpYUTlYQ0pmWW14aGJtdGNJaUJqYkdGemN6MWNJbTE1TFd4cGJtdGNJaUIyTFdJdGRHOXZiSFJwY0M1b2IzWmxjaUIwYVhSc1pUMWNJbE5yZVhCbFhDSStQSE53WVc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM005WENKcFkyOXVMWE5yZVhCbElIQXRNbHdpUGp3dmMzQmhiajQ4TDJFK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThZU0JvY21WbVBWd2lhSFIwY0hNNkx5OTNkM2N1YVc1emRHRm5jbUZ0TG1OdmJTOXFkV3hwWVc1aFoyRjVkVzR2WENJZ2RHRnlaMlYwUFZ3aVgySnNZVzVyWENJZ1kyeGhjM005WENKdGVTMXNhVzVyWENJZ2RpMWlMWFJ2YjJ4MGFYQXVhRzkyWlhKY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJwZEd4bFBWd2lTVzV6ZEdGbmNtRnRYQ0krUEhOd1lXNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNNOVhDSnBZMjl1TFdsdWMzUmhaM0poYlNCd0xUSmNJajQ4TDNOd1lXNCtQQzloUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0E4TDJScGRqNWNjbHh1SUNBZ0lDQWdJQ0E4TDJScGRqNWNjbHh1SUNBZ0lEd3ZjMlZqZEdsdmJqNWNjbHh1UEM5MFpXMXdiR0YwWlQ1Y2NseHVYSEpjYmp4elkzSnBjSFErWEhKY2JpQWdJQ0JsZUhCdmNuUWdaR1ZtWVhWc2RDQjdYSEpjYmlBZ0lDQWdJQ0FnYm1GdFpUb2dYQ0p0TFhObFkzUnBiMjR0WVdKdmRYUmNJbHh5WEc0Z0lDQWdmVnh5WEc0OEwzTmpjbWx3ZEQ1Y2NseHVYSEpjYmp4emRIbHNaU0JzWVc1blBWd2ljMk56YzF3aUlITmpiM0JsWkQ1Y2NseHVJQ0FnSUM1dGVTMXNhVzVySUh0Y2NseHVJQ0FnSUNBZ0lDQmpiMnh2Y2pvZ0kyWm1abVptWmp0Y2NseHVJQ0FnSUNBZ0lDQnNhVzVsTFdobGFXZG9kRG9nTVM0ek4zSmxiVHM3WEhKY2JpQWdJQ0FnSUNBZ2FHVnBaMmgwT2lBeExqTTNjbVZ0T3p0Y2NseHVJQ0FnSUNBZ0lDQm1iMjUwTFhOcGVtVTZJREV1TXpkeVpXMDdYSEpjYmlBZ0lDQWdJQ0FnZEdWNGRDMWtaV052Y21GMGFXOXVPaUJ1YjI1bE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCemNHRnVJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZbTl5WkdWeU9pQXljSGdnYzI5c2FXUWdJMlptWm1abVpqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1ltOXlaR1Z5TFhKaFpHbDFjem9nTVRBd0pUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0pqcG9iM1psY2lCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmliM0prWlhJdFkyOXNiM0k2SUNNNU9UazVPVGs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyeHZjam9nSXprNU9UazVPVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnSmpwb2IzWmxjaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJsZUhRdFpHVmpiM0poZEdsdmJqb2dibTl1WlR0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmp3dmMzUjViR1UrSWl3aVBIUmxiWEJzWVhSbFBseHlYRzRnSUNBZ1BITmxZM1JwYjI0Z2FXUTlYQ0pqYjI1MFlXTjBYQ0krUEM5elpXTjBhVzl1UGx4eVhHNDhMM1JsYlhCc1lYUmxQbHh5WEc1Y2NseHVQSE5qY21sd2RENWNjbHh1SUNBZ0lHVjRjRzl5ZENCa1pXWmhkV3gwSUh0Y2NseHVJQ0FnSUNBZ0lDQnVZVzFsT2lCY0ltMHRjMlZqZEdsdmJpMWpiMjUwWVdOMFhDSmNjbHh1SUNBZ0lIMWNjbHh1UEM5elkzSnBjSFErWEhKY2JseHlYRzQ4YzNSNWJHVWdjMk52Y0dWa1BseHlYRzVjY2x4dVBDOXpkSGxzWlQ0aUxDSThkR1Z0Y0d4aGRHVStYSEpjYmlBZ0lDQThjMlZqZEdsdmJpQnBaRDFjSW1Wa2RXTmhkR2x2Ymx3aVBqd3ZjMlZqZEdsdmJqNWNjbHh1UEM5MFpXMXdiR0YwWlQ1Y2NseHVYSEpjYmp4elkzSnBjSFErWEhKY2JpQWdJQ0JsZUhCdmNuUWdaR1ZtWVhWc2RDQjdYSEpjYmlBZ0lDQWdJQ0FnYm1GdFpUb2dYQ0p0TFhObFkzUnBiMjR0WldSMVkyRjBhVzl1WENKY2NseHVJQ0FnSUgxY2NseHVQQzl6WTNKcGNIUStYSEpjYmx4eVhHNDhjM1I1YkdVZ2MyTnZjR1ZrUGx4eVhHNWNjbHh1UEM5emRIbHNaVDRpTENJOGRHVnRjR3hoZEdVK1hISmNiaUFnSUNBOGMyVmpkR2x2YmlCcFpEMWNJbVY0Y0dWeWFXVnVZMlZjSWlCamJHRnpjejFjSW1RdFpteGxlQ0J0WWkwMVhDSStYSEpjYmlBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0ltMTVMV0YxZEc4Z2NDMDFYQ0krWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRHhvTWlCamJHRnpjejFjSW0xNUxXRmliM1YwTFc1aGJXVWdiV0l0TlZ3aUlIWXRiR0Z1WnoxY0lpZGxlSEJsY21sbGJtTmxMblJwZEd4bEoxd2lQand2YURJK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNNOVhDSmtMV1pzWlhnZ1pteGxlQzFqYjJ4MWJXNGdabXhsZUMxdFpDMXliM2NnYldJdE5Wd2lQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0luSmxjM1Z0WlMxamIyNTBaVzUwSUcxeUxXRjFkRzljSWo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YURNZ1kyeGhjM005WENKdFlpMHdYQ0lnZGkxc1lXNW5QVndpSjJWNGNHVnlhV1Z1WTJVdWNHSXVjSEp2WmlkY0lqNDhMMmd6UGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM005WENKemRXSm9aV0ZrYVc1bklHMWlMVE5jSWlCMkxXeGhibWM5WENJblpYaHdaWEpwWlc1alpTNXdZaTV1WVcxbEoxd2lQand2WkdsMlBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4d0lHTnNZWE56UFZ3aWMzVmlhR1ZoWkdsdVoxd2lJSFl0YkdGdVp6MWNJaWRsZUhCbGNtbGxibU5sTG5CaUxuUmxlSFFuWENJK1BDOXdQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56UFZ3aWJYa3RaR0YwWlNCMFpYaDBMVzFrTFhKcFoyaDBYQ0krWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSE53WVc0Z2RpMXNZVzVuUFZ3aUoyVjRjR1Z5YVdWdVkyVXVjR0l1ZEdsdFpTZGNJajQ4TDNOd1lXNCtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDJScGRqNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM005WENKa0xXWnNaWGdnWm14bGVDMWpiMngxYlc0Z1pteGxlQzF0WkMxeWIzY2diV0l0TlZ3aVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjejFjSW5KbGMzVnRaUzFqYjI1MFpXNTBJRzF5TFdGMWRHOWNJajVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThhRE1nWTJ4aGMzTTlYQ0p0WWkwd1hDSWdkaTFzWVc1blBWd2lKMlY0Y0dWeWFXVnVZMlV1YVhReU1DNXdjbTltSjF3aVBqd3ZhRE0rWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjejFjSW5OMVltaGxZV1JwYm1jZ2JXSXRNMXdpSUhZdGJHRnVaejFjSWlkbGVIQmxjbWxsYm1ObExtbDBNakF1Ym1GdFpTZGNJajQ4TDJScGRqNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNDQmpiR0Z6Y3oxY0luTjFZbWhsWVdScGJtZGNJaUIyTFd4aGJtYzlYQ0luWlhod1pYSnBaVzVqWlM1cGRESXdMblJsZUhRblhDSStQQzl3UGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelBWd2liWGt0WkdGMFpTQjBaWGgwTFcxa0xYSnBaMmgwWENJK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhOd1lXNGdkaTFzWVc1blBWd2lKMlY0Y0dWeWFXVnVZMlV1YVhReU1DNTBhVzFsSjF3aVBqd3ZjM0JoYmo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0E4TDJScGRqNWNjbHh1SUNBZ0lDQWdJQ0E4TDJScGRqNWNjbHh1SUNBZ0lEd3ZjMlZqZEdsdmJqNWNjbHh1UEM5MFpXMXdiR0YwWlQ1Y2NseHVYSEpjYmp4elkzSnBjSFErWEhKY2JpQWdJQ0JsZUhCdmNuUWdaR1ZtWVhWc2RDQjdYSEpjYmlBZ0lDQWdJQ0FnYm1GdFpUb2dYQ0p0TFhObFkzUnBiMjR0Wlhod1pYSnBaVzVqWlZ3aVhISmNiaUFnSUNCOVhISmNiand2YzJOeWFYQjBQbHh5WEc1Y2NseHVQSE4wZVd4bElHeGhibWM5WENKelkzTnpYQ0lnYzJOdmNHVmtQbHh5WEc0Z0lDQWdMbTE1TFdSaGRHVWdlMXh5WEc0Z0lDQWdJQ0FnSUcxcGJpMTNhV1IwYURvZ01UaHlaVzA3WEhKY2JpQWdJQ0FnSUNBZ1ptOXVkQzEzWldsbmFIUTZJRFV3TUR0Y2NseHVJQ0FnSUNBZ0lDQm1iMjUwTFhOcGVtVTZJREV1TW5KbGJUdGNjbHh1SUNBZ0lDQWdJQ0JtYjI1MExXWmhiV2xzZVRvZ1FtVmlZWE03WEhKY2JpQWdJQ0I5WEhKY2Jqd3ZjM1I1YkdVK0lpd2lQSFJsYlhCc1lYUmxQbHh5WEc0Z0lDQWdQSE5sWTNScGIyNGdhV1E5WENKb2IyMWxYQ0krUEM5elpXTjBhVzl1UGx4eVhHNDhMM1JsYlhCc1lYUmxQbHh5WEc1Y2NseHVQSE5qY21sd2RENWNjbHh1SUNBZ0lHVjRjRzl5ZENCa1pXWmhkV3gwSUh0Y2NseHVJQ0FnSUNBZ0lDQnVZVzFsT2lCY0ltMHRjMlZqZEdsdmJpMW9iMjFsWENKY2NseHVJQ0FnSUgxY2NseHVQQzl6WTNKcGNIUStYSEpjYmx4eVhHNDhjM1I1YkdVZ2JHRnVaejFjSW5OamMzTmNJaUJ6WTI5d1pXUStYSEpjYmx4eVhHNDhMM04wZVd4bFBpSmRmUT09In0=
